OBJECT Page 50667 Web Service Ticket
{
  OBJECT-PROPERTIES
  {
    Date=08/16/18;
    Time=[ 6:11:29 PM];
    Modified=Yes;
    Version List=NAVOC1.00.02;
  }
  PROPERTIES
  {
    DeleteAllowed=No;
    SourceTable=Table50562;
    DelayedInsert=Yes;
    PopulateAllFields=Yes;
    PageType=Card;
    OnAfterGetRecord=BEGIN
                       DurationTxt := FORMAT("Resolved Duration");
                       IF "No." <> '' THEN
                         WebLink := GETURL(CLIENTTYPE::Web,COMPANYNAME,OBJECTTYPE::Page,PAGE::"Ticket Card",Rec,TRUE);
                       TempCreatedByUserID := "Created By User ID";
                       TempUserID := "Handler User ID";
                     END;

    OnInsertRecord=VAR
                     Ticket@1001 : Record 50562;
                     Error001@1002 : TextConst 'ENU=Foreign type ''%1'' with foreign ID ''%2'' already exist. Process has been terminated.';
                   BEGIN

                     "Created By User ID" := TempCreatedByUserID;
                     IF UPPERCASE(TempCreatedByUserID) = 'NOEMIE.NUQUI' THEN
                       "Created By User ID" := 'NOEMI.NUQUI';

                     IF UPPERCASE(TempCreatedByUserID) = 'ROGER.MARTUSALEM' THEN
                       "Created By User ID" := 'ROGER.MATUSALEM';

                     TESTFIELD("Created By User ID");
                     TESTFIELD(Type);
                     TESTFIELD(Description);

                     IF AdditionalInfo <> '' THEN BEGIN
                       "Additional Information".CREATEOUTSTREAM(OutStr);
                       OutStr.WRITE(AdditionalInfo);
                     END;

                     IF ForeignRecordLink <> '' THEN BEGIN
                       "Foreign Record Link".CREATEOUTSTREAM(OutStr);
                       OutStr.WRITE(ForeignRecordLink);
                     END;

                     IF DateTimeReleased = 0DT THEN
                       ERROR(Err01);

                     IF ("Foreign Record ID" <> '') AND ("Foreign Record Type" <> 0) THEN BEGIN
                       //Check if existing
                       Ticket.SETRANGE("Foreign Record ID", "Foreign Record ID");
                       Ticket.SETRANGE("Foreign Record Type", "Foreign Record Type");
                       IF Ticket.FINDFIRST THEN  BEGIN
                         ERROR(Error001, Ticket."Foreign Record Type", Ticket."Foreign Record ID");
                       END ;
                     END;

                     "Date Created" := DT2DATE(DateTimeReleased);
                     "Time Created" := DT2TIME(DateTimeReleased);

                     "Date Released" := DT2DATE(DateTimeReleased);
                     "Time Released" := DT2TIME(DateTimeReleased);

                     Release(Rec);

                     SetTicketCommitmentdates;
                   END;

    OnModifyRecord=BEGIN
                     IF TempUserID = '' THEN
                       TESTFIELD("Handler User ID");

                     "Handler User ID" := TempUserID;
                     CASE TRUE OF
                       (ForeignRecordStatus = ForeignRecordStatus::Start) AND (Status <> Status::"In-Progress"):
                         BEGIN
                           IF StartDateTime = 0DT THEN
                             ERROR(Err02);

                           "Response Date" := DT2DATE(StartDateTime);
                           "Response Time" := DT2TIME(StartDateTime);

                           "Starting Date" := DT2DATE(StartDateTime);
                           "Starting Time" := DT2TIME(StartDateTime);
                           VALIDATE("Starting Date");

                           SetTicketStatus(Status::"In-Progress",TRUE);
                         END;
                       (ForeignRecordStatus = ForeignRecordStatus::Close) AND (Status <> Status::Closed):
                         BEGIN
                           "Response Date" := DT2DATE(CloseDateTime);
                           "Response Time" := DT2TIME(CloseDateTime);

                           "Starting Date" := DT2DATE(CloseDateTime);
                           "Starting Time" := DT2TIME(CloseDateTime);
                           VALIDATE("Starting Date");
                           SetTicketCloseDates;
                           SetTicketStatus(Status::Closed,TRUE);
                         END;
                       (ForeignRecordStatus = ForeignRecordStatus::Resolve) AND (Status <> Status::Resolved):
                         BEGIN
                           TESTFIELD("Handler User ID");
                           TESTFIELD("Starting Date");
                           TESTFIELD("Starting Time");
                           SetTicketCloseDates;
                           SetTicketStatus(Status::Resolved,TRUE);
                         END;
                     END;
                   END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                GroupType=Group }

    { 25  ;2   ;Field     ;
                Name=Created By User ID;
                SourceExpr=TempCreatedByUserID }

    { 4   ;2   ;Field     ;
                SourceExpr=Type }

    { 5   ;2   ;Field     ;
                SourceExpr=Description }

    { 7   ;2   ;Field     ;
                Name=Additional Info;
                SourceExpr=AdditionalInfo }

    { 3   ;2   ;Field     ;
                Name=Automatic Release Record;
                SourceExpr=AutomaticReleaseRecord }

    { 19  ;2   ;Field     ;
                Name=DateTime Released;
                SourceExpr=DateTimeReleased }

    { 17  ;2   ;Group     ;
                GroupType=Group }

    { 8   ;3   ;Field     ;
                SourceExpr="Foreign Record ID" }

    { 9   ;3   ;Field     ;
                Name=Foreign Record Link;
                SourceExpr=ForeignRecordLink }

    { 10  ;3   ;Field     ;
                SourceExpr="Foreign Record Type" }

    { 21  ;2   ;Group     ;
                GroupType=Group }

    { 11  ;3   ;Field     ;
                Name=Handler User ID;
                SourceExpr=TempUserID }

    { 22  ;3   ;Field     ;
                Name=Start DateTime;
                SourceExpr=StartDateTime }

    { 24  ;3   ;Field     ;
                Name=Finish DateTime;
                SourceExpr=FinishDateTime }

    { 23  ;3   ;Field     ;
                Name=Close DateTime;
                SourceExpr=CloseDateTime }

    { 15  ;2   ;Field     ;
                SourceExpr="Date Resolved";
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                SourceExpr="Time Resolved";
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                Name=Resolved Duration;
                SourceExpr=DurationTxt;
                Editable=FALSE }

    { 14  ;2   ;Field     ;
                SourceExpr="Reason for Closing/Resolution" }

    { 13  ;2   ;Field     ;
                Name=Foreign Record Status;
                SourceExpr=ForeignRecordStatus }

    { 12  ;2   ;Field     ;
                SourceExpr=Status }

    { 20  ;2   ;Field     ;
                Name=Web Link;
                SourceExpr=WebLink }

  }
  CODE
  {
    VAR
      AdditionalInfo@1001 : Text;
      ForeignRecordLink@1003 : Text;
      DurationTxt@1005 : Text;
      WebLink@1007 : Text;
      TempUserID@1012 : Code[50];
      TempCreatedByUserID@1014 : Code[50];
      OutStr@1002 : OutStream;
      AutomaticReleaseRecord@1000 : Boolean;
      ForeignRecordStatus@1004 : ',Release,Start,Close,Resolve';
      DateTimeReleased@1006 : DateTime;
      StartDateTime@1008 : DateTime;
      FinishDateTime@1010 : DateTime;
      CloseDateTime@1009 : DateTime;
      Err01@1011 : TextConst 'ENU=DateTime Released must have a value.';
      Err02@1013 : TextConst 'ENU=Start DateTime must have a value.';

    LOCAL PROCEDURE SetTicketCommitmentdates@9();
    BEGIN
      IF "Handler User ID" <> '' THEN BEGIN

      END;
    END;

    LOCAL PROCEDURE SetTicketCloseDates@2();
    BEGIN
      IF CloseDateTime <> 0DT THEN BEGIN
        "Date Resolved" := DT2DATE(CloseDateTime);
        "Time Resolved" := DT2TIME(CloseDateTime);
        VALIDATE("Date Resolved");
      END;
    END;

    BEGIN
    END.
  }
}

