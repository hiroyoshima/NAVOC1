OBJECT Page 50026 Jobs Overview
{
  OBJECT-PROPERTIES
  {
    Date=08/10/18;
    Time=[ 4:39:55 PM];
    Modified=Yes;
    Version List=NAVW17.00,OC02;
  }
  PROPERTIES
  {
    CaptionML=ENU=Jobs Overview;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table1001;
    PageType=List;
    SourceTableTemporary=Yes;
    OnOpenPage=BEGIN
                 ExpandAll
               END;

    OnAfterGetRecord=BEGIN
                       NameIndent := 0;
                       IF IsExpanded(Rec) THEN
                         ActualExpansionStatus := 1
                       ELSE
                         IF HasChildren(Rec) THEN
                           ActualExpansionStatus := 0
                         ELSE
                           ActualExpansionStatus := 2;
                       FormatLine;

                       SETFILTER("Job Task Type",'<>%1',"Job Task Type"::"End-Total");
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                IndentationColumnName=NameIndent;
                ShowAsTree=Yes;
                GroupType=Repeater }

    { 7   ;2   ;Field     ;
                CaptionML=ENU=Job No.;
                SourceExpr="Created By";
                Style=Strong;
                StyleExpr=Emphasize }

    { 18  ;2   ;Field     ;
                SourceExpr="Job No.";
                Visible=False }

    { 2   ;2   ;Field     ;
                SourceExpr="Job Task No.";
                Visible=False;
                Editable=False;
                Style=Strong;
                StyleExpr=Emphasize }

    { 3   ;2   ;Field     ;
                SourceExpr=Description;
                Editable=False;
                Style=Strong;
                StyleExpr=Emphasize }

    { 4   ;2   ;Field     ;
                SourceExpr="Job Task Type";
                Editable=False }

    { 9   ;2   ;Field     ;
                SourceExpr="Schedule (Total Cost)";
                StyleExpr=FontStyle }

    { 10  ;2   ;Field     ;
                SourceExpr="Schedule (Total Price)";
                StyleExpr=FontStyle }

    { 5   ;2   ;Field     ;
                SourceExpr="Usage (Total Cost)";
                StyleExpr=FontStyle }

    { 6   ;2   ;Field     ;
                SourceExpr="Usage (Total Price)";
                StyleExpr=FontStyle }

    { 8   ;2   ;Field     ;
                SourceExpr="Contract (Total Cost)";
                StyleExpr=FontStyle }

    { 11  ;2   ;Field     ;
                SourceExpr="Contract (Total Price)";
                StyleExpr=FontStyle }

    { 12  ;2   ;Field     ;
                SourceExpr="Contract (Invoiced Cost)";
                StyleExpr=FontStyle }

    { 13  ;2   ;Field     ;
                SourceExpr="Contract (Invoiced Price)";
                StyleExpr=FontStyle }

    { 14  ;2   ;Field     ;
                SourceExpr="Remaining (Total Cost)";
                StyleExpr=FontStyle }

    { 15  ;2   ;Field     ;
                SourceExpr="Remaining (Total Price)";
                StyleExpr=FontStyle }

    { 16  ;2   ;Field     ;
                SourceExpr=Totaling;
                Visible=False }

  }
  CODE
  {
    VAR
      ActualExpansionStatus@1000 : Integer;
      Emphasize@19018670 : Boolean INDATASET;
      FontStyle@1004 : Text INDATASET;
      NameIndent@19079073 : Integer INDATASET;
      JobRec@1001 : Record 167;
      JobNo@1002 : Code[20];

    LOCAL PROCEDURE ExpandAll@12();
    BEGIN
      CopyJobTaskToTemp(FALSE);
    END;

    LOCAL PROCEDURE CopyJobTaskToTemp@3(OnlyRoot@1000 : Boolean);
    VAR
      JobTaskLines@1001 : Record 1001;
      JobRec@1002 : Record 167;
      JobNo@1003 : Code[20];
      TempJobTaskLines@1004 : Record 1001;
      TempCode@1005 : Code[10];
    BEGIN
      //Need to Filter by Job No. and Job Task No.
      JobNo := GETFILTER("Job No.");

      RESET;
      DELETEALL;
      SETCURRENTKEY("Job No.");

      IF OnlyRoot THEN
        JobTaskLines.SETRANGE(Indentation,0);
      //JobTaskLines.SETFILTER("Job Task Type",'<>%1',JobTaskLines."Job Task Type"::"End-Total");

      IF JobNo <> '' THEN
        JobTaskLines.SETFILTER("Job No.", JobNo);

      IF JobTaskLines.FINDSET THEN
        REPEAT
          Rec := JobTaskLines;
          IF JobTaskLines."Job Task Type" = JobTaskLines."Job Task Type"::"Begin-Total" THEN BEGIN
            //Totaling := GetEndTotal(JobTaskLines);
          END;

          IF JobTaskLines.Indentation = 0 THEN BEGIN
            "Created By" := "Job No.";
            IF JobRec.GET(JobNo) THEN
              "Created By" := COPYSTR(JobRec."No." + ' - ' + JobRec.Description + ' ' + JobRec."Description 2",1,50);
            END
          ELSE
            "Created By" := JobTaskLines."Job Task No.";
          INSERT;
          IF JobTaskLines."Job Task Type" = JobTaskLines."Job Task Type"::"End-Total" THEN BEGIN
            IF Rec.GET(JobTaskLines."Job No.",(FORMAT(COPYSTR(JobTaskLines.Totaling, 1,STRPOS(JobTaskLines.Totaling, '..')-1)))) THEN BEGIN
              Totaling := JobTaskLines.Totaling;
              MODIFY(TRUE);
            END;
           END;
        UNTIL JobTaskLines.NEXT = 0;

      IF FINDFIRST THEN;
    END;

    LOCAL PROCEDURE GetEndTotal@7(VAR JobTask@1000 : Record 1001) : Text[250];
    VAR
      JobTask2@1001 : Record 1001;
    BEGIN
      JobTask2.SETFILTER("Job No.",'>%1',JobTask."Job Task No.");
      JobTask2.SETRANGE(Indentation,JobTask.Indentation);
      JobTask2.SETRANGE("Job Task Type",JobTask2."Job Task Type"::"End-Total");
      IF JobTask2.FINDFIRST THEN
        EXIT(JobTask2.Totaling);

      EXIT('');
    END;

    LOCAL PROCEDURE HasChildren@19(ActualJobTask@1000 : Record 1001) : Boolean;
    VAR
      JobTask2@1001 : Record 1001;
    BEGIN
      JobTask2 := ActualJobTask;
      IF JobTask2.NEXT = 0 THEN
        EXIT(FALSE);

      EXIT(JobTask2.Indentation > ActualJobTask.Indentation);
    END;

    LOCAL PROCEDURE IsExpanded@20(ActualJobTask@1000 : Record 1001) : Boolean;
    VAR
      xJobTask@1001 : Record 1001;
      Found@1002 : Boolean;
    BEGIN
      xJobTask := Rec;
      Rec := ActualJobTask;
      Found := (NEXT <> 0);
      IF Found THEN
        Found := (Indentation > ActualJobTask.Indentation);
      Rec := xJobTask;
      EXIT(Found);
    END;

    LOCAL PROCEDURE FormatLine@19039177();
    BEGIN
      NameIndent := Indentation;
      Emphasize := "Job Task Type" <> "Job Task Type"::Posting;
      IF Indentation > 0 THEN
        FontStyle := 'Strong';//'Subordinate';
      IF "Job Task Type" = "Job Task Type"::Posting THEN
        FontStyle :='';
      IF Indentation = 0 THEN
        FontStyle := 'Strong';
    END;

    BEGIN
    END.
  }
}

