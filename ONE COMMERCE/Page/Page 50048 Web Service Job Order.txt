OBJECT Page 50048 Web Service Job Order
{
  OBJECT-PROPERTIES
  {
    Date=06/27/18;
    Time=[ 5:37:07 AM];
    Modified=Yes;
    Version List=NAVOC1.00.02.48;
  }
  PROPERTIES
  {
    DeleteAllowed=No;
    SourceTable=Table50012;
    DelayedInsert=Yes;
    PageType=Document;
    OnInsertRecord=BEGIN
                     IF EmailAddress = '' THEN
                       ERROR(Err004);

                     ValidateDate;

                     UserSetup.SETRANGE("E-Mail", EmailAddress);
                     IF NOT UserSetup.FINDFIRST THEN
                       ERROR(Err003);

                     VALIDATE("Job Type", "Job Type"::Others);
                     VALIDATE(Meeting, TRUE);
                     VALIDATE("Employee No.", UserSetup."Employee No.");
                     "Document Date" := DateRequested;
                     "Date Requested" := DateRequested;
                     VALIDATE("Created By User ID", UserSetup."User ID");
                     VALIDATE("Project Name", ProjectName);
                     "Responsibility Center" := UserSetup."JO Ctr. Filter";

                     CASE TypeOfRequest OF
                       FORMAT(RequestTypeOption::"Vehicle Request"):
                         VALIDATE("Vehicle Request", TRUE);
                       FORMAT(RequestTypeOption::"Public Transportation Request"):
                         VALIDATE("Public Transportation Request", TRUE);
                       FORMAT(RequestTypeOption::"Airplane Ticket Request"):
                         VALIDATE("Airplane Ticket Request", TRUE);
                       ELSE
                         VALIDATE("Vehicle Request", TRUE);
                     END;
                   END;

    OnModifyRecord=VAR
                     JobOrder@1001 : Record 50012;
                     JobOrderLine@1000 : Record 50551;
                     RequestType@1005 : Integer;
                   BEGIN

                     ValidateDate;

                     DateFrom := Subtract8hrs(DateFrom);
                     DateTo := Subtract8hrs(DateTo);

                     CASE TypeOfRequest OF
                       FORMAT(RequestTypeOption::"Vehicle Request"):
                         RequestType := JobOrderLine."Line Type"::"Car Request";
                       FORMAT(RequestTypeOption::"Public Transportation Request"):
                         RequestType := JobOrderLine."Line Type"::"Public Transpo Request";
                       FORMAT(RequestTypeOption::"Airplane Ticket Request"):
                         RequestType := JobOrderLine."Line Type"::"Airplane Ticket Request";
                       ELSE
                         RequestType := JobOrderLine."Line Type"::"Car Request";
                     END;

                     JobOrderLine.INIT;
                     JobOrderLine."Line No." := GetLineNo("No.", RequestType);
                     JobOrderLine.VALIDATE("Line Type", RequestType);
                     JobOrderLine.VALIDATE("Job Order No.", "No.");
                     JobOrderLine.VALIDATE("Date Needed", DateRequested);

                     CASE RequestType OF
                       JobOrderLine."Line Type"::"Car Request":
                         BEGIN
                           JobOrderLine."Site Name" := 'N/A';
                           JobOrderLine.VALIDATE(Destination, Destination);
                           JobOrderLine.VALIDATE("Time of Departure", Departure);
                           JobOrderLine.VALIDATE("Time of Arrival", Arrival);
                         END;
                       JobOrderLine."Line Type"::"Public Transpo Request":
                         BEGIN
                           JobOrderLine.VALIDATE("Destination From", PointOfOrigin);
                           JobOrderLine.VALIDATE("Destination To", Destination);
                           JobOrderLine."Name of Passengers" := NameOfPassengers;
                         END;
                       JobOrderLine."Line Type"::"Airplane Ticket Request":
                         BEGIN
                           IF Employee.GET("Employee No.") THEN BEGIN
                             JobOrderLine.VALIDATE("First Name", Employee."First Name");
                             JobOrderLine.VALIDATE("Middle Name", Employee."Middle Name");
                             JobOrderLine.VALIDATE("Last Name", Employee."Last Name");
                             JobOrderLine.VALIDATE(Birthdate, Employee."Birth Date");
                             JobOrderLine.VALIDATE(Destination, Destination);
                           END ELSE
                             ERROR(Err005);
                         END;
                     END;

                     JobOrderLine."Date From" := DateFrom;
                     JobOrderLine."Date To" := DateTo;

                     IF JobOrderLine.INSERT(TRUE) THEN
                       IF JobOrderLine."Line Type" = JobOrderLine."Line Type"::"Airplane Ticket Request" THEN BEGIN
                         JobOrderLine.VALIDATE("Date Needed", DateRequested);
                         JobOrderLine."Date From" := DateFrom;
                         JobOrderLine."Date To" := DateTo;
                         JobOrderLine.MODIFY(TRUE);
                       END;
                   END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General;
                GroupType=Group }

    { 48  ;2   ;Field     ;
                SourceExpr="No.";
                Style=Strong;
                StyleExpr=TRUE }

    { 91  ;2   ;Field     ;
                SourceExpr="Job Type" }

    { 64  ;2   ;Field     ;
                SourceExpr="Employee No.";
                RowSpan=4 }

    { 9   ;2   ;Field     ;
                SourceExpr="Employee Name";
                Importance=Additional;
                RowSpan=4 }

    { 10  ;2   ;Field     ;
                SourceExpr="Department Code";
                RowSpan=4 }

    { 55  ;2   ;Field     ;
                SourceExpr=Department;
                Importance=Additional }

    { 81  ;2   ;Field     ;
                SourceExpr=Remarks }

    { 274 ;2   ;Field      }

    { 16  ;2   ;Field     ;
                SourceExpr="Customer No.";
                Importance=Additional;
                ShowMandatory=True }

    { 18  ;2   ;Field     ;
                SourceExpr="Customer Name";
                Importance=Additional;
                ShowMandatory=True }

    { 133 ;2   ;Field     ;
                SourceExpr=Status;
                Editable=FALSE }

    { 231 ;1   ;Group     ;
                CaptionML=ENU=General Request;
                Visible=("Job Type" = "Job Type"::"Others");
                GroupType=Group }

    { 255 ;2   ;Field     ;
                CaptionML=ENU=Meeting;
                SourceExpr=Meeting }

    { 4   ;1   ;Group     ;
                CaptionML=ENU=Microsoft Forms Validation;
                Visible=FALSE;
                GroupType=Group }

    { 28  ;2   ;Field     ;
                Name=Email Address;
                CaptionML=ENU=Email Address;
                SourceExpr=EmailAddress }

    { 5   ;2   ;Field     ;
                Name=Type of Request;
                CaptionML=ENU=Type of Request;
                SourceExpr=TypeOfRequest }

    { 6   ;2   ;Field     ;
                Name=Point of Origin;
                CaptionML=ENU=Point of Origin;
                SourceExpr=PointOfOrigin }

    { 15  ;2   ;Field     ;
                Name=Time of Departure;
                CaptionML=ENU=Time Of Departure;
                SourceExpr=TimeOfDeparture }

    { 14  ;2   ;Field     ;
                Name=Destination;
                CaptionML=ENU=Destination;
                SourceExpr=Destination }

    { 17  ;2   ;Field     ;
                Name=Time of Arrival;
                CaptionML=ENU=Time Of Arrival;
                SourceExpr=TimeOfArrival }

    { 22  ;2   ;Field     ;
                Name=Name of Passengers;
                CaptionML=ENU=Name of Passengers;
                SourceExpr=NameOfPassengers }

    { 3   ;2   ;Field     ;
                Name=Project Name;
                CaptionML=ENU=Project Name;
                SourceExpr=ProjectName }

    { 7   ;2   ;Field     ;
                Name=Date Requested;
                CaptionML=ENU=Date Requested;
                SourceExpr=DateRequested }

  }
  CODE
  {
    VAR
      UserSetup@1004 : Record 91;
      Employee@1020 : Record 5200;
      ApprovalsMgmt@1016 : Codeunit 1535;
      BlankTxt@1013 : ARRAY [1000000] OF Text;
      DateNeeded@1014 : Date;
      TypeOfRequest@1000 : Text;
      PointOfOrigin@1015 : Text[50];
      Destination@1017 : Text[50];
      NameOfPassengers@1019 : Text[100];
      TimeOfDeparture@1001 : Text;
      TimeOfArrival@1002 : Text;
      Err001@1007 : TextConst 'ENU=%1 must not later than %2.';
      Err002@1006 : TextConst 'ENU=Time of arrival must not later than time of departure.';
      Err003@1005 : TextConst 'ENU=Employee does not exists!';
      EmailAddress@1003 : Text;
      RequestTypeOption@1008 : 'Vehicle Request,Public Transportation Request,Airplane Ticket Request';
      DateFrom@1010 : DateTime;
      DateTo@1009 : DateTime;
      Departure@1012 : Time;
      Arrival@1011 : Time;
      ProjectName@1018 : Text[250];
      Err004@1021 : TextConst 'ENU=UPN must have a value.';
      Err005@1022 : TextConst 'ENU=Employee not found.';
      DateRequested@1023 : Date;

    LOCAL PROCEDURE Subtract8hrs@68(VAR DateTime@1000 : DateTime) : DateTime;
    VAR
      NewDateTime@1001 : DateTime;
      NewDate@1002 : Date;
      NewTime@1003 : Time;
    BEGIN
      IF  DateTime = 0DT THEN
        EXIT(NewDateTime);

      NewDate := DT2DATE(DateTime);
      NewTime := DT2TIME(DateTime);

      NewTime := NewTime - 8 * 60 * 60 * 1000;

      IF  NewTime > DT2TIME(DateTime) THEN BEGIN
        NewTime := NewTime + 24 * 60 * 60 * 1000;
        NewDate := CALCDATE('<-1D>', NewDate);
      END;

      NewDateTime := CREATEDATETIME(NewDate, NewTime);
      EXIT(NewDateTime);
    END;

    LOCAL PROCEDURE ValidateDate@179();
    BEGIN
      EVALUATE(Departure, TimeOfDeparture);
      EVALUATE(Arrival, TimeOfArrival);
      DateFrom := CREATEDATETIME(DateRequested, Departure);
      DateTo := CREATEDATETIME(DateRequested, Arrival);

      IF DateTo < DateFrom THEN
        ERROR(Err002);
    END;

    LOCAL PROCEDURE GetLineNo@20(JobOrderNo@1000 : Code[20];LineType@1001 : 'Car Request,Public Transpo Request,Airplane Ticket Request') : Integer;
    VAR
      JobOrderLine@1003 : Record 50551;
      LineNo@1002 : Integer;
    BEGIN
      LineNo := 10000;
      JobOrderLine.RESET;
      JobOrderLine.SETRANGE("Job Order No.", JobOrderNo);
      JobOrderLine.SETRANGE("Line Type", LineType);
      IF JobOrderLine.FINDLAST THEN
        LineNo += JobOrderLine."Line No.";
      EXIT(LineNo);
    END;

    BEGIN
    {
      !! Documentation Page 50048 Web Service Job Order

      5:15 PM Wednesday, August  21, 2024
        Add global variable ProjectName.

      1:18 PM Wednesday, August 28, 2024
        Add script modify Job order Line, for Airplane Ticket Request.
        Add function GetLineNo.

      6:15 PM Friday, August 30, 2024
        Set Date Requested as global variable.
        Remove validate document date and date requested.

      3:40 PM Wednesday, September 4, 2024
        Insert value to responsibility center
    }
    END.
  }
}

