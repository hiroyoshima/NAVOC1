OBJECT Page 50063 Job Order Meeting
{
  OBJECT-PROPERTIES
  {
    Date=06/27/18;
    Time=[ 4:49:07 AM];
    Modified=Yes;
    Version List=NAVOC1.00.02.48;
  }
  PROPERTIES
  {
    CaptionML=ENU=Meeting;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table50012;
    DelayedInsert=Yes;
    PopulateAllFields=Yes;
    PageType=Card;
    OnNewRecord=VAR
                  TimeSelector@1001 : Record 50902;
                BEGIN
                  InitPageValues;
                  "Document Date" := TODAY;

                  TimeSelector.SETFILTER(Time, '>%1', TIME);
                  IF TimeSelector.FINDFIRST THEN
                    "Time of Departure" := TimeSelector.Time
                  ELSE
                    "Time of Departure" := TIME;
                  "Time of Arrival" := TimeSelector.Time + 1800000;

                  VALIDATE(Meeting, TRUE);
                  "Job Type" := "Job Type"::Others;
                END;

    OnInsertRecord=VAR
                     Txt01@1001 : TextConst 'ENU=%1 must have a value. Current value is blank.';
                   BEGIN
                     IF Remarks = '' THEN
                       ERROR(Txt01, FIELDNAME(Activity));
                     TESTFIELD("Point of Origin");
                     TESTFIELD("Time of Departure");
                     TESTFIELD(Destination);
                     TESTFIELD("Time of Arrival");
                   END;

    OnQueryClosePage=VAR
                       JobOrderLine@1000 : Record 50551;
                     BEGIN
                       IF (CloseAction = ACTION::OK) AND ("No." <> '') THEN BEGIN

                         JobOrderLine.INIT;
                         JobOrderLine.VALIDATE("Job Order No.", "No.");
                         JobOrderLine.VALIDATE("Line Type", JobOrderLine."Line Type"::"Car Request");
                         JobOrderLine."Line No." := GetLineNo("No.", JobOrderLine."Line Type"::"Car Request");
                         JobOrderLine.VALIDATE("Date Needed", "Date Requested");
                         JobOrderLine."Site Name" := 'N/A';
                         JobOrderLine.VALIDATE(Destination, Destination);
                         JobOrderLine.VALIDATE("Time of Departure", "Time of Departure");
                         JobOrderLine.VALIDATE("Time of Arrival", "Time of Arrival");

                         JobOrderLine.VALIDATE("Date From", CREATEDATETIME("Document Date", "Time of Departure"));
                         JobOrderLine.VALIDATE("Date To", CREATEDATETIME("Document Date", "Time of Arrival"));
                         JobOrderLine.INSERT(TRUE);

                         IF "Name of Passengers" <> '' THEN BEGIN

                           JobOrderLine.INIT;
                           JobOrderLine.VALIDATE("Job Order No.", "No.");
                           JobOrderLine.VALIDATE("Line Type", JobOrderLine."Line Type"::"Public Transpo Request");
                           JobOrderLine."Line No." := GetLineNo("No.", JobOrderLine."Line Type"::"Public Transpo Request");
                           JobOrderLine.VALIDATE("Date Needed", "Date Requested");
                           JobOrderLine."Site Name" := 'N/A';
                           JobOrderLine.VALIDATE("Destination From", "Point of Origin");
                           JobOrderLine.VALIDATE("Destination To", Destination);
                           JobOrderLine.VALIDATE("Date From", CREATEDATETIME("Document Date", "Time of Departure"));
                           JobOrderLine.VALIDATE("Date To", CREATEDATETIME("Document Date", "Time of Arrival"));
                           JobOrderLine.VALIDATE("Name of Passengers", "Name of Passengers");
                           JobOrderLine.INSERT(TRUE);
                         END;
                         IF ApprovalsMgmt.CheckJOApprovalsWorkflowEnabled(Rec) THEN
                           ApprovalsMgmt.OnSendJOForApproval(Rec);

                       END;
                     END;

    OnAfterGetCurrRecord=VAR
                           JobOrderLine@1000 : Record 50551;
                         BEGIN
                         END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                CaptionML=ENU=General;
                GroupType=Group }

    { 8   ;2   ;Group     ;
                GroupType=Group }

    { 3   ;3   ;Field     ;
                SourceExpr="Document Date";
                ShowMandatory=TRUE }

    { 10  ;3   ;Field     ;
                SourceExpr="Customer Name";
                TableRelation=Customer.Name WHERE (Customer Type=CONST(Customer));
                OnValidate=VAR
                             Customer@1000 : Record 18;
                           BEGIN
                             IF "Customer Name" = '' THEN BEGIN
                               CLEAR("Customer No.");
                               CLEAR(Destination);
                               EXIT;
                             END;
                             IF "Customer Name" <> xRec."Customer Name" THEN BEGIN
                               Customer.SETRANGE(Name, "Customer Name");
                               IF Customer.FINDFIRST THEN BEGIN
                                 "Customer No." := Customer."No.";
                                 Destination := Customer.Address;
                               END;
                             END;

                             "Customer Name" := UPPERCASE("Customer Name");
                           END;
                            }

    { 19  ;3   ;Field     ;
                CaptionML=ENU=Activity;
                SourceExpr=Remarks }

    { 4   ;3   ;Field     ;
                SourceExpr="Point of Origin";
                ShowMandatory=TRUE }

    { 9   ;3   ;Field     ;
                SourceExpr="Time of Departure";
                ShowMandatory=TRUE }

    { 6   ;3   ;Field     ;
                SourceExpr=Destination;
                ShowMandatory=TRUE }

    { 7   ;3   ;Field     ;
                SourceExpr="Time of Arrival";
                TableRelation="Time Selector";
                ShowMandatory=TRUE }

    { 5   ;3   ;Field     ;
                SourceExpr="Name of Passengers" }

  }
  CODE
  {
    VAR
      ApprovalsMgmt@1006 : Codeunit 1535;
      Err002@1009 : TextConst 'ENU=Time of arrival must not later than time of departure.';

    LOCAL PROCEDURE GetLineNo@20(JobOrderNo@1000 : Code[20];LineType@1001 : 'Car Request,Public Transpo Request,Airplane Ticket Request') : Integer;
    VAR
      JobOrderLine@1003 : Record 50551;
      LineNo@1002 : Integer;
    BEGIN
      LineNo := 10000;
      JobOrderLine.RESET;
      JobOrderLine.SETRANGE("Job Order No.", JobOrderNo);
      JobOrderLine.SETRANGE("Line Type", LineType);
      IF JobOrderLine.FINDLAST THEN
        LineNo += JobOrderLine."Line No.";
      EXIT(LineNo);
    END;

    BEGIN
    {
      !! Documentation Page 50063 Job Order Meeting

      11:00 AM Friday, August 2, 2024
        Modified OnQueryClosePage fucntion, add a local function to get line number for each line type to correct job order line number.
        Change the syntax initial value of Time of Departure and Time or Arrival.
    }
    END.
  }
}

