OBJECT Page 50073 Job Task ListPart
{
  OBJECT-PROPERTIES
  {
    Date=08/27/18;
    Time=[ 5:49:00 PM];
    Modified=Yes;
    Version List=OC.03.50500;
  }
  PROPERTIES
  {
    LinksAllowed=Yes;
    SourceTable=Table1001;
    PageType=ListPart;
    OnOpenPage=BEGIN

                 CompanyInfo.GET;
                 CompanyInfo.TESTFIELD("Base Calendar Code");
               END;

    OnAfterGetRecord=BEGIN
                       UpdateStle;
                       DescriptionIndent := Indentation;

                       GetDelayedDays("End Date");
                     END;

    OnInsertRecord=BEGIN
                     LockJobDoc;
                   END;

    OnModifyRecord=BEGIN
                     LockJobDoc;
                   END;

    OnDeleteRecord=BEGIN
                     LockJobDoc;
                   END;

    ActionList=ACTIONS
    {
      { 3       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 78      ;1   ;Action    ;
                      Name=ChangeLogs;
                      CaptionML=ENU=Change Logs;
                      PromotedIsBig=Yes;
                      Image=ChangeLog;
                      OnAction=VAR
                                 ChangeLogPage@1000 : Page 595;
                                 TableIds@1001 : Text;
                                 JobNoLocal@1002 : Text;
                                 JobTaskNoLocal@1003 : Text;
                                 JobPlanningLineNoLocal@1004 : Text;
                               BEGIN
                                  TableIds := FORMAT(DATABASE::"Job Planning Line");
                                  JobNoLocal := FORMAT("Job No.");
                                  JobTaskNoLocal := FORMAT("Job Task No.");
                                  ChangeLogPage.SetFilterJobPlanningLinesFromJobTask(TableIds,JobNoLocal,JobTaskNoLocal);
                                  ChangeLogPage.RUN;
                               END;
                                }
      { 74      ;1   ;Action    ;
                      CaptionML=ENU=Assembly BOM;
                      RunObject=Page 36;
                      RunPageLink=Parent Item No.=FIELD(Assembly No.);
                      Image=BOM }
      { 38      ;1   ;ActionGroup;
                      CaptionML=ENU=&Job Task;
                      Image=Task }
      { 39      ;2   ;Action    ;
                      Name=JobPlanningLines;
                      ShortCutKey=Shift+Ctrl+P;
                      CaptionML=ENU=Job &Planning Lines;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=JobLines;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 JobPlanningLine@1000 : Record 1003;
                                 JobPlanningLines@1001 : Page 1007;
                               BEGIN
                                 TESTFIELD("Job Task Type","Job Task Type"::Posting);
                                 TESTFIELD("Job No.");
                                 TESTFIELD("Job Task No.");
                                 JobPlanningLine.FILTERGROUP(2);
                                 JobPlanningLine.SETRANGE("Job No.","Job No.");
                                 JobPlanningLine.SETRANGE("Job Task No.","Job Task No.");
                                 JobPlanningLine.FILTERGROUP(0);
                                 JobPlanningLines.SetJobTaskNoVisible(FALSE);
                                 JobPlanningLines.SetJobNo("Job No.");
                                 JobPlanningLines.SETTABLEVIEW(JobPlanningLine);
                                 JobPlanningLines.RUN;
                               END;
                                }
      { 41      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=Job &Task Card;
                      RunObject=Page 1003;
                      RunPageLink=Job No.=FIELD(Job No.),
                                  Job Task No.=FIELD(Job Task No.);
                      Image=Task }
      { 66      ;1   ;ActionGroup;
                      CaptionML=ENU=&Dimensions;
                      Image=Dimensions }
      { 65      ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions-&Single;
                      RunObject=Page 1005;
                      RunPageLink=Job No.=FIELD(Job No.),
                                  Job Task No.=FIELD(Job Task No.);
                      Image=Dimensions }
      { 64      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      CaptionML=ENU=Dimensions-&Multiple;
                      Image=DimensionSets;
                      OnAction=VAR
                                 JobTask@1000 : Record 1001;
                                 JobTaskDimensionsMultiple@1001 : Page 1006;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(JobTask);
                                 JobTaskDimensionsMultiple.SetMultiJobTask(JobTask);
                                 JobTaskDimensionsMultiple.RUNMODAL;
                               END;
                                }
      { 63      ;1   ;ActionGroup;
                      CaptionML=ENU=Documents;
                      Image=Documents }
      { 62      ;2   ;Action    ;
                      CaptionML=ENU=Sales &Invoices/Credit Memos;
                      Promoted=Yes;
                      Image=GetSourceDoc;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 JobInvoices@1000 : Page 1029;
                               BEGIN
                                 JobInvoices.SetPrJobTask(Rec);
                                 JobInvoices.RUNMODAL;
                               END;
                                }
      { 61      ;1   ;ActionGroup;
                      CaptionML=ENU=W&IP;
                      Image=WIP }
      { 60      ;2   ;Action    ;
                      CaptionML=ENU=&WIP Entries;
                      RunObject=Page 1008;
                      RunPageView=SORTING(Job No.,Job Posting Group,WIP Posting Date);
                      RunPageLink=Job No.=FIELD(Job No.);
                      Image=WIPEntries }
      { 59      ;2   ;Action    ;
                      CaptionML=ENU=WIP &G/L Entries;
                      RunObject=Page 1009;
                      RunPageView=SORTING(Job No.);
                      RunPageLink=Job No.=FIELD(Job No.);
                      Image=WIPLedger }
      { 76      ;1   ;ActionGroup;
                      CaptionML=ENU=Manage Task }
      { 77      ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+Insert;
                      CaptionML=ENU=Insert Line;
                      OnAction=VAR
                                 JobTask@1000 : Record 1001;
                               BEGIN
                                 // PHP Start
                                  JobTask.INIT;
                                  JobTask."Job No." := "Job No.";
                                  JobTask."Job Task No." := NoSeriesMgt.IncrementNo("Job Task No.", 1);
                                  JobTask.INSERT(TRUE);
                               END;
                                }
      { 58      ;1   ;ActionGroup;
                      CaptionML=ENU=History;
                      Image=History }
      { 57      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=ENU=Job Ledger E&ntries;
                      RunObject=Page 92;
                      RunPageView=SORTING(Job No.,Job Task No.);
                      RunPageLink=Job No.=FIELD(Job No.),
                                  Job Task No.=FIELD(Job Task No.);
                      Image=JobLedger }
      { 55      ;1   ;ActionGroup;
                      CaptionML=ENU=New Documents;
                      Image=Invoice }
      { 53      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Create Cash Advance;
                      Visible=False;
                      Image=Invoice;
                      OnAction=BEGIN
                                 CLEAR(PurchInv);
                                 PurchInv."Document Type" := PurchInv."Document Type"::Invoice;
                                 PurchInv.INSERT(TRUE);
                               END;
                                }
      { 52      ;1   ;ActionGroup;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 51      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Split &Planning Lines;
                      Promoted=Yes;
                      Image=Splitlines;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Job@1000 : Record 167;
                                 JobTask@1002 : Record 1001;
                               BEGIN
                                 TESTFIELD("Job No.");
                                 Job.GET("Job No.");
                                 IF Job.Blocked = Job.Blocked::All THEN
                                   Job.TestBlocked;

                                 TESTFIELD("Job Task No.");
                                 JobTask.SETRANGE("Job No.",Job."No.");
                                 JobTask.SETRANGE("Job Task No.","Job Task No.");

                                 REPORT.RUNMODAL(REPORT::"Job Split Planning Line",TRUE,FALSE,JobTask);
                               END;
                                }
      { 50      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Change &Dates;
                      Image=ChangeDate;
                      OnAction=VAR
                                 Job@1000 : Record 167;
                                 JobTask@1002 : Record 1001;
                               BEGIN
                                 TESTFIELD("Job No.");
                                 Job.GET("Job No.");
                                 IF Job.Blocked = Job.Blocked::All THEN
                                   Job.TestBlocked;

                                 JobTask.SETRANGE("Job No.",Job."No.");
                                 IF "Job Task No." <> '' THEN
                                   JobTask.SETRANGE("Job Task No.","Job Task No.");

                                 REPORT.RUNMODAL(REPORT::"Change Job Dates",TRUE,FALSE,JobTask);
                               END;
                                }
      { 49      ;2   ;Action    ;
                      Name=<Action7>;
                      CaptionML=ENU=I&ndent Job Tasks;
                      RunObject=Codeunit 1003;
                      Image=Indent }
      { 75      ;2   ;Action    ;
                      CaptionML=ENU=Link Job Posting Group;
                      OnAction=VAR
                                 JT@1000 : Record 1001;
                               BEGIN
                                 // PHP Start
                                 JT.COPY(Rec);
                                 CurrPage.SETSELECTIONFILTER(JT);
                                 LinkJobPostingGroupID(JT);
                               END;
                                }
      { 48      ;2   ;ActionGroup;
                      CaptionML=ENU=&Copy;
                      ActionContainerType=NewDocumentItems;
                      Image=Copy }
      { 47      ;3   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Copy Job Planning Lines &from...;
                      Promoted=Yes;
                      Image=CopyToTask;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 CopyJobPlanningLines@1000 : Page 1042;
                               BEGIN
                                 TESTFIELD("Job Task Type","Job Task Type"::Posting);
                                 CopyJobPlanningLines.SetToJobTask(Rec);
                                 CopyJobPlanningLines.RUNMODAL;
                               END;
                                }
      { 46      ;3   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Copy Job Planning Lines &to...;
                      Promoted=Yes;
                      Image=CopyFromTask;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 CopyJobPlanningLines@1000 : Page 1042;
                               BEGIN
                                 TESTFIELD("Job Task Type","Job Task Type"::Posting);
                                 CopyJobPlanningLines.SetFromJobTask(Rec);
                                 CopyJobPlanningLines.RUNMODAL;
                               END;
                                }
      { 40      ;2   ;ActionGroup;
                      CaptionML=ENU=Job Order;
                      Image=Task }
      { 23      ;3   ;Action    ;
                      Name=CreateVehicleRequest;
                      CaptionML=ENU=Create Vehicle Request;
                      Image=PostOrder;
                      OnAction=VAR
                                 NewJobOrder@1000 : Record 50012;
                                 JobLocal@1001 : Record 167;
                                 INTPLocal@1002 : Record 50040;
                                 RTPSLocal@1006 : Record 50010;
                                 JobTaskLocal@1011 : TEMPORARY Record 1001;
                                 NewJobOrderLinesLocal@1003 : Record 50551;
                                 ModifyJobOrderLinesLocal@1004 : Record 50551;
                                 JobOrderLineCheck@1005 : Record 50551;
                                 LineNo@1007 : Integer;
                                 JobOrderCheck@1009 : Record 50012;
                                 UserLocal@1008 : Record 91;
                                 JobOrderValue@1010 : Text;
                               BEGIN
                                 JobTaskLocal.DELETEALL;
                                 JobTask.RESET;
                                 JobTask.COPY(Rec);
                                 CurrPage.SETSELECTIONFILTER(JobTask);
                                 TESTFIELD("Job Task Type", JobTaskLocal."Job Task Type"::Posting);
                                 JobTask.SETFILTER("Job Task Type", FORMAT(JobTask."Job Task Type"::Posting));
                                 IF UserLocal.GET(USERID) AND (STRLEN(UserLocal."Employee No.") > 0) THEN BEGIN
                                   IF JobTask.FINDSET THEN BEGIN
                                     REPEAT
                                       JobTaskLocal.RESET;
                                       //JobTaskLocal := JobTask;
                                       JobTaskLocal.COPY(JobTask);
                                       IF JobTaskLocal."Start Date" = 0D THEN BEGIN
                                         MESSAGE(FORMAT(JobTaskLocal.FIELDCAPTION("Start Date") + ' must have a value to proceed.'));
                                         EXIT;
                                       END;
                                       IF JobTaskLocal."End Date" = 0D THEN BEGIN
                                         MESSAGE(FORMAT(JobTaskLocal.FIELDCAPTION("End Date") + ' must have a value to proceed.'));
                                         EXIT;
                                       END;
                                       JobOrderCheck.RESET;
                                       JobOrderCheck.SETFILTER("Employee No.", UserLocal."Employee No.");
                                       JobOrderValue :='|';
                                       IF JobOrderCheck.FINDSET THEN BEGIN
                                         REPEAT
                                           JobOrderValue += JobOrderCheck."No."+'|';
                                         UNTIL JobOrderCheck.NEXT = 0;
                                         JobOrderValue := DELSTR(JobOrderValue, 1, 1);
                                         JobOrderValue := DELSTR(JobOrderValue, STRLEN(JobOrderValue), 1);
                                         JobOrderLineCheck.RESET;
                                         JobOrderLineCheck.SETFILTER("Line Type", '%1', JobOrderLineCheck."Line Type"::"Car Request");
                                         JobOrderLineCheck.SETFILTER("Job Order No.", JobOrderValue);
                                         JobOrderLineCheck.SETFILTER("Job No.", JobTaskLocal."Job No.");
                                         JobOrderLineCheck.SETFILTER("Job Task No.", JobTaskLocal."Job Task No.");
                                         IF NOT JobOrderLineCheck.FINDSET THEN BEGIN
                                           REPEAT
                                             JobTaskLocal.INSERT(TRUE);
                                           UNTIL JobOrderLineCheck.NEXT = 0;
                                         END;
                                       END
                                       ELSE BEGIN
                                         JobTaskLocal.INSERT(TRUE);
                                       END;
                                     UNTIL JobTask.NEXT = 0;
                                   END;
                                 END
                                 ELSE BEGIN
                                     UserLocal.TESTFIELD("Employee No.");
                                 END;
                                 JobTaskLocal.RESET;
                                 IF JobTaskLocal.FINDSET THEN BEGIN
                                   IF JobLocal.GET(Rec."Job No.") THEN BEGIN
                                     NewJobOrder.INIT;
                                     NewJobOrder.VALIDATE("Job Type", NewJobOrder."Job Type"::"Service Engineering");
                                     IF INTPLocal.GET(JobLocal."INTP No.") THEN
                                       NewJobOrder.VALIDATE("INTP No.", INTPLocal."No.");
                                     NewJobOrder.VALIDATE("Job No.", Rec."Job No.");
                                     IF RTPSLocal.GET(JobLocal."RTPS No.") THEN
                                       NewJobOrder.VALIDATE("RTPS No.", RTPSLocal."No.");
                                     IF INTPLocal."No." = '' THEN
                                       NewJobOrder.VALIDATE("Project Name", JobLocal.Description);
                                     NewJobOrder.VALIDATE("Customer No.", JobLocal."Bill-to Customer No.");
                                     NewJobOrder.INSERT(TRUE);
                                   END;
                                   REPEAT
                                     LineNo += 10000;
                                       NewJobOrderLinesLocal.RESET;
                                       NewJobOrderLinesLocal.INIT;
                                       NewJobOrderLinesLocal."Line No." := LineNo;
                                       NewJobOrderLinesLocal."Line Type" := NewJobOrderLinesLocal."Line Type"::"Car Request";
                                       NewJobOrderLinesLocal."Job Order No." := NewJobOrder."No.";
                                       NewJobOrderLinesLocal."Job No." := JobTaskLocal."Job No.";
                                       NewJobOrderLinesLocal."Job Task No." := JobTaskLocal."Job Task No.";
                                       NewJobOrderLinesLocal."Job Task Description" := JobTaskLocal.Description;
                                       NewJobOrderLinesLocal.INSERT(TRUE);
                                       ModifyJobOrderLinesLocal.GET(NewJobOrderLinesLocal."Line Type", NewJobOrderLinesLocal."Job Order No.", NewJobOrderLinesLocal."Line No.");
                                       ModifyJobOrderLinesLocal."Date Needed" := JobTaskLocal."Start Date";
                                       ModifyJobOrderLinesLocal."Date From" := CREATEDATETIME(JobTaskLocal."Start Date",0T);
                                       ModifyJobOrderLinesLocal."Date To" := CREATEDATETIME(JobTaskLocal."End Date",0T);
                                       ModifyJobOrderLinesLocal.MODIFY(TRUE);
                                   UNTIL JobTaskLocal.NEXT= 0;
                                   MESSAGE('Job Order no. '+NewJobOrder."No."+' has been successfully created.');
                                   JobOrderPage.SETRECORD(NewJobOrder);
                                   JobOrderPage.RUN;
                                 END
                                 ELSE
                                   MESSAGE('Job Order is already created.');
                               END;
                                }
      { 22      ;3   ;Action    ;
                      Name=CreatePublicTranspoRequest;
                      CaptionML=ENU=Create Public Transpo Request;
                      Image=PostOrder;
                      OnAction=VAR
                                 NewJobOrder@1011 : Record 50012;
                                 JobLocal@1010 : Record 167;
                                 INTPLocal@1009 : Record 50040;
                                 RTPSLocal@1008 : Record 50010;
                                 JobTaskLocal@1007 : TEMPORARY Record 1001;
                                 NewJobOrderLinesLocal@1006 : Record 50551;
                                 ModifyJobOrderLinesLocal@1005 : Record 50551;
                                 JobOrderLineCheck@1004 : Record 50551;
                                 LineNo@1003 : Integer;
                                 JobOrderCheck@1002 : Record 50012;
                                 UserLocal@1001 : Record 91;
                                 JobOrderValue@1000 : Text;
                               BEGIN
                                 JobTaskLocal.DELETEALL;
                                 JobTask.RESET;
                                 JobTask.COPY(Rec);
                                 CurrPage.SETSELECTIONFILTER(JobTask);
                                 TESTFIELD("Job Task Type", JobTaskLocal."Job Task Type"::Posting);
                                 JobTask.SETFILTER("Job Task Type", FORMAT(JobTask."Job Task Type"::Posting));
                                 IF UserLocal.GET(USERID) AND (STRLEN(UserLocal."Employee No.") > 0) THEN BEGIN
                                   IF JobTask.FINDSET THEN BEGIN
                                     REPEAT
                                       JobTaskLocal.RESET;
                                       //JobTaskLocal := JobTask;
                                       JobTaskLocal.COPY(JobTask);
                                       IF JobTaskLocal."Start Date" = 0D THEN BEGIN
                                         MESSAGE(FORMAT(JobTaskLocal.FIELDCAPTION("Start Date") + ' must have a value to proceed.'));
                                         EXIT;
                                       END;
                                       IF JobTaskLocal."End Date" = 0D THEN BEGIN
                                         MESSAGE(FORMAT(JobTaskLocal.FIELDCAPTION("End Date") + ' must have a value to proceed.'));
                                         EXIT;
                                       END;
                                       JobOrderCheck.RESET;
                                       JobOrderCheck.SETFILTER("Employee No.", UserLocal."Employee No.");
                                       JobOrderValue :='|';
                                       IF JobOrderCheck.FINDSET THEN BEGIN
                                         REPEAT
                                           JobOrderValue += JobOrderCheck."No."+'|';
                                         UNTIL JobOrderCheck.NEXT = 0;
                                         JobOrderValue := DELSTR(JobOrderValue, 1, 1);
                                         JobOrderValue := DELSTR(JobOrderValue, STRLEN(JobOrderValue), 1);
                                         JobOrderLineCheck.RESET;
                                         JobOrderLineCheck.SETFILTER("Line Type", '%1',JobOrderLineCheck."Line Type"::"Public Transpo Request");
                                         JobOrderLineCheck.SETFILTER("Job Order No.", JobOrderValue);
                                         JobOrderLineCheck.SETFILTER("Job No.", JobTaskLocal."Job No.");
                                         JobOrderLineCheck.SETFILTER("Job Task No.", JobTaskLocal."Job Task No.");
                                         IF NOT JobOrderLineCheck.FINDSET THEN BEGIN
                                           REPEAT
                                             JobTaskLocal.INSERT(TRUE);
                                           UNTIL JobOrderLineCheck.NEXT = 0;
                                         END;
                                       END
                                       ELSE BEGIN
                                         JobTaskLocal.INSERT(TRUE);
                                       END;
                                     UNTIL JobTask.NEXT = 0;
                                   END;
                                 END
                                 ELSE BEGIN
                                     UserLocal.TESTFIELD("Employee No.");
                                 END;
                                 JobTaskLocal.RESET;
                                 IF JobTaskLocal.FINDSET THEN BEGIN
                                   IF JobLocal.GET(Rec."Job No.") THEN BEGIN
                                     NewJobOrder.INIT;
                                     NewJobOrder.VALIDATE("Job Type", NewJobOrder."Job Type"::"Service Engineering");
                                     IF INTPLocal.GET(JobLocal."INTP No.") THEN
                                       NewJobOrder.VALIDATE("INTP No.", INTPLocal."No.");
                                     NewJobOrder.VALIDATE("Job No.", Rec."Job No.");
                                     IF RTPSLocal.GET(JobLocal."RTPS No.") THEN
                                       NewJobOrder.VALIDATE("RTPS No.", RTPSLocal."No.");
                                     IF INTPLocal."No." = '' THEN
                                       NewJobOrder.VALIDATE("Project Name", JobLocal.Description);
                                     NewJobOrder.VALIDATE("Customer No.", JobLocal."Bill-to Customer No.");
                                     NewJobOrder.INSERT(TRUE);
                                   END;
                                   REPEAT
                                     LineNo += 10000;
                                       NewJobOrderLinesLocal.RESET;
                                       NewJobOrderLinesLocal.INIT;
                                       NewJobOrderLinesLocal."Line No." := LineNo;
                                       NewJobOrderLinesLocal."Line Type" := NewJobOrderLinesLocal."Line Type"::"Public Transpo Request";
                                       NewJobOrderLinesLocal."Job Order No." := NewJobOrder."No.";
                                       NewJobOrderLinesLocal."Job No." := JobTaskLocal."Job No.";
                                       NewJobOrderLinesLocal."Job Task No." := JobTaskLocal."Job Task No.";
                                       NewJobOrderLinesLocal."Job Task Description" := JobTaskLocal.Description;
                                       NewJobOrderLinesLocal.INSERT(TRUE);
                                       ModifyJobOrderLinesLocal.GET(NewJobOrderLinesLocal."Line Type", NewJobOrderLinesLocal."Job Order No.", NewJobOrderLinesLocal."Line No.");
                                       ModifyJobOrderLinesLocal."Date Needed" := JobTaskLocal."Start Date";
                                       ModifyJobOrderLinesLocal."Date From" := CREATEDATETIME(JobTaskLocal."Start Date",0T);
                                       ModifyJobOrderLinesLocal."Date To" := CREATEDATETIME(JobTaskLocal."End Date",0T);
                                       ModifyJobOrderLinesLocal.MODIFY(TRUE);
                                   UNTIL JobTaskLocal.NEXT= 0;
                                   MESSAGE('Job Order no. '+NewJobOrder."No."+' has been successfully created.');
                                   JobOrderPage.SETRECORD(NewJobOrder);
                                   JobOrderPage.RUN;
                                 END
                                 ELSE
                                   MESSAGE('Job Order is already created.');
                               END;
                                }
      { 21      ;3   ;Action    ;
                      Name=OpenJobOrder;
                      CaptionML=ENU=Open Job Order;
                      Image=Journals;
                      OnAction=VAR
                                 JobOrderPage@1000 : Page 50013;
                                 UserIDCode@1001 : Code[50];
                               BEGIN
                                 JobOrderListPage.OpenJobOrder(Rec);
                               END;
                                }
      { 56      ;2   ;ActionGroup;
                      CaptionML=ENU=Percentage of Completion;
                      Image=Percentage }
      { 54      ;3   ;Action    ;
                      CaptionML=ENU=&0%;
                      Image=Percentage;
                      OnAction=BEGIN
                                 TESTFIELD("Job Task Type", "Job Task Type"::Posting);
                                 VALIDATE("Percentage of Completion", 0);
                               END;
                                }
      { 45      ;3   ;Action    ;
                      CaptionML=ENU=25%;
                      Image=Percentage;
                      OnAction=BEGIN
                                 TESTFIELD("Job Task Type", "Job Task Type"::Posting);
                                 VALIDATE("Percentage of Completion", 25);
                               END;
                                }
      { 44      ;3   ;Action    ;
                      CaptionML=ENU=50%;
                      Image=Percentage;
                      OnAction=BEGIN
                                 TESTFIELD("Job Task Type", "Job Task Type"::Posting);
                                 VALIDATE("Percentage of Completion", 50);
                               END;
                                }
      { 43      ;3   ;Action    ;
                      CaptionML=ENU=75%;
                      Image=Percentage;
                      OnAction=BEGIN
                                 TESTFIELD("Job Task Type", "Job Task Type"::Posting);
                                 VALIDATE("Percentage of Completion", 75);
                               END;
                                }
      { 42      ;3   ;Action    ;
                      CaptionML=ENU=100%;
                      Image=Percentage;
                      OnAction=BEGIN
                                 TESTFIELD("Job Task Type", "Job Task Type"::Posting);
                                 VALIDATE("Percentage of Completion", 100);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 4   ;2   ;Field     ;
                SourceExpr="Job Task No.";
                Style=Strong;
                StyleExpr=ApplyStyle }

    { 67  ;2   ;Field     ;
                SourceExpr="Assembly No." }

    { 5   ;2   ;Field     ;
                SourceExpr=Description;
                Style=Strong;
                StyleExpr=ApplyStyle }

    { 68  ;2   ;Field     ;
                SourceExpr="Unit of Measure Code" }

    { 69  ;2   ;Field     ;
                SourceExpr=Quantity;
                Editable=("Assembly No." <> '') }

    { 6   ;2   ;Field     ;
                SourceExpr="Job Task Type";
                Style=Strong;
                StyleExpr=ApplyStyle }

    { 7   ;2   ;Field     ;
                SourceExpr="WIP-Total" }

    { 8   ;2   ;Field     ;
                SourceExpr="Job Posting Group" }

    { 9   ;2   ;Field     ;
                SourceExpr="WIP Method";
                Visible=False }

    { 10  ;2   ;Field     ;
                SourceExpr="Schedule (Total Cost)";
                Visible=False }

    { 11  ;2   ;Field     ;
                SourceExpr="Schedule (Total Price)";
                Visible=False }

    { 12  ;2   ;Field     ;
                SourceExpr="Usage (Total Cost)";
                Visible=False }

    { 13  ;2   ;Field     ;
                SourceExpr="Usage (Total Price)";
                Visible=False }

    { 14  ;2   ;Field     ;
                SourceExpr="Contract (Total Cost)";
                Visible=False }

    { 15  ;2   ;Field     ;
                SourceExpr="Contract (Total Price)";
                Visible=False }

    { 16  ;2   ;Field     ;
                SourceExpr="Contract (Invoiced Price)";
                Visible=False }

    { 17  ;2   ;Field     ;
                SourceExpr="Contract (Invoiced Cost)";
                Visible=False }

    { 18  ;2   ;Field     ;
                SourceExpr="Posting Date Filter";
                Visible=False }

    { 19  ;2   ;Field     ;
                SourceExpr="Planning Date Filter";
                Visible=False }

    { 20  ;2   ;Field     ;
                SourceExpr=Totaling;
                Visible=False }

    { 24  ;2   ;Field     ;
                SourceExpr="Recognized Sales Amount";
                Visible=False }

    { 25  ;2   ;Field     ;
                SourceExpr="Recognized Costs Amount";
                Visible=False }

    { 26  ;2   ;Field     ;
                SourceExpr="Recognized Sales G/L Amount";
                Visible=False }

    { 27  ;2   ;Field     ;
                SourceExpr="Recognized Costs G/L Amount";
                Visible=False }

    { 28  ;2   ;Field     ;
                SourceExpr="Global Dimension 1 Code";
                Visible=False }

    { 29  ;2   ;Field     ;
                SourceExpr="Global Dimension 2 Code";
                Visible=False }

    { 30  ;2   ;Field     ;
                SourceExpr="Outstanding Orders";
                Visible=False }

    { 31  ;2   ;Field     ;
                SourceExpr="Amt. Rcd. Not Invoiced";
                Visible=False }

    { 32  ;2   ;Field     ;
                SourceExpr="Remaining (Total Cost)";
                Visible=False }

    { 33  ;2   ;Field     ;
                SourceExpr="Remaining (Total Price)";
                Visible=False }

    { 34  ;2   ;Field     ;
                SourceExpr="Start Date" }

    { 35  ;2   ;Field     ;
                SourceExpr="End Date" }

    { 73  ;2   ;Field     ;
                CaptionML=ENU=No. of Days Delayed;
                BlankNumbers=BlankNeg;
                SourceExpr=DelayedDays;
                Editable=false;
                StyleExpr=FontStyle }

    { 71  ;2   ;Field     ;
                Name=% of Overdue Planning Lines;
                SourceExpr=PercentOverdue;
                Editable=False }

    { 70  ;2   ;Field     ;
                Name=% Completed;
                SourceExpr=PercentCompleted;
                Editable=False }

    { 72  ;2   ;Field     ;
                Name=% Invoiced;
                SourceExpr=PercentInvoiced;
                Editable=False }

    { 36  ;2   ;Field     ;
                SourceExpr="Created By";
                Visible=FALSE }

    { 37  ;2   ;Field     ;
                SourceExpr="Modified By";
                Visible=FALSE }

  }
  CODE
  {
    VAR
      CompanyInfo@1009 : Record 79;
      PurchInv@1000 : Record 38;
      JobTask@1005 : Record 1001;
      JobOrderPage@1007 : Page 50013;
      JobOrderListPage@1006 : Page 50012;
      NoSeriesMgt@1008 : Codeunit 396;
      StyleIsStrong@1002 : Boolean INDATASET;
      ApplyStyle@1004 : Boolean;
      DelayedDays@1001 : Integer;
      DescriptionIndent@1003 : Integer INDATASET;
      LastJobTaskNo@1013 : Code[20];
      FontStyle@1010 : Text;
      FontStandardText@1011 : TextConst 'ENU=Standard';
      FontAttentionText@1012 : TextConst 'ENU=Attention';

    LOCAL PROCEDURE SetPurchLineFilters@3(VAR PurchLine@1000 : Record 39);
    BEGIN
      PurchLine.SETCURRENTKEY("Document Type","Job No.","Job Task No.");
      PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
      PurchLine.SETRANGE("Job No.","Job No.");
      IF "Job Task Type" IN ["Job Task Type"::Total,"Job Task Type"::"End-Total"] THEN
        PurchLine.SETFILTER("Job Task No.",Totaling)
      ELSE
        PurchLine.SETRANGE("Job Task No.","Job Task No.");
    END;

    LOCAL PROCEDURE GetCANoSeries@14() : Code[20];
    BEGIN
    END;

    LOCAL PROCEDURE UpdateStle@8();
    BEGIN
      IF "Job Task Type" <> "Job Task Type"::Posting THEN BEGIN
        ApplyStyle := TRUE;
      END ELSE BEGIN
        ApplyStyle := FALSE;
      END;
    END;

    LOCAL PROCEDURE LockJobDoc@45();
    VAR
      Job@1001 : Record 167;
    BEGIN
      IF Job.GET("Job No.") THEN BEGIN
        Job.TESTFIELD(Status, Job.Status::Planning);
      END;
      // IF Jobs.GET(JobNo) AND (Jobs.Status = Jobs.Status::Order) THEN BEGIN
      //  Jobs.FIELDERROR(Status);
      // END;
    END;

    LOCAL PROCEDURE GetDelayedDays@1(EndDate@1002 : Date);
    VAR
      CalendarMgt@1001 : Codeunit 7600;
      NoOfDays@1003 : Integer;
      DateDescr@1004 : Text;
      SourceDate@1005 : Date;
      JobTasks@1000 : Record 1001;
    BEGIN
      SourceDate := TODAY;
      DelayedDays := 0;
      FontStyle := FontStandardText;
      IF (EndDate <> 0D) AND (SourceDate > EndDate) THEN BEGIN
        //EndDate := CALCDATE('+1D', EndDate);
        REPEAT
          IF NOT CalendarMgt.CheckDateStatus(CompanyInfo."Base Calendar Code", EndDate, DateDescr) THEN
            DelayedDays += 1;
          EndDate := CALCDATE('+1D', EndDate);
        UNTIL SourceDate < EndDate;
      END;

      IF DelayedDays > 0 THEN
        FontStyle := FontAttentionText;

      IF ("Job Task Type" <> "Job Task Type"::Posting) THEN
        DelayedDays := -1;

      IF PercentCompleted = 100 THEN BEGIN
        DelayedDays := 0;
        FontStyle := FontStandardText;
      END;
    END;

    BEGIN
    END.
  }
}

