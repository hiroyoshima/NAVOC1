OBJECT Report 1401 Check
{
  OBJECT-PROPERTIES
  {
    Date=06/26/18;
    Time=[ 2:46:07 AM];
    Modified=Yes;
    Version List=NAVW19.00.00.43897,XCELER8.005,NAVOC1.00.02.01;
  }
  PROPERTIES
  {
    Permissions=TableData 270=m;
    CaptionML=ENU=Check;
    OnPreReport=BEGIN
                  InitTextVariable;
                END;

  }
  DATASET
  {
    { 9788;    ;DataItem;VoidGenJnlLine      ;
               DataItemTable=Table81;
               DataItemTableView=SORTING(Journal Template Name,Journal Batch Name,Posting Date,Document No.);
               OnPreDataItem=BEGIN
                               IF CurrReport.PREVIEW THEN
                                 ERROR(Text000);

                               IF UseCheckNo = '' THEN
                                 ERROR(Text001);

                               IF TestPrint THEN
                                 CurrReport.BREAK;

                               IF NOT ReprintChecks THEN
                                 CurrReport.BREAK;

                               IF (GETFILTER("Line No.") <> '') OR (GETFILTER("Document No.") <> '') THEN
                                 ERROR(
                                   Text002,FIELDCAPTION("Line No."),FIELDCAPTION("Document No."));
                               SETRANGE("Bank Payment Type","Bank Payment Type"::"Computer Check");
                               SETRANGE("Check Printed",TRUE);
                             END;

               OnAfterGetRecord=BEGIN
                                  CheckManagement.VoidCheck(VoidGenJnlLine);
                                END;

               ReqFilterFields=Journal Template Name,Journal Batch Name,Posting Date }

    { 3808;    ;DataItem;GenJnlLine          ;
               DataItemTable=Table81;
               DataItemTableView=SORTING(Journal Template Name,Journal Batch Name,Posting Date,Document No.);
               OnPreDataItem=BEGIN
                               COPY(VoidGenJnlLine);
                               CompanyInfo.GET;
                               IF NOT TestPrint THEN BEGIN
                                 FormatAddr.Company(CompanyAddr,CompanyInfo);
                                 BankAcc2.GET(BankAcc2."No.");
                                 BankAcc2.TESTFIELD(Blocked,FALSE);
                                 COPY(VoidGenJnlLine);
                                 SETRANGE("Bank Payment Type","Bank Payment Type"::"Computer Check");
                                 SETRANGE("Check Printed",FALSE);
                               END ELSE BEGIN
                                 CLEAR(CompanyAddr);
                                 FOR i := 1 TO 5 DO
                                   CompanyAddr[i] := Text003;
                               END;
                               ChecksPrinted := 0;

                               SETRANGE("Account Type","Account Type"::"Fixed Asset");
                               IF FIND('-') THEN
                                 FIELDERROR("Account Type");
                               SETRANGE("Account Type");
                             END;

               OnAfterGetRecord=VAR
                                  TableID@1001 : ARRAY [10] OF Integer;
                                  No@1000 : ARRAY [10] OF Code[20];
                                BEGIN
                                  IF OneCheckPrVendor AND ("Currency Code" <> '') AND
                                     ("Currency Code" <> Currency.Code)
                                  THEN BEGIN
                                    Currency.GET("Currency Code");
                                    Currency.TESTFIELD("Conv. LCY Rndg. Debit Acc.");
                                    Currency.TESTFIELD("Conv. LCY Rndg. Credit Acc.");
                                  END;

                                  IF "Bank Payment Type" = "Bank Payment Type"::"Computer Check" THEN
                                    TESTFIELD("Exported to Payment File",FALSE);

                                  IF NOT TestPrint THEN BEGIN
                                    IF Amount = 0 THEN
                                      CurrReport.SKIP;

                                    CheckAmount := GenJnlLine.Amount; // PHP Start WHT Computation
                                    TESTFIELD("Bal. Account Type","Bal. Account Type"::"Bank Account");
                                    IF "Bal. Account No." <> BankAcc2."No." THEN
                                      CurrReport.SKIP;

                                    IF ("Account No." <> '') AND ("Bal. Account No." <> '') THEN BEGIN
                                      BalancingType := "Account Type";
                                      BalancingNo := "Account No.";
                                      RemainingAmount := Amount;
                                      IF OneCheckPrVendor THEN BEGIN
                                        ApplyMethod := ApplyMethod::MoreLinesOneEntry;
                                        GenJnlLine2.RESET;
                                        GenJnlLine2.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
                                        GenJnlLine2.SETRANGE("Journal Template Name","Journal Template Name");
                                        GenJnlLine2.SETRANGE("Journal Batch Name","Journal Batch Name");
                                        GenJnlLine2.SETRANGE("Posting Date","Posting Date");
                                        GenJnlLine2.SETRANGE("Document No.","Document No.");
                                        GenJnlLine2.SETRANGE("Account Type","Account Type");
                                        GenJnlLine2.SETRANGE("Account No.","Account No.");
                                        GenJnlLine2.SETRANGE("Bal. Account Type","Bal. Account Type");
                                        GenJnlLine2.SETRANGE("Bal. Account No.","Bal. Account No.");
                                        GenJnlLine2.SETRANGE("Bank Payment Type","Bank Payment Type");
                                        GenJnlLine2.FIND('-');
                                        RemainingAmount := 0;
                                      END ELSE
                                        IF "Applies-to Doc. No." <> '' THEN
                                          ApplyMethod := ApplyMethod::OneLineOneEntry
                                        ELSE
                                          IF "Applies-to ID" <> '' THEN
                                            ApplyMethod := ApplyMethod::OneLineID
                                          ELSE
                                            ApplyMethod := ApplyMethod::Payment;
                                    END ELSE
                                      IF "Account No." = '' THEN
                                        FIELDERROR("Account No.",Text004)
                                      ELSE
                                        FIELDERROR("Bal. Account No.",Text004);

                                    CLEAR(CheckToAddr);
                                    ContactText := '';
                                    CLEAR(SalesPurchPerson);
                                    CASE BalancingType OF
                                      BalancingType::"G/L Account":
                                        CheckToAddr[1] := Description;
                                      BalancingType::Customer:
                                        BEGIN
                                          Cust.GET(BalancingNo);
                                          IF Cust.Blocked = Cust.Blocked::All THEN
                                            ERROR(Text064,Cust.FIELDCAPTION(Blocked),Cust.Blocked,Cust.TABLECAPTION,Cust."No.");
                                          Cust.Contact := '';
                                          FormatAddr.Customer(CheckToAddr,Cust);
                                          IF BankAcc2."Currency Code" <> "Currency Code" THEN
                                            ERROR(Text005);
                                          IF Cust."Salesperson Code" <> '' THEN BEGIN
                                            ContactText := Text006;
                                            SalesPurchPerson.GET(Cust."Salesperson Code");
                                          END;
                                          // PHP  Start - Change the CheckToAddr
                                          IF CustBankAccounts.GET("Account No.","Recipient Bank Account") THEN BEGIN
                                            CLEAR(CheckToAddr);
                                            FormatAddr.CustBankAcc(CheckToAddr, CustBankAccounts);
                                          END;
                                          // PHP End
                                        END;
                                      BalancingType::Vendor:
                                        BEGIN
                                          Vend.GET(BalancingNo);
                                          IF Vend.Blocked IN [Vend.Blocked::All,Vend.Blocked::Payment] THEN
                                            ERROR(Text064,Vend.FIELDCAPTION(Blocked),Vend.Blocked,Vend.TABLECAPTION,Vend."No.");
                                          Vend.Contact := '';
                                          FormatAddr.Vendor(CheckToAddr,Vend);
                                          IF BankAcc2."Currency Code" <> "Currency Code" THEN
                                            ERROR(Text005);
                                          IF Vend."Purchaser Code" <> '' THEN BEGIN
                                            ContactText := Text007;
                                            SalesPurchPerson.GET(Vend."Purchaser Code");
                                          END;
                                          //PHP start
                                          CalcCheck(GenJnlLine); // PHP Start WHT Calculation
                                          //PHP Start - Change the CheckToAddr
                                          IF VendorBankAccount.GET("Account No.","Recipient Bank Account") THEN BEGIN
                                            CLEAR(CheckToAddr);
                                            RecipientBankNo := VendorBankAccount.Code;
                                            FormatAddr.VendBankAcc(CheckToAddr, VendorBankAccount);
                                          END;
                                          //PHP End
                                        END;
                                      BalancingType::"Bank Account":
                                        BEGIN
                                          BankAcc.GET(BalancingNo);
                                          BankAcc.TESTFIELD(Blocked,FALSE);
                                          BankAcc.Contact := '';
                                          FormatAddr.BankAcc(CheckToAddr,BankAcc);
                                          IF BankAcc2."Currency Code" <> BankAcc."Currency Code" THEN
                                            ERROR(Text008);
                                          IF BankAcc."Our Contact Code" <> '' THEN BEGIN
                                            ContactText := Text009;
                                            SalesPurchPerson.GET(BankAcc."Our Contact Code");
                                          END;
                                        END;
                                    END;

                                    CheckDateText := FORMAT("Posting Date",0,'<month,2>         <day,2>         <year4>');
                                  END ELSE BEGIN
                                    IF ChecksPrinted > 0 THEN
                                      CurrReport.BREAK;
                                    BalancingType := BalancingType::Vendor;
                                    BalancingNo := Text010;
                                    CLEAR(CheckToAddr);
                                    FOR i := 1 TO 5 DO
                                      CheckToAddr[i] := Text003;
                                    ContactText := '';
                                    CLEAR(SalesPurchPerson);
                                    CheckNoText := Text011;
                                    CheckDateText := Text012;
                                  END;

                                  // PHP Start Check Dim Value Posting
                                  TableID[1] := DimMgt.TypeToTableID1(GenJnlLine."Account Type");
                                  No[1] := GenJnlLine."Account No.";
                                  TableID[2] := DimMgt.TypeToTableID1(GenJnlLine."Bal. Account Type");
                                  No[2] := GenJnlLine."Bal. Account No.";
                                  TableID[3] := DATABASE::Job;
                                  No[3] := GenJnlLine."Job No.";
                                  TableID[4] := DATABASE::"Salesperson/Purchaser";
                                  No[4] := GenJnlLine."Salespers./Purch. Code";
                                  TableID[5] := DATABASE::Campaign;
                                  No[5] := GenJnlLine."Campaign No.";
                                   IF NOT DimMgt.CheckDimValuePosting(TableID,No,"Dimension Set ID") THEN
                                    ThrowGenJnlLineError(GenJnlLine,Text066,DimMgt.GetDimValuePostingErr);

                                  WHTManagement.CheckApplicationPaymentWHT(GenJnlLine); // WHT Validation
                                  // PHP End
                                END;

               OnPostDataItem=BEGIN
                                // Validation
                                // PHP Start
                                 GenJnlLine.TESTFIELD("Voucher No.");
                                 GenJnlLine.TESTFIELD("Bal. Account Type", GenJnlLine."Bal. Account Type"::"Bank Account");
                                 GenJnlLine.TESTFIELD("Bal. Account No.");
                                 GenJnlLine.TESTFIELD("Bank Payment Type", GenJnlLine."Bank Payment Type"::"Computer Check");
                                // PHP End
                              END;
                               }

    { 43  ;1   ;Column  ;JournalTempName_GenJnlLine;
               SourceExpr="Journal Template Name" }

    { 44  ;1   ;Column  ;JournalBatchName_GenJnlLine;
               SourceExpr="Journal Batch Name" }

    { 45  ;1   ;Column  ;LineNo_GenJnlLine   ;
               SourceExpr="Line No." }

    { 35  ;1   ;Column  ;Amount_GenJnlLine   ;
               SourceExpr=GenJnlLine.Amount }

    { 47  ;1   ;Column  ;Amount_GenJnlLine2  ;
               SourceExpr=CheckAmount }

    { 38  ;1   ;Column  ;DocNo_GenJnlLine    ;
               SourceExpr=GenJnlLine."Document No." }

    { 39  ;1   ;Column  ;ExtDocNo_GenJnlLine ;
               SourceExpr=GenJnlLine."External Document No." }

    { 41  ;1   ;Column  ;VoucherNo_GenJnlLine;
               SourceExpr=GenJnlLine."Voucher No." }

    { 40  ;1   ;Column  ;DocDate_GenJnlLine  ;
               SourceExpr=GenJnlLine."Document No." }

    { 1159;1   ;DataItem;CheckPages          ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               FirstPage := TRUE;
                               FoundLast := FALSE;
                               TotalLineAmount := 0;
                               TotalLineDiscount := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF FoundLast THEN
                                    CurrReport.BREAK;

                                  UseCheckNo := INCSTR(UseCheckNo);
                                  IF NOT TestPrint THEN
                                    CheckNoText := UseCheckNo
                                  ELSE
                                    CheckNoText := Text011;
                                END;

               OnPostDataItem=BEGIN
                                IF NOT TestPrint THEN BEGIN
                                  // Begin Original Code
                                  IF UseCheckNo <> GenJnlLine."Document No." THEN BEGIN
                                    GenJnlLine3.RESET;
                                    GenJnlLine3.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
                                    GenJnlLine3.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                                    GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                                    GenJnlLine3.SETRANGE("Posting Date",GenJnlLine."Posting Date");
                                    GenJnlLine3.SETRANGE("Document No.",UseCheckNo);
                                    IF GenJnlLine3.FIND('-') THEN
                                      GenJnlLine3.FIELDERROR("Document No.",STRSUBSTNO(Text013,UseCheckNo));
                                  END;
                                  // End Original Code

                                  IF ApplyMethod <> ApplyMethod::MoreLinesOneEntry THEN BEGIN
                                    GenJnlLine3 := GenJnlLine;
                                    GenJnlLine3.TESTFIELD("Posting No. Series",'');
                                    GenJnlLine3."Document No." := UseCheckNo;
                                    GenJnlLine3."Check Printed" := TRUE;
                                    GenJnlLine3.MODIFY;
                                  END ELSE BEGIN
                                    IF GenJnlLine2.FIND('-') THEN BEGIN
                                      HighestLineNo := GenJnlLine2."Line No.";
                                      REPEAT
                                        IF GenJnlLine2."Line No." > HighestLineNo THEN
                                          HighestLineNo := GenJnlLine2."Line No.";
                                        GenJnlLine3 := GenJnlLine2;
                                        GenJnlLine3.TESTFIELD("Posting No. Series",'');
                                        GenJnlLine3."Bal. Account No." := '';
                                        GenJnlLine3."Bank Payment Type" := GenJnlLine3."Bank Payment Type"::" ";
                                        GenJnlLine3."Document No." := UseCheckNo;
                                        GenJnlLine3."Check Printed" := TRUE;
                                        GenJnlLine3.VALIDATE(Amount);
                                        GenJnlLine3.MODIFY;
                                      UNTIL GenJnlLine2.NEXT = 0;
                                    END;

                                    GenJnlLine3.RESET;
                                    GenJnlLine3 := GenJnlLine;
                                    GenJnlLine3.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                                    GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                                    GenJnlLine3."Line No." := HighestLineNo;
                                    IF GenJnlLine3.NEXT = 0 THEN
                                      GenJnlLine3."Line No." := HighestLineNo + 10000
                                    ELSE BEGIN
                                      WHILE GenJnlLine3."Line No." = HighestLineNo + 1 DO BEGIN
                                        HighestLineNo := GenJnlLine3."Line No.";
                                        IF GenJnlLine3.NEXT = 0 THEN
                                          GenJnlLine3."Line No." := HighestLineNo + 20000;
                                      END;
                                      GenJnlLine3."Line No." := (GenJnlLine3."Line No." + HighestLineNo) DIV 2;
                                    END;
                                    GenJnlLine3.INIT;
                                    GenJnlLine3.VALIDATE("Posting Date",GenJnlLine."Posting Date");
                                    GenJnlLine3."Document Type" := GenJnlLine."Document Type";
                                    GenJnlLine3."Document No." := UseCheckNo;
                                    GenJnlLine3."Account Type" := GenJnlLine3."Account Type"::"Bank Account";
                                    GenJnlLine3.VALIDATE("Account No.",BankAcc2."No.");
                                    IF BalancingType <> BalancingType::"G/L Account" THEN
                                      GenJnlLine3.Description := STRSUBSTNO(Text014,SELECTSTR(BalancingType + 1,Text062),BalancingNo);
                                    GenJnlLine3.VALIDATE(Amount,-TotalLineAmount);
                                    GenJnlLine3."Bank Payment Type" := GenJnlLine3."Bank Payment Type"::"Computer Check";
                                    GenJnlLine3."Check Printed" := TRUE;
                                    GenJnlLine3."Source Code" := GenJnlLine."Source Code";
                                    GenJnlLine3."Reason Code" := GenJnlLine."Reason Code";
                                    GenJnlLine3."Allow Zero-Amount Posting" := TRUE;
                                    GenJnlLine3.INSERT;
                                  END;
                                END;

                                BankAcc2."Last Check No." := UseCheckNo;
                                BankAcc2.MODIFY;

                                CLEAR(CheckManagement);
                              END;
                               }

    { 24  ;2   ;Column  ;CheckToAddr1        ;
               SourceExpr=CheckToAddr[1] }

    { 42  ;2   ;Column  ;CheckName2          ;
               SourceExpr=CheckName2 }

    { 52  ;2   ;Column  ;CheckDateText       ;
               SourceExpr=CheckDateText }

    { 96  ;2   ;Column  ;CheckNoText         ;
               SourceExpr=CheckNoText }

    { 37  ;2   ;Column  ;FirstPage           ;
               SourceExpr=FirstPage }

    { 36  ;2   ;Column  ;PreprintedStub      ;
               SourceExpr=PreprintedStub }

    { 89  ;2   ;Column  ;CheckNoTextCaption  ;
               SourceExpr=CheckNoTextCaptionLbl }

    { 4098;2   ;DataItem;PrintSettledLoop    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               MaxIteration=30;
               OnPreDataItem=BEGIN
                               IF NOT TestPrint THEN
                                 IF FirstPage THEN BEGIN
                                   FoundLast := TRUE;
                                   CASE ApplyMethod OF
                                     ApplyMethod::OneLineOneEntry:
                                       FoundLast := FALSE;
                                     ApplyMethod::OneLineID:
                                       CASE BalancingType OF
                                         BalancingType::Customer:
                                           BEGIN
                                             CustLedgEntry.RESET;
                                             CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
                                             CustLedgEntry.SETRANGE("Customer No.",BalancingNo);
                                             CustLedgEntry.SETRANGE(Open,TRUE);
                                             CustLedgEntry.SETRANGE(Positive,TRUE);
                                             CustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
                                             FoundLast := NOT CustLedgEntry.FIND('-');
                                             IF FoundLast THEN BEGIN
                                               CustLedgEntry.SETRANGE(Positive,FALSE);
                                               FoundLast := NOT CustLedgEntry.FIND('-');
                                               FoundNegative := TRUE;
                                             END ELSE
                                               FoundNegative := FALSE;
                                           END;
                                         BalancingType::Vendor:
                                           BEGIN
                                             VendLedgEntry.RESET;
                                             VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
                                             VendLedgEntry.SETRANGE("Vendor No.",BalancingNo);
                                             VendLedgEntry.SETRANGE(Open,TRUE);
                                             VendLedgEntry.SETRANGE(Positive,TRUE);
                                             VendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
                                             FoundLast := NOT VendLedgEntry.FIND('-');
                                             IF FoundLast THEN BEGIN
                                               VendLedgEntry.SETRANGE(Positive,FALSE);
                                               FoundLast := NOT VendLedgEntry.FIND('-');
                                               FoundNegative := TRUE;
                                             END ELSE
                                               FoundNegative := FALSE;
                                           END;
                                       END;
                                     ApplyMethod::MoreLinesOneEntry:
                                       FoundLast := FALSE;
                                   END;
                                 END
                                 ELSE
                                   FoundLast := FALSE;

                               IF DocNo = '' THEN
                                 CurrencyCode2 := GenJnlLine."Currency Code";

                               IF PreprintedStub THEN
                                 TotalText := ''
                               ELSE
                                 TotalText := Text019;

                               IF GenJnlLine."Currency Code" <> '' THEN
                                 NetAmount := STRSUBSTNO(Text063,GenJnlLine."Currency Code")
                               ELSE BEGIN
                                 GLSetup.GET;
                                 NetAmount := STRSUBSTNO(Text063,GLSetup."LCY Code");
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NOT TestPrint THEN BEGIN
                                    IF FoundLast THEN BEGIN
                                      IF RemainingAmount <> 0 THEN BEGIN
                                        DocType := Text015;
                                        DocNo := '';
                                        ExtDocNo := '';
                                        DocDate := 0D;
                                        LineAmount := RemainingAmount;
                                        LineAmount2 := RemainingAmount;
                                        CurrentLineAmount := LineAmount2;
                                        LineDiscount := 0;
                                        RemainingAmount := 0;
                                      END ELSE
                                        CurrReport.BREAK;
                                    END ELSE
                                      CASE ApplyMethod OF
                                        ApplyMethod::OneLineOneEntry:
                                          BEGIN
                                            CASE BalancingType OF
                                              BalancingType::Customer:
                                                BEGIN
                                                  CustLedgEntry.RESET;
                                                  CustLedgEntry.SETCURRENTKEY("Document No.");
                                                  CustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
                                                  CustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                                                  CustLedgEntry.SETRANGE("Customer No.",BalancingNo);
                                                  CustLedgEntry.FIND('-');
                                                  CustUpdateAmounts(CustLedgEntry,RemainingAmount);
                                                END;
                                              BalancingType::Vendor:
                                                BEGIN
                                                  VendLedgEntry.RESET;
                                                  VendLedgEntry.SETCURRENTKEY("Document No.");
                                                  VendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
                                                  VendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                                                  VendLedgEntry.SETRANGE("Vendor No.",BalancingNo);
                                                  VendLedgEntry.FIND('-');
                                                  VendUpdateAmounts(VendLedgEntry,RemainingAmount);
                                                END;
                                            END;
                                            RemainingAmount := RemainingAmount - LineAmount2;
                                            CurrentLineAmount := LineAmount2;
                                            FoundLast := TRUE;
                                          END;
                                        ApplyMethod::OneLineID:
                                          BEGIN
                                            CASE BalancingType OF
                                              BalancingType::Customer:
                                                BEGIN
                                                  CustUpdateAmounts(CustLedgEntry,RemainingAmount);
                                                  FoundLast := (CustLedgEntry.NEXT = 0) OR (RemainingAmount <= 0);
                                                  IF FoundLast AND NOT FoundNegative THEN BEGIN
                                                    CustLedgEntry.SETRANGE(Positive,FALSE);
                                                    FoundLast := NOT CustLedgEntry.FIND('-');
                                                    FoundNegative := TRUE;
                                                  END;
                                                END;
                                              BalancingType::Vendor:
                                                BEGIN
                                                  VendUpdateAmounts(VendLedgEntry,RemainingAmount);
                                                  FoundLast := (VendLedgEntry.NEXT = 0) OR (RemainingAmount <= 0);
                                                  IF FoundLast AND NOT FoundNegative THEN BEGIN
                                                    VendLedgEntry.SETRANGE(Positive,FALSE);
                                                    FoundLast := NOT VendLedgEntry.FIND('-');
                                                    FoundNegative := TRUE;
                                                  END;
                                                END;
                                            END;
                                            RemainingAmount := RemainingAmount - LineAmount2;
                                            CurrentLineAmount := LineAmount2;
                                          END;
                                        ApplyMethod::MoreLinesOneEntry:
                                          BEGIN
                                            CurrentLineAmount := GenJnlLine2.Amount;
                                            LineAmount2 := CurrentLineAmount;

                                            IF GenJnlLine2."Applies-to ID" <> '' THEN
                                              ERROR(Text016);
                                            GenJnlLine2.TESTFIELD("Check Printed",FALSE);
                                            GenJnlLine2.TESTFIELD("Bank Payment Type",GenJnlLine2."Bank Payment Type"::"Computer Check");
                                            IF BankAcc2."Currency Code" <> GenJnlLine2."Currency Code" THEN
                                              ERROR(Text005);
                                            IF GenJnlLine2."Applies-to Doc. No." = '' THEN BEGIN
                                              DocType := Text015;
                                              DocNo := '';
                                              ExtDocNo := '';
                                              DocDate := 0D;
                                              LineAmount := CurrentLineAmount;
                                              LineDiscount := 0;
                                            END ELSE
                                              CASE BalancingType OF
                                                BalancingType::"G/L Account":
                                                  BEGIN
                                                    DocType := FORMAT(GenJnlLine2."Document Type");
                                                    DocNo := GenJnlLine2."Document No.";
                                                    ExtDocNo := GenJnlLine2."External Document No.";
                                                    LineAmount := CurrentLineAmount;
                                                    LineDiscount := 0;
                                                  END;
                                                BalancingType::Customer:
                                                  BEGIN
                                                    CustLedgEntry.RESET;
                                                    CustLedgEntry.SETCURRENTKEY("Document No.");
                                                    CustLedgEntry.SETRANGE("Document Type",GenJnlLine2."Applies-to Doc. Type");
                                                    CustLedgEntry.SETRANGE("Document No.",GenJnlLine2."Applies-to Doc. No.");
                                                    CustLedgEntry.SETRANGE("Customer No.",BalancingNo);
                                                    CustLedgEntry.FIND('-');
                                                    CustUpdateAmounts(CustLedgEntry,CurrentLineAmount);
                                                    LineAmount := CurrentLineAmount;
                                                  END;
                                                BalancingType::Vendor:
                                                  BEGIN
                                                    VendLedgEntry.RESET;
                                                    IF GenJnlLine2."Source Line No." <> 0 THEN
                                                      VendLedgEntry.SETRANGE("Entry No.",GenJnlLine2."Source Line No.")
                                                    ELSE BEGIN
                                                      VendLedgEntry.SETCURRENTKEY("Document No.");
                                                      VendLedgEntry.SETRANGE("Document Type",GenJnlLine2."Applies-to Doc. Type");
                                                      VendLedgEntry.SETRANGE("Document No.",GenJnlLine2."Applies-to Doc. No.");
                                                      VendLedgEntry.SETRANGE("Vendor No.",BalancingNo);
                                                    END;
                                                    VendLedgEntry.FIND('-');
                                                    VendUpdateAmounts(VendLedgEntry,CurrentLineAmount);
                                                    LineAmount := CurrentLineAmount;
                                                  END;
                                                BalancingType::"Bank Account":
                                                  BEGIN
                                                    DocType := FORMAT(GenJnlLine2."Document Type");
                                                    DocNo := GenJnlLine2."Document No.";
                                                    ExtDocNo := GenJnlLine2."External Document No.";
                                                    LineAmount := CurrentLineAmount;
                                                    LineDiscount := 0;
                                                  END;
                                              END;
                                            FoundLast := GenJnlLine2.NEXT = 0;
                                          END;
                                      END;

                                  //  TotalLineAmount := TotalLineAmount + LineAmount2; // PHP Original Code
                                    TotalLineAmount := TotalLineAmount + LineAmount2 - WHTAmount; // PHP Start WHT Computation
                                    TotalLineDiscount := TotalLineDiscount + LineDiscount;
                                  END ELSE BEGIN
                                    IF FoundLast THEN
                                      CurrReport.BREAK;
                                    FoundLast := TRUE;
                                    DocType := Text018;
                                    DocNo := Text010;
                                    ExtDocNo := Text010;
                                    LineAmount := 0;
                                    LineDiscount := 0;
                                  END;
                                END;
                                 }

    { 31  ;3   ;Column  ;NetAmount           ;
               SourceExpr=NetAmount;
               AutoFormatType=1;
               AutoFormatExpr=GenJnlLine."Currency Code" }

    { 4   ;3   ;Column  ;TotalLineDiscountLineDiscount;
               SourceExpr=TotalLineDiscount - LineDiscount;
               AutoFormatType=1;
               AutoFormatExpr=GenJnlLine."Currency Code" }

    { 26  ;3   ;Column  ;TotalLineAmountLineAmount;
               SourceExpr=TotalLineAmount - LineAmount;
               AutoFormatType=1;
               AutoFormatExpr=GenJnlLine."Currency Code" }

    { 32  ;3   ;Column  ;TotalLineAmountLineAmount2;
               SourceExpr=TotalLineAmount - LineAmount2;
               AutoFormatType=1;
               AutoFormatExpr=GenJnlLine."Currency Code" }

    { 113 ;3   ;Column  ;LineAmount          ;
               SourceExpr=LineAmount;
               AutoFormatType=1;
               AutoFormatExpr=GenJnlLine."Currency Code" }

    { 114 ;3   ;Column  ;LineDiscount        ;
               SourceExpr=LineDiscount;
               AutoFormatType=1;
               AutoFormatExpr=GenJnlLine."Currency Code" }

    { 115 ;3   ;Column  ;LineAmountLineDiscount;
               SourceExpr=LineAmount + LineDiscount;
               AutoFormatType=1;
               AutoFormatExpr=GenJnlLine."Currency Code" }

    { 116 ;3   ;Column  ;DocNo               ;
               SourceExpr=DocNo }

    { 13  ;3   ;Column  ;DocDate             ;
               SourceExpr=DocDate }

    { 28  ;3   ;Column  ;CurrencyCode2       ;
               SourceExpr=CurrencyCode2;
               AutoFormatType=1;
               AutoFormatExpr=GenJnlLine."Currency Code" }

    { 29  ;3   ;Column  ;CurrentLineAmount   ;
               SourceExpr=CurrentLineAmount;
               AutoFormatType=1;
               AutoFormatExpr=GenJnlLine."Currency Code" }

    { 34  ;3   ;Column  ;ExtDocNo            ;
               SourceExpr=ExtDocNo }

    { 108 ;3   ;Column  ;LineAmountCaption   ;
               SourceExpr=LineAmountCaptionLbl }

    { 109 ;3   ;Column  ;LineDiscountCaption ;
               SourceExpr=LineDiscountCaptionLbl }

    { 110 ;3   ;Column  ;AmountCaption       ;
               SourceExpr=AmountCaptionLbl }

    { 111 ;3   ;Column  ;DocNoCaption        ;
               SourceExpr=DocNoCaptionLbl }

    { 14  ;3   ;Column  ;DocDateCaption      ;
               SourceExpr=DocDateCaptionLbl }

    { 25  ;3   ;Column  ;CurrencyCodeCaption ;
               SourceExpr=CurrencyCodeCaptionLbl }

    { 33  ;3   ;Column  ;YourDocNoCaption    ;
               SourceExpr=YourDocNoCaptionLbl }

    { 27  ;3   ;Column  ;TransportCaption    ;
               SourceExpr=TransportCaptionLbl }

    { 3931;2   ;DataItem;PrintCheck          ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               MaxIteration=1;
               OnAfterGetRecord=VAR
                                  Decimals@1000 : Decimal;
                                  CheckLedgEntryAmount@1001 : Decimal;
                                BEGIN
                                  IF NOT TestPrint THEN BEGIN
                                    WITH GenJnlLine DO BEGIN
                                      CheckLedgEntry.INIT;
                                      CheckLedgEntry."Bank Account No." := BankAcc2."No.";
                                      CheckLedgEntry."Posting Date" := "Posting Date";
                                      CheckLedgEntry."Document Type" := "Document Type";
                                      CheckLedgEntry."Document No." := UseCheckNo;
                                      CheckLedgEntry.Description := Description;
                                      CheckLedgEntry."Bank Payment Type" := "Bank Payment Type";
                                      CheckLedgEntry."Bal. Account Type" := BalancingType;
                                      CheckLedgEntry."Bal. Account No." := BalancingNo;
                                      // PHP Start
                                      CheckLedgEntry."Bal. Bank Code." := "Customer/Vendor Bank";
                                      CheckLedgEntry."Bal. Bank Account No." := "Bank Account No.";
                                      CheckLedgEntry."Voucher No." := "Voucher No.";
                                      CheckLedgEntry."Recipient Bank Account" := RecipientBankNo;
                                      CheckLedgEntry."Recipient Bank Name" := COPYSTR(CheckToAddr[1], 1, 50);
                                      // PHP End
                                      IF FoundLast THEN BEGIN
                                        IF TotalLineAmount <= 0 THEN
                                          ERROR(
                                            Text020,
                                            UseCheckNo,TotalLineAmount);
                                        CheckLedgEntry."Entry Status" := CheckLedgEntry."Entry Status"::Printed;
                                        CheckLedgEntry.Amount := TotalLineAmount;
                                        CheckLedgEntry."WHT Amount" := WHTAmount; // PHP Start WHT Computation
                                      END ELSE BEGIN
                                        CheckLedgEntry."Entry Status" := CheckLedgEntry."Entry Status"::Voided;
                                        CheckLedgEntry.Amount := 0;
                                      END;
                                      CheckLedgEntry."Check Date" := "Posting Date";
                                      CheckLedgEntry."Check No." := UseCheckNo;
                                      CheckManagement.InsertCheck(CheckLedgEntry,RECORDID);

                                      IF FoundLast THEN BEGIN
                                        IF BankAcc2."Currency Code" <> '' THEN
                                          Currency.GET(BankAcc2."Currency Code")
                                        ELSE
                                          Currency.InitRoundingPrecision;
                                        CheckLedgEntryAmount := CheckLedgEntry.Amount;
                                        Decimals := CheckLedgEntry.Amount - ROUND(CheckLedgEntry.Amount,1,'<');
                                        IF STRLEN(FORMAT(Decimals)) < STRLEN(FORMAT(Currency."Amount Rounding Precision")) THEN
                                          IF Decimals = 0 THEN
                                            CheckAmountText := FORMAT(CheckLedgEntryAmount,0,0) +
                                              COPYSTR(FORMAT(0.01),2,1) +
                                              PADSTR('',STRLEN(FORMAT(Currency."Amount Rounding Precision")) - 2,'0')
                                          ELSE
                                            CheckAmountText := FORMAT(CheckLedgEntryAmount,0,0) +
                                              PADSTR('',STRLEN(FORMAT(Currency."Amount Rounding Precision")) - STRLEN(FORMAT(Decimals)),'0')
                                        ELSE
                                          CheckAmountText := FORMAT(CheckLedgEntryAmount,0,0);
                                          FormatNoText(DescriptionLine,CheckLedgEntry.Amount,BankAcc2."Currency Code");
                                        VoidText := '';
                                      END ELSE BEGIN
                                        CLEAR(CheckAmountText);
                                        CLEAR(DescriptionLine);
                                        TotalText := Text065;
                                        DescriptionLine[1] := Text021;
                                        DescriptionLine[2] := DescriptionLine[1];
                                        VoidText := Text022;
                                      END;
                                    END;
                                  END ELSE
                                    WITH GenJnlLine DO BEGIN
                                      CheckLedgEntry.INIT;
                                      CheckLedgEntry."Bank Account No." := BankAcc2."No.";
                                      CheckLedgEntry."Posting Date" := "Posting Date";
                                      CheckLedgEntry."Document No." := UseCheckNo;
                                      CheckLedgEntry.Description := Text023;
                                      CheckLedgEntry."Bank Payment Type" := "Bank Payment Type"::"Computer Check";
                                      CheckLedgEntry."Entry Status" := CheckLedgEntry."Entry Status"::"Test Print";
                                      CheckLedgEntry."Check Date" := "Posting Date";
                                      CheckLedgEntry."Check No." := UseCheckNo;
                                      // PHP Start
                                      CheckLedgEntry."Bal. Bank Code." := "Customer/Vendor Bank";
                                      CheckLedgEntry."Bal. Bank Account No." := "Bank Account No.";
                                      CheckLedgEntry."Voucher No." := "Voucher No.";
                                      CheckLedgEntry."Recipient Bank Account" := RecipientBankNo;
                                      CheckLedgEntry."Recipient Bank Name" := CheckToAddr[1];
                                      // PHP End
                                      CheckManagement.InsertCheck(CheckLedgEntry,RECORDID);

                                      CheckAmountText := Text024;
                                      DescriptionLine[1] := Text025;
                                      DescriptionLine[2] := DescriptionLine[1];
                                      VoidText := Text022;
                                    END;

                                  ChecksPrinted := ChecksPrinted + 1;
                                  FirstPage := FALSE;
                                END;
                                 }

    { 1   ;3   ;Column  ;CheckAmountText     ;
               SourceExpr=CheckAmountText }

    { 2   ;3   ;Column  ;CheckDateTextControl2;
               SourceExpr=CheckDateText }

    { 5   ;3   ;Column  ;DescriptionLine2    ;
               SourceExpr=DescriptionLine[2] }

    { 6   ;3   ;Column  ;DescriptionLine1    ;
               SourceExpr=DescriptionLine[1] }

    { 7   ;3   ;Column  ;CheckToAddr1Control7;
               SourceExpr=CheckToAddr[1] }

    { 8   ;3   ;Column  ;CheckToAddr2        ;
               SourceExpr=CheckToAddr[2] }

    { 9   ;3   ;Column  ;CheckToAddr4        ;
               SourceExpr=CheckToAddr[4] }

    { 10  ;3   ;Column  ;CheckToAddr3        ;
               SourceExpr=CheckToAddr[3] }

    { 12  ;3   ;Column  ;CheckToAddr5        ;
               SourceExpr=CheckToAddr[5] }

    { 15  ;3   ;Column  ;CompanyAddr4        ;
               SourceExpr=CompanyAddr[4] }

    { 16  ;3   ;Column  ;CompanyAddr8        ;
               SourceExpr=CompanyAddr[8] }

    { 17  ;3   ;Column  ;CompanyAddr7        ;
               SourceExpr=CompanyAddr[7] }

    { 18  ;3   ;Column  ;CompanyAddr6        ;
               SourceExpr=CompanyAddr[6] }

    { 19  ;3   ;Column  ;CompanyAddr5        ;
               SourceExpr=CompanyAddr[5] }

    { 20  ;3   ;Column  ;CompanyAddr3        ;
               SourceExpr=CompanyAddr[3] }

    { 21  ;3   ;Column  ;CheckNoTextControl21;
               SourceExpr=CheckNoText }

    { 22  ;3   ;Column  ;CompanyAddr2        ;
               SourceExpr=CompanyAddr[2] }

    { 23  ;3   ;Column  ;CompanyAddr1        ;
               SourceExpr=CompanyAddr[1] }

    { 30  ;3   ;Column  ;TotalLineAmount     ;
               SourceExpr=TotalLineAmount;
               AutoFormatType=1;
               AutoFormatExpr=GenJnlLine."Currency Code" }

    { 11  ;3   ;Column  ;TotalText           ;
               SourceExpr=TotalText }

    { 3   ;3   ;Column  ;VoidText            ;
               SourceExpr=VoidText }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF BankAcc2."No." <> '' THEN
                     IF BankAcc2.GET(BankAcc2."No.") THEN
                       UseCheckNo := BankAcc2."Last Check No."
                     ELSE BEGIN
                       BankAcc2."No." := '';
                       UseCheckNo := '';
                     END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=BankAccount;
                  CaptionML=ENU=Bank Account;
                  SourceExpr=BankAcc2."No.";
                  TableRelation="Bank Account";
                  OnValidate=BEGIN
                               InputBankAccount;
                             END;
                              }

      { 3   ;2   ;Field     ;
                  Name=LastCheckNo;
                  CaptionML=ENU=Last Check No.;
                  SourceExpr=UseCheckNo }

      { 11  ;2   ;Field     ;
                  Name=OneCheckPerVendorPerDocumentNo;
                  CaptionML=ENU=One Check per Vendor per Document No.;
                  SourceExpr=OneCheckPrVendor;
                  MultiLine=Yes }

      { 5   ;2   ;Field     ;
                  Name=ReprintChecks;
                  CaptionML=ENU=Reprint Checks;
                  SourceExpr=ReprintChecks }

      { 9   ;2   ;Field     ;
                  Name=TestPrinting;
                  CaptionML=ENU=Test Print;
                  SourceExpr=TestPrint }

      { 13  ;2   ;Field     ;
                  CaptionML=ENU=Preprinted Stub;
                  SourceExpr=PreprintedStub }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Preview is not allowed.';
      Text001@1001 : TextConst 'ENU=Last Check No. must be filled in.';
      Text002@1002 : TextConst 'ENU=Filters on %1 and %2 are not allowed.';
      Text003@1003 : TextConst 'ENU=XXXXXXXXXXXXXXXX';
      Text004@1004 : TextConst 'ENU=must be entered.';
      Text005@1005 : TextConst 'ENU=The Bank Account and the General Journal Line must have the same currency.';
      Text006@1006 : TextConst 'ENU=Salesperson';
      Text007@1007 : TextConst 'ENU=Purchaser';
      Text008@1008 : TextConst 'ENU=Both Bank Accounts must have the same currency.';
      Text009@1009 : TextConst 'ENU=Our Contact';
      Text010@1010 : TextConst 'ENU=XXXXXXXXXX';
      Text011@1011 : TextConst 'ENU=XXXX';
      Text012@1012 : TextConst 'ENU=XX.XXXXXXXXXX.XXXX';
      Text013@1013 : TextConst 'ENU=%1 already exists.';
      Text014@1014 : TextConst 'ENU=Check for %1 %2';
      Text015@1015 : TextConst 'ENU=Payment';
      Text016@1016 : TextConst 'ENU=In the Check report, One Check per Vendor and Document No.\must not be activated when Applies-to ID is specified in the journal lines.';
      Text018@1018 : TextConst 'ENU=XXX';
      Text019@1019 : TextConst 'ENU=Total';
      Text020@1020 : TextConst 'ENU=The total amount of check %1 is %2. The amount must be positive.';
      Text021@1021 : TextConst 'ENU=VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID';
      Text022@1022 : TextConst 'ENU=NON-NEGOTIABLE';
      Text023@1023 : TextConst 'ENU=Test print';
      Text024@1024 : TextConst 'ENU=XXXX.XX';
      Text025@1025 : TextConst 'ENU=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      Text026@1026 : TextConst 'ENU=ZERO';
      Text027@1027 : TextConst 'ENU=HUNDRED';
      Text028@1028 : TextConst 'ENU=AND';
      Text029@1029 : TextConst 'ENU=%1 results in a written number that is too long.';
      Text030@1030 : TextConst 'ENU=" is already applied to %1 %2 for customer %3."';
      Text031@1031 : TextConst 'ENU=" is already applied to %1 %2 for vendor %3."';
      Text032@1032 : TextConst 'ENU=ONE';
      Text033@1033 : TextConst 'ENU=TWO';
      Text034@1034 : TextConst 'ENU=THREE';
      Text035@1035 : TextConst 'ENU=FOUR';
      Text036@1036 : TextConst 'ENU=FIVE';
      Text037@1037 : TextConst 'ENU=SIX';
      Text038@1038 : TextConst 'ENU=SEVEN';
      Text039@1039 : TextConst 'ENU=EIGHT';
      Text040@1040 : TextConst 'ENU=NINE';
      Text041@1041 : TextConst 'ENU=TEN';
      Text042@1042 : TextConst 'ENU=ELEVEN';
      Text043@1043 : TextConst 'ENU=TWELVE';
      Text044@1044 : TextConst 'ENU=THIRTEEN';
      Text045@1045 : TextConst 'ENU=FOURTEEN';
      Text046@1046 : TextConst 'ENU=FIFTEEN';
      Text047@1047 : TextConst 'ENU=SIXTEEN';
      Text048@1048 : TextConst 'ENU=SEVENTEEN';
      Text049@1049 : TextConst 'ENU=EIGHTEEN';
      Text050@1050 : TextConst 'ENU=NINETEEN';
      Text051@1051 : TextConst 'ENU=TWENTY';
      Text052@1052 : TextConst 'ENU=THIRTY';
      Text053@1053 : TextConst 'ENU=FORTY';
      Text054@1054 : TextConst 'ENU=FIFTY';
      Text055@1055 : TextConst 'ENU=SIXTY';
      Text056@1056 : TextConst 'ENU=SEVENTY';
      Text057@1057 : TextConst 'ENU=EIGHTY';
      Text058@1058 : TextConst 'ENU=NINETY';
      Text059@1059 : TextConst 'ENU=THOUSAND';
      Text060@1060 : TextConst 'ENU=MILLION';
      Text061@1061 : TextConst 'ENU=BILLION';
      CompanyInfo@1062 : Record 79;
      SalesPurchPerson@1063 : Record 13;
      GenJnlLine2@1064 : Record 81;
      GenJnlLine3@1065 : Record 81;
      Cust@1066 : Record 18;
      CustLedgEntry@1067 : Record 21;
      Vend@1068 : Record 23;
      VendLedgEntry@1069 : Record 25;
      BankAcc@1070 : Record 270;
      BankAcc2@1071 : Record 270;
      CheckLedgEntry@1072 : Record 272;
      Currency@1073 : Record 4;
      CustBankAccounts@1125 : Record 287;
      FormatAddr@1074 : Codeunit 365;
      CheckManagement@1075 : Codeunit 367;
      DimMgt@1123 : Codeunit 408;
      CompanyAddr@1076 : ARRAY [8] OF Text[50];
      CheckToAddr@1077 : ARRAY [8] OF Text;
      RecipientBankNo@1122 : Code[10];
      OnesText@1078 : ARRAY [20] OF Text[30];
      TensText@1079 : ARRAY [10] OF Text[30];
      ExponentText@1080 : ARRAY [5] OF Text[30];
      BalancingType@1081 : 'G/L Account,Customer,Vendor,Bank Account';
      BalancingNo@1082 : Code[20];
      ContactText@1083 : Text[30];
      CheckNoText@1084 : Text[30];
      CheckDateText@1085 : Text[30];
      CheckAmountText@1086 : Text[30];
      DescriptionLine@1087 : ARRAY [2] OF Text[80];
      DocType@1088 : Text[30];
      DocNo@1089 : Text[30];
      ExtDocNo@1119 : Text[35];
      VoidText@1090 : Text[30];
      LineAmount@1091 : Decimal;
      LineDiscount@1092 : Decimal;
      TotalLineAmount@1093 : Decimal;
      TotalLineDiscount@1094 : Decimal;
      RemainingAmount@1095 : Decimal;
      CurrentLineAmount@1096 : Decimal;
      UseCheckNo@1097 : Code[20];
      FoundLast@1098 : Boolean;
      ReprintChecks@1099 : Boolean;
      TestPrint@1100 : Boolean;
      FirstPage@1101 : Boolean;
      OneCheckPrVendor@1102 : Boolean;
      FoundNegative@1103 : Boolean;
      ApplyMethod@1104 : 'Payment,OneLineOneEntry,OneLineID,MoreLinesOneEntry';
      ChecksPrinted@1105 : Integer;
      HighestLineNo@1106 : Integer;
      PreprintedStub@1107 : Boolean;
      TotalText@1108 : Text[10];
      DocDate@1109 : Date;
      i@1110 : Integer;
      Text062@1111 : TextConst 'ENU=G/L Account,Customer,Vendor,Bank Account';
      CurrencyCode2@1112 : Code[10];
      NetAmount@1114 : Text[30];
      CurrencyExchangeRate@1115 : Record 330;
      LineAmount2@1116 : Decimal;
      Text063@1117 : TextConst 'ENU=Net Amount %1';
      GLSetup@1118 : Record 98;
      Text064@1113 : TextConst 'ENU=%1 must not be %2 for %3 %4.';
      Text065@1120 : TextConst 'ENU=Subtotal';
      Text066@1124 : TextConst 'ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5';
      CheckNoTextCaptionLbl@6359 : TextConst 'ENU=Check No.';
      LineAmountCaptionLbl@5261 : TextConst 'ENU=Net Amount';
      LineDiscountCaptionLbl@3244 : TextConst 'ENU=Discount';
      AmountCaptionLbl@7794 : TextConst 'ENU=Amount';
      DocNoCaptionLbl@2117 : TextConst 'ENU=Document No.';
      DocDateCaptionLbl@6175 : TextConst 'ENU=Document Date';
      CurrencyCodeCaptionLbl@2455 : TextConst 'ENU=Currency Code';
      YourDocNoCaptionLbl@4226 : TextConst 'ENU=Your Doc. No.';
      TransportCaptionLbl@2440 : TextConst 'ENU=Transport';
      CheckName2@1017 : Text;
      VendorBankAccount@1121 : Record 288;
      WHTManagement@1127 : Codeunit 50500;
      CheckAmount@1126 : Decimal;
      WHTAmount@1128 : Decimal;

    PROCEDURE FormatNoText@1(VAR NoText@1000 : ARRAY [2] OF Text[80];No@1001 : Decimal;CurrencyCode@1002 : Code[10]);
    VAR
      PrintExponent@1003 : Boolean;
      Ones@1004 : Integer;
      Tens@1005 : Integer;
      Hundreds@1006 : Integer;
      Exponent@1007 : Integer;
      NoTextIndex@1008 : Integer;
      DecimalPosition@1010 : Decimal;
    BEGIN
      CLEAR(NoText);
      NoTextIndex := 1;
      // NoText[1] := '****'; // PHP Original
      NoText[1] := ''; // PHP Start
      GLSetup.GET;

      IF No < 1 THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,Text026)
      ELSE
        FOR Exponent := 4 DOWNTO 1 DO BEGIN
          PrintExponent := FALSE;
          Ones := No DIV POWER(1000,Exponent - 1);
          Hundreds := Ones DIV 100;
          Tens := (Ones MOD 100) DIV 10;
          Ones := Ones MOD 10;
          IF Hundreds > 0 THEN BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Hundreds]);
            AddToNoText(NoText,NoTextIndex,PrintExponent,Text027);
          END;
          IF Tens >= 2 THEN BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[Tens]);
            IF Ones > 0 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones]);
          END ELSE
            IF (Tens * 10 + Ones) > 0 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Tens * 10 + Ones]);
          IF PrintExponent AND (Exponent > 1) THEN
            AddToNoText(NoText,NoTextIndex,PrintExponent,ExponentText[Exponent]);
          No := No - (Hundreds * 100 + Tens * 10 + Ones) * POWER(1000,Exponent - 1);
        END;

      AddToNoText(NoText,NoTextIndex,PrintExponent,Text028);
      DecimalPosition := GetAmtDecimalPosition;
      //AddToNoText(NoText,NoTextIndex,PrintExponent,(FORMAT(No * DecimalPosition) + '/' + FORMAT(DecimalPosition) + ' ONLY ****')); // PHP Original Code
      AddToNoText(NoText,NoTextIndex,PrintExponent,(FORMAT(No * DecimalPosition) + '/' + FORMAT(DecimalPosition) + ' ONLY')); // PHP Start

      IF CurrencyCode <> '' THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,CurrencyCode);
    END;

    LOCAL PROCEDURE AddToNoText@2(VAR NoText@1000 : ARRAY [2] OF Text[80];VAR NoTextIndex@1001 : Integer;VAR PrintExponent@1002 : Boolean;AddText@1003 : Text[30]);
    BEGIN
      PrintExponent := TRUE;

      WHILE STRLEN(NoText[NoTextIndex] + ' ' + AddText) > MAXSTRLEN(NoText[1]) DO BEGIN
        NoTextIndex := NoTextIndex + 1;
        IF NoTextIndex > ARRAYLEN(NoText) THEN
          ERROR(Text029,AddText);
      END;

      NoText[NoTextIndex] := DELCHR(NoText[NoTextIndex] + ' ' + AddText,'<');
    END;

    LOCAL PROCEDURE CustUpdateAmounts@3(VAR CustLedgEntry2@1000 : Record 21;RemainingAmount2@1001 : Decimal);
    BEGIN
      IF (ApplyMethod = ApplyMethod::OneLineOneEntry) OR
         (ApplyMethod = ApplyMethod::MoreLinesOneEntry)
      THEN BEGIN
        GenJnlLine3.RESET;
        GenJnlLine3.SETCURRENTKEY(
          "Account Type","Account No.","Applies-to Doc. Type","Applies-to Doc. No.");
        GenJnlLine3.SETRANGE("Account Type",GenJnlLine3."Account Type"::Customer);
        GenJnlLine3.SETRANGE("Account No.",CustLedgEntry2."Customer No.");
        GenJnlLine3.SETRANGE("Applies-to Doc. Type",CustLedgEntry2."Document Type");
        GenJnlLine3.SETRANGE("Applies-to Doc. No.",CustLedgEntry2."Document No.");
        IF ApplyMethod = ApplyMethod::OneLineOneEntry THEN
          GenJnlLine3.SETFILTER("Line No.",'<>%1',GenJnlLine."Line No.")
        ELSE
          GenJnlLine3.SETFILTER("Line No.",'<>%1',GenJnlLine2."Line No.");
        IF CustLedgEntry2."Document Type" <> CustLedgEntry2."Document Type"::" " THEN
          IF GenJnlLine3.FIND('-') THEN
            GenJnlLine3.FIELDERROR(
              "Applies-to Doc. No.",
              STRSUBSTNO(
                Text030,
                CustLedgEntry2."Document Type",CustLedgEntry2."Document No.",
                CustLedgEntry2."Customer No."));
      END;

      DocType := FORMAT(CustLedgEntry2."Document Type");
      DocNo := CustLedgEntry2."Document No.";
      ExtDocNo := CustLedgEntry2."External Document No.";
      DocDate := CustLedgEntry2."Posting Date";
      CurrencyCode2 := CustLedgEntry2."Currency Code";

      CustLedgEntry2.CALCFIELDS("Remaining Amount");

      LineAmount :=
        -ABSMin(
          CustLedgEntry2."Remaining Amount" -
          CustLedgEntry2."Remaining Pmt. Disc. Possible" -
          CustLedgEntry2."Accepted Payment Tolerance",
          CustLedgEntry2."Amount to Apply");
      LineAmount2 :=
        ROUND(
          ExchangeAmt(CustLedgEntry2."Posting Date",GenJnlLine."Currency Code",CurrencyCode2,LineAmount),
          Currency."Amount Rounding Precision");

      IF ((CustLedgEntry2."Document Type" IN [CustLedgEntry2."Document Type"::Invoice,
                                              CustLedgEntry2."Document Type"::"Credit Memo"]) AND
          (CustLedgEntry2."Remaining Pmt. Disc. Possible" <> 0) AND
          (CustLedgEntry2."Posting Date" <= CustLedgEntry2."Pmt. Discount Date")) OR
         CustLedgEntry2."Accepted Pmt. Disc. Tolerance"
      THEN BEGIN
        LineDiscount := -CustLedgEntry2."Remaining Pmt. Disc. Possible";
        IF CustLedgEntry2."Accepted Payment Tolerance" <> 0 THEN
          LineDiscount := LineDiscount - CustLedgEntry2."Accepted Payment Tolerance";
      END ELSE BEGIN
        IF RemainingAmount2 >=
           ROUND(
             -ExchangeAmt(CustLedgEntry2."Posting Date",GenJnlLine."Currency Code",CurrencyCode2,
               CustLedgEntry2."Amount to Apply"),Currency."Amount Rounding Precision")
        THEN
          LineAmount2 :=
            ROUND(
              -ExchangeAmt(CustLedgEntry2."Posting Date",GenJnlLine."Currency Code",CurrencyCode2,
                CustLedgEntry2."Amount to Apply"),Currency."Amount Rounding Precision")
        ELSE BEGIN
          LineAmount2 := RemainingAmount2;
          LineAmount :=
            ROUND(
              ExchangeAmt(CustLedgEntry2."Posting Date",CurrencyCode2,GenJnlLine."Currency Code",
                LineAmount2),Currency."Amount Rounding Precision");
        END;
        LineDiscount := 0;
      END;
    END;

    LOCAL PROCEDURE VendUpdateAmounts@4(VAR VendLedgEntry2@1000 : Record 25;RemainingAmount2@1001 : Decimal);
    BEGIN
      IF (ApplyMethod = ApplyMethod::OneLineOneEntry) OR
         (ApplyMethod = ApplyMethod::MoreLinesOneEntry)
      THEN BEGIN
        GenJnlLine3.RESET;
        GenJnlLine3.SETCURRENTKEY(
          "Account Type","Account No.","Applies-to Doc. Type","Applies-to Doc. No.");
        GenJnlLine3.SETRANGE("Account Type",GenJnlLine3."Account Type"::Vendor);
        GenJnlLine3.SETRANGE("Account No.",VendLedgEntry2."Vendor No.");
        GenJnlLine3.SETRANGE("Applies-to Doc. Type",VendLedgEntry2."Document Type");
        GenJnlLine3.SETRANGE("Applies-to Doc. No.",VendLedgEntry2."Document No.");
        IF ApplyMethod = ApplyMethod::OneLineOneEntry THEN
          GenJnlLine3.SETFILTER("Line No.",'<>%1',GenJnlLine."Line No.")
        ELSE BEGIN
          GenJnlLine3.SETFILTER("Line No.",'<>%1',GenJnlLine2."Line No.");
         IF VendLedgEntry2."Document Type" <> VendLedgEntry2."Document Type"::" " THEN
           IF GenJnlLine3.FIND('-') THEN
             GenJnlLine3.FIELDERROR(
               "Applies-to Doc. No.",
               STRSUBSTNO(
                 Text031,
                 VendLedgEntry2."Document Type",VendLedgEntry2."Document No.",
                 VendLedgEntry2."Vendor No."));
        END;
      END;

      DocType := FORMAT(VendLedgEntry2."Document Type");
      DocNo := VendLedgEntry2."Document No.";
      ExtDocNo := VendLedgEntry2."External Document No.";
      DocDate := VendLedgEntry2."Posting Date";
      CurrencyCode2 := VendLedgEntry2."Currency Code";
      VendLedgEntry2.CALCFIELDS("Remaining Amount");

      LineAmount :=
        -ABSMin(
          VendLedgEntry2."Remaining Amount" -
          VendLedgEntry2."Remaining Pmt. Disc. Possible" -
          VendLedgEntry2."Accepted Payment Tolerance",
          VendLedgEntry2."Amount to Apply");

      LineAmount2 :=
        ROUND(
          ExchangeAmt(VendLedgEntry2."Posting Date",GenJnlLine."Currency Code",CurrencyCode2,LineAmount),
          Currency."Amount Rounding Precision");

      IF ((VendLedgEntry2."Document Type" IN [VendLedgEntry2."Document Type"::Invoice,
                                              VendLedgEntry2."Document Type"::"Credit Memo"]) AND
          (VendLedgEntry2."Remaining Pmt. Disc. Possible" <> 0) AND
          (GenJnlLine."Posting Date" <= VendLedgEntry2."Pmt. Discount Date")) OR
         VendLedgEntry2."Accepted Pmt. Disc. Tolerance"
      THEN BEGIN
        LineDiscount := -VendLedgEntry2."Remaining Pmt. Disc. Possible";
        IF VendLedgEntry2."Accepted Payment Tolerance" <> 0 THEN
          LineDiscount := LineDiscount - VendLedgEntry2."Accepted Payment Tolerance";
      END ELSE BEGIN
        IF ABS(RemainingAmount2) >=
           ABS(ROUND(
               ExchangeAmt(VendLedgEntry2."Posting Date",GenJnlLine."Currency Code",CurrencyCode2,
                 VendLedgEntry2."Amount to Apply"),Currency."Amount Rounding Precision"))
        THEN BEGIN
          LineAmount2 :=
            ROUND(
              -(ExchangeAmt(VendLedgEntry2."Posting Date",GenJnlLine."Currency Code",CurrencyCode2,
                  VendLedgEntry2."Amount to Apply")),Currency."Amount Rounding Precision");
          LineAmount :=
            ROUND(
              ExchangeAmt(VendLedgEntry2."Posting Date",CurrencyCode2,GenJnlLine."Currency Code",
                LineAmount2),Currency."Amount Rounding Precision");
        END ELSE BEGIN
          LineAmount2 := RemainingAmount2;
          LineAmount :=
            ROUND(
              ExchangeAmt(VendLedgEntry2."Posting Date",CurrencyCode2,GenJnlLine."Currency Code",
                LineAmount2),Currency."Amount Rounding Precision");
        END;
        LineDiscount := 0;
      END;
    END;

    PROCEDURE InitTextVariable@5();
    BEGIN
      OnesText[1] := Text032;
      OnesText[2] := Text033;
      OnesText[3] := Text034;
      OnesText[4] := Text035;
      OnesText[5] := Text036;
      OnesText[6] := Text037;
      OnesText[7] := Text038;
      OnesText[8] := Text039;
      OnesText[9] := Text040;
      OnesText[10] := Text041;
      OnesText[11] := Text042;
      OnesText[12] := Text043;
      OnesText[13] := Text044;
      OnesText[14] := Text045;
      OnesText[15] := Text046;
      OnesText[16] := Text047;
      OnesText[17] := Text048;
      OnesText[18] := Text049;
      OnesText[19] := Text050;

      TensText[1] := '';
      TensText[2] := Text051;
      TensText[3] := Text052;
      TensText[4] := Text053;
      TensText[5] := Text054;
      TensText[6] := Text055;
      TensText[7] := Text056;
      TensText[8] := Text057;
      TensText[9] := Text058;

      ExponentText[1] := '';
      ExponentText[2] := Text059;
      ExponentText[3] := Text060;
      ExponentText[4] := Text061;
    END;

    PROCEDURE InitializeRequest@6(BankAcc@1000 : Code[20];LastCheckNo@1001 : Code[20];NewOneCheckPrVend@1002 : Boolean;NewReprintChecks@1003 : Boolean;NewTestPrint@1004 : Boolean;NewPreprintedStub@1005 : Boolean);
    BEGIN
      IF BankAcc <> '' THEN
        IF BankAcc2.GET(BankAcc) THEN BEGIN
          UseCheckNo := LastCheckNo;
          OneCheckPrVendor := NewOneCheckPrVend;
          ReprintChecks := NewReprintChecks;
          TestPrint := NewTestPrint;
          PreprintedStub := NewPreprintedStub;
        END;
    END;

    LOCAL PROCEDURE ExchangeAmt@7(PostingDate@1000 : Date;CurrencyCode@1001 : Code[10];CurrencyCode2@1003 : Code[10];Amount@1002 : Decimal) Amount2 : Decimal;
    BEGIN
      IF (CurrencyCode <> '') AND (CurrencyCode2 = '') THEN
        Amount2 :=
          CurrencyExchangeRate.ExchangeAmtLCYToFCY(
            PostingDate,CurrencyCode,Amount,CurrencyExchangeRate.ExchangeRate(PostingDate,CurrencyCode))
      ELSE
        IF (CurrencyCode = '') AND (CurrencyCode2 <> '') THEN
          Amount2 :=
            CurrencyExchangeRate.ExchangeAmtFCYToLCY(
              PostingDate,CurrencyCode2,Amount,CurrencyExchangeRate.ExchangeRate(PostingDate,CurrencyCode2))
        ELSE
          IF (CurrencyCode <> '') AND (CurrencyCode2 <> '') AND (CurrencyCode <> CurrencyCode2) THEN
            Amount2 := CurrencyExchangeRate.ExchangeAmtFCYToFCY(PostingDate,CurrencyCode2,CurrencyCode,Amount)
          ELSE
            Amount2 := Amount;
    END;

    LOCAL PROCEDURE ABSMin@21(Decimal1@1000 : Decimal;Decimal2@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(Decimal1) < ABS(Decimal2) THEN
        EXIT(Decimal1);
      EXIT(Decimal2);
    END;

    PROCEDURE InputBankAccount@8();
    BEGIN
      IF BankAcc2."No." <> '' THEN BEGIN
        BankAcc2.GET(BankAcc2."No.");
        BankAcc2.TESTFIELD("Last Check No.");
        UseCheckNo := BankAcc2."Last Check No.";
      END;
    END;

    LOCAL PROCEDURE GetAmtDecimalPosition@22() : Decimal;
    VAR
      Currency@1000 : Record 4;
    BEGIN
      IF GenJnlLine."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(GenJnlLine."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
      EXIT(1 / Currency."Amount Rounding Precision");
    END;

    LOCAL PROCEDURE ThrowGenJnlLineError@11(GenJournalLine@1000 : Record 81;ErrorTemplate@1001 : Text;ErrorText@1002 : Text);
    BEGIN
      WITH GenJournalLine DO
        IF "Line No." <> 0 THEN
          ERROR(
            ErrorTemplate,
            TABLECAPTION,"Journal Template Name","Journal Batch Name","Line No.",
            ErrorText);
      ERROR(ErrorText);
    END;

    LOCAL PROCEDURE CalcCheck@18(VAR GenJnlLine@1000 : Record 81) : Decimal;
    VAR
      WHTSetup@1001 : Record 50503;
      GenJnlLine1@1002 : Record 81;
    BEGIN
      // PHP Start
      WHTAmount := 0;
      CheckAmount := 0;
      CheckAmount := CheckAmount + GenJnlLine.Amount;
      GenJnlLine1.COPY(GenJnlLine);

      IF GenJnlLine1."Interest Amount" <> 0 THEN
        GenJnlLine1.VALIDATE(Amount,GenJnlLine1.Amount - GenJnlLine1."Interest Amount");
      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor THEN
        IF WHTSetup.GET(GenJnlLine."WHT Business Posting Group",GenJnlLine."WHT Product Posting Group") THEN
          IF WHTSetup."Realized WHT Type" = WHTSetup."Realized WHT Type"::Payment THEN // change the condition from not equal to Earliest to Payment.
            WHTAmount := WHTAmount + WHTManagement.WHTAmountJournal(GenJnlLine1,FALSE); // Causing a divide by 0 when realized WHT type = Invoice or payment.
      //    ELSE
      //      WHTAmount := WHTAmount + ABS(WHTManagement.CalcVendExtraWHTForEarliest(GenJnlLine1));
      CheckAmount := CheckAmount - WHTAmount;

      IF CheckAmount < 0 THEN
        CheckAmount := 0;
      // PHP End
    END;

    BEGIN
    {
      Change Log:
      ** Additional Variable WithName2. Check if Name 2 field has value then display the name 2 in check
      ** Add new dataset CheckAmount = Amount_GenJnlLine2 to compute the wht

      !! Documentation Report 1401 Check
        6:03 PM Tuesday, March 11, 2025
          Remove the asterisk on the start and end of amount in words
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns:cl="http://schemas.microsoft.com/sqlserver/reporting/2010/01/componentdefinition" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>ac1bb36c-7b28-449e-aa5f-8da3f87729d0</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <Fields>
        <Field Name="JournalTempName_GenJnlLine">
          <DataField>JournalTempName_GenJnlLine</DataField>
        </Field>
        <Field Name="JournalBatchName_GenJnlLine">
          <DataField>JournalBatchName_GenJnlLine</DataField>
        </Field>
        <Field Name="LineNo_GenJnlLine">
          <DataField>LineNo_GenJnlLine</DataField>
        </Field>
        <Field Name="Amount_GenJnlLine">
          <DataField>Amount_GenJnlLine</DataField>
        </Field>
        <Field Name="Amount_GenJnlLineFormat">
          <DataField>Amount_GenJnlLineFormat</DataField>
        </Field>
        <Field Name="Amount_GenJnlLine2">
          <DataField>Amount_GenJnlLine2</DataField>
        </Field>
        <Field Name="Amount_GenJnlLine2Format">
          <DataField>Amount_GenJnlLine2Format</DataField>
        </Field>
        <Field Name="DocNo_GenJnlLine">
          <DataField>DocNo_GenJnlLine</DataField>
        </Field>
        <Field Name="ExtDocNo_GenJnlLine">
          <DataField>ExtDocNo_GenJnlLine</DataField>
        </Field>
        <Field Name="VoucherNo_GenJnlLine">
          <DataField>VoucherNo_GenJnlLine</DataField>
        </Field>
        <Field Name="DocDate_GenJnlLine">
          <DataField>DocDate_GenJnlLine</DataField>
        </Field>
        <Field Name="CheckToAddr1">
          <DataField>CheckToAddr1</DataField>
        </Field>
        <Field Name="CheckName2">
          <DataField>CheckName2</DataField>
        </Field>
        <Field Name="CheckDateText">
          <DataField>CheckDateText</DataField>
        </Field>
        <Field Name="CheckNoText">
          <DataField>CheckNoText</DataField>
        </Field>
        <Field Name="FirstPage">
          <DataField>FirstPage</DataField>
        </Field>
        <Field Name="PreprintedStub">
          <DataField>PreprintedStub</DataField>
        </Field>
        <Field Name="CheckNoTextCaption">
          <DataField>CheckNoTextCaption</DataField>
        </Field>
        <Field Name="NetAmount">
          <DataField>NetAmount</DataField>
        </Field>
        <Field Name="TotalLineDiscountLineDiscount">
          <DataField>TotalLineDiscountLineDiscount</DataField>
        </Field>
        <Field Name="TotalLineDiscountLineDiscountFormat">
          <DataField>TotalLineDiscountLineDiscountFormat</DataField>
        </Field>
        <Field Name="TotalLineAmountLineAmount">
          <DataField>TotalLineAmountLineAmount</DataField>
        </Field>
        <Field Name="TotalLineAmountLineAmountFormat">
          <DataField>TotalLineAmountLineAmountFormat</DataField>
        </Field>
        <Field Name="TotalLineAmountLineAmount2">
          <DataField>TotalLineAmountLineAmount2</DataField>
        </Field>
        <Field Name="TotalLineAmountLineAmount2Format">
          <DataField>TotalLineAmountLineAmount2Format</DataField>
        </Field>
        <Field Name="LineAmount">
          <DataField>LineAmount</DataField>
        </Field>
        <Field Name="LineAmountFormat">
          <DataField>LineAmountFormat</DataField>
        </Field>
        <Field Name="LineDiscount">
          <DataField>LineDiscount</DataField>
        </Field>
        <Field Name="LineDiscountFormat">
          <DataField>LineDiscountFormat</DataField>
        </Field>
        <Field Name="LineAmountLineDiscount">
          <DataField>LineAmountLineDiscount</DataField>
        </Field>
        <Field Name="LineAmountLineDiscountFormat">
          <DataField>LineAmountLineDiscountFormat</DataField>
        </Field>
        <Field Name="DocNo">
          <DataField>DocNo</DataField>
        </Field>
        <Field Name="DocDate">
          <DataField>DocDate</DataField>
        </Field>
        <Field Name="CurrencyCode2">
          <DataField>CurrencyCode2</DataField>
        </Field>
        <Field Name="CurrentLineAmount">
          <DataField>CurrentLineAmount</DataField>
        </Field>
        <Field Name="CurrentLineAmountFormat">
          <DataField>CurrentLineAmountFormat</DataField>
        </Field>
        <Field Name="ExtDocNo">
          <DataField>ExtDocNo</DataField>
        </Field>
        <Field Name="LineAmountCaption">
          <DataField>LineAmountCaption</DataField>
        </Field>
        <Field Name="LineDiscountCaption">
          <DataField>LineDiscountCaption</DataField>
        </Field>
        <Field Name="AmountCaption">
          <DataField>AmountCaption</DataField>
        </Field>
        <Field Name="DocNoCaption">
          <DataField>DocNoCaption</DataField>
        </Field>
        <Field Name="DocDateCaption">
          <DataField>DocDateCaption</DataField>
        </Field>
        <Field Name="CurrencyCodeCaption">
          <DataField>CurrencyCodeCaption</DataField>
        </Field>
        <Field Name="YourDocNoCaption">
          <DataField>YourDocNoCaption</DataField>
        </Field>
        <Field Name="TransportCaption">
          <DataField>TransportCaption</DataField>
        </Field>
        <Field Name="CheckAmountText">
          <DataField>CheckAmountText</DataField>
        </Field>
        <Field Name="CheckDateTextControl2">
          <DataField>CheckDateTextControl2</DataField>
        </Field>
        <Field Name="DescriptionLine2">
          <DataField>DescriptionLine2</DataField>
        </Field>
        <Field Name="DescriptionLine1">
          <DataField>DescriptionLine1</DataField>
        </Field>
        <Field Name="CheckToAddr1Control7">
          <DataField>CheckToAddr1Control7</DataField>
        </Field>
        <Field Name="CheckToAddr2">
          <DataField>CheckToAddr2</DataField>
        </Field>
        <Field Name="CheckToAddr4">
          <DataField>CheckToAddr4</DataField>
        </Field>
        <Field Name="CheckToAddr3">
          <DataField>CheckToAddr3</DataField>
        </Field>
        <Field Name="CheckToAddr5">
          <DataField>CheckToAddr5</DataField>
        </Field>
        <Field Name="CompanyAddr4">
          <DataField>CompanyAddr4</DataField>
        </Field>
        <Field Name="CompanyAddr8">
          <DataField>CompanyAddr8</DataField>
        </Field>
        <Field Name="CompanyAddr7">
          <DataField>CompanyAddr7</DataField>
        </Field>
        <Field Name="CompanyAddr6">
          <DataField>CompanyAddr6</DataField>
        </Field>
        <Field Name="CompanyAddr5">
          <DataField>CompanyAddr5</DataField>
        </Field>
        <Field Name="CompanyAddr3">
          <DataField>CompanyAddr3</DataField>
        </Field>
        <Field Name="CheckNoTextControl21">
          <DataField>CheckNoTextControl21</DataField>
        </Field>
        <Field Name="CompanyAddr2">
          <DataField>CompanyAddr2</DataField>
        </Field>
        <Field Name="CompanyAddr1">
          <DataField>CompanyAddr1</DataField>
        </Field>
        <Field Name="TotalLineAmount">
          <DataField>TotalLineAmount</DataField>
        </Field>
        <Field Name="TotalLineAmountFormat">
          <DataField>TotalLineAmountFormat</DataField>
        </Field>
        <Field Name="TotalText">
          <DataField>TotalText</DataField>
        </Field>
        <Field Name="VoidText">
          <DataField>VoidText</DataField>
        </Field>
      </Fields>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
  <ReportSections>
    <ReportSection>
      <Body>
        <ReportItems>
          <Tablix Name="list1">
            <TablixBody>
              <TablixColumns>
                <TablixColumn>
                  <Width>8.06938in</Width>
                </TablixColumn>
              </TablixColumns>
              <TablixRows>
                <TablixRow>
                  <Height>2.39651in</Height>
                  <TablixCells>
                    <TablixCell>
                      <CellContents>
                        <Rectangle Name="list1_Contents">
                          <ReportItems>
                            <Tablix Name="table2">
                              <TablixBody>
                                <TablixColumns>
                                  <TablixColumn>
                                    <Width>0.5205cm</Width>
                                  </TablixColumn>
                                  <TablixColumn>
                                    <Width>0.5205cm</Width>
                                  </TablixColumn>
                                  <TablixColumn>
                                    <Width>0.5205cm</Width>
                                  </TablixColumn>
                                </TablixColumns>
                                <TablixRows>
                                  <TablixRow>
                                    <Height>0.81211cm</Height>
                                    <TablixCells>
                                      <TablixCell>
                                        <CellContents>
                                          <Textbox Name="CompAddr">
                                            <KeepTogether>true</KeepTogether>
                                            <Paragraphs>
                                              <Paragraph>
                                                <TextRuns>
                                                  <TextRun>
                                                    <Value EvaluationMode="Auto" />
                                                    <Style>
                                                      <FontSize>7pt</FontSize>
                                                      <Color>Red</Color>
                                                    </Style>
                                                  </TextRun>
                                                </TextRuns>
                                                <Style />
                                              </Paragraph>
                                            </Paragraphs>
                                            <ZIndex>2</ZIndex>
                                            <Visibility>
                                              <Hidden>=Code.SetData(Last(Fields!CompanyAddr1.Value) + Chr(177) +
Last(Fields!CompanyAddr2.Value) + Chr(177) +
Last(Fields!CompanyAddr3.Value) + Chr(177) +
Last(Fields!CompanyAddr4.Value) + Chr(177) +
Last(Fields!CompanyAddr5.Value) + Chr(177) +
Last(Fields!CompanyAddr6.Value) + Chr(177) +
Last(Fields!CompanyAddr7.Value) + Chr(177) +
Last(Fields!CompanyAddr8.Value), 1)</Hidden>
                                            </Visibility>
                                            <Style>
                                              <PaddingLeft>2pt</PaddingLeft>
                                              <PaddingRight>2pt</PaddingRight>
                                              <PaddingTop>2pt</PaddingTop>
                                              <PaddingBottom>2pt</PaddingBottom>
                                            </Style>
                                          </Textbox>
                                        </CellContents>
                                      </TablixCell>
                                      <TablixCell>
                                        <CellContents>
                                          <Textbox Name="CheckToAddr6">
                                            <KeepTogether>true</KeepTogether>
                                            <Paragraphs>
                                              <Paragraph>
                                                <TextRuns>
                                                  <TextRun>
                                                    <Value EvaluationMode="Auto" />
                                                    <Style>
                                                      <FontSize>7pt</FontSize>
                                                      <Color>Red</Color>
                                                    </Style>
                                                  </TextRun>
                                                </TextRuns>
                                                <Style />
                                              </Paragraph>
                                            </Paragraphs>
                                            <ZIndex>1</ZIndex>
                                            <Visibility>
                                              <Hidden>=Code.SetData(Last(Fields!DescriptionLine1.Value) + Chr(177) +
Last(Fields!DescriptionLine2.Value) + Chr(177) +
Last(Fields!CheckToAddr1.Value) + Chr(177) +
Last(Fields!CheckToAddr2.Value) + Chr(177) +
Last(Fields!CheckToAddr3.Value) + Chr(177) +
Last(Fields!CheckToAddr4.Value) + Chr(177) +
Last(Fields!CheckToAddr5.Value), 2)</Hidden>
                                            </Visibility>
                                            <Style>
                                              <PaddingLeft>2pt</PaddingLeft>
                                              <PaddingRight>2pt</PaddingRight>
                                              <PaddingTop>2pt</PaddingTop>
                                              <PaddingBottom>2pt</PaddingBottom>
                                            </Style>
                                          </Textbox>
                                        </CellContents>
                                      </TablixCell>
                                      <TablixCell>
                                        <CellContents>
                                          <Textbox Name="TotalInfo">
                                            <CanGrow>true</CanGrow>
                                            <KeepTogether>true</KeepTogether>
                                            <Paragraphs>
                                              <Paragraph>
                                                <TextRuns>
                                                  <TextRun>
                                                    <Value EvaluationMode="Auto" />
                                                    <Style>
                                                      <FontSize>7pt</FontSize>
                                                      <Color>Red</Color>
                                                    </Style>
                                                  </TextRun>
                                                </TextRuns>
                                                <Style />
                                              </Paragraph>
                                            </Paragraphs>
                                            <Visibility>
                                              <Hidden>=Code.SetData(CStr(last(Fields!TotalText.Value)) + Chr(177) +
CStr(Last(Fields!TotalLineAmount.Value)) + Chr(177) +
CStr(Last(Fields!CheckNoText.Value)) + Chr(177) +
CStr(Last(Fields!CheckDateText.Value)) + Chr(177) +
CStr(Last(Fields!CheckAmountText.Value)) + Chr(177) +
CStr(Last(Fields!VoidText.Value)), 3)</Hidden>
                                            </Visibility>
                                            <Style>
                                              <PaddingLeft>2pt</PaddingLeft>
                                              <PaddingRight>2pt</PaddingRight>
                                              <PaddingTop>2pt</PaddingTop>
                                              <PaddingBottom>2pt</PaddingBottom>
                                            </Style>
                                          </Textbox>
                                        </CellContents>
                                      </TablixCell>
                                    </TablixCells>
                                  </TablixRow>
                                </TablixRows>
                              </TablixBody>
                              <TablixColumnHierarchy>
                                <TablixMembers>
                                  <TablixMember />
                                  <TablixMember />
                                  <TablixMember />
                                </TablixMembers>
                              </TablixColumnHierarchy>
                              <TablixRowHierarchy>
                                <TablixMembers>
                                  <TablixMember>
                                    <KeepWithGroup>After</KeepWithGroup>
                                    <KeepTogether>true</KeepTogether>
                                  </TablixMember>
                                </TablixMembers>
                              </TablixRowHierarchy>
                              <Height>0.81211cm</Height>
                              <Width>1.5615cm</Width>
                              <Style />
                            </Tablix>
                            <Textbox Name="Textbox82">
                              <CanGrow>true</CanGrow>
                              <KeepTogether>true</KeepTogether>
                              <Paragraphs>
                                <Paragraph>
                                  <TextRuns>
                                    <TextRun>
                                      <Value EvaluationMode="Auto">=Last(Fields!CheckToAddr1.Value, "DataSet_Result")</Value>
                                      <Style>
                                        <FontFamily>Times New Roman</FontFamily>
                                      </Style>
                                    </TextRun>
                                  </TextRuns>
                                  <Style />
                                </Paragraph>
                              </Paragraphs>
                              <rd:DefaultName>Textbox82</rd:DefaultName>
                              <Top>0.45493in</Top>
                              <Left>1.2125in</Left>
                              <Height>0.46771cm</Height>
                              <Width>11.39001cm</Width>
                              <ZIndex>1</ZIndex>
                              <Visibility>
                                <Hidden>=iif(Last(Fields!CheckToAddr2.Value, "DataSet_Result")="",True,False)</Hidden>
                              </Visibility>
                              <Style>
                                <Border>
                                  <Style>None</Style>
                                </Border>
                                <PaddingLeft>2pt</PaddingLeft>
                                <PaddingRight>2pt</PaddingRight>
                                <PaddingTop>2pt</PaddingTop>
                                <PaddingBottom>2pt</PaddingBottom>
                              </Style>
                            </Textbox>
                            <Textbox Name="Textbox83">
                              <CanGrow>true</CanGrow>
                              <KeepTogether>true</KeepTogether>
                              <Paragraphs>
                                <Paragraph>
                                  <TextRuns>
                                    <TextRun>
                                      <Value EvaluationMode="Auto">=Last(Fields!DescriptionLine1.Value, "DataSet_Result") + " " + Last(Fields!DescriptionLine2.Value, "DataSet_Result")</Value>
                                      <Style>
                                        <FontFamily>Times New Roman</FontFamily>
                                      </Style>
                                    </TextRun>
                                  </TextRuns>
                                  <Style />
                                </Paragraph>
                              </Paragraphs>
                              <rd:DefaultName>Textbox82</rd:DefaultName>
                              <Top>0.933in</Top>
                              <Left>1.0875in</Left>
                              <Height>0.46771cm</Height>
                              <Width>15.24301cm</Width>
                              <ZIndex>2</ZIndex>
                              <Style>
                                <Border>
                                  <Style>None</Style>
                                </Border>
                                <PaddingLeft>2pt</PaddingLeft>
                                <PaddingRight>2pt</PaddingRight>
                                <PaddingTop>2pt</PaddingTop>
                                <PaddingBottom>2pt</PaddingBottom>
                              </Style>
                            </Textbox>
                            <Textbox Name="Textbox84">
                              <CanGrow>true</CanGrow>
                              <KeepTogether>true</KeepTogether>
                              <Paragraphs>
                                <Paragraph>
                                  <TextRuns>
                                    <TextRun>
                                      <Value EvaluationMode="Auto">=First(Fields!CheckDateText.Value, "DataSet_Result")</Value>
                                      <Style>
                                        <FontFamily>Times New Roman</FontFamily>
                                      </Style>
                                    </TextRun>
                                  </TextRuns>
                                  <Style />
                                </Paragraph>
                              </Paragraphs>
                              <rd:DefaultName>Textbox84</rd:DefaultName>
                              <Top>0.38973in</Top>
                              <Left>6.075in</Left>
                              <Height>0.46771cm</Height>
                              <Width>3.87233cm</Width>
                              <ZIndex>3</ZIndex>
                              <Style>
                                <Border>
                                  <Style>None</Style>
                                </Border>
                                <PaddingLeft>2pt</PaddingLeft>
                                <PaddingRight>2pt</PaddingRight>
                                <PaddingTop>2pt</PaddingTop>
                                <PaddingBottom>2pt</PaddingBottom>
                              </Style>
                            </Textbox>
                            <Textbox Name="Textbox85">
                              <CanGrow>true</CanGrow>
                              <KeepTogether>true</KeepTogether>
                              <Paragraphs>
                                <Paragraph>
                                  <TextRuns>
                                    <TextRun>
                                      <Value EvaluationMode="Auto">=Formatnumber(First(Fields!Amount_GenJnlLine2.Value, "DataSet_Result"),2)</Value>
                                      <Style>
                                        <FontFamily>Times New Roman</FontFamily>
                                      </Style>
                                    </TextRun>
                                  </TextRuns>
                                  <Style />
                                </Paragraph>
                              </Paragraphs>
                              <rd:DefaultName>Textbox84</rd:DefaultName>
                              <Top>0.65442in</Top>
                              <Left>6.075in</Left>
                              <Height>0.46771cm</Height>
                              <Width>3.23733cm</Width>
                              <ZIndex>4</ZIndex>
                              <Style>
                                <Border>
                                  <Style>None</Style>
                                </Border>
                                <PaddingLeft>2pt</PaddingLeft>
                                <PaddingRight>2pt</PaddingRight>
                                <PaddingTop>2pt</PaddingTop>
                                <PaddingBottom>2pt</PaddingBottom>
                              </Style>
                            </Textbox>
                            <Textbox Name="Textbox86">
                              <CanGrow>true</CanGrow>
                              <KeepTogether>true</KeepTogether>
                              <Paragraphs>
                                <Paragraph>
                                  <TextRuns>
                                    <TextRun>
                                      <Value EvaluationMode="Auto">="CV#:"&amp;First(Fields!VoucherNo_GenJnlLine.Value, "DataSet_Result")</Value>
                                      <Style>
                                        <FontFamily>Times New Roman</FontFamily>
                                      </Style>
                                    </TextRun>
                                  </TextRuns>
                                  <Style />
                                </Paragraph>
                              </Paragraphs>
                              <rd:DefaultName>Textbox82</rd:DefaultName>
                              <Top>2.04987in</Top>
                              <Left>1.0875in</Left>
                              <Height>0.46771cm</Height>
                              <Width>15.24301cm</Width>
                              <ZIndex>5</ZIndex>
                              <Style>
                                <Border>
                                  <Style>None</Style>
                                </Border>
                                <PaddingLeft>2pt</PaddingLeft>
                                <PaddingRight>2pt</PaddingRight>
                                <PaddingTop>2pt</PaddingTop>
                                <PaddingBottom>2pt</PaddingBottom>
                              </Style>
                            </Textbox>
                            <Textbox Name="Textbox87">
                              <CanGrow>true</CanGrow>
                              <KeepTogether>true</KeepTogether>
                              <Paragraphs>
                                <Paragraph>
                                  <TextRuns>
                                    <TextRun>
                                      <Value EvaluationMode="Auto">=iif(Last(Fields!CheckToAddr2.Value, "DataSet_Result")="", 
Last(Fields!CheckToAddr1.Value, "DataSet_Result"),
Last(Fields!CheckToAddr2.Value, "DataSet_Result"))</Value>
                                      <Style>
                                        <FontFamily>Times New Roman</FontFamily>
                                      </Style>
                                    </TextRun>
                                  </TextRuns>
                                  <Style />
                                </Paragraph>
                              </Paragraphs>
                              <rd:DefaultName>Textbox82</rd:DefaultName>
                              <Top>0.65296in</Top>
                              <Left>1.2125in</Left>
                              <Height>0.46771cm</Height>
                              <Width>11.39001cm</Width>
                              <ZIndex>6</ZIndex>
                              <Style>
                                <Border>
                                  <Style>None</Style>
                                </Border>
                                <PaddingLeft>2pt</PaddingLeft>
                                <PaddingRight>2pt</PaddingRight>
                                <PaddingTop>2pt</PaddingTop>
                                <PaddingBottom>2pt</PaddingBottom>
                              </Style>
                            </Textbox>
                          </ReportItems>
                          <KeepTogether>true</KeepTogether>
                          <Style />
                        </Rectangle>
                      </CellContents>
                    </TablixCell>
                  </TablixCells>
                </TablixRow>
              </TablixRows>
            </TablixBody>
            <TablixColumnHierarchy>
              <TablixMembers>
                <TablixMember />
              </TablixMembers>
            </TablixColumnHierarchy>
            <TablixRowHierarchy>
              <TablixMembers>
                <TablixMember>
                  <Group Name="list1_Details_Group">
                    <GroupExpressions>
                      <GroupExpression>=Fields!CheckNoText.Value</GroupExpression>
                    </GroupExpressions>
                    <PageBreak>
                      <BreakLocation>Between</BreakLocation>
                    </PageBreak>
                  </Group>
                  <SortExpressions>
                    <SortExpression>
                      <Value>=Fields!CheckNoText.Value</Value>
                    </SortExpression>
                  </SortExpressions>
                  <DataElementOutput>Output</DataElementOutput>
                  <KeepTogether>true</KeepTogether>
                </TablixMember>
              </TablixMembers>
            </TablixRowHierarchy>
            <KeepTogether>true</KeepTogether>
            <PageBreak>
              <BreakLocation>End</BreakLocation>
            </PageBreak>
            <Filters>
              <Filter>
                <FilterExpression>=Fields!CheckNoText.Value</FilterExpression>
                <Operator>GreaterThan</Operator>
                <FilterValues>
                  <FilterValue>=""</FilterValue>
                </FilterValues>
              </Filter>
            </Filters>
            <Height>2.39651in</Height>
            <Width>8.06938in</Width>
            <Style />
          </Tablix>
        </ReportItems>
        <Height>2.39651in</Height>
        <Style />
      </Body>
      <Width>8.06938in</Width>
      <Page>
        <PageHeight>11.69in</PageHeight>
        <PageWidth>8.27in</PageWidth>
        <InteractiveHeight>11in</InteractiveHeight>
        <InteractiveWidth>8.5in</InteractiveWidth>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <Code>Public Function BlankZero(ByVal Value As Decimal)
    if Value = 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankPos(ByVal Value As Decimal)
    if Value &gt; 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankZeroAndPos(ByVal Value As Decimal)
    if Value &gt;= 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankNeg(ByVal Value As Decimal)
    if Value &lt; 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankNegAndZero(ByVal Value As Decimal)
    if Value &lt;= 0 then
        Return ""
    end if
    Return Value
End Function

Shared Data1 as Object
Shared Data2 as Object
Shared Data3 as Object

Public Function GetData(Num as Integer, Group as integer) as Object
if Group = 1 then
   Return Cstr(Choose(Num, Split(Cstr(Data1),Chr(177))))
End If

if Group = 2 then
   Return Cstr(Choose(Num, Split(Cstr(Data2),Chr(177))))
End If

if Group = 3 then
   Return Cstr(Choose(Num, Split(Cstr(Data3),Chr(177))))
End If
End Function

Public Function SetData(NewData as Object,Group as integer)
  If Group = 1 and NewData &gt; "" Then
      Data1 = NewData
  End If

  If Group = 2 and NewData &gt; "" Then
      Data2 = NewData
  End If

  If Group = 3 and NewData &gt; "" Then
      Data3 = NewData
  End If
  Return True
End Function</Code>
  <Language>=User!Language</Language>
  <ConsumeContainerWhitespace>true</ConsumeContainerWhitespace>
  <rd:ReportUnitType>Inch</rd:ReportUnitType>
  <rd:ReportID>65fac6f4-eda5-4b03-9009-3a3cdbf9e25b</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

