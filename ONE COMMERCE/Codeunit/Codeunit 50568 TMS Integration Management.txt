OBJECT Codeunit 50568 TMS Integration Management
{
  OBJECT-PROPERTIES
  {
    Date=08/16/18;
    Time=[ 1:19:54 PM];
    Modified=Yes;
    Version List=NAVOC1.00.02.47;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInfo@1003 : Record 79;
      ConfigProgressBar@1004 : Codeunit 8615;
      ADOConnection@1002 : DotNet "'MySql.Data, Version=8.0.20.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d'.MySql.Data.MySqlClient.MySqlConnection";
      ADOCommand@1001 : DotNet "'MySql.Data, Version=8.0.20.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d'.MySql.Data.MySqlClient.MySqlCommand";
      ADODataReader@1000 : DotNet "'MySql.Data, Version=8.0.20.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d'.MySql.Data.MySqlClient.MySqlDataReader";
      Err001@1013 : TextConst 'ENU=You have an error in your SQL syntax.';
      Text001@1007 : TextConst 'ENU=%1 records has been inserted in Records Management System.';
      Text002@1006 : TextConst 'ENU=A successful MySQL connection was made with the parameters defined for this connection.';
      ConnectionStrTxt@1005 : TextConst 'ENU="server=%1;uid=%2;pwd=%3;DATABASE=%4;"';
      ADOFields@1008 : DotNet "'ADODB, Version=7.0.3300.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.ADODB.Fields";
      ProgressBarTxt@1009 : TextConst 'ENU=Synching Task Monitoring Records.';
      ProgressBar2Txt@1010 : TextConst 'ENU=Updating date of extension.';
      SQLCmdSelectExtentionTxt@1011 : TextConst 'ENU="SELECT * FROM extension WHERE task_details_id = %1 AND approve_date <> '''' ORDER BY id DESC LIMIT 1;"';
      SQLUpdateTMSDetailsTxt@1012 : TextConst 'ENU="UPDATE task_details SET %1 WHERE id = %2;"';
      SQLInsertTMSExtensionsTxt@1014 : TextConst 'ENU="INSERT INTO extension (task_details_id,task_deadline,request_date,approve_date,approve_type)VALUES(%1,%2,%3,%4,%5);"';

    PROCEDURE ConnectToMySQL@2();
    BEGIN
      CLEARLASTERROR;
      IF NOT DoConnectToMySQL THEN
        ERROR('Error: %1 %2', GETLASTERRORCODE, GETLASTERRORTEXT);
    END;

    [TryFunction]
    LOCAL PROCEDURE DoConnectToMySQL@3();
    VAR
      DatabaseName@1001 : Text;
      TableConnection@1000 : TableConnectionType;
      ADOComm@1002 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'._Connection";
    BEGIN
      // 'server=172.16.1.202;uid=tms_admin;pwd=Password1.;DATABASE=records_management'
      CompanyInfo.GET;
      ADOConnection := ADOConnection.MySqlConnection;
      ADOCommand := ADOCommand.MySqlCommand;

      ADOConnection.ConnectionString(STRSUBSTNO(ConnectionStrTxt, CompanyInfo."TMS Server", CompanyInfo."TMS User ID",
        CompanyInfo."TMS Password", CompanyInfo."TMS Database"));

      ADOConnection.Open;

      ADOCommand.Connection := ADOConnection;
    END;

    PROCEDURE TestDatabaseConnection@14();
    BEGIN
      CompanyInfo.GET;
      CompanyInfo.TESTFIELD("TMS Server");
      CompanyInfo.TESTFIELD("TMS User ID");
      CompanyInfo.TESTFIELD("TMS Password");
      CompanyInfo.TESTFIELD("TMS Database");
      CLEARLASTERROR;

      IF DoConnectToMySQL THEN
        MESSAGE(Text002)
      ELSE
        ERROR('Error: %1 %2', GETLASTERRORCODE, GETLASTERRORTEXT);
    END;

    PROCEDURE ManualSyncEmployeesToTMSEmployee@92(VAR Employee@1002 : Record 5200);
    VAR
      CMsg001@1001 : TextConst 'ENU=Do you want to sync this records in Task Monitoring System?';
      Msg001@1003 : TextConst 'ENU=Record already exists.';
      Succ001@1000 : TextConst 'ENU=Record has been successfully synched.';
      Succ002@1004 : TextConst 'ENU=%1 of %2 records has been successfully synched.';
      TotalRecInserted@1005 : Integer;
      TotalRec@1006 : Integer;
    BEGIN
      IF NOT CONFIRM(CMsg001,FALSE) THEN
        EXIT;

      IF Employee.COUNT > 1 THEN BEGIN
        TotalRec := Employee.COUNT;
        TotalRecInserted := 0;
        IF Employee.FINDSET THEN
          REPEAT
            IF NOT CheckExistenceOfEmailAddress(Employee."Company E-Mail") THEN
              IF InsertEmployeeRecord(Employee) THEN
                TotalRecInserted += 1;
          UNTIL Employee.NEXT = 0;
        IF TotalRecInserted <> 0 THEN
          MESSAGE(Succ002, TotalRecInserted, TotalRec);
      END ELSE BEGIN
        Employee.TESTFIELD("Company E-Mail");
        IF CheckExistenceOfEmailAddress(Employee."Company E-Mail") THEN
          ERROR(Msg001);

        IF InsertEmployeeRecord(Employee) THEN
          MESSAGE(Succ001);
      END;
    END;

    LOCAL PROCEDURE GetEmployeeLastInsertedId@38() : Integer;
    VAR
      SQLCmdTxt@1000 : TextConst 'ENU="SELECT id FROM employee ORDER BY id DESC LIMIT 1;"';
    BEGIN
      ConnectToMySQL;
      ADOCommand.CommandText := STRSUBSTNO(SQLCmdTxt);
      ADODataReader := ADOCommand.ExecuteReader;
      WHILE ADODataReader.Read DO
        IF ADODataReader.GetInt64(0) >= 1 THEN
          EXIT(ADODataReader.GetInt64(0));
      ADOConnection.Close;
      EXIT(1);
    END;

    PROCEDURE PerformInitialSync@4();
    VAR
      SQLCmdTxt@1000 : TextConst 'ENU="SELECT task_details.*, email FROM task_details INNER JOIN employee on employee.id = task_details.employee_id;"';
      SQLCmdTMSTotalRows@1001 : TextConst 'ENU="SELECT COUNT(id) FROM task_details;"';
      TMSTask@1003 : Record 50559;
      TMSTotalRows@1002 : Integer;
      DetailsTxt@1007 : Text;
      InStr@1006 : InStream;
      OutStr@1005 : OutStream;
    BEGIN
      ConnectToMySQL;
      ADOCommand.CommandText := STRSUBSTNO(SQLCmdTMSTotalRows);
      ADODataReader := ADOCommand.ExecuteReader;
      WHILE ADODataReader.Read DO
        IF ADODataReader.GetInt64(0) >= 1 THEN
          TMSTotalRows := ADODataReader.GetInt64(0);
      ADODataReader.Close;

      IF TMSTotalRows >= 1 THEN BEGIN
       ConfigProgressBar.Init(TMSTotalRows, 1, ProgressBarTxt);
       ADOCommand.CommandText := STRSUBSTNO(SQLCmdTxt);
       ADODataReader := ADOCommand.ExecuteReader;
       WHILE ADODataReader.Read DO BEGIN
         CLEAR(TMSTask);
         WITH TMSTask DO BEGIN
           id := ADODataReader.Item('id');
           series := ADODataReader.Item('series');
           task_title := COPYSTR(ADODataReader.Item('task_title'), 1,250);
           start_date := DT2DATE(ADODataReader.Item('date_start'));
           deadline := DT2DATE(ADODataReader.Item('deadline'));
           DetailsTxt := ADODataReader.Item('remarks');
           remarks.CREATEOUTSTREAM(OutStr);
           OutStr.WRITE(DetailsTxt);
           priority := ADODataReader.Item('priority');
           status := ADODataReader.GetInt16(ADODataReader.GetOrdinal('status'))-1;
           IF NOT ISNULL(ADODataReader.Item('accepted')) THEN
             accepted := ADODataReader.GetBoolean(ADODataReader.GetOrdinal('accepted'));
           IF NOT ISNULL(ADODataReader.Item('accept_date')) THEN
             accept_date := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('accept_date'));
           IF NOT ISNULL(ADODataReader.Item('complete_date')) THEN
             complete_date := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('complete_date'));
           IF NOT ISNULL(ADODataReader.Item('incomplete')) THEN
             incomplete := ADODataReader.GetBoolean(ADODataReader.GetOrdinal('incomplete'));
           IF NOT ISNULL(ADODataReader.Item('incomplete_date')) THEN
            incomplete_date := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('incomplete_date'));
           IF NOT ISNULL(ADODataReader.Item('nte')) THEN
             "Notice To Explain" := ADODataReader.GetBoolean(ADODataReader.GetOrdinal('nte'));
           IF NOT ISNULL(ADODataReader.Item('nte_date')) THEN
             "Notice To Explain Date" := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('nte_date'));
           IF NOT ISNULL(ADODataReader.Item('nte_serve')) THEN
             "Notice To Explain Serve" := ADODataReader.GetBoolean(ADODataReader.GetOrdinal('nte_serve'));
           IF NOT ISNULL(ADODataReader.Item('nte_serve_date')) THEN
             "Notice To Explain Serve Date" := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('nte_serve_date'));
           "Employee Id" := ADODataReader.Item('employee_id');
           "Users Id" := ADODataReader.Item('users_id');
           "Employee Email Address" := ADODataReader.Item('email');
           INSERT;
           ConfigProgressBar.Update('Inserting records...');
         END;
       END;
       ADODataReader.Close;
       ConfigProgressBar.Close;
      END;

      TMSTask.RESET;
      IF TMSTask.COUNT >= 1 THEN BEGIN
        ConfigProgressBar.Init(TMSTask.COUNT, 1, ProgressBar2Txt);
        IF TMSTask.FINDSET THEN
          REPEAT
            ADOCommand.CommandText := STRSUBSTNO(SQLCmdSelectExtentionTxt, TMSTask.id);
            ADODataReader := ADOCommand.ExecuteReader;
            WHILE ADODataReader.Read DO BEGIN
              IF NOT ISNULL(ADODataReader.Item('request_date')) THEN BEGIN
                TMSTask."Date of Extension" := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('request_date'));
                TMSTask.MODIFY;
              END;
            END;
            ADODataReader.Close;
            ConfigProgressBar.Update('Updating records...');
          UNTIL TMSTask.NEXT = 0;
          ConfigProgressBar.Close;
      END;
      ADOConnection.Close;
    END;

    PROCEDURE AutoSync@5();
    VAR
      ProgressBarTxt@1004 : TextConst 'ENU=Synching Task Monitoring Records.';
      SQLCmForSyncTxt@1000 : TextConst 'ENU="SELECT * FROM task_details WHERE id  = %1;"';
      SQLCmdNewRecTxt@1008 : TextConst 'ENU="SELECT task_details.*, email FROM task_details INNER JOIN employee on employee.id = task_details.employee_id WHERE task_details.id > %1;"';
      SQLCmdTMSTotalRows@1001 : TextConst 'ENU="SELECT COUNT(id) FROM task_details;"';
      TMSTask@1003 : Record 50559;
      TMSTaskLasRec@1009 : Record 50559;
      PendingTMSTask@1010 : Record 50559;
      TMSTotalRows@1002 : Integer;
      DetailsTxt@1007 : Text;
      InStr@1006 : InStream;
      OutStr@1005 : OutStream;
    BEGIN
      ConnectToMySQL;

      // Insert Records
      IF GetTMSTaskLastRecordID <> 0 THEN BEGIN
       ADOCommand.CommandText := STRSUBSTNO(SQLCmdNewRecTxt, GetTMSTaskLastRecordID);
       ADODataReader := ADOCommand.ExecuteReader;
       WHILE ADODataReader.Read DO BEGIN
         CLEAR(TMSTask);
         WITH TMSTask DO BEGIN
           id := ADODataReader.Item('id');
           series := ADODataReader.Item('series');
           task_title := COPYSTR(ADODataReader.Item('task_title'), 1,250);
           start_date := DT2DATE(ADODataReader.Item('date_start'));
           deadline := DT2DATE(ADODataReader.Item('deadline'));
           DetailsTxt := ADODataReader.Item('remarks');
           remarks.CREATEOUTSTREAM(OutStr);
           OutStr.WRITE(DetailsTxt);
           priority := ADODataReader.Item('priority');
           status := ADODataReader.GetInt16(ADODataReader.GetOrdinal('status'))-1;
           IF NOT ISNULL(ADODataReader.Item('accepted')) THEN
             accepted := ADODataReader.GetBoolean(ADODataReader.GetOrdinal('accepted'));
           IF NOT ISNULL(ADODataReader.Item('accept_date')) THEN
             accept_date := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('accept_date'));
           IF NOT ISNULL(ADODataReader.Item('complete_date')) THEN
             complete_date := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('complete_date'));
           IF NOT ISNULL(ADODataReader.Item('incomplete')) THEN
             incomplete := ADODataReader.GetBoolean(ADODataReader.GetOrdinal('incomplete'));
           IF NOT ISNULL(ADODataReader.Item('incomplete_date')) THEN
            incomplete_date := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('incomplete_date'));
           IF NOT ISNULL(ADODataReader.Item('nte')) THEN
             "Notice To Explain" := ADODataReader.GetBoolean(ADODataReader.GetOrdinal('nte'));
           IF NOT ISNULL(ADODataReader.Item('nte_date')) THEN
             "Notice To Explain Date" := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('nte_date'));
           IF NOT ISNULL(ADODataReader.Item('nte_serve')) THEN
             "Notice To Explain Serve" := ADODataReader.GetBoolean(ADODataReader.GetOrdinal('nte_serve'));
           IF NOT ISNULL(ADODataReader.Item('nte_serve_date')) THEN
             "Notice To Explain Serve Date" := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('nte_serve_date'));
           IF NOT ISNULL(ADODataReader.Item('deleted_at')) THEN
             "Deleted At" := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('deleted_at'));
           "Employee Id" := ADODataReader.Item('employee_id');
           "Users Id" := ADODataReader.Item('users_id');
           "Employee Email Address" := ADODataReader.Item('email');
           INSERT;
         END;
       END;
       ADODataReader.Close;
      END;

      // Update Records
      // PendingTMSTask.SETFILTER(Status, '<>%1', PendingTMSTask.Status::Done);
      IF PendingTMSTask.FINDSET THEN
        REPEAT
         ADOCommand.CommandText := STRSUBSTNO(SQLCmForSyncTxt, PendingTMSTask.id);
         ADODataReader := ADOCommand.ExecuteReader;
         WHILE ADODataReader.Read DO BEGIN
           PendingTMSTask.series := ADODataReader.Item('series');
           PendingTMSTask.start_date := DT2DATE(ADODataReader.Item('date_start'));
           PendingTMSTask.deadline := DT2DATE(ADODataReader.Item('deadline'));
           PendingTMSTask.priority := ADODataReader.Item('priority');
           PendingTMSTask.status := ADODataReader.GetInt16(ADODataReader.GetOrdinal('status'))-1;

           IF NOT ISNULL(ADODataReader.Item('accepted')) THEN
             PendingTMSTask.accepted := ADODataReader.GetBoolean(ADODataReader.GetOrdinal('accepted'))
           ELSE
             CLEAR(PendingTMSTask.accepted);

           IF NOT ISNULL(ADODataReader.Item('accept_date')) THEN
             PendingTMSTask.accept_date := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('accept_date'))
           ELSE
             CLEAR(PendingTMSTask.accept_date);

           IF NOT ISNULL(ADODataReader.Item('complete_date')) THEN
             PendingTMSTask.complete_date := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('complete_date'))
           ELSE
             CLEAR(PendingTMSTask.complete_date);

           IF NOT ISNULL(ADODataReader.Item('incomplete')) THEN
             PendingTMSTask.incomplete := ADODataReader.GetBoolean(ADODataReader.GetOrdinal('incomplete'))
           ELSE
             CLEAR(PendingTMSTask.incomplete);

           IF NOT ISNULL(ADODataReader.Item('incomplete_date')) THEN
            PendingTMSTask.incomplete_date := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('incomplete_date'))
           ELSE
             CLEAR(PendingTMSTask.incomplete_date);

           IF NOT ISNULL(ADODataReader.Item('nte')) THEN
             PendingTMSTask."Notice To Explain" := ADODataReader.GetBoolean(ADODataReader.GetOrdinal('nte'))
           ELSE
             CLEAR(PendingTMSTask."Notice To Explain");

           IF NOT ISNULL(ADODataReader.Item('nte_date')) THEN
             PendingTMSTask."Notice To Explain Date" := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('nte_date'))
           ELSE
             CLEAR(PendingTMSTask."Notice To Explain Date");

           IF NOT ISNULL(ADODataReader.Item('nte_serve')) THEN
             PendingTMSTask."Notice To Explain Serve" := ADODataReader.GetBoolean(ADODataReader.GetOrdinal('nte_serve'))
           ELSE
             CLEAR(PendingTMSTask."Notice To Explain Serve");

           IF NOT ISNULL(ADODataReader.Item('nte_serve_date')) THEN
             PendingTMSTask."Notice To Explain Serve Date" := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('nte_serve_date'))
           ELSE
             CLEAR(PendingTMSTask."Notice To Explain Date");

           IF NOT ISNULL(ADODataReader.Item('deleted_at')) THEN
             PendingTMSTask."Deleted At" := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('deleted_at'))
           ELSE
             CLEAR(PendingTMSTask."Deleted At");
           PendingTMSTask.MODIFY;
         END;
         ADODataReader.Close;

         // Updating the Date of Extension
         ADOCommand.CommandText := STRSUBSTNO(SQLCmdSelectExtentionTxt, PendingTMSTask.id);
         ADODataReader := ADOCommand.ExecuteReader;
         IF ADODataReader.HasRows THEN BEGIN
           WHILE ADODataReader.Read DO BEGIN
             IF NOT ISNULL(ADODataReader.Item('request_date')) THEN BEGIN
               PendingTMSTask."Date of Extension" := ADODataReader.GetDateTime(ADODataReader.GetOrdinal('request_date'));
               PendingTMSTask.MODIFY;
             END;
           END;
          END ELSE BEGIN
            IF PendingTMSTask."Date of Extension" <> 0DT THEN BEGIN
              CLEAR(PendingTMSTask."Date of Extension");
              PendingTMSTask.MODIFY;
            END;
          END;
         ADODataReader.Close;
        UNTIL PendingTMSTask.NEXT = 0;
      ADOConnection.Close;
    END;

    LOCAL PROCEDURE InsertEmployeeRecord@10(VAR Employee@1000 : Record 5200) : Boolean;
    VAR
      JPSIntegration@1006 : Codeunit 50552;
      LastInsertedID@1004 : BigInteger;
      TMSEmpID@1007 : Integer;
      StringPos@1003 : Integer;
      Count@1002 : Integer;
      ExecStatus@1008 : Integer;
      UserName@1001 : Text;
      InsertTMSEmployeeSQLCmd@1005 : TextConst 'ENU=INSERT INTO `employee`
    (`employee_jsp_id`,`id_code`,`first_name`,`middle_initial`,`last_name`,`suffix`,`department`,`position`,`email`,`formal_name`,`full_name`,`active`) 
    VALUES(''%1'',''%2'',''%3'',''%4'',''%5'',''%6'',''%7'',''%8'',''%9'',''%10'',''%11'',''%12'')';
    BEGIN
        TMSEmpID := JPSIntegration.GetJPSEmployeeID(Employee."No.");
        IF TMSEmpID = 0 THEN
          TMSEmpID := GetEmployeeLastInsertedId;
        Employee.CALCFIELDS(Department);
        // Insert Command
        ConnectToMySQL;
        ADOCommand.CommandText := STRSUBSTNO(InsertTMSEmployeeSQLCmd,
          TMSEmpID, Employee."No.", Employee."First Name", Employee."Middle Initial", Employee."Last Name",
          'N/A', Employee.Department, Employee."Job Title", Employee."Company E-Mail", Employee.FormalName, Employee.FormalName,1);
        ExecStatus := ADOCommand.ExecuteNonQuery;
        ADOConnection.Close;
        IF ExecStatus = 1 THEN
          EXIT(TRUE);
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckExistenceOfEmailAddress@1(EmailAddress@1001 : Text) : Boolean;
    VAR
      Result@1000 : Integer;
      SelectEmployeeCmd@1002 : TextConst 'ENU="SELECT COUNT(*) AS count FROM employee WHERE email = ''%1'';"';
    BEGIN
      IF EmailAddress = '' THEN
        EXIT(FALSE);
      ConnectToMySQL;
      ADOCommand.CommandText := STRSUBSTNO(SelectEmployeeCmd,EmailAddress);
      ADODataReader := ADOCommand.ExecuteReader;
      WHILE ADODataReader.Read DO BEGIN
        IF ADODataReader.GetInt64(0) >= 1 THEN
          EXIT(TRUE);
      END;

      ADODataReader.Close;
      ADOConnection.Close;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetTMSTaskLastRecordID@11() : Integer;
    VAR
      TMSTaskDetails@1000 : Record 50559;
    BEGIN
      IF NOT TMSTaskDetails.FINDLAST THEN
        EXIT(0);
      EXIT(TMSTaskDetails.id);
    END;

    PROCEDURE UpdateTMSTaskDetails@6(VAR TMSTaskDetails@1000 : Record 50559;VAR xRecTMSTaskDetails@1004 : Record 50559);
    VAR
      StatusToInt@1005 : Integer;
      DueDate@1002 : Text;
      CompletedDate@1001 : Text;
      ColUpdate@1003 : Text;
    BEGIN
      WITH TMSTaskDetails DO BEGIN
        ConnectToMySQL;
        StatusToInt := status + 1;

        IF TMSTaskDetails.complete_date = 0DT THEN
          CompletedDate := 'NULL'
        ELSE
          CompletedDate := SetMySQLDateTimeFormat(TMSTaskDetails.complete_date);
        ColUpdate += STRSUBSTNO('%1=%2',FIELDNAME(complete_date), CompletedDate);
        ColUpdate += ',' + STRSUBSTNO('%1=%2',FIELDNAME(deadline),SetMySQLDateTimeFormat(CREATEDATETIME(TMSTaskDetails.deadline,0T)));
        ColUpdate += ',' + STRSUBSTNO('%1=%2', FIELDNAME(status), StatusToInt);

        ADOCommand.CommandText := STRSUBSTNO(SQLUpdateTMSDetailsTxt, ColUpdate, TMSTaskDetails.id);
        ADOCommand.ExecuteNonQuery;

        IF ("Date of Extension" <> 0DT) AND ("Date of Extension" <> xRecTMSTaskDetails."Date of Extension") THEN BEGIN
          ADOCommand.CommandText := STRSUBSTNO(SQLInsertTMSExtensionsTxt, id,
          SetMySQLDateTimeFormat(CREATEDATETIME(xRecTMSTaskDetails.deadline,0T)), SetMySQLDateTimeFormat("Date of Extension"), SetMySQLDateTimeFormat("Date of Extension"), 1);
          ADOCommand.ExecuteNonQuery;
        END;

        ADOConnection.Close;
      END;
    END;

    LOCAL PROCEDURE SetMySQLDateTimeFormat@7(NAVDateTime@1000 : DateTime) : Text;
    BEGIN
      EXIT(''''+ FORMAT(NAVDateTime, 0,'<Year4>-<Month,2>-<Day,2> <Hours24>:<Minutes,2>:<Seconds,2>')+ '''');
    END;

    EVENT ADOConnection@1002::InfoMessage@56(sender@1001 : Variant;args@1000 : DotNet "'MySql.Data, Version=8.0.20.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d'.MySql.Data.MySqlClient.MySqlInfoMessageEventArgs");
    BEGIN
    END;

    EVENT ADOConnection@1002::StateChange@57(sender@1001 : Variant;e@1000 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.StateChangeEventArgs");
    BEGIN
    END;

    EVENT ADOConnection@1002::Disposed@58(sender@1001 : Variant;e@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.EventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

