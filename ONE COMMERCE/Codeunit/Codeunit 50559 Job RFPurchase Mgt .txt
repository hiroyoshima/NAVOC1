OBJECT Codeunit 50559 Job RFPurchase Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=08/23/18;
    Time=[ 2:44:52 PM];
    Modified=Yes;
    Version List=OC.03.0828;
  }
  PROPERTIES
  {
    TableNo=1003;
    OnRun=BEGIN
            JobPlnLines.COPY(Rec);
            InitRequestForPurchase(JobPlnLines);
            Rec := JobPlnLines;
          END;

  }
  CODE
  {
    VAR
      UserSetup@1000 : Record 91;
      Job@1001 : Record 167;
      JobPlnLines@1002 : Record 1003;
      JobPlanningLine@1003 : Record 1003;
      JobPlanningLineTemp@1004 : TEMPORARY Record 1003;
      PurchasesPayableSetup@1005 : Record 312;
      PurchaseHeader@1006 : Record 38;

    PROCEDURE CreateRequestForPurchase@126(VAR Job@1000 : Record 167);
    VAR
      Item@1002 : Record 27;
      PurchLines@1004 : Record 39;
      IsItem@1001 : Boolean;
      TotalRecordInserted@1005 : Integer;
      LineNos@1003 : Integer;
    BEGIN
      WITH Job DO BEGIN
        JobPlanningLine.SETRANGE("Job No.", Job."No.");
        JobPlanningLine.SETFILTER("Line Type", '%1|%2', JobPlanningLine."Line Type"::Schedule, JobPlanningLine."Line Type"::"Both Schedule and Contract");
        JobPlanningLine.SETFILTER("No.", '<>''''');
        JobPlanningLine.SETFILTER("Quantity (Base)", '<>0');
        JobPlanningLine.SETRANGE(Type, JobPlanningLine.Type::Item);
        JobPlanningLineTemp.DELETEALL;
        IF JobPlanningLine.FINDSET THEN BEGIN
          REPEAT
            IF (JobPlanningLine.Type = JobPlanningLine.Type::Item) AND Item.GET(JobPlanningLine."No.") AND
               (Item.Type = Item.Type::Inventory) THEN
              IsItem := TRUE
            ELSE
              IsItem := FALSE;
            IF IsItem THEN BEGIN
              CheckJobPlanningLinesIsReadyForRequestForPurchase(JobPlanningLine);
              LineNos += 1;
              JobPlanningLineTemp.RESET;
              JobPlanningLineTemp.SETRANGE(Type, JobPlanningLine.Type);
              JobPlanningLineTemp.SETRANGE("No.", JobPlanningLine."No.");
              IF JobPlanningLineTemp.FINDFIRST THEN BEGIN
                JobPlanningLineTemp.Quantity += JobPlanningLine."Quantity (Base)";
                JobPlanningLineTemp.MODIFY;
              END ELSE BEGIN
                JobPlanningLineTemp.INIT;
                JobPlanningLineTemp."Job No." := JobPlanningLine."Job No.";
                JobPlanningLineTemp."Job Task No." := JobPlanningLine."Job Task No.";
                JobPlanningLineTemp."Line No." := LineNos;
                JobPlanningLineTemp."Line Type" := JobPlanningLineTemp."Line Type"::Schedule;
                JobPlanningLineTemp.Type := JobPlanningLine.Type;
                Item.GET(JobPlanningLine."No.");
                JobPlanningLineTemp.VALIDATE("No.", JobPlanningLine."No.");
                JobPlanningLineTemp.VALIDATE("Unit of Measure Code", Item."Base Unit of Measure");
                JobPlanningLineTemp.VALIDATE(Quantity, JobPlanningLine."Quantity (Base)");
                JobPlanningLineTemp.INSERT;
              END;
            END;
          UNTIL JobPlanningLine.NEXT = 0;
        END;

        JobPlanningLineTemp.RESET;
        IF JobPlanningLineTemp.FINDSET AND NOT WithRequestForPurchaseEntry(Job) THEN BEGIN
          LineNos := 0;
          TotalRecordInserted := 0;
          InitPurchaseHeader(Job);
          REPEAT
      //      CheckJobPlanningLinesIfAlreadyExistInPurchaseLine(JobPlnLines);
      //      IF IsJPLInPurchaseLine(JobPlnLinesTemp) THEN


            LineNos += 10000;
            PurchLines.INIT;
            PurchLines."Document Type" := PurchaseHeader."Document Type";
            PurchLines."Document No." := PurchaseHeader."No.";
            PurchLines."Line No." := LineNos;
            CASE JobPlanningLineTemp.Type OF
              JobPlanningLineTemp.Type::Item:
                PurchLines.VALIDATE(Type, PurchLines.Type::Item);
              JobPlanningLineTemp.Type::"G/L Account":
                PurchLines.VALIDATE(Type, PurchLines.Type::"G/L Account");
            END;
            PurchLines.VALIDATE("No.", JobPlanningLineTemp."No.");
            PurchLines.VALIDATE(Description, JobPlanningLineTemp.Description);
            PurchLines.VALIDATE("Unit of Measure Code", JobPlanningLineTemp."Unit of Measure Code");
            PurchLines.VALIDATE(Quantity, JobPlanningLineTemp.Quantity);
            PurchLines.VALIDATE("Direct Unit Cost", JobPlanningLineTemp."Unit Cost");
            PurchLines.VALIDATE("INTP No.", Job."INTP No.");
            PurchLines.VALIDATE("Job No.", JobPlanningLineTemp."Job No.");
            PurchLines."Job Created Entry" := TRUE;
            PurchLines."Request Type" := PurchLines."Request Type"::"Request for Purchase";
            PurchLines.INSERT;
            TotalRecordInserted += 1;
          UNTIL JobPlanningLineTemp.NEXT = 0;
        END;
        IF TotalRecordInserted > 0 THEN
          PAGE.RUN(PAGE::"Request for Purchase", PurchaseHeader);
      END;
    END;

    LOCAL PROCEDURE InitRequestForPurchase@43(VAR JobPlnLines@1000 : Record 1003);
    VAR
      PurchHeader@1001 : Record 38;
      PurchLines@1002 : Record 39;
      JobPlnLinesTemp@1004 : TEMPORARY Record 1003;
      PurchasesPayableSetup@1006 : Record 312;
      Item@1005 : Record 27;
      PurchaseHeaderTemp@1007 : TEMPORARY Record 38;
      PurchaseLineTemp@1008 : TEMPORARY Record 39;
      IsItem@1009 : Boolean;
      LineNos@1003 : Integer;
    BEGIN
      WITH JobPlnLines DO BEGIN
        IF NOT UserSetup.GET(USERID) THEN
          UserSetup.TESTFIELD("User ID", USERID);
        PurchasesPayableSetup.GET;
        PurchasesPayableSetup.TESTFIELD("Default Vendor as Company");

        LineNos := 0;
        JobPlnLines.SETFILTER("Line Type", '%1|%2', "Line Type"::Schedule, "Line Type"::"Both Schedule and Contract");
        JobPlnLines.SETFILTER("No.", '<>''''');
        JobPlnLines.SETFILTER("Quantity (Base)", '<>0');
        JobPlnLines.SETRANGE(Type, Type::Item);

        JobPlnLinesTemp.DELETEALL;
        IF JobPlnLines.FINDSET THEN BEGIN
          REPEAT
      //      CheckJobPlanningLinesIfAlreadyExistInPurchaseLine(JobPlnLines);
            IF (JobPlnLines.Type = JobPlnLines.Type::Item) AND Item.GET(JobPlnLines."No.") AND
               (Item.Type = Item.Type::Inventory) THEN
              IsItem := TRUE
            ELSE
              IsItem := FALSE;

            IF IsItem THEN BEGIN
              CheckJobPlanningLinesIsReadyForRequestForPurchase(JobPlnLines);
              LineNos += 10000;
              JobPlnLinesTemp.RESET;
              JobPlnLinesTemp.SETRANGE(Type, JobPlnLines.Type);
              JobPlnLinesTemp.SETRANGE("No.", JobPlnLines."No.");
              IF JobPlnLinesTemp.FINDFIRST THEN BEGIN
                JobPlnLinesTemp.Quantity += JobPlnLines."Quantity (Base)";
                JobPlnLinesTemp.MODIFY;
              END ELSE BEGIN
                JobPlnLinesTemp.INIT;
                JobPlnLinesTemp."Job No." := JobPlnLines."Job No.";
                JobPlnLinesTemp."Job Task No." := JobPlnLines."Job Task No.";
                JobPlnLinesTemp."Line No." := LineNos;
                JobPlnLinesTemp."Line Type" := JobPlnLinesTemp."Line Type"::Schedule;
                JobPlnLinesTemp.Type := JobPlnLines.Type;
                Item.GET(JobPlnLines."No.");
                JobPlnLinesTemp.VALIDATE("No.", JobPlnLines."No.");
                JobPlnLinesTemp.VALIDATE("Unit of Measure Code", Item."Base Unit of Measure");
                JobPlnLinesTemp.VALIDATE(Quantity, JobPlnLines."Quantity (Base)");
                JobPlnLinesTemp.INSERT(TRUE);
              END;
            END;
          UNTIL JobPlnLines.NEXT = 0;
        END;


        JobPlnLinesTemp.RESET;
        IF JobPlnLinesTemp.FINDSET THEN BEGIN
          LineNos := 0;
          PurchHeader.INIT;
          PurchHeader."Document Type" := PurchHeader."Document Type"::Invoice;
          PurchHeader."Request Type" := PurchHeader."Request Type"::"Request for Purchase";
          PurchHeader.VALIDATE("Buy-from Vendor No.", PurchasesPayableSetup."Default Vendor as Company");
          PurchHeader.VALIDATE("INTP No.", Job."INTP No.");
          PurchHeader.INSERT(TRUE);
          REPEAT
            // Initial Purchase Header
            Job.GET(JobPlnLinesTemp."Job No.");
      //      CheckJobPlanningLinesIfAlreadyExistInPurchaseLine(JobPlnLines);
      //      IF IsJPLInPurchaseLine(JobPlnLinesTemp) THEN


            LineNos += 10000;
            PurchLines.INIT;
            PurchLines."Document Type" := PurchHeader."Document Type";
            PurchLines."Document No." := PurchHeader."No.";
            PurchLines."Line No." := LineNos;
            CASE JobPlnLinesTemp.Type OF
              JobPlnLinesTemp.Type::Item:
                PurchLines.VALIDATE(Type, PurchLines.Type::Item);
              JobPlnLinesTemp.Type::"G/L Account":
                PurchLines.VALIDATE(Type, PurchLines.Type::"G/L Account");
            END;
            PurchLines.VALIDATE("No.", JobPlnLinesTemp."No.");
            PurchLines.VALIDATE(Description, JobPlnLinesTemp.Description);
            PurchLines.VALIDATE("Unit of Measure Code", JobPlnLinesTemp."Unit of Measure Code");
            PurchLines.VALIDATE(Quantity, JobPlnLinesTemp.Quantity);
            PurchLines.VALIDATE("Direct Unit Cost", JobPlnLinesTemp."Unit Cost");
            PurchLines.VALIDATE("INTP No.", Job."INTP No.");
            PurchLines.VALIDATE("Job No.", JobPlnLinesTemp."Job No.");
            PurchLines."Job Created Entry" := TRUE;
            PurchLines."Request Type" := PurchLines."Request Type"::"Request for Purchase";
            PurchLines.INSERT;
          UNTIL JobPlnLinesTemp.NEXT = 0;
        END;

        PAGE.RUN(PAGE::"Request for Purchase", PurchHeader);
      END;
    END;

    LOCAL PROCEDURE IsJPLInPurchaseLine@105(VAR JobPlnLines@1000 : Record 1003) : Boolean;
    VAR
      PurchLines@1001 : Record 39;
      Err001@1002 : TextConst 'ENU=%1 %2, %3 %4 and %5 %6 with value of %7 %8 already exist in %9 %10.';
    BEGIN
      WITH JobPlnLines DO BEGIN
        // Check if Job Planning Lines is already exist in the Purchase Line
        PurchLines.SETRANGE("Job No.", "Job No.");
        CASE JobPlnLines.Type OF
          JobPlnLines.Type::"G/L Account":
            PurchLines.SETRANGE(Type, PurchLines.Type::"G/L Account");
          JobPlnLines.Type::Item:
            PurchLines.SETRANGE(Type, PurchLines.Type::Item);
          ELSE
            EXIT(FALSE);
        END;
        PurchLines.SETRANGE("No.", JobPlnLines."No.");
        PurchLines.SETRANGE("Job No.", JobPlnLines."Job No.");
        PurchLines.SETRANGE("Request Type", PurchLines."Request Type"::"Request for Purchase");
        IF PurchLines.FINDFIRST THEN
          EXIT(TRUE);

        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE SkipJobPlanningLinesWithRFpur@15(VAR JobPlnLines@1000 : Record 1003);
    VAR
      PurchLines@1001 : Record 39;
      Err001@1002 : TextConst 'ENU=%1 %2, %3 %4 and %5 %6 with value of %7 %8 already exist in %9 %10.';
    BEGIN
      WITH JobPlnLines DO BEGIN
        // Check if Job Planning Lines is already exist in the Purchase Line
        PurchLines.SETRANGE("Job No.", "Job No.");
        PurchLines.SETRANGE("Job Task No.", "Job Task No.");
        PurchLines.SETRANGE("Job Planning Line No.", "Line No.");
        IF PurchLines.FINDFIRST THEN BEGIN
          ERROR(Err001, FIELDCAPTION("Job No."), "Job No.",
        FIELDCAPTION("Job Task No."), "Job Task No.", FIELDCAPTION("Line No."), "Line No.",
        "No.", Description, FORMAT(PurchLines."Request Type"), PurchLines."Document No.");
        END;
      END;
    END;

    LOCAL PROCEDURE CheckJobPlanningLinesIsReadyForRequestForPurchase@115(VAR JobPlnLines@1000 : Record 1003);
    VAR
      Item@1001 : Record 27;
      GLAccount@1002 : Record 15;
    BEGIN
      WITH JobPlnLines DO BEGIN
        Job.GET(JobPlnLines."Job No.");
        Job.TESTFIELD(Status, Job.Status::Order);
        TESTFIELD("Usage Link", TRUE);
        TESTFIELD("No.");
        TESTFIELD("Unit of Measure Code");
        CASE Type OF
          Type::Item:
              IF Item.GET("No.") THEN BEGIN
                Item.TESTFIELD(Type, Item.Type::Inventory);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE WithRequestForPurchaseEntry@124(Job@1001 : Record 167) : Boolean;
    VAR
      RequestForPurchaseLine@1000 : Record 39;
    BEGIN
       RequestForPurchaseLine.SETRANGE("Request Type", RequestForPurchaseLine."Request Type"::"Request for Purchase");
       RequestForPurchaseLine.SETRANGE("Job No.", Job."No.");
       RequestForPurchaseLine.SETFILTER("No.", '<>''''');
       IF RequestForPurchaseLine.FINDLAST THEN
         EXIT(TRUE);

       EXIT(FALSE);
    END;

    LOCAL PROCEDURE InitPurchaseHeader@134(Job@1000 : Record 167);
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        UserSetup.TESTFIELD("User ID", USERID);
      PurchasesPayableSetup.GET;
      PurchasesPayableSetup.TESTFIELD("Default Vendor as Company");

      PurchaseHeader.INIT;
      PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Invoice;
      PurchaseHeader."Request Type" := PurchaseHeader."Request Type"::"Request for Purchase";
      PurchaseHeader.VALIDATE("Buy-from Vendor No.", PurchasesPayableSetup."Default Vendor as Company");
      PurchaseHeader.VALIDATE("INTP No.", Job."INTP No.");
      PurchaseHeader."Job No." := Job."No.";
      PurchaseHeader.INSERT(TRUE);
    END;

    LOCAL PROCEDURE InitTempJobPlanningLine@139();
    BEGIN
    END;

    BEGIN
    END.
  }
}

