OBJECT Codeunit 50572 Job Management
{
  OBJECT-PROPERTIES
  {
    Date=08/16/18;
    Time=[ 5:07:19 PM];
    Modified=Yes;
    Version List=NAVOC1.00.02;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Txt001@1000 : TextConst 'ENU=Do you want to copy the job details from request for purchase document?';
      Txt002@1001 : TextConst 'ENU=Copying job details from request for purchase has been successfully copied.';
      ConfigProgressBar@1002 : Codeunit 8615;
      Txt003@1005 : TextConst 'ENU=This document can only be released when the approval process is complete.';
      Txt004@1006 : TextConst 'ENU=The approval process must be cancelled or completed to reopen this document.';
      ConfigTxt001@1003 : TextConst 'ENU=Copy of Job Details';
      ConfigTxt002@1004 : TextConst 'ENU=Copy in progress...';

    PROCEDURE RemoveBOQUnitCost@1(VAR Job@1000 : Record 167);
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLines@1001 : Record 1003;
      SuccessMsg@1003 : TextConst 'ENU=%1 FSA lines in job planning lines has been updated.';
      TotalRecUpdated@1004 : Integer;
    BEGIN
      WITH Job DO BEGIN
        IF NOT RemoveBOQUnitCostEnabled(Job) THEN EXIT;
        TotalRecUpdated := 0;
        JobPlanningLines.SETRANGE("Job No.", Job."No.");
        JobPlanningLines.SETRANGE(FSA, TRUE);
        IF JobPlanningLines.FINDSET THEN
          REPEAT
            JobPlanningLines.VALIDATE("Unit Cost", 0);
            JobPlanningLines.MODIFY(TRUE);
            TotalRecUpdated += 1;
          UNTIL JobPlanningLines.NEXT = 0;

        MESSAGE(SuccessMsg, TotalRecUpdated);
      END;
    END;

    PROCEDURE RemoveBOQUnitCostEnabled@2(VAR Job@1000 : Record 167) : Boolean;
    VAR
      JobPostingGroup@1001 : Record 208;
    BEGIN
      WITH Job DO BEGIN
        IF JobPostingGroup.GET(Job."Job Posting Group") THEN
          EXIT(JobPostingGroup."Remove BOQ Unit Cost");

        EXIT(FALSE);
      END;
    END;

    PROCEDURE SetUnitCostToZeroBOQ@3(VAR JobPlanningLine@1000 : Record 1003);
    VAR
      Item@1001 : Record 27;
      Resource@1002 : Record 156;
      Job@1003 : Record 167;
    BEGIN
      WITH JobPlanningLine DO BEGIN
        CASE Type OF
          Type::Item:
            BEGIN
              Job.GET("Job No.");
              Item.GET("No.");
              IF RemoveBOQUnitCostEnabled(Job) AND Item."As-Built Account" THEN BEGIN
                "Direct Unit Cost (LCY)" := 0;
                "Unit Cost" := 0;
                "Unit Cost (LCY)" := 0;
               END;
            END;
          Type::Resource:
            BEGIN
              Job.GET("Job No.");
              Resource.GET("No.");
              IF RemoveBOQUnitCostEnabled(Job) AND Resource."As-Built Account" THEN BEGIN
                "Direct Unit Cost (LCY)" := 0;
                "Unit Cost" := 0;
                "Unit Cost (LCY)" := 0;
              END;
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE ________________________@9();
    BEGIN
    END;

    LOCAL PROCEDURE GetScheduledTotalPrice@37(VAR Job@1002 : Record 167) : Decimal;
    VAR
      JPL@1000 : Record 1003;
      TotalLineAmt@1001 : Decimal;
    BEGIN
      WITH Job DO BEGIN
         JPL.RESET;
         JPL.SETRANGE("Job No.", "No.");
         JPL.SETRANGE("Schedule Line", TRUE);
         TotalLineAmt := 0;
         IF JPL.FINDSET THEN BEGIN
          REPEAT
             TotalLineAmt += JPL."Line Amount";
          UNTIL JPL.NEXT = 0;
         END;
         EXIT(TotalLineAmt);
      END;
    END;

    LOCAL PROCEDURE GetScheduledTotalCostBenefits@188(VAR Job@1002 : Record 167) : Decimal;
    VAR
      JPL@1000 : Record 1003;
      TotalAmt@1001 : Decimal;
    BEGIN
      WITH Job DO BEGIN
         JPL.RESET;
         JPL.SETRANGE("Job No.", "No.");
         JPL.SETRANGE("Schedule Line", TRUE);
         TotalAmt := 0;

         IF JPL.FINDSET THEN BEGIN
          REPEAT
            TotalAmt += JPL."Total In-House Benefits Cost";
          UNTIL JPL.NEXT = 0;
         END;

         EXIT(TotalAmt);
      END;
    END;

    LOCAL PROCEDURE GetScheduledTotalCostCommunication@39(VAR Job@1002 : Record 167) : Decimal;
    VAR
      JPL@1000 : Record 1003;
      TotalAmt@1001 : Decimal;
    BEGIN
      WITH Job DO BEGIN
         JPL.RESET;
         JPL.SETRANGE("Job No.", "No.");
         JPL.SETRANGE("Schedule Line", TRUE);
         TotalAmt := 0;

         IF JPL.FINDSET THEN BEGIN
          REPEAT
            TotalAmt += JPL."Total Communication Cost";
          UNTIL JPL.NEXT = 0;
         END;

         EXIT(TotalAmt);
      END;
    END;

    LOCAL PROCEDURE GetScheduledTotalCostBackroomSupport@63(VAR Job@1002 : Record 167) : Decimal;
    VAR
      JPL@1000 : Record 1003;
      TotalAmt@1001 : Decimal;
    BEGIN
      WITH Job DO BEGIN
       JPL.RESET;
       JPL.SETRANGE("Job No.", "No.");
       JPL.SETRANGE("Schedule Line", TRUE);
       TotalAmt := 0;

       IF JPL.FINDSET THEN BEGIN
        REPEAT
           TotalAmt += JPL."Total Backroom Support Cost";
        UNTIL JPL.NEXT = 0;
       END;

       EXIT(TotalAmt);
      END;
    END;

    LOCAL PROCEDURE CreateJobTaskLineForFixedCost@35(VAR Job@1000 : Record 167);
    VAR
      JobPostingSetup@1001 : Record 208;
      Text019@1002 : TextConst 'ENU=This will create additional %1 for calculating the fixed cost.';
      JobTask@1003 : Record 1001;
      Item@1004 : Record 27;
      JobPlanningLine@1005 : Record 1003;
    BEGIN
      // Create a setup for autocreation of JTL and JPL in Job Setup
      WITH Job DO BEGIN
        TESTFIELD("Bill-to Customer No.");
        IF JobPostingSetup.GET("Job Posting Group") THEN BEGIN
         MESSAGE(Text019, JobTask.TABLECAPTION);

         IF NOT CheckFixedCostIfHasBeenGenerated(Job) THEN
         IF JobPostingSetup."OSP Backroom Support Account" <> '' THEN BEGIN
           Item.GET(JobPostingSetup."OSP Backroom Support Account");
           IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Job, Item) THEN BEGIN
             CreateJobTask(Job, Item.Description, JobTask."Job Task Type"::Posting);
             InitJobPlanningLineFixedCost(JobTask);
             JobPlanningLine.INSERT(TRUE);
           END;
         END;

         IF JobPostingSetup."Barracks Rental Account" <> '' THEN BEGIN
           Item.GET(JobPostingSetup."Barracks Rental Account");
           IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Job, Item) THEN BEGIN
             CreateJobTask(Job, Item.Description, JobTask."Job Task Type"::Posting);
             InitJobPlanningLineFixedCost(JobTask);
             JobPlanningLine.INSERT(TRUE);
           END;
         END;

         IF JobPostingSetup."OSP Inhouse Benefits Account" <> '' THEN BEGIN
           Item.GET(JobPostingSetup."OSP Inhouse Benefits Account");
           IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Job, Item) THEN BEGIN
             CreateJobTask(Job, Item.Description, JobTask."Job Task Type"::Posting);
             InitJobPlanningLineFixedCost(JobTask);
             JobPlanningLine.INSERT(TRUE);
           END;
         END;

         IF JobPostingSetup."Backroom Support Account" <> '' THEN BEGIN
           Item.GET(JobPostingSetup."Backroom Support Account");
           IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Job, Item) THEN BEGIN
             CreateJobTask(Job, Item.Description, JobTask."Job Task Type"::Posting);
             InitJobPlanningLineFixedCost(JobTask);
             JobPlanningLine.INSERT(TRUE);
           END;
         END;

         IF JobPostingSetup."Communication Account" <> '' THEN BEGIN
           Item.GET(JobPostingSetup."Communication Account");
           IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Job, Item) THEN BEGIN
             CreateJobTask(Job, Item.Description, JobTask."Job Task Type"::Posting);
             InitJobPlanningLineFixedCost(JobTask);
             JobPlanningLine.INSERT(TRUE);
           END;
         END;

         IF JobPostingSetup."Insurance Account" <> '' THEN BEGIN
           Item.GET(JobPostingSetup."Insurance Account");
           IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Job, Item) THEN BEGIN
             CreateJobTask(Job, Item.Description, JobTask."Job Task Type"::Posting);
             InitJobPlanningLineFixedCost(JobTask);
             JobPlanningLine.INSERT(TRUE);
           END;
         END;

         IF JobPostingSetup."Permitting Account" <> '' THEN BEGIN
           Item.GET(JobPostingSetup."Permitting Account");
           IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Job, Item) THEN BEGIN
             CreateJobTask(Job, Item.Description, JobTask."Job Task Type"::Posting);
             InitJobPlanningLineFixedCost(JobTask);
             JobPlanningLine.INSERT(TRUE);
           END;
         END;

         IF JobPostingSetup."Miscelleneous Account" <> '' THEN BEGIN
           Item.GET(JobPostingSetup."Miscelleneous Account");
           IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Job, Item) THEN BEGIN
             CreateJobTask(Job,Item.Description, JobTask."Job Task Type"::Posting);
             InitJobPlanningLineFixedCost(JobTask);
             JobPlanningLine.INSERT(TRUE);
           END;
         END;

         IF JobPostingSetup."Tools & Eqpmt. Depr. Account" <> '' THEN BEGIN
           Item.GET(JobPostingSetup."Tools & Eqpmt. Depr. Account");
           IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Job, Item) THEN BEGIN
             CreateJobTask(Job, Item.Description, JobTask."Job Task Type"::Posting);
             InitJobPlanningLineFixedCost(JobTask);
             JobPlanningLine.INSERT(TRUE);
           END;
         END;

         IF NOT CheckFixedCostIfHasBeenGenerated(Job) THEN BEGIN
           CreateJobTask(Job, 'Car Depreciation', JobTask."Job Task Type"::Posting);
         END;
         IF CheckFixedCostIfHasBeenGenerated(Job) THEN
           UpdateJobPostingGroupID;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckFixedCostIfHasBeenGenerated@34(VAR Job@1001 : Record 167) : Boolean;
    VAR
      JT@1000 : Record 1001;
    BEGIN
      // TODO!!!
      // WITH Job DO BEGIN
      // JT.SETRANGE("Job No.", "No.");
      // JT.SETRANGE("Job Posting Group ID",xRec."Job Posting Group");
      // IF JT.FINDFIRST THEN
      //  EXIT(TRUE);
      //
      // EXIT(FALSE);
      // END;
    END;

    LOCAL PROCEDURE CheckCustomJobPostingGroupAccountInJobPlanningLine@36(VAR Job@1002 : Record 167;Itm@1000 : Record 27) : Boolean;
    VAR
      JPL@1001 : Record 1003;
    BEGIN
      WITH Job DO BEGIN
        JPL.RESET;
        JPL.SETRANGE("Job No.", "No.");
        JPL.SETRANGE(Type, JPL.Type::Item);
        JPL.SETRANGE("No.", Itm."No.");
        IF JPL.FINDFIRST THEN
          EXIT(TRUE);

        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE CreateJobTask@38(VAR Job@1003 : Record 167;Desc@1000 : Text;JobTaskType@1001 : 'Posting,Heading,Total,Begin-Total,End-Total');
    VAR
      LastJobTaskForFixedCost@1002 : Record 1001;
      JobTask@1004 : Record 1001;
      NoSeriesMgt@1005 : Codeunit 396;
      DimMgt@1006 : Codeunit 408;
    BEGIN
      WITH Job DO BEGIN
        LastJobTaskForFixedCost.RESET;
        LastJobTaskForFixedCost.SETRANGE("Job No.", "No.");
        LastJobTaskForFixedCost.SETFILTER("Job Posting Group ID", '<>''''');
        JobTask.INIT;
        JobTask."Job No." := "No.";
        IF LastJobTaskForFixedCost.FINDLAST THEN
          JobTask."Job Task No." := NoSeriesMgt.IncrementNo(LastJobTaskForFixedCost."Job Task No.", 10)
        ELSE
          JobTask."Job Task No." := '10FC010';

        JobTask.Description := Desc;
        JobTask.VALIDATE("Job Task Type", JobTaskType);
        JobTask."No. Series" := "Job Task No. Series";
      //  JobTask.VALIDATE("Job Posting Group ID", JobPostingSetup.Code); // TODO!!!
        DimMgt.InsertJobTaskDim(JobTask."Job No.",JobTask."Job Task No.",JobTask."Global Dimension 1 Code",JobTask."Global Dimension 2 Code");
        JobTask.INSERT;
      END;
    END;

    LOCAL PROCEDURE InitJobPlanningLineFixedCost@45(JT@1000 : Record 1001);
    BEGIN
      // PHP Start
      // TODO!!!
      // JobPlanningLine.INIT;
      // JobPlanningLine."Job No." := "No.";
      // JobPlanningLine."Job Task No." := JT."Job Task No.";
      // JobPlanningLine."Line No." := 10000;
      // JobPlanningLine.VALIDATE("Line Type", JobPlanningLine."Line Type"::Schedule);
      // JobPlanningLine.VALIDATE("Planned Delivery Date", TODAY);
      // JobPlanningLine.VALIDATE(Type, JobPlanningLine.Type::Item);
      // JobPlanningLine.VALIDATE("No.", Item."No.");
      // JobPlanningLine.VALIDATE(Quantity, 1);
      // JobPlanningLine.VALIDATE("Unit Cost", 0);
      // JobPlanningLine.VALIDATE("Job Posting Group ID", JobPostingSetup.Code);
      // PHP End
    END;

    LOCAL PROCEDURE UpdateJobPostingGroupID@43();
    VAR
      JT@1001 : Record 1001;
      JPL@1000 : Record 1003;
    BEGIN
      // TODO!!!
      // JT.SETRANGE("Job No.", "No.");
      // JT.SETFILTER("Job Posting Group ID", '<>''''');
      // IF JT.FINDSET THEN
      //  REPEAT
      //    JT."Job Posting Group ID" := "Job Posting Group";
      //    JT.MODIFY;
      //  UNTIL JT.NEXT = 0;
      //
      // JPL.SETRANGE("Job No.", "No.");
      // JPL.SETFILTER("Job Posting Group ID", '<>''''');
      // IF JPL.FINDSET THEN
      //  REPEAT
      //    JPL."Job Posting Group ID" := "Job Posting Group";
      //    JPL.MODIFY;
      //  UNTIL JPL.NEXT = 0;
    END;

    PROCEDURE ReapplyResOtherCost@40(VAR Job@1004 : Record 167);
    VAR
      JPL@1000 : Record 1003;
      Res@1001 : Record 156;
      Counter@1002 : Integer;
      Text01@1003 : TextConst 'ENU=Do you want to update the unit cost of resources in job planning lines?';
      Text02@1005 : TextConst 'ENU=You have successfully update the resource cost in job planning lines.';
    BEGIN
      IF NOT CONFIRM(Text01, FALSE) THEN
        EXIT;

      WITH Job DO BEGIN
        JPL.SETRANGE("Job No.", "No.");
        JPL.SETRANGE("Schedule Line", TRUE);
        JPL.SETRANGE(Type, JPL.Type::Resource);
        Counter := 0;
        IF JPL.FINDSET THEN
          REPEAT
            IF Res.GET(JPL."No.") THEN BEGIN
              JPL.VALIDATE(Quantity, JPL.Quantity);
              JPL.VALIDATE("Communication Cost", Res."Communication Cost");
              JPL.MODIFY;
              Counter += 1;
            END;
          UNTIL JPL.NEXT = 0;

        IF Counter <> 0 THEN
          MESSAGE(Text02);
      END;
    END;

    PROCEDURE CheckMandatoryFieldSalesForJob@4(VAR SalesHeader@1000 : Record 36);
    VAR
      INTP@1001 : Record 50040;
      SalesLines@1002 : Record 37;
    BEGIN
      // Applied in Codeunit 80 Sales-Post
      // Check if the INTP requires Job Reference

      WITH SalesHeader DO BEGIN
        IF INTP.GET(SalesHeader."INTP No.") AND (SalesHeader."Request type" = SalesHeader."Request type"::Withdrawal) AND
           INTP."Require Job in Purch. Docs." THEN BEGIN
          SalesLines.SETRANGE("Document Type", SalesHeader."Document Type");
          SalesLines.SETRANGE("Document No.", SalesHeader."No.");
          SalesLines.SETFILTER("No.", '<>''''');
          IF SalesLines.FINDSET THEN
            REPEAT
              SalesLines.TESTFIELD("Job No. 2");
              SalesLines.TESTFIELD("Job Task No. 2");
            UNTIL SalesLines.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE LinkJobFromRFPurLinesToPurchaseLine@5(VAR PurchaseLine@1000 : Record 39);
    VAR
      RFPurLines@1001 : Record 39;
    BEGIN
      WITH PurchaseLine DO BEGIN
        IF NOT CONFIRM(Txt001,FALSE) THEN
          EXIT;
        PurchaseLine.SETFILTER("No.", '<>''''');
        ConfigProgressBar.Init(PurchaseLine.COUNT, 1, '');
        IF PurchaseLine.FINDSET THEN BEGIN
          REPEAT
            IF RFPurLines.GET(PurchaseLine."RFP Document Type", PurchaseLine."RFP Document No.", PurchaseLine."RFP Line No.") THEN BEGIN
              PurchaseLine.VALIDATE("Job No.", RFPurLines."Job No.");
              PurchaseLine.VALIDATE("Job Task No.", RFPurLines."Job Task No.");
              PurchaseLine.VALIDATE("Job Planning Line No.", RFPurLines."Job Planning Line No.");
              PurchaseLine.MODIFY(TRUE);
              ConfigProgressBar.Update(ConfigTxt002);
            END;
          UNTIL PurchaseLine.NEXT = 0;
          ConfigProgressBar.Close;
          MESSAGE(Txt002);
        END;
      END;
    END;

    [Integration]
    PROCEDURE OnCheckJobReleaseRestriction@12(VAR Job@1000 : Record 167);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnBeforeReleaseJobDoc@112(VAR Job@1000 : Record 167);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnAfterReleaseJobDoc@111(VAR Job@1000 : Record 167);
    BEGIN
    END;

    PROCEDURE ReleaseJob@108(VAR Job@1000 : Record 167);
    BEGIN
      WITH Job DO BEGIN
        IF "Approval Status" = "Approval Status"::Released THEN
           EXIT;

        OnCheckJobReleaseRestriction(Job);
        OnBeforeReleaseJobDoc(Job);

        "Approval Status" := "Approval Status"::Released;
        MODIFY(TRUE);

        OnAfterReleaseJobDoc(Job);
      END;
    END;

    PROCEDURE PerformManualRelease@113(VAR Job@1002 : Record 167);
    VAR
      PrepaymentMgt@1001 : Codeunit 441;
      ApprovalsMgmt@1000 : Codeunit 1535;
    BEGIN
      IF ApprovalsMgmt.IsJobApprovalsWorkflowEnabled(Job) AND (Job."Approval Status" = Job."Approval Status"::Open) THEN
        ERROR(Txt003);

      ReleaseJob(Job);
    END;

    [Integration]
    PROCEDURE OnBeforeReOpenJobDoc@106(VAR Job@1000 : Record 167);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnAfterReOpenJobDoc@104(VAR Job@1000 : Record 167);
    BEGIN
    END;

    PROCEDURE ReopenJob@107(VAR Job@1000 : Record 167);
    BEGIN
      WITH Job DO BEGIN
        IF "Approval Status" = "Approval Status"::Open THEN
           EXIT;

        OnBeforeReOpenJobDoc(Job);
        "Approval Status" := "Approval Status"::Open;
        MODIFY(TRUE);
        OnAfterReOpenJobDoc(Job);
      END;
    END;

    PROCEDURE PerformManualReOpen@118(VAR Job@1000 : Record 167);
    BEGIN
      IF Job."Approval Status" = Job."Approval Status"::"Pending Approval" THEN
        ERROR(Txt004);

      ReopenJob(Job);
    END;

    BEGIN
    END.
  }
}

