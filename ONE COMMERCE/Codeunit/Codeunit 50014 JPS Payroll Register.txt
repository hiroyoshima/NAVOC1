OBJECT Codeunit 50014 JPS Payroll Register
{
  OBJECT-PROPERTIES
  {
    Date=06/26/18;
    Time=[ 6:40:10 AM];
    Modified=Yes;
    Version List=NAVW25.00.00.10;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      JPSPayrollRegisterTemp@1010 : Record 50007;
      JPSPayrollRegisterField@1011 : TEMPORARY Record 50806;
      JPSSetup@1012 : Record 50900;
      JPSDeptDataMapping@1014 : Record 50809;
      DimensionManagement@1013 : Codeunit 408;
      DotNetSQLConnection@1000 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.SqlClient.SqlConnection";
      DotNetSQLCommand@1001 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.SqlClient.SqlCommand";
      DotNetSQLParameter@1002 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.SqlClient.SqlParameter";
      DotNetSQLDataReader@1003 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.SqlClient.SqlDataReader";
      DATABASESERVERNAME@1004 : Text;
      DATABASENAME@1005 : Text;
      ConnectionString@1006 : Text;
      ConStrTxt@1007 : TextConst 'ENU="Data Source=%1;Initial Catalog=%2;User Id=%3;Password=%4;"';
      DocumentNo@1018 : Code[20];
      i@1009 : Integer;
      Err01@1015 : TextConst 'ENU=You can only run one (1) period at a time.';
      Err02@1016 : TextConst 'ENU=There''s an existing journal entry from General Journal %1 %2 %3 %4. Delete all the entries and proceed with the request.';
      CreateReconcilingEntry@1008 : Boolean;

    PROCEDURE RunJPSPayrollRegisterEntry@8(VAR JPSPayrollGroup@1000 : Record 50810;DocNo@1003 : Code[20];CreateReconEntry@1004 : Boolean;AppendEntry@1005 : Boolean);
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      TestPayrollEntryAutomation;
      // Terminat process if there's pending approval.
      GenJournalLine.SETRANGE("Journal Template Name", JPSSetup."Gen. Journal Template");
      GenJournalLine.SETRANGE("Journal Batch Name", JPSSetup."Gen. Journal Batch Name");
      IF GenJournalLine.COUNT > 1 THEN BEGIN
        IF NOT AppendEntry THEN BEGIN
          ERROR(Err02, GenJournalLine.FIELDNAME("Journal Template Name"), GenJournalLine."Journal Template Name",
                GenJournalLine.FIELDNAME("Journal Batch Name"), GenJournalLine."Journal Batch Name");
        END;
      END ELSE BEGIN
        GenJournalLine.DELETEALL(TRUE);
      END;

      DocumentNo := DocNo;
      CreateReconcilingEntry := CreateReconEntry;

      IF JPSPayrollGroup.FINDSET THEN BEGIN
        REPEAT
          IF RegisterPayrollPeriod(JPSPayrollGroup) THEN BEGIN

            // Delete the existing entries in the Gen. Journal Line
            GenJournalLine.RESET;
            GenJournalLine.SETRANGE("Journal Template Name", JPSSetup."Gen. Journal Template");
            GenJournalLine.SETRANGE("Journal Batch Name", JPSSetup."Gen. Journal Batch Name");
            GenJournalLine.SETRANGE("Posting Date", JPSPayrollGroup.PayDate);
      //      GenJournalLine.SETRANGE("Document No.", DocumentNo);
            IF GenJournalLine.FINDSET THEN
              GenJournalLine.DELETEALL(TRUE);

            OpenConnection;
            CreateSQLCommand('dbo.uspPayrollRegister2', 'StoredProcedure');

            // Create and Add the SQL Parameters to the SQL Command
            CreateSQLParameter(DotNetSQLParameter, '@CompanyId', 'Int', 'Input', 0, FORMAT(JPSPayrollGroup.CompanyId));
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@FromMonth', 'Int', 'Input', 0, FORMAT(JPSPayrollGroup.PayMonth));
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@FromYear', 'Int', 'Input', 0, FORMAT(JPSPayrollGroup.PayYear));
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@FromPeriod', 'Int', 'Input', 0, FORMAT(JPSPayrollGroup.PayrollPeriodId));
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ToMonth', 'Int', 'Input', 0, FORMAT(JPSPayrollGroup.PayMonth));
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ToYear', 'Int', 'Input', 0, FORMAT(JPSPayrollGroup.PayYear));
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ToPeriod', 'Int', 'Input', 0, FORMAT(JPSPayrollGroup.PayrollPeriodId));
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@DepartmentId', 'Int', 'Input', 0, '0');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@PayGroupId', 'Int', 'Input', 0, '0');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@PayrollFrequencyId', 'Int', 'Input', 0, '0');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@EmployeeId', 'Int', 'Input', 0, '0');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@SecurityUserId', 'Int', 'Input', 0, '1'); // Security ID must have a value; current value is 1;
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@PayRegType', 'VarChar', 'Input', 150, '');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@WithAllow', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowEarnings', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowExternalEarnings', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowDeductions', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowTotal', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowTotalNoBasic', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowTotalNoAL', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowHours', 'Int', 'Input', 0, '0');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowSummary', 'Int', 'Input', 0, '0');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowER', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowExternalDeductions', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowBankInfo', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowInfo', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowOtherInfo', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowGroupings', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@ShowGroupingFrom201', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@PerMonth', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@PerPeriod', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@BatchNo', 'Int', 'Input', 0, '0');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@IsShowPayrollPeriods', 'Int', 'Input', 0, '1');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
            CreateSQLParameter(DotNetSQLParameter, '@IsDirectDownload', 'Int', 'Input', 0, '0');
            DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);

            //Execute the Command and Create a SQLDataReader
            //from which we will read the result set records
            DotNetSQLDataReader := DotNetSQLCommand.ExecuteReader();

            // Column validation of report
            JPSPayrollRegisterField.DELETEALL;
            FOR i := 0 TO (DotNetSQLDataReader.FieldCount - 1) DO BEGIN
              JPSPayrollRegisterField.INIT;
              JPSPayrollRegisterField."Field Name" := DotNetSQLDataReader.GetName(i);
              JPSPayrollRegisterField."Field Type" := DotNetSQLDataReader.GetDataTypeName(i);
              JPSPayrollRegisterField.INSERT;
            END;

            WHILE DotNetSQLDataReader.Read DO BEGIN
              JPSPayrollRegisterTemp.INIT;
              JPSPayrollRegisterTemp.CompanyId := JPSPayrollGroup.CompanyId;
              JPSPayrollRegisterTemp.EmployeeCode := DotNetSQLDataReader.Item('EmployeeCode');
              JPSPayrollRegisterTemp.EmployeeName := DotNetSQLDataReader.Item('EmployeeName');
              JPSPayrollRegisterTemp.PayrollPeriodId := DotNetSQLDataReader.Item('PayrollPeriodId');
              JPSPayrollRegisterTemp.PayrollPeriod := DotNetSQLDataReader.Item('PayrollPeriod');
              JPSPayrollRegisterTemp.PayYear := DotNetSQLDataReader.Item('PayYear');
              JPSPayrollRegisterTemp.Month := DotNetSQLDataReader.Item('Month');
              JPSPayrollRegisterTemp.DepartmentId := DotNetSQLDataReader.Item('DepartmentId');
              JPSPayrollRegisterTemp.Department := DotNetSQLDataReader.Item('Department');
              JPSPayrollRegisterTemp.PayDate := JPSPayrollGroup.PayDate;

              // Other Deductions
              IF JPSPayrollRegisterField.GET('COMMISSIONGridBandTAXABLE EARNINGS') THEN
                JPSPayrollRegisterTemp.CommissionTaxable := DotNetSQLDataReader.Item('COMMISSIONGridBandTAXABLE EARNINGS');

              IF JPSPayrollRegisterField.GET('DE MINIMIS BENEFITSGridBandTAXABLE EARNINGS') THEN
                JPSPayrollRegisterTemp.DeMinimisBenefitsTaxable := DotNetSQLDataReader.Item('DE MINIMIS BENEFITSGridBandTAXABLE EARNINGS');

              IF JPSPayrollRegisterField.GET('DE MINIMIS BENEFITSGridBandNON-TAXABLE EARNINGS') THEN
                JPSPayrollRegisterTemp.DeMinimisBenefitsNonTaxable := DotNetSQLDataReader.Item('DE MINIMIS BENEFITSGridBandNON-TAXABLE EARNINGS');

              IF JPSPayrollRegisterField.GET('AllowanceGridBandTOTAL') THEN
                JPSPayrollRegisterTemp.Allowance := DotNetSQLDataReader.Item('AllowanceGridBandTOTAL');

              IF JPSPayrollRegisterField.GET('Earnings (No AL)GridBandTOTAL') THEN
                JPSPayrollRegisterTemp.EarningsNoAL := DotNetSQLDataReader.Item('Earnings (No AL)GridBandTOTAL');

              IF JPSPayrollRegisterField.GET('Earnings (No Basic Salary)GridBandTOTAL') THEN
                JPSPayrollRegisterTemp.EarningsNoBasicSalary := DotNetSQLDataReader.Item('Earnings (No Basic Salary)GridBandTOTAL');

              // Dedeuctions
              IF JPSPayrollRegisterField.GET('COMPANY LOANGridBandLOAN DEDUCTIONS') THEN
                JPSPayrollRegisterTemp.CompanyLoan := DotNetSQLDataReader.Item('COMPANY LOANGridBandLOAN DEDUCTIONS');

              IF JPSPayrollRegisterField.GET('WTAXGridBandSTATUTORY DEDUCTIONS') THEN
                JPSPayrollRegisterTemp.WTax := DotNetSQLDataReader.Item('WTAXGridBandSTATUTORY DEDUCTIONS');

              IF JPSPayrollRegisterField.GET('SSSEEGridBandSTATUTORY DEDUCTIONS') THEN
                JPSPayrollRegisterTemp.SSSEE := DotNetSQLDataReader.Item('SSSEEGridBandSTATUTORY DEDUCTIONS');

              IF JPSPayrollRegisterField.GET('PHICEEGridBandSTATUTORY DEDUCTIONS') THEN
                JPSPayrollRegisterTemp.PHICEE := DotNetSQLDataReader.Item('PHICEEGridBandSTATUTORY DEDUCTIONS');

              IF JPSPayrollRegisterField.GET('HDMFEEGridBandSTATUTORY DEDUCTIONS') THEN
                JPSPayrollRegisterTemp.HDMFEE := DotNetSQLDataReader.Item('HDMFEEGridBandSTATUTORY DEDUCTIONS');

              IF JPSPayrollRegisterField.GET('SSS SLOANGridBandLOAN DEDUCTIONS') THEN
                JPSPayrollRegisterTemp.SSSSLoan := DotNetSQLDataReader.Item('SSS SLOANGridBandLOAN DEDUCTIONS');

              IF JPSPayrollRegisterField.GET('SSS CLOANGridBandLOAN DEDUCTIONS') THEN
                JPSPayrollRegisterTemp.SSSCLoan := DotNetSQLDataReader.Item('SSS CLOANGridBandLOAN DEDUCTIONS');

              IF JPSPayrollRegisterField.GET('HDMF SLOANGridBandLOAN DEDUCTIONS') THEN
                JPSPayrollRegisterTemp.HDMFSloan := DotNetSQLDataReader.Item('HDMF SLOANGridBandLOAN DEDUCTIONS');

              IF JPSPayrollRegisterField.GET('HDMF CLOANGridBandLOAN DEDUCTIONS') THEN
              JPSPayrollRegisterTemp.HDMFCloan := DotNetSQLDataReader.Item('HDMF CLOANGridBandLOAN DEDUCTIONS');

              IF JPSPayrollRegisterField.GET('MAXICAREGridBandLOAN DEDUCTIONS') THEN
                JPSPayrollRegisterTemp.Maxicare := DotNetSQLDataReader.Item('MAXICAREGridBandLOAN DEDUCTIONS');

              IF JPSPayrollRegisterField.GET('SUN CELLULARGridBandOTHER DEDUCTIONS') THEN
                JPSPayrollRegisterTemp.SunCellular := DotNetSQLDataReader.Item('SUN CELLULARGridBandOTHER DEDUCTIONS');

              IF JPSPayrollRegisterField.GET('TAX REFUNDGridBandSTATUTORY DEDUCTIONS') THEN
                JPSPayrollRegisterTemp.TaxRefund := DotNetSQLDataReader.Item('TAX REFUNDGridBandSTATUTORY DEDUCTIONS');

              IF JPSPayrollRegisterField.GET('TRANSPO ALLOWANCEGridBandOTHER EARNINGS') THEN
                JPSPayrollRegisterTemp.TranspoAllowance := DotNetSQLDataReader.Item('TRANSPO ALLOWANCEGridBandOTHER EARNINGS');

              IF JPSPayrollRegisterField.GET('TRANSPORTATIONGridBandTAXABLE EARNINGS') THEN
                JPSPayrollRegisterTemp.Transportation := DotNetSQLDataReader.Item('TRANSPORTATIONGridBandTAXABLE EARNINGS');

              IF JPSPayrollRegisterField.GET('TRAINING ALLOWANCEGridBandOTHER EARNINGS') THEN
                JPSPayrollRegisterTemp.TrainingAllowance := DotNetSQLDataReader.Item('TRAINING ALLOWANCEGridBandOTHER EARNINGS');

              IF JPSPayrollRegisterField.GET('GrossGridBandTOTAL') THEN
                JPSPayrollRegisterTemp.GrossPay := DotNetSQLDataReader.Item('GrossGridBandTOTAL');

              IF JPSPayrollRegisterField.GET('NetPay (No AL)GridBandTOTAL') THEN
                JPSPayrollRegisterTemp.NetPayNoAl := DotNetSQLDataReader.Item('NetPay (No AL)GridBandTOTAL');

              IF JPSPayrollRegisterField.GET('NetPayGridBandTOTAL') THEN
                JPSPayrollRegisterTemp.NetPay := DotNetSQLDataReader.Item('NetPayGridBandTOTAL');

              IF JPSPayrollRegisterField.GET('BankTransmittalStatusGridBandPRIMARY BANK') THEN
                JPSPayrollRegisterTemp.BankTransmitalStatus := DotNetSQLDataReader.Item('BankTransmittalStatusGridBandPRIMARY BANK');

              IF JPSPayrollRegisterField.GET('BankAccountNo') AND (FORMAT(DotNetSQLDataReader.Item('BankAccountNo')) <> 'null') THEN
                JPSPayrollRegisterTemp.BankAccountNo := DotNetSQLDataReader.Item('BankAccountNo');

              // Deduct to the current net pay. It is part of manual payroll and not part of bank transmital
              IF JPSPayrollRegisterTemp.BankTransmitalStatus = 'Hold' THEN BEGIN
                JPSPayrollRegisterTemp.HoldSalary := JPSPayrollRegisterTemp.NetPay;
                JPSPayrollRegisterTemp.NetPay := 0;
              END;

              // Deduct to the current net pay. It is part of manual payroll and not part of bank transmital
              IF (JPSPayrollRegisterTemp.BankAccountNo = '') AND (JPSPayrollRegisterTemp.BankTransmitalStatus = 'Normal') THEN BEGIN
                JPSPayrollRegisterTemp.NoATM := JPSPayrollRegisterTemp.NetPay;
                JPSPayrollRegisterTemp.NetPay := 0;
              END;

              JPSPayrollRegisterTemp.INSERT;
              InsertJPSPayrollDept(JPSPayrollRegisterTemp);
            END;
            CloseConnection;
          END;

          TransferPayrollRegistePerPeriodGenJournalLine(JPSPayrollGroup);

          IF CreateReconcilingEntry THEN
            GenerateReconcilingEntry(JPSPayrollGroup);

        UNTIL JPSPayrollGroup.NEXT = 0;
      END;

      IF JPSSetup."Purge Payroll Register" THEN
        JPSPayrollRegisterTemp.DELETEALL;
    END;

    LOCAL PROCEDURE TransferPayrollRegistePerPeriodGenJournalLine@27(VAR JPSPayrollGroup@1020 : Record 50810);
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalLine2@1001 : Record 81;
      GenJournalBatch@1002 : Record 232;
      GenJournalTemplate@1003 : Record 80;
      JPSPayrollRegister@1019 : Record 50007;
      SharedDept@1008 : Record 50809;
      SharedEmployee@1010 : Record 50809;
      JPSPayrollRegDataMapping@1012 : Record 50808;
      JPSPayrollRegDataMappingTemp@1014 : Record 50808;
      SharedEmpCount@1009 : Integer;
      Direction@1017 : Decimal;
      TotalAmt@1006 : Decimal;
      EvaluatedAmt@1013 : Decimal;
      RelDeductionEvaluatedAmt@1015 : Decimal;
      RecRef@1005 : RecordRef;
      FieldRef@1004 : FieldRef;
      RelDeducFieldRef@1016 : FieldRef;
      FieldRefEmployeeCode@1011 : FieldRef;
    BEGIN
      JPSPayrollRegDataMapping.LOCKTABLE;
      JPSDeptDataMapping.LOCKTABLE;
      JPSPayrollRegister.LOCKTABLE;

      JPSPayrollRegDataMapping.SETRANGE("Related Deduction", 0);
      IF JPSPayrollRegDataMapping.FINDSET THEN BEGIN
        RecRef.OPEN(DATABASE::"JPS Payroll Register");
        REPEAT
          IF JPSPayrollRegDataMapping."Payroll Register Field" <> 0 THEN BEGIN
            TotalAmt := 0;
            CASE JPSPayrollRegDataMapping.Calculation OF
              JPSPayrollRegDataMapping.Calculation::Sum:
                BEGIN
                  RecRef.RESET;
                  // Filter JPS Payroll Register based on JPS Payroll Register Dept.
                  // Filter year
                  FieldRef := RecRef.FIELD(JPSPayrollRegister.FIELDNO(PayYear));
                  FieldRef.SETRANGE(JPSPayrollGroup.PayYear);
                  // Filter Month
                  FieldRef := RecRef.FIELD(JPSPayrollRegister.FIELDNO(Month));
                  FieldRef.SETRANGE(JPSPayrollGroup.Month);
                  // Filter Payroll Period
                  FieldRef := RecRef.FIELD(JPSPayrollRegister.FIELDNO(PayrollPeriodId));
                  FieldRef.SETRANGE(JPSPayrollGroup.PayrollPeriodId);

                  // Filter the department if applicable
                  IF JPSPayrollRegDataMapping.CompanyId <> 0 THEN BEGIN
                    FieldRef := RecRef.FIELD(JPSPayrollRegisterTemp.FIELDNO(CompanyId));
                    FieldRef.SETRANGE(JPSPayrollRegDataMapping.CompanyId);
                  END;

                  FieldRef := RecRef.FIELD(JPSPayrollRegDataMapping."Payroll Register Field");
                  IF RecRef.FINDSET THEN BEGIN
                    REPEAT
                      EvaluatedAmt := 0;
                      EVALUATE(EvaluatedAmt, FORMAT(FieldRef.VALUE));
                      TotalAmt += EvaluatedAmt;
                    UNTIL RecRef.NEXT = 0;
                  END;
                END;
              JPSPayrollRegDataMapping.Calculation::"Sum by Department":
                BEGIN
                  JPSDeptDataMapping.SETRANGE("JPS Pay. Reg. D-Map No.", JPSPayrollRegDataMapping."Line No.");
                  IF JPSDeptDataMapping.FINDSET THEN
                    REPEAT
                      JPSPayrollRegDataMappingTemp.RESET;
                      JPSPayrollRegDataMappingTemp.SETRANGE("Related Deduction", JPSPayrollRegDataMapping."Line No.");

                      RecRef.RESET;
                      // Start Filter JPS Payroll Register based on JPS Payroll Register Dept.
                      // Filter year
                      FieldRef := RecRef.FIELD(JPSPayrollRegister.FIELDNO(PayYear));
                      FieldRef.SETRANGE(JPSPayrollGroup.PayYear);
                      // Filter Month
                      FieldRef := RecRef.FIELD(JPSPayrollRegister.FIELDNO(Month));
                      FieldRef.SETFILTER(JPSPayrollGroup.Month);
                      // Filter Payroll Period
                      FieldRef := RecRef.FIELD(JPSPayrollRegister.FIELDNO(PayrollPeriodId));
                      FieldRef.SETRANGE(JPSPayrollGroup.PayrollPeriodId);
                      // End Filter JPS Payroll Register based on JPS Payroll Register Dept.

                      // Filter Department or Employee
                      IF JPSDeptDataMapping."Line Type" = JPSDeptDataMapping."Line Type"::Department THEN BEGIN
                        FieldRef := RecRef.FIELD(JPSPayrollRegisterTemp.FIELDNO(DepartmentId));
                        FieldRef.SETRANGE(JPSDeptDataMapping."External Rec. ID");
                      END ELSE BEGIN
                        FieldRef := RecRef.FIELD(JPSPayrollRegisterTemp.FIELDNO(EmployeeCode));
                        FieldRef.SETRANGE(JPSDeptDataMapping.Code);
                      END;

                      // Filter the company if applicable
                      IF JPSDeptDataMapping.CompanyId <> 0 THEN BEGIN
                        FieldRef := RecRef.FIELD(JPSPayrollRegisterTemp.FIELDNO(CompanyId));
                        FieldRef.SETRANGE(JPSDeptDataMapping.CompanyId);
                      END;

                      FieldRef := RecRef.FIELD(JPSPayrollRegDataMapping."Payroll Register Field");
                      IF RecRef.FINDSET THEN BEGIN
                        REPEAT
                          EvaluatedAmt := 0;
                          FieldRefEmployeeCode := RecRef.FIELD(JPSPayrollRegisterTemp.FIELDNO(EmployeeCode));

                          // Department calculation
                          IF JPSDeptDataMapping."Line Type" = JPSDeptDataMapping."Line Type"::Department THEN BEGIN
                            SharedEmployee.SETRANGE("Line Type", SharedEmployee."Line Type"::Employee);
                            SharedEmployee.SETRANGE("Payroll Register Field", JPSPayrollRegDataMapping."Payroll Register Field");
                            SharedEmployee.SETRANGE(Code, FORMAT(FieldRefEmployeeCode.VALUE));
                            IF NOT SharedEmployee.FINDFIRST THEN BEGIN
                              EVALUATE(EvaluatedAmt, FORMAT(FieldRef.VALUE));
                              TotalAmt := ROUND(TotalAmt + EvaluatedAmt);

                              // Computation for Other benefits deduction from the gross amt
                              IF JPSPayrollRegDataMappingTemp.FINDSET THEN
                                REPEAT
                                  RelDeducFieldRef := RecRef.FIELD(JPSPayrollRegDataMappingTemp."Payroll Register Field");
                                  EVALUATE(EvaluatedAmt, FORMAT(RelDeducFieldRef.VALUE));
                                  JPSPayrollRegDataMappingTemp.TempAmount := ROUND(JPSPayrollRegDataMappingTemp.TempAmount + EvaluatedAmt);
                                  TotalAmt := ROUND(TotalAmt - EvaluatedAmt);
                                  JPSPayrollRegDataMappingTemp.MODIFY;
                                UNTIL JPSPayrollRegDataMappingTemp.NEXT = 0;
                            END;
                          END;

                          // Employee Calculation
                          IF JPSDeptDataMapping."Line Type" = JPSDeptDataMapping."Line Type"::Employee THEN BEGIN
                            SharedEmployee.SETRANGE(Code, FORMAT(FieldRefEmployeeCode.VALUE));
                            SharedEmployee.SETRANGE("Payroll Register Field", JPSPayrollRegDataMapping."Payroll Register Field");
                            SharedEmpCount := SharedEmployee.COUNT;
                            EVALUATE(EvaluatedAmt, FORMAT(FieldRef.VALUE));
                            TotalAmt := ROUND(TotalAmt + ROUND(EvaluatedAmt/SharedEmpCount));

                            IF JPSPayrollRegDataMappingTemp.FINDSET THEN
                              REPEAT
                                RelDeducFieldRef := RecRef.FIELD(JPSPayrollRegDataMappingTemp."Payroll Register Field");
                                EVALUATE(EvaluatedAmt, FORMAT(RelDeducFieldRef.VALUE));
                                JPSPayrollRegDataMappingTemp.TempAmount := ROUND(JPSPayrollRegDataMappingTemp.TempAmount + ROUND((EvaluatedAmt/SharedEmpCount)));
                                TotalAmt := ROUND(TotalAmt - ROUND((EvaluatedAmt/SharedEmpCount)));
                                JPSPayrollRegDataMappingTemp.MODIFY;
                              UNTIL JPSPayrollRegDataMappingTemp.NEXT = 0;
                          END;

                        UNTIL RecRef.NEXT = 0;
                      END;

                    UNTIL JPSDeptDataMapping.NEXT = 0;
                END;
            END;
          END;

          IF TotalAmt <> 0 THEN
            InsertGenJournalLine(JPSPayrollRegDataMapping, TotalAmt, JPSPayrollGroup.PayDate);

          JPSPayrollRegDataMappingTemp.RESET;
          JPSPayrollRegDataMappingTemp.SETRANGE("Related Deduction", JPSPayrollRegDataMapping."Line No.");
          IF JPSPayrollRegDataMappingTemp.FINDSET THEN
            REPEAT
              IF JPSPayrollRegDataMappingTemp.TempAmount <> 0 THEN
                InsertGenJournalLine(JPSPayrollRegDataMappingTemp, JPSPayrollRegDataMappingTemp.TempAmount, JPSPayrollGroup.PayDate);
              JPSPayrollRegDataMappingTemp.TempAmount := 0;
              JPSPayrollRegDataMappingTemp.MODIFY;
            UNTIL JPSPayrollRegDataMappingTemp.NEXT = 0;

        UNTIL JPSPayrollRegDataMapping.NEXT = 0;
      END;

      RecRef.CLOSE;
    END;

    LOCAL PROCEDURE GenerateReconcilingEntry@4(VAR JPSPayrollGroup@1000 : Record 50810);
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      ExternalDocNo@1003 : Code[35];
    BEGIN
      ExternalDocNo := STRSUBSTNO('PAYROLL %1', FORMAT(JPSPayrollGroup.PayDate, 0, '<Month Text,3><Day,2>, <Year4>'));
      PurchaseHeader.SETRANGE("Document Type", PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.SETRANGE("Request Type", PurchaseHeader."Request Type"::"Request for Payment");
      PurchaseHeader.SETRANGE("Vendor Invoice No.", ExternalDocNo);
      PurchaseHeader.SETRANGE("Buy-from Vendor No.", JPSSetup."Buy/Pay Vendor Code");
      PurchaseHeader.SETRANGE("Transaction Type", JPSSetup."Transaction Type");
      PurchaseHeader.SETRANGE("Document Date", JPSPayrollGroup.PayDate);
      IF PurchaseHeader.FINDFIRST THEN
        EXIT;

      PurchaseHeader.INIT;
      PurchaseHeader.VALIDATE("Document Type", PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.VALIDATE("Request Type", PurchaseHeader."Request Type"::"Request for Payment");
      PurchaseHeader.VALIDATE("Buy-from Vendor No.", JPSSetup."Buy/Pay Vendor Code");
      PurchaseHeader.VALIDATE("Vendor Invoice No.", ExternalDocNo);
      PurchaseHeader.VALIDATE("Payment Method Code", 'CHECK');
      PurchaseHeader.INSERT(TRUE);

      PurchaseHeader.VALIDATE("Posting Date", JPSPayrollGroup.PayDate);
      PurchaseHeader.VALIDATE("Document Date", JPSPayrollGroup.PayDate);
      PurchaseHeader.VALIDATE("Order Date", JPSPayrollGroup.PayDate);
      PurchaseHeader.VALIDATE("Expected Receipt Date", JPSPayrollGroup.PayDate);
      PurchaseHeader.VALIDATE("Due Date", JPSPayrollGroup.PayDate);
      PurchaseHeader.VALIDATE("Prepayment Due Date", JPSPayrollGroup.PayDate);
      // TODO: Responsibility Center

      IF PurchaseHeader.MODIFY(TRUE) THEN BEGIN
        PurchaseLine.INIT;
        PurchaseLine."Document Type" := PurchaseHeader."Document Type";
        PurchaseLine."Document No." := PurchaseHeader."No.";
        PurchaseLine."Line No." := PurchaseLine.SetLineNo;
        PurchaseLine.VALIDATE(Type, PurchaseLine.Type::"G/L Account");
        PurchaseLine.VALIDATE("No.", JPSSetup."Reconciling Account No.");
        PurchaseLine.VALIDATE(Description, ExternalDocNo);
        PurchaseLine.VALIDATE("Unit of Measure Code", 'LOT');
        PurchaseLine.VALIDATE(Quantity, 1);
        PurchaseLine.Amount := GetCalculatedPayrollPeriodNetPay(JPSPayrollGroup);
        PurchaseLine.VALIDATE(Amount);
        PurchaseLine.INSERT(TRUE);
      END;
      // TODO: Dimension setup
      // TODO: Create a Send Approval Request here!
    END;

    LOCAL PROCEDURE GetCalculatedPayrollPeriodNetPay@2(JPSPayrollGroup@1000 : Record 50810) : Decimal;
    VAR
      TotalNetPay@1001 : Decimal;
    BEGIN
      JPSPayrollRegisterTemp.RESET;
      JPSPayrollRegisterTemp.SETRANGE(CompanyId, JPSPayrollGroup.CompanyId);
      JPSPayrollRegisterTemp.SETRANGE(PayYear, JPSPayrollGroup.PayYear);
      JPSPayrollRegisterTemp.SETRANGE(Month, JPSPayrollGroup.Month);
      JPSPayrollRegisterTemp.SETRANGE(PayrollPeriodId, JPSPayrollGroup.PayrollPeriodId);
      TotalNetPay := 0;
      IF JPSPayrollRegisterTemp.FINDSET THEN
        REPEAT
          TotalNetPay += JPSPayrollRegisterTemp.NetPay;
        UNTIL JPSPayrollRegisterTemp.NEXT = 0;
      EXIT(TotalNetPay);
    END;

    LOCAL PROCEDURE RegisterPayrollPeriod@55(JPSPayrollGroup@1000 : Record 50810) : Boolean;
    VAR
      JPSPayrollRegister@1001 : Record 50007;
    BEGIN
      JPSPayrollRegister.SETRANGE(CompanyId, JPSPayrollGroup.CompanyId);
      JPSPayrollRegister.SETRANGE(PayYear, JPSPayrollGroup.PayYear);
      JPSPayrollRegister.SETRANGE(Month, JPSPayrollGroup.Month);
      JPSPayrollRegister.SETRANGE(PayrollPeriodId, JPSPayrollGroup.PayrollPeriodId);

      EXIT(NOT JPSPayrollRegister.FINDFIRST);
    END;

    LOCAL PROCEDURE OpenConnection@1();
    BEGIN
      JPSSetup.GET;
      JPSSetup.TESTFIELD("Server Name");
      JPSSetup.TESTFIELD("Database Name");

      DATABASESERVERNAME := JPSSetup."Server Name";
      DATABASENAME := JPSSetup."Database Name";
      ConnectionString := STRSUBSTNO(ConStrTxt, DATABASESERVERNAME, DATABASENAME, JPSSetup."User ID", JPSSetup.Password);

      DotNetSQLConnection := DotNetSQLConnection.SqlConnection(ConnectionString);
      DotNetSQLConnection.Open;
    END;

    LOCAL PROCEDURE CloseConnection@3();
    BEGIN
      DotNetSQLConnection.Close;
      CLEAR(DotNetSQLConnection);
    END;

    LOCAL PROCEDURE CreateSQLCommand@10(CommandText@1000 : Text;CommandType@1001 : Text);
    BEGIN
      // Create the SQL command from the SQL connection. finish configuring the command
      DotNetSQLCommand := DotNetSQLConnection.CreateCommand;
      DotNetSQLCommand.CommandText := CommandText;
      DotNetSQLCommand.CommandType := GetEnum(DotNetSQLCommand.CommandType, CommandType);
      DotNetSQLCommand.CommandTimeout := 0;
    END;

    LOCAL PROCEDURE CreateSQLParameter@18(VAR SQLParameterParam@1000 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.SqlClient.SqlParameter";NameParam@1001 : Text[50];TypeParam@1002 : Text[50];DirecitonParam@1003 : Text[50];SizeParam@1004 : Integer;ValueParam@1005 : Text[500]);
    BEGIN
      SQLParameterParam := SQLParameterParam.SqlParameter; // Parameter Constructor
      SQLParameterParam.ParameterName := NameParam; // Parameter Name
      SQLParameterParam.SqlDbType := GetEnum(SQLParameterParam.SqlDbType, TypeParam); // Parameter Type
      SQLParameterParam.Direction := GetEnum(SQLParameterParam.Direction, DirecitonParam); // Parameter Direction
      IF SizeParam > 0 THEN
        SQLParameterParam.Size := SizeParam; // Parameter Size (when Applicable)
      IF (DirecitonParam = 'Input') OR (DirecitonParam = 'InputOutput') THEN
        SQLParameterParam.Value := ValueParam; // Parameter value (when applicable)
    END;

    LOCAL PROCEDURE GetEnum@20(SystemEnum@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Enum";SystemEnumValue@1001 : Text[30]) : Integer;
    VAR
      SystemConvert@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
      EXIT(SystemConvert.ToInt32(SystemEnum.Parse(SystemEnum.GetType, SystemEnumValue)));
    END;

    LOCAL PROCEDURE SetUSPPayrollRegisterCommand@33();
    BEGIN
      CreateSQLCommand('dbo.uspPayrollRegister', 'StoredProcedure');

      // Create and Add the SQL Parameters to the SQL Command
      CreateSQLParameter(DotNetSQLParameter, '@CompanyId', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@FromMonth', 'Int', 'Input', 0, '12');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@FromYear', 'Int', 'Input', 0, '2023');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@FromPeriod', 'Int', 'Input', 0, '2');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ToMonth', 'Int', 'Input', 0, '12');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ToYear', 'Int', 'Input', 0, '2023');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ToPeriod', 'Int', 'Input', 0, '2');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@DepartmentId', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@PayGroupId', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@PayrollFrequencyId', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@EmployeeId', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@SecurityUserId', 'Int', 'Input', 0, '1'); // Security ID must have a value; current value is 1;
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@PayRegType', 'VarChar', 'Input', 150, '');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@WithAllow', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowEarnings', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowExternalEarnings', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowDeductions', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowTotal', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowTotalNoBasic', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowTotalNoAL', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowHours', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowSummary', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowER', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowExternalDeductions', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowBankInfo', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowInfo', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowOtherInfo', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowGroupings', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowGroupingFrom201', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@PerMonth', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@PerPeriod', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@BatchNo', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@IsShowPayrollPeriods', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@IsDirectDownload', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);

      //Execute the Command and Create a SQLDataReader
      //from which we will read the result set records
      DotNetSQLDataReader := DotNetSQLCommand.ExecuteReader();
    END;

    LOCAL PROCEDURE SetJPSPayrollRegisterField@35();
    BEGIN
      OpenConnection;
      SetUSPPayrollRegisterCommand;

      JPSPayrollRegisterField.DELETEALL(TRUE);
      FOR i := 0 TO (DotNetSQLDataReader.FieldCount - 1) DO BEGIN
        JPSPayrollRegisterField.INIT;
        JPSPayrollRegisterField."Field Name" := DotNetSQLDataReader.GetName(i);
        JPSPayrollRegisterField."Field Type" := DotNetSQLDataReader.GetDataTypeName(i);
        JPSPayrollRegisterField.INSERT;
      END;

      CloseConnection;
    END;

    LOCAL PROCEDURE InsertGenJournalLine@7(VAR JPSPayrollRegDataMapping@1000 : Record 50808;CalculatedAmt@1001 : Decimal;PostingDate@1002 : Date);
    VAR
      GenJournalLine@1012 : Record 81;
      GenJournalLine2@1011 : Record 81;
      GenJournalBatch@1010 : Record 232;
      GenJournalTemplate@1009 : Record 80;
      GLEntry@1003 : Record 17;
    BEGIN
      JPSSetup.GET;
      GenJournalBatch.GET(JPSSetup."Gen. Journal Template", JPSSetup."Gen. Journal Batch Name");
      GenJournalTemplate.GET(GenJournalBatch."Journal Template Name");

      GenJournalLine.INIT;
      GenJournalLine.VALIDATE("Journal Template Name", GenJournalBatch."Journal Template Name");
      GenJournalLine.VALIDATE("Journal Batch Name", GenJournalBatch.Name);
      GenJournalLine.VALIDATE("Source Code", GenJournalTemplate."Source Code");

      GenJournalLine2.SETRANGE("Journal Template Name", GenJournalBatch."Journal Template Name");
      GenJournalLine2.SETRANGE("Journal Batch Name", GenJournalBatch.Name);

      IF GenJournalLine2.FINDLAST THEN
        GenJournalLine."Line No." := GenJournalLine2."Line No." + 10000
      ELSE
        GenJournalLine."Line No." := 10000;
      GenJournalLine.VALIDATE("Document Type", GenJournalLine."Document Type"::" ");
      IF DocumentNo = '' THEN
        GenJournalLine.VALIDATE("Document No.", STRSUBSTNO('PAYROLL %1', FORMAT(PostingDate,0,'<Month Text,3><Day,2>, <Year4>')))
      ELSE
        GenJournalLine.VALIDATE("Document No.", DocumentNo);

      GenJournalLine.VALIDATE("External Document No.", STRSUBSTNO('PAYROLL %1', FORMAT(PostingDate,0,'<Month Text,3><Day,2>, <Year4>')));
      GenJournalLine.VALIDATE("Account Type", JPSPayrollRegDataMapping."Account Type");
      GenJournalLine.VALIDATE("Account No.", JPSPayrollRegDataMapping."Account No.");
      GenJournalLine.VALIDATE("Posting Date", PostingDate);
      GenJournalLine.VALIDATE("Document Date", PostingDate);
      GenJournalLine.Description := JPSPayrollRegDataMapping.Description;

      CASE JPSPayrollRegDataMapping."Debit/Credit Amount" OF
        JPSPayrollRegDataMapping."Debit/Credit Amount"::Credit:
          GenJournalLine.Amount := ABS(CalculatedAmt) * -1;
        JPSPayrollRegDataMapping."Debit/Credit Amount"::Debit:
          GenJournalLine.Amount := ABS(CalculatedAmt);
        JPSPayrollRegDataMapping."Debit/Credit Amount"::Reverse:
          BEGIN
            IF CalculatedAmt > 0 THEN
              GenJournalLine.Amount := ABS(CalculatedAmt) * -1
            ELSE
              GenJournalLine.Amount := ABS(CalculatedAmt);
          END;
        ELSE
          GenJournalLine.Amount := CalculatedAmt;
      END;

      GenJournalLine.VALIDATE(Amount);
      GenJournalLine.VALIDATE("VAT Bus. Posting Group", '');
      GenJournalLine.VALIDATE("VAT Prod. Posting Group", '');
      GenJournalLine.VALIDATE("Gen. Posting Type", GenJournalLine."Gen. Posting Type"::Purchase);
      GenJournalLine.VALIDATE("Shortcut Dimension 1 Code", JPSPayrollRegDataMapping."Global Dimension 1 Code");
      GenJournalLine.VALIDATE("Shortcut Dimension 2 Code", JPSPayrollRegDataMapping."Global Dimension 2 Code");
      GenJournalLine.VALIDATE("Dimension Set ID", JPSPayrollRegDataMapping."Dimension Set ID");
      GenJournalLine.INSERT(TRUE);
    END;

    PROCEDURE ExportPayrollRegisterToExcel@6();
    VAR
      ExcelBuffer@1003 : TEMPORARY Record 370;
    BEGIN
      OpenConnection;
      CreateSQLCommand('dbo.uspPayrollRegister2', 'StoredProcedure');

      // Create and Add the SQL Parameters to the SQL Command
      CreateSQLParameter(DotNetSQLParameter, '@CompanyId', 'Int', 'Input', 0,'1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@FromMonth', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@FromYear', 'Int', 'Input', 0, '2024');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@FromPeriod', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ToMonth', 'Int', 'Input', 0, '12');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ToYear', 'Int', 'Input', 0, '2024');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ToPeriod', 'Int', 'Input', 0, '2');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@DepartmentId', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@PayGroupId', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@PayrollFrequencyId', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@EmployeeId', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@SecurityUserId', 'Int', 'Input', 0, '1'); // Security ID must have a value; current value is 1;
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@PayRegType', 'VarChar', 'Input', 150, '');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@WithAllow', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowEarnings', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowExternalEarnings', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowDeductions', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowTotal', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowTotalNoBasic', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowTotalNoAL', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowHours', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowSummary', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowER', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowExternalDeductions', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowBankInfo', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowInfo', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowOtherInfo', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowGroupings', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@ShowGroupingFrom201', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@PerMonth', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@PerPeriod', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@BatchNo', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@IsShowPayrollPeriods', 'Int', 'Input', 0, '1');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);
      CreateSQLParameter(DotNetSQLParameter, '@IsDirectDownload', 'Int', 'Input', 0, '0');
      DotNetSQLCommand.Parameters.Add(DotNetSQLParameter);

      //Execute the Command and Create a SQLDataReader
      //from which we will read the result set records
      DotNetSQLDataReader := DotNetSQLCommand.ExecuteReader();


      // Column validation of report
      FOR i := 0 TO (DotNetSQLDataReader.FieldCount - 1) DO BEGIN
        ExcelBuffer.AddColumn(DotNetSQLDataReader.GetName(i), FALSE, '', TRUE, FALSE, TRUE, '', ExcelBuffer."Cell Type"::Text);
      END;


      WHILE DotNetSQLDataReader.Read DO BEGIN
        ExcelBuffer.NewRow;
        FOR i := 0 TO (DotNetSQLDataReader.FieldCount - 1) DO BEGIN
          IF UPPERCASE(FORMAT(DotNetSQLDataReader.GetDataTypeName(i))) IN ['MONEY', 'INT','DECIMAL'] THEN
            ExcelBuffer.AddColumn(DotNetSQLDataReader.GetValue(i), FALSE, '', FALSE, FALSE, FALSE, '', ExcelBuffer."Cell Type"::Number)
          ELSE
            ExcelBuffer.AddColumn(DotNetSQLDataReader.GetValue(i), FALSE, '', FALSE, FALSE, FALSE, '', ExcelBuffer."Cell Type"::Text);
        END;
      END;

      IF ExcelBuffer.FINDSET THEN
        ExcelBuffer.CreateBookAndOpenExcel('','Payroll Entries','','',USERID);

      CloseConnection;
    END;

    LOCAL PROCEDURE InsertJPSPayrollDept@15(JPSPayrollRegister@1000 : Record 50007);
    VAR
      JPSPayrollRegisterDept@1001 : Record 50811;
    BEGIN
      IF NOT JPSPayrollRegisterDept.GET(JPSPayrollRegister.CompanyId, JPSPayrollRegister.DepartmentId) THEN BEGIN
        JPSPayrollRegisterDept.INIT;
        JPSPayrollRegisterDept.CompanyId := JPSPayrollRegister.CompanyId;
        JPSPayrollRegisterDept.DepartmentId := JPSPayrollRegister.DepartmentId;
        JPSPayrollRegisterDept.Department := JPSPayrollRegister.Department;
        JPSPayrollRegisterDept.INSERT;
      END;
    END;

    LOCAL PROCEDURE TestPayrollEntryAutomation@64();
    BEGIN
      JPSSetup.GET;
      JPSSetup.TESTFIELD("Database Name");
      JPSSetup.TESTFIELD("Server Name");
      JPSSetup.TESTFIELD("User ID");
      JPSSetup.TESTFIELD(Password);

      JPSSetup.TESTFIELD("Gen. Journal Template");
      JPSSetup.TESTFIELD("Gen. Journal Batch Name");

      IF CreateReconcilingEntry THEN BEGIN
        JPSSetup.TESTFIELD("Buy/Pay Vendor Code");
        JPSSetup.TESTFIELD("Transaction Type");
        JPSSetup.TESTFIELD("Reconciling Account No.");
      END;
    END;

    EVENT DotNetSQLConnection@1000::InfoMessage@53(sender@1001 : Variant;e@1000 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.SqlClient.SqlInfoMessageEventArgs");
    BEGIN
    END;

    EVENT DotNetSQLConnection@1000::StateChange@54(sender@1001 : Variant;e@1000 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.StateChangeEventArgs");
    BEGIN
    END;

    EVENT DotNetSQLConnection@1000::Disposed@55(sender@1001 : Variant;e@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.EventArgs");
    BEGIN
    END;

    EVENT DotNetSQLCommand@1001::StatementCompleted@59(sender@1001 : Variant;e@1000 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.StatementCompletedEventArgs");
    BEGIN
    END;

    EVENT DotNetSQLCommand@1001::Disposed@60(sender@1001 : Variant;e@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.EventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

