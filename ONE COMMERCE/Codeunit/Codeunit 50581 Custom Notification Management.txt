OBJECT Codeunit 50581 Custom Notification Management
{
  OBJECT-PROPERTIES
  {
    Date=06/26/18;
    Time=[ 4:06:23 AM];
    Modified=Yes;
    Version List=NAVOC1.00.02.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ActionApproveTxt@1014 : TextConst 'ENU=requires your approval.';
      ActionApprovedTxt@1013 : TextConst 'ENU=has been approved.';
      ActionCreateTxt@1012 : TextConst 'ENU=has been created and successfully completed the approval process.';
      ActionCancelTxt@1011 : TextConst 'ENU=has been canceled.';
      ActionRejectTxt@1010 : TextConst 'ENU=has been rejected.';
      ActionOpenTxt@1009 : TextConst 'ENU=has been reopened.';
      ActionStartTxt@1000 : TextConst 'ENU=has been started by %1. Please see the updated %2 information below. If you have concern please contact your handler.';
      Action2StartTxt@1031 : TextConst 'ENU=has been started by %1. Please see the updated %2 information below.';
      ActionPostponedTxt@1021 : TextConst 'ENU=has been postponed by %1. Please see the updated %2 information below.';
      ActionCompletedTxt@1028 : TextConst 'ENU=has been completed by %1. Please see the updated %2 information below.';
      ActionResolvedClosedTxt@1003 : TextConst 'ENU=has been %1 by %2. Please see the updated %3 information below. If you have concern please contact your handler.';
      ActionCloseTicketSDRTxt@1027 : TextConst 'ENU=has been closed and transferred to software development request by %1. Please see the updated ticket''s information below. If you have concern please contact your handler.';
      ActionHandlerChangeTxt@1017 : TextConst 'ENU=, handler has been updated. Your new handler is %1. If you have concern please contact your handler.';
      ActionNewRecordLinkTxt@1020 : TextConst 'ENU=: %1 added a %2. Please see the %2 below. If you have concern please contact your handler.';
      ActionReleaseTxt@1006 : TextConst 'ENU="has been released. Please wait for your handler to reply. "';
      ActionReleaseToHandlerTxt@1023 : TextConst 'ENU=has been released. You can start handling the %1.';
      ActionCommitmentChangeTxt@1015 : TextConst 'ENU=commitment date has been changed by %1. Please see the updated %2 details below. If you have concern please contact your handler.';
      Action2CommitmentChangeTxt@1032 : TextConst 'ENU=commitment date has been changed by %1. Please see the updated %2 details below.';
      ActionChangeOfPriorityLevel@1018 : TextConst 'ENU=has been set to %1 priority. Please see the updated %2 information below.';
      ActionChangeOfSizeOfRequirementsLevel@1004 : TextConst 'ENU=: %1 has been set the %2 to %3. Completion of the request may vary depending on the %2. Please see the updated %4 information below.';
      ActionAgingBeforeDueTxt@1024 : TextConst 'ENU=is reaching the deadline. You have <string>%1</strong> day/s left to complete the %2.';
      ActionAgingOverdueTxt@1026 : TextConst 'ENU=<br/>%1 day/s have passed since the due date for this %2. Please tend to this %2 immediately.';
      Action2AgingBeforeDueTxt@1025 : TextConst 'ENU=Expected closing of %1 is on <strong>%2 %3</strong>.';
      Action3AgingBeforeDueTxt@1033 : TextConst 'ENU=Expected closing of %1 is on <strong>%2 </strong>.';
      ActionPercentCompleteUpdate@1034 : TextConst 'ENU="percent complete has been updated to %1. "';
      StatusChangeActionStartedTxt@1001 : TextConst 'ENU=Expected closing of %1 is on <strong>%2</strong>.';
      StatusChangeActionResolvedClosedTxt@1002 : TextConst 'ENU=%1 has been %2 <strong>%3 %4.</strong>';
      StatusChangeAction2ResolvedClosedTxt@1035 : TextConst 'ENU=%1 has been %2 <strong>%3 </strong>';
      StatusChangeActionTicketClosedTxt@1005 : TextConst 'ENU=Ticket has been closed <strong>%1.</strong> Reason for closing, %2.';
      StatusChangeActionReleasedTxt@1007 : TextConst 'ENU=Your %1 has been forwarded to one of our handlers.';
      NotificationManagement@1046 : Codeunit 1510;
      StringConversionManagement@1008 : Codeunit 47;
      StatusChangeActionCommitmentIsUpdatedTxt@1016 : TextConst 'ENU=The updated closing of %1 will be on <strong>%2 %3.</strong>';
      StatusChangeActionNewNoteTxt@1019 : TextConst 'ENU=A new note has been added.';
      StatusChangeActionFieldChangeTxt@1022 : TextConst 'ENU=%1 details had been updated.';
      PurchDocTypeTxt@1029 : TextConst '@@@="%1 = Document No.";ENU=Purchase %1';
      StripoEmailTemplate@1047 : Codeunit 50600;
      InStr@1030 : InStream;
      SalesDocTypeTxt@1048 : TextConst 'ENU=Sales %1';

      StripoContentComment1@1043 : TextConst
        'ENU="<table cellpadding=""0"" cellspacing=""0"" class=""es-content"" align=""center"" style=""mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;table-layout:fixed !important;width:100%""><tr><td align=""center"" id=""comment-remarks-portion"" style=""padding:0;Margin:0""><table bgcolor=""#ffffff"" class=""es-content-body"" align=""center"" cellpadding=""0"" cellspacing=""0"" style=""mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;background-color:#FFFFFF;width:600px""><tr><td align=""left"" style=""padding:0;Margin:0""><table cellpadding=""0"" cellspacing=""0"" width=""100%"" style=""mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px""><tr><td align=""center"" valign=""top"" style=""padding:0;Margin:0;width:600px""><table cellpadding=""0"" cellspacing=""0"" width=""100%"" role=""presentation"" style=""mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px""><tr><td align=""center"" style=""padding:10px;Margin:0;font-size:0""><"';

      StripoContentComment2@1042 : TextConst
        'ENU="table border=""0"" width=""100%"" height=""100%"" cellpadding=""0"" cellspacing=""0"" role=""presentation"" style=""mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px""><tr><td style=""padding:0;Margin:0;border-bottom:1px solid #cccccc;background:unset;height:1px;width:100%;margin:0px""></td></tr></table></td></tr></table></td></tr></table></td></tr><tr><td align=""left"" style=""padding:10px;Margin:0""><table cellpadding=""0"" cellspacing=""0"" width=""100%"" style=""mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px""><tr><td align=""center"" valign=""top"" style=""padding:0;Margin:0;width:580px""><table cellpadding=""0"" cellspacing=""0"" width=""100%"" role=""presentation"" style=""mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px""><tr><td align=""left"" style=""padding:0;Margin:0""><p style=""Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-family:arial, ''helvetica neue'', helvetica, sans-serif"';
      StripoContentComment3@1041 : TextConst 'ENU=";line-height:24px;color:#333333;font-size:16px""><b>COMMENT/REMARKS:</b></p></td></tr></table></td></tr></table></td></tr>%StripoCommentPart% </table></td></tr></table>"';

      StripoContentBody1@1040 : TextConst
        'ENU="<tr><td class=""esdev-adapt-off"" align=""left"" style=""Margin:0;padding-top:10px;padding-bottom:10px;padding-left:20px;padding-right:20px""><table cellpadding=""0"" cellspacing=""0"" class=""esdev-mso-table"" style=""mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;width:560px""><tr><td class=""esdev-mso-td"" valign=""top"" style=""padding:0;Margin:0""><table cellpadding=""0"" cellspacing=""0"" class=""es-left"" align=""left"" style=""mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;float:left""><tr><td class=""es-m-p0r"" align=""center"" style=""padding:0;Margin:0;width:100px""><table cellpadding=""0"" cellspacing=""0"" width=""100%"" role=""presentation"" style=""mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px""><tr><td align=""center"" style=""padding:0;Margin:0;font-size:0px""><img class=""adapt-img"" src=""https://wreier.stripocdn.email/content/guids/CABINET_9a1892b4e097d70ac9a9b24cd80f650b/images/clipart546487.png"" alt style=""display:block;bor"';

      StripoContentBody2@1039 : TextConst
        'ENU="der:0;outline:none;text-decoration:none;-ms-interpolation-mode:bicubic"" width=""70""></td></tr></table></td></tr></table></td><td class=""esdev-mso-td"" valign=""top"" style=""padding:0;Margin:0""><table cellpadding=""0"" cellspacing=""0"" class=""es-right"" align=""right"" style=""mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px;float:right""><tr><td align=""center"" style=""padding:0;Margin:0;width:460px""><table cellpadding=""0"" cellspacing=""0"" width=""100%"" role=""presentation"" style=""mso-table-lspace:0pt;mso-table-rspace:0pt;border-collapse:collapse;border-spacing:0px""><tr><td align=""left"" style=""padding:0;Margin:0""><p style=""Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-family:arial, ''helvetica neue'', helvetica, sans-serif;line-height:21px;color:#333333;font-size:14px""><u><strong>%UserID%</strong></u></p></td></tr><tr><td align=""left"" style=""padding:0;Margin:0""><p style=""Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-"';
      StripoContentBody3@1038 : TextConst 'ENU="line-height-rule:exactly;font-family:arial, ''helvetica neue'', helvetica, sans-serif;line-height:21px;color:#333333;font-size:14px""><strong>Datetime:</strong>%Datetime% </p></td></tr>%StripoCommentDetails% </table></td></tr></table></td></tr></table></td></tr>"';
      StripoRecordNote@1037 : TextConst 'ENU="<tr><td align=""left"" style=""padding:0;Margin:0;padding-top:5px;padding-left:10px""><p style=""Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-family:arial, ''helvetica neue'', helvetica, sans-serif;line-height:21px;color:#333333;font-size:14px"">%RecordNote%</p></td></tr>"';
      StripoRecordLink@1036 : TextConst 'ENU="<tr><td align=""left"" style=""padding:0;Margin:0;padding-top:5px;padding-left:10px""><p style=""Margin:0;-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;font-family:arial, ''helvetica neue'', helvetica, sans-serif;line-height:21px;color:#333333;font-size:14px""><a target=""_blank"" href=""%RecordLink%"" style=""-webkit-text-size-adjust:none;-ms-text-size-adjust:none;mso-line-height-rule:exactly;text-decoration:underline;color:#5C68E2;font-size:14px"">%RecordLinkText%</a>&nbsp; </p></td></tr>"';
      TitleApprovalSystemTxt@1044 : TextConst 'ENU=Microsoft Dynamics NAV %1 Approval';
      TitleUserCredentialTxt@1045 : TextConst 'ENU=User Credential';

    PROCEDURE PopulateCustomNotificationTemplateWithRecIndependentInfo@19(VAR NotificationBody@1002 : DotNet "'mscorlib'.System.String";NotificationEntry@1007 : Record 1511) : Boolean;
    VAR
      NotificationSetup@1004 : Record 1512;
      Customer@1000 : Record 18;
      Vendor@1006 : Record 23;
      Item@1013 : Record 27;
      INTP@1011 : Record 50040;
      JobOrder@1014 : Record 50012;
      RFQ@1012 : Record 50013;
      PurchaseHeader@1010 : Record 38;
      SalesHeader@1009 : Record 36;
      Ticket@1015 : Record 50562;
      DataTypeManagement@1003 : Codeunit 701;
      NotificationManagement@1008 : Codeunit 1510;
      RecRef@1001 : RecordRef;
    BEGIN
      // Applied to Codeunit 1510 Notification Management > PopulateNotificationTemplateWithRecIndependentInfo
      {
      NotificationManagement.PopulateNotificationTemplateWithRecIndependentInfo
      *** Start of Code
        ELSE
          IF NOT CustomNotificationManagement.PopulateCustomNotificationTemplateWithRecIndependentInfo(NotificationBodyString, NotificationEntry) THEN
            NotificationBodyString := NotificationBodyString.Replace('%Title%',TitleWorkflowNotificationEngineTxt);
      *** End of Code

      *** Replace
        ELSE
          NotificationBodyString := NotificationBodyString.Replace('%Title%',TitleWorkflowNotificationEngineTxt);
      ** End of code to replace
      }
      CASE NotificationEntry.Type OF
        NotificationEntry.Type::"Appvl-Tckt":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, Ticket.TABLECAPTION));
        NotificationEntry.Type::"Approval-INTP":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, INTP.TABLECAPTION));
        NotificationEntry.Type::"Approval-RFQ":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, RFQ.TABLECAPTION));
        NotificationEntry.Type::"Approval-JO":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, JobOrder.TABLECAPTION));
        NotificationEntry.Type::"Approval-CA":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, PurchaseHeader."Request Type"::"Cash Advance"));
        NotificationEntry.Type::"Approval-RFPay":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, PurchaseHeader."Request Type"::"Request for Payment"));
        // Sales Header
        NotificationEntry.Type::"Approval-Sales":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, 'Sales ' + FORMAT(SalesHeader."Document Type")));
        NotificationEntry.Type::"Approval-TERF":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, SalesHeader."Request type"::"Tools & Equipment Requisition"));
        NotificationEntry.Type::"Approval-WW":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, SalesHeader."Request type"::Withdrawal));
        NotificationEntry.Type::"Approval-C-RMA":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, SalesHeader."Request type"::"Return Merchandise Authorization"));
        NotificationEntry.Type::"Approval-RFE":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, SalesHeader."Request type"::"Request For Exception"));
        NotificationEntry.Type::"Approval-WCR":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, SalesHeader."Request type"::"Work Change Request"));
        NotificationEntry.Type::"Approval-Vendor":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, Vendor.TABLECAPTION));
        NotificationEntry.Type::"Approval-Customer":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, Customer.TABLECAPTION));
        NotificationEntry.Type::"Approval-Item":
          NotificationBody := NotificationBody.Replace('%Title%',STRSUBSTNO(TitleApprovalSystemTxt, Item.TABLECAPTION));
        NotificationEntry.Type::"RU-Pass":
          NotificationBody := NotificationBody.Replace('%Title%',TitleUserCredentialTxt);
        ELSE
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE PopulateCustomNotificationTemplateWithRecordInfo@12(VAR NotificationBody@1002 : DotNet "'mscorlib'.System.String";NotificationEntry@1001 : Record 1511);
    VAR
      SalesHeader@1012 : Record 36;
      INTP@1011 : Record 50040;
      Opportunity@1010 : Record 5092;
      OpportunityEntry@1009 : Record 5093;
      ToDo@1007 : Record 5080;
      Ticket@1013 : Record 50562;
      SDR@1014 : Record 50555;
      Task@1015 : Record 50556;
      DataTypeManagement@1004 : Codeunit 701;
      RecRef@1003 : RecordRef;
      RecRef2@1000 : RecordRef;
      NotificationBodyString@1005 : DotNet "'mscorlib'.System.String";
      ClientLinks@1006 : Text;
      DaysLeft@1008 : Integer;
    BEGIN
      DataTypeManagement.GetRecordRef(NotificationEntry."Triggered By Record",RecRef);
        CASE NotificationEntry.Type OF
          NotificationEntry.Type::"New-Tckt": // Status Notification of Ticket
            BEGIN
              RecRef.SETTABLE(Ticket);
              CASE NotificationEntry."Ticket Action Type" OF
                NotificationEntry."Ticket Action Type"::"Start Ticket":
                  BEGIN
                    IF Ticket."Handler User ID" = '' THEN
                      NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionStartTxt, NotificationEntry."Created By", LOWERCASE(Ticket.TABLECAPTION)))
                    ELSE
                      NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionStartTxt, Ticket."Handler User ID", LOWERCASE(Ticket.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionStartedTxt, Ticket.TABLECAPTION, FORMAT(Ticket."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                  END;
                NotificationEntry."Ticket Action Type"::"Change of Commitment Date":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionCommitmentChangeTxt, Ticket."Handler User ID", LOWERCASE(Ticket.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionCommitmentIsUpdatedTxt, LOWERCASE(Ticket.TABLECAPTION), FORMAT(Ticket."Finishing Date",0,'<Month Text> <Day,2>, <Year4>'), Ticket."Finishing Time"));
                  END;
                NotificationEntry."Ticket Action Type"::"Change of Handler":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionHandlerChangeTxt, Ticket."Handler User ID"));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionCommitmentIsUpdatedTxt, LOWERCASE(Ticket.TABLECAPTION), FORMAT(Ticket."Finishing Date",0,'<Month Text> <Day,2>, <Year4>'), Ticket."Finishing Time"));
                  END;
                NotificationEntry."Ticket Action Type"::"New Note", NotificationEntry."Ticket Action Type"::"New Link":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',
                      STRSUBSTNO(ActionNewRecordLinkTxt, NotificationEntry."Created By",LOWERCASE(FORMAT(NotificationEntry."Ticket Action Type"))));
                    IF Ticket.Status IN [Ticket.Status::Closed, Ticket.Status::Resolved] THEN
                      NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                        STRSUBSTNO(StatusChangeActionResolvedClosedTxt,Ticket.TABLECAPTION,LOWERCASE(FORMAT(Ticket.Status)),FORMAT(Ticket."Date Resolved",0,'<Month Text> <Day,2>, <Year4>'),Ticket."Time Resolved"))
                    ELSE
                      NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                        STRSUBSTNO(StatusChangeActionStartedTxt, Ticket.TABLECAPTION, FORMAT(Ticket."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                  END;
                NotificationEntry."Ticket Action Type"::Resolved:
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',
                      STRSUBSTNO(ActionResolvedClosedTxt, LOWERCASE(FORMAT(Ticket.Status)), Ticket."Handler User ID", LOWERCASE(Ticket.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionResolvedClosedTxt,Ticket.TABLECAPTION,LOWERCASE(FORMAT(Ticket.Status)),FORMAT(Ticket."Date Resolved",0,'<Month Text> <Day,2>, <Year4>'), FORMAT(Ticket."Time Resolved")));
                  END;
                NotificationEntry."Ticket Action Type"::Closed:
                  BEGIN
                    IF Ticket."SDR No." = '' THEN
                      NotificationBody := NotificationBody.Replace('%Action%',
                        STRSUBSTNO(ActionResolvedClosedTxt, LOWERCASE(FORMAT(Ticket.Status)), Ticket."Handler User ID", LOWERCASE(Ticket.TABLECAPTION)))
                    ELSE
                      NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionCloseTicketSDRTxt, Ticket."Handler User ID"));

                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionTicketClosedTxt, FORMAT(Ticket."Finishing Date",0,'<Month Text> <Day,2>, <Year4>'), StringConversionManagement.WindowsToASCII(Ticket."Reason for Closing/Resolution")));
                  END;
                NotificationEntry."Ticket Action Type"::"Change of Priority":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionChangeOfPriorityLevel, FORMAT(Ticket."Priority Level"), Ticket.TABLECAPTION));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',STRSUBSTNO(StatusChangeActionFieldChangeTxt, Ticket.TABLECAPTION));
                  END;
                NotificationEntry."Ticket Action Type"::"Released To Handler":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionReleaseToHandlerTxt, LOWERCASE(Ticket.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%','');
                  END;
                NotificationEntry."Ticket Action Type"::"Aging Before Due":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionAgingBeforeDueTxt, Ticket.GetNoOfDaysLeft, LOWERCASE(Ticket.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(Action2AgingBeforeDueTxt, LOWERCASE(Ticket.TABLECAPTION), FORMAT(Ticket."Finishing Date",0,'<Month Text> <Day,2>, <Year4>'), FORMAT(Ticket."Finishing Time")));
                  END;
                NotificationEntry."Ticket Action Type"::"Aging Overdue":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionAgingOverdueTxt, (Ticket.GetNoOfDaysLeft), LOWERCASE(Ticket.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(Action2AgingBeforeDueTxt, LOWERCASE(Ticket.TABLECAPTION), FORMAT(Ticket."Finishing Date",0,'<Month Text> <Day,2>, <Year4>'), FORMAT(Ticket."Finishing Time")));
                  END;
                ELSE BEGIN
                  NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionReleaseTxt));
                  NotificationBody := NotificationBody.Replace('%StatusChangeAction%',STRSUBSTNO(StatusChangeActionReleasedTxt, LOWERCASE(Ticket.TABLECAPTION)));
                END;
              END;

              // Change the StatusChangeAction depending on the status of the table
              IF NOT (Ticket.Status IN [Ticket.Status::Resolved, Ticket.Status::Closed]) THEN
                NotificationBody := NotificationBody.Replace('%StatusChangeAction%',STRSUBSTNO(StatusChangeActionStartedTxt, Ticket.TABLECAPTION,
                    FORMAT(Ticket."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')))
              ELSE
                NotificationBody := NotificationBody.Replace('%StatusChangeAction%', '');
            END;

          NotificationEntry.Type::"New-SDR": // Status Notification of SDR
            BEGIN
              RecRef.SETTABLE(SDR);
              CASE NotificationEntry."Action Type" OF
                NotificationEntry."Action Type"::Started:
                  BEGIN
                    IF SDR."Handler User ID" = '' THEN
                      NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionStartTxt, NotificationEntry."Created By", LOWERCASE(SDR.TABLECAPTION)))
                    ELSE
                      NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionStartTxt, SDR."Handler User ID", LOWERCASE(SDR.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(SDR.TABLECAPTION), FORMAT(SDR."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                  END;
                NotificationEntry."Action Type"::"Change of Commitment Date":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionCommitmentChangeTxt, SDR."Handler User ID", LOWERCASE(SDR.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionCommitmentIsUpdatedTxt, LOWERCASE(SDR.TABLECAPTION), FORMAT(SDR."Finishing Date",0,'<Month Text> <Day,2>, <Year4>'), SDR."Finishing Time"));
                  END;
                NotificationEntry."Action Type"::"Change of Handler":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionHandlerChangeTxt, SDR."Handler User ID"));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionCommitmentIsUpdatedTxt, LOWERCASE(SDR.TABLECAPTION), FORMAT(SDR."Finishing Date",0,'<Month Text> <Day,2>, <Year4>'), SDR."Finishing Time"));
                  END;
                NotificationEntry."Action Type"::"New Note",NotificationEntry."Action Type"::"New Link":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',
                      STRSUBSTNO(ActionNewRecordLinkTxt, NotificationEntry."Created By", LOWERCASE(FORMAT(NotificationEntry."Action Type"))));
                    IF SDR.Status IN [SDR.Status::Closed, SDR.Status::Resolved] THEN
                      NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                        STRSUBSTNO(StatusChangeActionResolvedClosedTxt,SDR.TABLECAPTION,LOWERCASE(FORMAT(SDR.Status)),FORMAT(SDR."Date Resolved",0,'<Month Text> <Day,2>, <Year4>'),SDR."Time Resolved"))
                    ELSE
                      NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                        STRSUBSTNO(StatusChangeActionStartedTxt, SDR.TABLECAPTION, FORMAT(SDR."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                  END;
                NotificationEntry."Action Type"::Resolved,NotificationEntry."Action Type"::Closed:
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionResolvedClosedTxt,LOWERCASE(FORMAT(SDR.Status)), SDR."Handler User ID", LOWERCASE(SDR.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionResolvedClosedTxt,SDR.TABLECAPTION,LOWERCASE(FORMAT(SDR.Status)),FORMAT(SDR."Date Resolved",0,'<Month Text> <Day,2>, <Year4>'), SDR."Time Resolved"));
                  END;
                NotificationEntry."Action Type"::"Change of Priority":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionChangeOfPriorityLevel, FORMAT(SDR."Priority Level"), LOWERCASE(SDR.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',STRSUBSTNO(StatusChangeActionFieldChangeTxt, LOWERCASE(SDR.TABLECAPTION)));
                  END;
                NotificationEntry."Action Type"::"Released To Handler":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionReleaseToHandlerTxt, LOWERCASE(SDR.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%','');
                  END;
                NotificationEntry."Action Type"::"Aging Before Due":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionAgingBeforeDueTxt, SDR.GetNoOfDaysLeft, LOWERCASE(SDR.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(Action2AgingBeforeDueTxt, LOWERCASE(SDR.TABLECAPTION), FORMAT(SDR."Finishing Date",0,'<Month Text> <Day,2>, <Year4>'), SDR."Finishing Time"));
                  END;
                NotificationEntry."Action Type"::"Aging Overdue":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionAgingOverdueTxt, (SDR.GetNoOfDaysLeft), LOWERCASE(SDR.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(Action2AgingBeforeDueTxt, LOWERCASE(SDR.TABLECAPTION), FORMAT(SDR."Finishing Date",0,'<Month Text> <Day,2>, <Year4>'), SDR."Finishing Time"));
                  END;
                NotificationEntry."Action Type"::"Size of Requirements":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',
                      STRSUBSTNO(ActionChangeOfSizeOfRequirementsLevel,NotificationEntry."Created By",LOWERCASE(SDR.FIELDCAPTION("Size of Requirement")), SDR."Size of Requirement",LOWERCASE(SDR.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(SDR.TABLECAPTION), FORMAT(SDR."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                  END;
                ELSE BEGIN
                  NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionReleaseTxt));
                  NotificationBody := NotificationBody.Replace('%StatusChangeAction%',STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(SDR.TABLECAPTION)));
                END;
              END;

              // Change the StatusChangeAction depending on the status of the table
              IF NOT (Ticket.Status IN [SDR.Status::Resolved, SDR.Status::Closed]) THEN
                NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                  STRSUBSTNO(StatusChangeActionStartedTxt, SDR.TABLECAPTION, FORMAT(SDR."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')))
              ELSE
                NotificationBody := NotificationBody.Replace('%StatusChangeAction%', '');
            END;

          NotificationEntry.Type::"New-Task": // Status Notification of Task
            BEGIN
              RecRef.SETTABLE(Task);
              CASE NotificationEntry."Action Type" OF
                NotificationEntry."Action Type"::Started:
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(Action2StartTxt, Task."Assigned To", LOWERCASE(Task.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                  END;
                NotificationEntry."Action Type"::Postponed:
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionPostponedTxt, Task."Assigned To", LOWERCASE(Task.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To"));
                  END;
                NotificationEntry."Action Type"::Completed:
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionCompletedTxt, Task."Completed By", LOWERCASE(Task.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To"));
                  END;
                NotificationEntry."Action Type"::"Change of Priority":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionChangeOfPriorityLevel, FORMAT(Task.Priority), LOWERCASE(Task.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',STRSUBSTNO(StatusChangeActionFieldChangeTxt, LOWERCASE(Task.TABLECAPTION)));
                  END;
                NotificationEntry."Action Type"::"Change of Commitment Date":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(Action2CommitmentChangeTxt, Task."Assigned To", LOWERCASE(Task.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionCommitmentIsUpdatedTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                  END;
                NotificationEntry."Action Type"::"Aging Before Due":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionAgingBeforeDueTxt, Task.GetNoOfDaysLeft, LOWERCASE(Task.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(Action3AgingBeforeDueTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                  END;
                NotificationEntry."Action Type"::"Aging Overdue":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionAgingOverdueTxt, (Task.GetNoOfDaysLeft), LOWERCASE(Task.TABLECAPTION)));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(Action3AgingBeforeDueTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                  END;
                NotificationEntry."Action Type"::"Percent Complete Update":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionPercentCompleteUpdate, FORMAT(Task."Percent Complete",0,'<precision, 1:0><standard format, 0> %')));
                    NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                      STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To"));
                  END;
                NotificationEntry."Action Type"::"New Note",NotificationEntry."Action Type"::"New Link":
                  BEGIN
                    NotificationBody := NotificationBody.Replace('%Action%',
                      STRSUBSTNO(ActionNewRecordLinkTxt, NotificationEntry."Created By", LOWERCASE(FORMAT(NotificationEntry."Action Type"))));
                    IF Task.Status = Task.Status::Completed THEN
                      NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                        STRSUBSTNO(StatusChangeAction2ResolvedClosedTxt,Task.TABLECAPTION,LOWERCASE(FORMAT(Task.Status)),FORMAT(Task."Completed DateTime")))
                    ELSE
                      NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                        STRSUBSTNO(StatusChangeActionStartedTxt, Task.TABLECAPTION, FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                  END;
              END;

            END;

          ELSE BEGIN
            // End Statement
          END;
        END;
    END;

    PROCEDURE ReplaceTokensWithCustomApprovalInfo@1(VAR NotificationBody@1000 : DotNet "'mscorlib'.System.String";RecRef@1001 : RecordRef;NotificationType@1002 : Option);
    VAR
      Vendor@1016 : Record 23;
      PurchaseHeader@1007 : Record 38;
      SalesHeader@1019 : Record 36;
      ApprovalEntry@1003 : Record 454;
      NotificationEntry@1004 : Record 1511;
      Tickets@1011 : Record 50562;
      SDR@1005 : Record 50555;
      Task@1008 : Record 50556;
      INTP@1015 : Record 50040;
      JobOrder@1017 : Record 50012;
      RFQ@1018 : Record 50013;
      TicketNotifDispatcher@1012 : Codeunit 50579;
      StringConversionMgmt@1013 : Codeunit 47;
      SDRNotifDispatcher@1006 : Codeunit 50585;
      TaskNotifDispatcher@1009 : Codeunit 50588;
      InStr@1010 : InStream;
      DescriptionTxt@1014 : Text;
    BEGIN
      // Record from approval entry
      RecRef.SETTABLE(ApprovalEntry);

      CASE NotificationType OF
        NotificationEntry.Type::"Approval-PO", NotificationEntry.Type::"Approval-CA",NotificationEntry.Type::"Approval-RFPay",NotificationEntry.Type::"Approval-RFPur",
        NotificationEntry.Type::"Appvl-Tckt",NotificationEntry.Type::"Appvl-SDR",NotificationEntry.Type::"Approval-INTP",
        NotificationEntry.Type::"Approval-RFQ", NotificationEntry.Type::"Approval-JO", NotificationEntry.Type::"Approval-WW", NotificationEntry.Type::"Approval-TERF", NotificationEntry.Type::"Approval-RFE":
          BEGIN
            CASE ApprovalEntry.Status OF
              ApprovalEntry.Status::Open:
                BEGIN
                  NotificationBody := NotificationBody.Replace('%Action%',ActionApproveTxt);
                END;
              ApprovalEntry.Status::Canceled:
                NotificationBody := NotificationBody.Replace('%Action%',ActionCancelTxt);
              ApprovalEntry.Status::Rejected:
                NotificationBody := NotificationBody.Replace('%Action%',ActionRejectTxt);
              ApprovalEntry.Status::Created:
                NotificationBody := NotificationBody.Replace('%Action%',ActionCreateTxt);
              ApprovalEntry.Status::Approved:
                NotificationBody := NotificationBody.Replace('%Action%',ActionApprovedTxt);
            END;
          END;
      END;

      IF RecRef.GET(ApprovalEntry."Record ID to Approve") THEN BEGIN
        CASE ApprovalEntry."Table ID" OF
          DATABASE::"Request For Quotation":
            BEGIN
              RecRef.SETTABLE(RFQ);
              NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(RFQ.TABLECAPTION));
              SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
              NotificationBody := NotificationBody.Replace('%Details%','');
              ReplaceTokenWithRFQDetails(NotificationBody, RFQ);
             StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, RFQ.RECORDID);
            END;
          DATABASE::Vendor:
            BEGIN
              RecRef.SETTABLE(Vendor);
              NotificationBody := NotificationBody.Replace('%DocumentType%',RecRef.CAPTION);
              SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
              NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%',RecRef.CAPTION);
              SetTokenToValueOfField(NotificationBody,'%CustomerVendorNo%',RecRef,'No.');
              SetTokenToValueOfField(NotificationBody,'%CustomerVendorName%',RecRef,'Name');
              ReplaceTokenWithVendorDetails(NotificationBody, Vendor);
            END;
          DATABASE::"Purchase Header":
            BEGIN
              // General Setup
              RecRef.SETTABLE(PurchaseHeader);
              SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
              ReplaceTokenWithPurchaseHeaderDetails(NotificationBody, PurchaseHeader);
            END;
          DATABASE::"Sales Header":
            BEGIN
              RecRef.SETTABLE(SalesHeader);
              SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
              ReplaceTokenWithSalesHeaderDetails(NotificationBody, SalesHeader);
            END;
          DATABASE::Ticket:
            BEGIN
              RecRef.SETTABLE(Tickets);
              NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(Tickets.TABLECAPTION));
              SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
              NotificationBody := NotificationBody.Replace('%Details%',StringConversionMgmt.WindowsToASCII(Tickets.Description));
              TicketNotifDispatcher.SetNotificationBody(NotificationBody, Tickets);
            END;
          DATABASE::"Software Development Request":
            BEGIN
              RecRef.SETTABLE(SDR);
              NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(SDR.TABLECAPTION));
              SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
              NotificationBody := NotificationBody.Replace('%Details%',StringConversionMgmt.WindowsToASCII(SDR.Description));
              SDRNotifDispatcher.SetNotificationBody(NotificationBody, SDR);
            END;
          DATABASE::"Job Order":
            BEGIN
              RecRef.SETTABLE(JobOrder);
              NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(JobOrder.TABLECAPTION));
              SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
              NotificationBody := NotificationBody.Replace('%Details%','');
              ReplaceTokenWithJobOrderDetails(NotificationBody, JobOrder);
              StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, RecRef.RECORDID);
            END;
          DATABASE::Task:
            BEGIN
              RecRef.SETTABLE(Task);
              NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(Task.TABLECAPTION));
              SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
              Task.CALCFIELDS(Description);
              IF Task.Description.HASVALUE THEN BEGIN
                Task.Description.CREATEINSTREAM(InStr);
                InStr.READ(DescriptionTxt);
              END;
              NotificationBody := NotificationBody.Replace('%Details%',StringConversionMgmt.WindowsToASCII(DescriptionTxt));
              TaskNotifDispatcher.SetNotificationBody(NotificationBody, Task);
            END;
          DATABASE::"Internal Notice to Proceed":
            BEGIN
              RecRef.SETTABLE(INTP);
              NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(INTP.TABLECAPTION));
              SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
              SetTokenToValueOfField(NotificationBody,'%No%',RecRef,'No.');
              ReplaceTokenWithINTPDetails(NotificationBody, INTP);
              StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, INTP.RECORDID);
            END;
        END;
      END;
    END;

    PROCEDURE ReplaceTokensWithRecInfo@2(VAR NotificationBody@1000 : DotNet "'mscorlib'.System.String";RecRef@1001 : RecordRef);
    VAR
      Vendor@1015 : Record 23;
      JobOrder@1010 : Record 50012;
      SalesHeader@1011 : Record 36;
      RecordLink@1008 : Record 2000000068;
      User@1007 : Record 2000000120;
      PurchaseHeader@1006 : Record 38;
      Ticket@1002 : Record 50562;
      SDR@1004 : Record 50555;
      INTP@1014 : Record 50040;
      RFQ@1016 : Record 50013;
      TicketNotifDispatcher@1003 : Codeunit 50579;
      SDRNotifDispatcher@1005 : Codeunit 50585;
      NoteTxt@1013 : Text;
      RecRef2@1009 : RecordRef;
      InStr@1012 : InStream;
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::"Request For Quotation":
          BEGIN
            RecRef.SETTABLE(RFQ);
            NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(RFQ.TABLECAPTION));
            SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
            NotificationBody := NotificationBody.Replace('%Details%','');
            ReplaceTokenWithRFQDetails(NotificationBody, RFQ);
            StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, RFQ.RECORDID);
          END;
        DATABASE::Vendor:
          BEGIN
            RecRef.SETTABLE(Vendor);
            NotificationBody := NotificationBody.Replace('%DocumentType%',RecRef.CAPTION);
            SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
            NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%',RecRef.CAPTION);
            SetTokenToValueOfField(NotificationBody,'%CustomerVendorNo%',RecRef,'No.');
            SetTokenToValueOfField(NotificationBody,'%CustomerVendorName%',RecRef,'Name');
            ReplaceTokenWithVendorDetails(NotificationBody, Vendor);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            NotificationBody := NotificationBody.Replace('%DocumentNo%',FORMAT(RecRef.RECORDID));
            ReplaceTokenWithPurchaseHeaderDetails(NotificationBody, PurchaseHeader);
          END;
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            SetTokenToValueOfField(NotificationBody, '%DocumentNo%', RecRef, 'No.');
            //NotificationBody := NotificationBody.Replace('%DocumentNo%',FORMAT(RecRef.RECORDID));
            ReplaceTokenWithSalesHeaderDetails(NotificationBody, SalesHeader);
          END;
        DATABASE::User:
          BEGIN
            RecRef.SETTABLE(User);
            ReplaceTokenWithUserDetails(NotificationBody,User);
          END;
        DATABASE::"Internal Notice to Proceed":
          BEGIN
            RecRef.SETTABLE(INTP);
            NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(INTP.TABLECAPTION));
            SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
            SetTokenToValueOfField(NotificationBody,'%No%',RecRef,'No.');
            NotificationBody := NotificationBody.Replace('%Details%','');
            ReplaceTokenWithINTPDetails(NotificationBody, INTP);
            StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, INTP.RECORDID);
          END;
        DATABASE::Ticket:
          BEGIN
            RecRef.SETTABLE(Ticket);
            NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(Ticket.TABLECAPTION));
            SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
            NotificationBody := NotificationBody.Replace('%Details%','');
            TicketNotifDispatcher.SetNotificationBody(NotificationBody, Ticket);
          END;
        DATABASE::"Software Development Request":
          BEGIN
            RecRef.SETTABLE(SDR);
            NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(SDR.TABLECAPTION));
            SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
            NotificationBody := NotificationBody.Replace('%Details%','');
            SDRNotifDispatcher.SetNotificationBody(NotificationBody, SDR);
          END;

        DATABASE::"Job Order":
          BEGIN
            RecRef.SETTABLE(JobOrder);
            NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(JobOrder.TABLECAPTION));
            SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
            NotificationBody := NotificationBody.Replace('%Details%','');
            ReplaceTokenWithJobOrderDetails(NotificationBody, JobOrder);
            StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, JobOrder.RECORDID);
          END;
        DATABASE::"Record Link":
          BEGIN
            RecRef.SETTABLE(RecordLink);
            NotificationBody := NotificationBody.Replace('%DocumentNo%',RecordLink."User ID");
            RecordLink.CALCFIELDS(Note);
            IF RecordLink.Note.HASVALUE THEN BEGIN
              CLEAR(NoteTxt);
              RecordLink.Note.CREATEINSTREAM(InStr);
              InStr.READ(NoteTxt);
              NotificationBody := NotificationBody.Replace('%NoteTxt%', StringConversionManagement.WindowsToASCII(NoteTxt));
            END ELSE
              NotificationBody := NotificationBody.Replace('%NoteTxt%', '');

            IF RecRef2.GET(RecordLink."Record ID") THEN BEGIN
              CASE RecRef2.NUMBER OF
                DATABASE::"Job Order":
                  BEGIN
                    RecRef2.SETTABLE(JobOrder);
                    SetTokenToValueOfField(NotificationBody,'%DocumentNo2%',RecRef2,'No.');
                    NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(RecRef2.CAPTION));
                    ReplaceTokenWithLinkedINTPDetails(NotificationBody, JobOrder."INTP No.");
                  END;
                DATABASE::"Purchase Header":
                  BEGIN
                    RecRef2.SETTABLE(PurchaseHeader);
                    ReplaceTokenWithLinkedINTPDetails(NotificationBody, PurchaseHeader."INTP No.");
                    SetTokenToValueOfField(NotificationBody,'%DocumentNo2%',RecRef2,'No.');
                    IF (PurchaseHeader."Request Type" IN [PurchaseHeader."Request Type"::" "]) THEN
                      NotificationBody := NotificationBody.Replace('%DocumentType%','Purchase ' + FORMAT(PurchaseHeader."Document Type"))
                    ELSE
                      NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(PurchaseHeader."Request Type"));
                  END;
                DATABASE::"Sales Header":
                  BEGIN
                    RecRef2.SETTABLE(SalesHeader);
                    ReplaceTokenWithLinkedINTPDetails(NotificationBody,SalesHeader."INTP No.");
                    SetTokenToValueOfField(NotificationBody,'%DocumentNo2%',RecRef2,'No.');
                    IF (SalesHeader."Request type" IN [SalesHeader."Request type"::" "]) THEN
                      NotificationBody := NotificationBody.Replace('%DocumentType%','Sales ' + FORMAT(SalesHeader."Document Type"))
                    ELSE
                      NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(SalesHeader."Request type"));
                  END;
                ELSE
                  BEGIN
                    SetTokenToValueOfField(NotificationBody,'%DocumentNo2%',RecRef2,'No.');
                    NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(RecRef2.CAPTION));
                    ReplaceTokenWithLinkedINTPDetails(NotificationBody, '');
                  END;
              END;
              NotificationBody := NotificationBody.Replace('%Details%','');
            END;
          END;
      END;
    END;

    PROCEDURE ReplaceTokensWithBlanks@3(VAR NotificationBody@1000 : DotNet "'mscorlib'.System.String";RecordIdentifier@1001 : Text);
    BEGIN
      // Applied to Codeunit 1510 ReplaceTokensWithBlanks
      {
      NotificationManagement.ReplaceTokensWithBlanks
      }
      // Notes
      NotificationBody := NotificationBody.Replace('%Notes%','');

      NotificationBody := NotificationBody.Replace('%DocumentDateCaption%','');
      NotificationBody := NotificationBody.Replace('%DocumentDate%','');
      NotificationBody := NotificationBody.Replace('%SubjectCaption%','');
      NotificationBody := NotificationBody.Replace('%Subject%','');
      NotificationBody := NotificationBody.Replace('%ProjectNameCaption%','');
      NotificationBody := NotificationBody.Replace('%ProjectName%','');
      NotificationBody := NotificationBody.Replace('%INTPNoCaption%','');
      NotificationBody := NotificationBody.Replace('%INTPNo%','');
      // CASH ADVANCE
      NotificationBody := NotificationBody.Replace('%JobTypeCaption%','');
      NotificationBody := NotificationBody.Replace('%JobType%','');
      NotificationBody := NotificationBody.Replace('%JobOrderNoCaption%','');
      NotificationBody := NotificationBody.Replace('%JobOrderNo%','');
      NotificationBody := NotificationBody.Replace('%DateOfActivityFromCaption%','');
      NotificationBody := NotificationBody.Replace('%DateOfActivityFrom%','');
      NotificationBody := NotificationBody.Replace('%DateOfActivityToCaption%','');
      NotificationBody := NotificationBody.Replace('%DateOfActivityTo%','');
      NotificationBody := NotificationBody.Replace('%CanvassSheetNoCaption%','');
      NotificationBody := NotificationBody.Replace('%CanvassSheetNo%','');
      NotificationBody := NotificationBody.Replace('%AWLCaption%','');
      NotificationBody := NotificationBody.Replace('%AWL%','');
      NotificationBody := NotificationBody.Replace('%PurposeCaption%','');
      NotificationBody := NotificationBody.Replace('%Purpose%','');
      // TERF & WITHDRAWAL
      NotificationBody := NotificationBody.Replace('%DateOfReturnCaption%','');
      NotificationBody := NotificationBody.Replace('%DateOfReturn%','');
      NotificationBody := NotificationBody.Replace('%EmployeeCaption%','');
      NotificationBody := NotificationBody.Replace('%Employee%','');
      NotificationBody := NotificationBody.Replace('%DepartmentCaption%','');
      NotificationBody := NotificationBody.Replace('%Department%','');
      NotificationBody := NotificationBody.Replace('%CustomerAddressCaption%','');
      NotificationBody := NotificationBody.Replace('%CustomerAddress%','');
      NotificationBody := NotificationBody.Replace('%SiteNameCaption%','');
      NotificationBody := NotificationBody.Replace('%SiteName%','');
      NotificationBody := NotificationBody.Replace('%ARNoCaption%','');
      NotificationBody := NotificationBody.Replace('%ARNo%','');
      NotificationBody := NotificationBody.Replace('%DRNoCaption%','');
      NotificationBody := NotificationBody.Replace('%DRNo%','');
      // REQUEST FOR EXCEPTION
      NotificationBody := NotificationBody.Replace('%ExceptionToCaption%','');
      NotificationBody := NotificationBody.Replace('%ExceptionTo%','');
      NotificationBody := NotificationBody.Replace('%ApprovedBudgetCaption%','');
      NotificationBody := NotificationBody.Replace('%ApprovedBudget%','');
      NotificationBody := NotificationBody.Replace('%ApprovedTimelineCaption%','');
      NotificationBody := NotificationBody.Replace('%ApprovedTimeline%','');
      NotificationBody := NotificationBody.Replace('%ProposedBudgetCaption%','');
      NotificationBody := NotificationBody.Replace('%ProposedBudget%','');
      NotificationBody := NotificationBody.Replace('%ProposedTimelineCaption%','');
      NotificationBody := NotificationBody.Replace('%ProposedTimeline%','');
      NotificationBody := NotificationBody.Replace('%WaiverTypeCaption%','');
      NotificationBody := NotificationBody.Replace('%WaiverType%','');
      NotificationBody := NotificationBody.Replace('%DescriptionOfRequestCaption%','Description of Request');
      NotificationBody := NotificationBody.Replace('%DescriptionOfRequest%','');
      NotificationBody := NotificationBody.Replace('%JustificationCaption%','Justification and Assessment of Risk');
      NotificationBody := NotificationBody.Replace('%Justification%','');
      NotificationBody := NotificationBody.Replace('%PersonInchargeCaption%','');
      NotificationBody := NotificationBody.Replace('%PersonIncharge%','');
      NotificationBody := NotificationBody.Replace('%CommitmentDateCaption%','');
      NotificationBody := NotificationBody.Replace('%CommitmentDate%','');
      NotificationBody := NotificationBody.Replace('%AttachementsApprovedBudgetCaption%','');
      NotificationBody := NotificationBody.Replace('%AttachementsApprovedBudget%','');
      NotificationBody := NotificationBody.Replace('%AttachementsApprovedTimelineCaption%','');
      NotificationBody := NotificationBody.Replace('%AttachementsApprovedTimeline%','');
      NotificationBody := NotificationBody.Replace('%AttachementsProposedBudgetCaption%','');
      NotificationBody := NotificationBody.Replace('%AttachementsProposedBudget%','');
      NotificationBody := NotificationBody.Replace('%AttachementsProposedTimelineCaption%','');
      NotificationBody := NotificationBody.Replace('%AttachementsProposedTimeline%','');
      // WORK CHANGE REQUEST
      NotificationBody := NotificationBody.Replace('%ProgramCaption%','');
      NotificationBody := NotificationBody.Replace('%Program%','');
      NotificationBody := NotificationBody.Replace('%AnnexesCaption%','');
      NotificationBody := NotificationBody.Replace('%Annexes%','');
      NotificationBody := NotificationBody.Replace('%CMSTicketCaption%','');
      NotificationBody := NotificationBody.Replace('%CMSTicket%','');
      NotificationBody := NotificationBody.Replace('%DateOfOcularInspectionCaption%','');
      NotificationBody := NotificationBody.Replace('%DateOfOcularInspection%','');
      NotificationBody := NotificationBody.Replace('%ChargeableToClientCaption%','');
      NotificationBody := NotificationBody.Replace('%ChargeableToClient%','');
      NotificationBody := NotificationBody.Replace('%AdditionalWorkCaption%','');
      NotificationBody := NotificationBody.Replace('%AdditionalWork%','');
      NotificationBody := NotificationBody.Replace('%SiteChangeCaption%','');
      NotificationBody := NotificationBody.Replace('%SiteChange%','');
      NotificationBody := NotificationBody.Replace('%TeamReassignmentCaption%','');
      NotificationBody := NotificationBody.Replace('%TeamReassignment%','');
      NotificationBody := NotificationBody.Replace('%MaterialsEquipmentCaption%','');
      NotificationBody := NotificationBody.Replace('%MaterialsEquipment%','');
      NotificationBody := NotificationBody.Replace('%NatureOfChangeOthersCaption%','');
      NotificationBody := NotificationBody.Replace('%NatureOfChangeOthers%','');
      NotificationBody := NotificationBody.Replace('%PresentSituationCaption%','');
      NotificationBody := NotificationBody.Replace('%PresentSituation%','');
      NotificationBody := NotificationBody.Replace('%RecommendedChangeCaption%','');
      NotificationBody := NotificationBody.Replace('%RecommendedChange%','');
      NotificationBody := NotificationBody.Replace('%OriginalProjectCostCaption%','');
      NotificationBody := NotificationBody.Replace('%OriginalProjectCost%','');
      NotificationBody := NotificationBody.Replace('%LateAFIAmountBeforeWCICaption%','');
      NotificationBody := NotificationBody.Replace('%LateAFIAmountBeforeWCI%','');
      NotificationBody := NotificationBody.Replace('%ThisWCRCostVariationWCRCaption%','');
      NotificationBody := NotificationBody.Replace('%ThisWCRCostVariationWCR%','');
      NotificationBody := NotificationBody.Replace('%TotalCostAfterWCRCaption%','');
      NotificationBody := NotificationBody.Replace('%TotalCostAfterWCR%','');
      NotificationBody := NotificationBody.Replace('%BalancePOAfterWCRCaption%','');
      NotificationBody := NotificationBody.Replace('%BalancePOAfterWCR%','');
      NotificationBody := NotificationBody.Replace('%CheckVoucherNoCaption%','');
      NotificationBody := NotificationBody.Replace('%CheckVoucherNo%','');
      NotificationBody := NotificationBody.Replace('%CashAdvanceNoCaption%','');
      NotificationBody := NotificationBody.Replace('%CashAdvanceNo%','');
      NotificationBody := NotificationBody.Replace('%CheckNoCaption%','');
      NotificationBody := NotificationBody.Replace('%CheckNo%','');
      NotificationBody := NotificationBody.Replace('%ReleasedDateCaption%','');
      NotificationBody := NotificationBody.Replace('%ReleasedDate%','');
      NotificationBody := NotificationBody.Replace('%AmountToBeChargeCaption%','');
      NotificationBody := NotificationBody.Replace('%AmountToBeCharge%','');
      NotificationBody := NotificationBody.Replace('%GTRepresentativeCommentCaption%','');
      NotificationBody := NotificationBody.Replace('%GTRepresentativeComment%','');
      NotificationBody := NotificationBody.Replace('%RemarksCaption%','');
      NotificationBody := NotificationBody.Replace('%Remarks%','');

      // INTERNAL NOTICE TO PROCEED
      NotificationBody := NotificationBody.Replace('%NoticeToMobilizeCaption%', '');
      NotificationBody := NotificationBody.Replace('%NoticeToMobilize%', '');
      NotificationBody := NotificationBody.Replace('%NoticeToProceedCaption%', '');
      NotificationBody := NotificationBody.Replace('%NoticeToProceed%', '');
      NotificationBody := NotificationBody.Replace('%ClusterMobilizationCaption%', '');
      NotificationBody := NotificationBody.Replace('%ClusterMobilization%', '');
      NotificationBody := NotificationBody.Replace('%SupplyOnlyCaption%', '');
      NotificationBody := NotificationBody.Replace('%SupplyOnly%', '');
      NotificationBody := NotificationBody.Replace('%PerSiteMobilizationCaption%', '');
      NotificationBody := NotificationBody.Replace('%PerSiteMobilization%', '');
      NotificationBody := NotificationBody.Replace('%DemoPOCCaption%', '');
      NotificationBody := NotificationBody.Replace('%DemoPOC%', '');
      NotificationBody := NotificationBody.Replace('%WithPOCaption%', '');
      NotificationBody := NotificationBody.Replace('%WithPO%', '');
      NotificationBody := NotificationBody.Replace('%WithOutPOCaption%', '');
      NotificationBody := NotificationBody.Replace('%WithOutPO%', '');
      NotificationBody := NotificationBody.Replace('%PONoFromCustomerCaption%', '');
      NotificationBody := NotificationBody.Replace('%PONoFromCustomer%', '');
      NotificationBody := NotificationBody.Replace('%PODateFromCustomerCaption%', '');
      NotificationBody := NotificationBody.Replace('%PODateFromCustomer%', '');
      NotificationBody := NotificationBody.Replace('%NoOfSitesCaption%', '');
      NotificationBody := NotificationBody.Replace('%NoOfSites%', '');
      NotificationBody := NotificationBody.Replace('%SiteNamesCaption%', '');
      NotificationBody := NotificationBody.Replace('%SiteNames%', '');
      NotificationBody := NotificationBody.Replace('%CustomerNameCaption%', '');
      NotificationBody := NotificationBody.Replace('%CustomerName%', '');
      NotificationBody := NotificationBody.Replace('%ProjectNameCaption%', '');
      NotificationBody := NotificationBody.Replace('%ProjectName%', '');
      NotificationBody := NotificationBody.Replace('%ReleasedDateOfPOCaption%', '');
      NotificationBody := NotificationBody.Replace('%ReleasedDateOfPO%', '');
      NotificationBody := NotificationBody.Replace('%SalesEngineerCaption%', '');
      NotificationBody := NotificationBody.Replace('%SalesEngineer%', '');
      NotificationBody := NotificationBody.Replace('%ProjectManagerCaption%', '');
      NotificationBody := NotificationBody.Replace('%ProjectManager%', '');
      NotificationBody := NotificationBody.Replace('%SalesPersonCaption%', '');
      NotificationBody := NotificationBody.Replace('%SalesPerson%', '');
      NotificationBody := NotificationBody.Replace('%CostAnalystCaption%', '');
      NotificationBody := NotificationBody.Replace('%CostAnalyst%', '');
      NotificationBody := NotificationBody.Replace('%DateOfCompleteEquipmentsReadyCaption%', '');
      NotificationBody := NotificationBody.Replace('%DateOfCompleteEquipmentsReady%', '');
      NotificationBody := NotificationBody.Replace('%ProjectTargetCompletionDateCaption%', '');
      NotificationBody := NotificationBody.Replace('%ProjectTargetCompletionDate%', '');
      NotificationBody := NotificationBody.Replace('%DeliveryToCustomerWarehouseCaption%', '');
      NotificationBody := NotificationBody.Replace('%DeliveryToCustomerWarehouse%', '');
      // INTP - PERSON TO NOTIFY
      NotificationBody := NotificationBody.Replace('%PersonToNotifyHumanResourceCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyHumanResource%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyAccountingCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyAccounting%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyAuditCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyAudit%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyInventoryCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyInventory%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyLogisticsCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyLogistics%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyOutsitePlantCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyOutsitePlant%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyProjectManagementCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyProjectManagement%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyPurchasingCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyPurchasing%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyQualityAssuranceCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyQualityAssurance%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifySalesCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifySales%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyProjectControlCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyProjectControl%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyTelecomAuditCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyTelecomAudit%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyWarehouseManagementCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyWarehouseManagement%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyFinanceAPCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyFinanceAP%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyFinanceARCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyFinanceAR%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyDeviceManagementCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyDeviceManagement%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyICTCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyICT%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyPowerCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyPower%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyTransmissionWiredCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyTransmissionWired%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyTransmissionWirelessCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyTransmissionWireless%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyWirelessAccess1Caption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyWirelessAccess1%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyWirelessAccess2Caption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyWirelessAccess2%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyOtheresCaption%', '');
      NotificationBody := NotificationBody.Replace('%PersonToNotifyOtheres%', '');
      // INTP ENGINEERING ACTIVITIES
      NotificationBody := NotificationBody.Replace('%EngActSiteAcquisitionCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActSiteAcquisition%', '');
      NotificationBody := NotificationBody.Replace('%EngActSiteSurveyCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActSiteSurvey%', '');
      NotificationBody := NotificationBody.Replace('%EngActApprovedMOACaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActApprovedMOA%', '');
      NotificationBody := NotificationBody.Replace('%EngActApprovedRAAWACaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActApprovedRAAWA%', '');
      NotificationBody := NotificationBody.Replace('%EngActFloorPlansFromCustomerCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActFloorPlansFromCustomer%', '');
      NotificationBody := NotificationBody.Replace('%EngActContactedStructuredCablingSubconCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActContactedStructuredCablingSubcon%', '');
      NotificationBody := NotificationBody.Replace('%EngActInstallationCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActInstallation%', '');
      NotificationBody := NotificationBody.Replace('%EngActApprovedBOQCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActApprovedBOQ%', '');
      NotificationBody := NotificationBody.Replace('%EngActApprovedHDLAndTSSRDesignCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActApprovedHDLAndTSSRDesign%', '');
      NotificationBody := NotificationBody.Replace('%EngActApprovedWorkPermitRAAWACaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActApprovedWorkPermitRAAWA%', '');
      NotificationBody := NotificationBody.Replace('%EngActSignedNoticeToInstallCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActSignedNoticeToInstall%', '');
      NotificationBody := NotificationBody.Replace('%EngActTroubleshootingCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActTroubleshooting%', '');
      NotificationBody := NotificationBody.Replace('%EngActMaintenanceCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActMaintenance%', '');
      NotificationBody := NotificationBody.Replace('%EngActQualityAuditTrialPOCCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActQualityAuditTrialPOC%', '');
      NotificationBody := NotificationBody.Replace('%EngActBuildingClearanceCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActBuildingClearance%', '');
      NotificationBody := NotificationBody.Replace('%EngActCommissioningCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActCommissioning%', '');
      NotificationBody := NotificationBody.Replace('%EngActDeliveryToCustomerWarehouseCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActDeliveryToCustomerWarehouse%', '');
      NotificationBody := NotificationBody.Replace('%EngActFinalAcceptanceCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActFinalAcceptance%', '');
      NotificationBody := NotificationBody.Replace('%EngActPreliminaryAcceptanceCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActPreliminaryAcceptance%', '');
      NotificationBody := NotificationBody.Replace('%EngActTestingCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActTesting%', '');
      NotificationBody := NotificationBody.Replace('%EngActRectificationCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActRectification%', '');
      NotificationBody := NotificationBody.Replace('%EngActShipmentAirFreightCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActShipmentAirFreight%', '');
      NotificationBody := NotificationBody.Replace('%EngActShipmentSeeFreightCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActShipmentSeeFreight%', '');
      NotificationBody := NotificationBody.Replace('%EngActQOthersPleaseSpecifyCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActQOthersPleaseSpecify%', '');
      NotificationBody := NotificationBody.Replace('%EngActQOthersRemarksCaption%', '');
      NotificationBody := NotificationBody.Replace('%EngActQOthersRemarks%', '');
      // INTP - ATTACHMENTS
      NotificationBody := NotificationBody.Replace('%AttachementNoticeToProceedCaption%', '');
      NotificationBody := NotificationBody.Replace('%AttachementNoticeToProceed%', '');
      NotificationBody := NotificationBody.Replace('%AttachementTP_CTFCaption%', '');
      NotificationBody := NotificationBody.Replace('%AttachementTP_CTF%', '');
      NotificationBody := NotificationBody.Replace('%AttachementSignedTrialCaption%', '');
      NotificationBody := NotificationBody.Replace('%AttachementSignedTrial%', '');
      NotificationBody := NotificationBody.Replace('%AttachementPOFromCustomerCaption%', '');
      NotificationBody := NotificationBody.Replace('%AttachementPOFromCustomer%', '');
      NotificationBody := NotificationBody.Replace('%AttachementPOToVendorCaption%', '');
      NotificationBody := NotificationBody.Replace('%AttachementPOToVendor%', '');
      NotificationBody := NotificationBody.Replace('%AttachementExceptionReportCaption%', '');
      NotificationBody := NotificationBody.Replace('%AttachementExceptionReport%', '');
      NotificationBody := NotificationBody.Replace('%AttachementExceptionReportNoCaption%', '');
      NotificationBody := NotificationBody.Replace('%AttachementExceptionReportNo%', '');
      NotificationBody := NotificationBody.Replace('%AttachementBillOfMaterialsCaption%', '');
      NotificationBody := NotificationBody.Replace('%AttachementBillOfMaterials%', '');
      NotificationBody := NotificationBody.Replace('%AttachementAllocatedBudgetCaption%', '');
      NotificationBody := NotificationBody.Replace('%AttachementAllocatedBudget%', '');
      NotificationBody := NotificationBody.Replace('%AttachementOthersPleaseSpecifyCaption%', '');
      NotificationBody := NotificationBody.Replace('%AttachementOthersPleaseSpecify%', '');
      NotificationBody := NotificationBody.Replace('%AttachementOtherRemarksCaption%', '');
      NotificationBody := NotificationBody.Replace('%AttachementOtherRemarks%', '');
      // INTP - WARRANTY
      NotificationBody := NotificationBody.Replace('%WithinWarrantyCaption%', '');
      NotificationBody := NotificationBody.Replace('%WithinWarranty%', '');
      NotificationBody := NotificationBody.Replace('%WithMaintenanceServiceCaption%', '');
      NotificationBody := NotificationBody.Replace('%WithMaintenanceService%', '');
      NotificationBody := NotificationBody.Replace('%ExpiredWarrantyCaption%', '');
      NotificationBody := NotificationBody.Replace('%ExpiredWarranty%', '');
      NotificationBody := NotificationBody.Replace('%RemarksCaption%', '');
      NotificationBody := NotificationBody.Replace('%Remarks%', '');

      //TICKET
      NotificationBody := NotificationBody.Replace('%TicketNoCaption%', '');
      NotificationBody := NotificationBody.Replace('%TicketNo%', '');
      NotificationBody := NotificationBody.Replace('%TypeCaption%', '');
      NotificationBody := NotificationBody.Replace('%Type%', '');
      NotificationBody := NotificationBody.Replace('%DescriptionCaption%', '');
      NotificationBody := NotificationBody.Replace('%Description%', '');
      NotificationBody := NotificationBody.Replace('%DateReleasedCaption%', '');
      NotificationBody := NotificationBody.Replace('%DateReleased%', '');
      NotificationBody := NotificationBody.Replace('%TimeReleasedCaption%', '');
      NotificationBody := NotificationBody.Replace('%TimeReleased%', '');
      NotificationBody := NotificationBody.Replace('%StatusCaption%', '');
      NotificationBody := NotificationBody.Replace('%Status%', '');
      NotificationBody := NotificationBody.Replace('%DateHandledCaption%', '');
      NotificationBody := NotificationBody.Replace('%DateHandled%', '');
      NotificationBody := NotificationBody.Replace('%TimeHandledCaption%', '');
      NotificationBody := NotificationBody.Replace('%TimeHandled%', '');
      NotificationBody := NotificationBody.Replace('%HandlerUserIDCaption%', '');
      NotificationBody := NotificationBody.Replace('%HandlerUserID%', '');
      NotificationBody := NotificationBody.Replace('%PriorityLevelCaption%', '');
      NotificationBody := NotificationBody.Replace('%PriorityLevel%', '');
      NotificationBody := NotificationBody.Replace('%PageName%', '');
      NotificationBody := NotificationBody.Replace('%PageName%', '');
      NotificationBody := NotificationBody.Replace('%StartingDateCaption%', '');
      NotificationBody := NotificationBody.Replace('%StartingDate%', '');
      NotificationBody := NotificationBody.Replace('%StartingTimeCaption%', '');
      NotificationBody := NotificationBody.Replace('%StartingTime%', '');
      NotificationBody := NotificationBody.Replace('%FinishingDateCaption%', '');
      NotificationBody := NotificationBody.Replace('%FinishingDate%', '');
      NotificationBody := NotificationBody.Replace('%FormatedFinishingDate%', '');
      NotificationBody := NotificationBody.Replace('%FinishingTimeCaption%', '');
      NotificationBody := NotificationBody.Replace('%FinishingTime%', '');
      NotificationBody := NotificationBody.Replace('%ResponseDateCaption%', '');
      NotificationBody := NotificationBody.Replace('%ResponseDate%', '');
      NotificationBody := NotificationBody.Replace('%ResponseTimeCaption%', '');
      NotificationBody := NotificationBody.Replace('%ResponseTime%', '');
      NotificationBody := NotificationBody.Replace('%DateCreatedCaption%', '');
      NotificationBody := NotificationBody.Replace('%DateCreated%', '');
      NotificationBody := NotificationBody.Replace('%TimeCreatedCaption%', '');
      NotificationBody := NotificationBody.Replace('%TimeCreated%', '');
      NotificationBody := NotificationBody.Replace('%CreatedByUserIDCaption%', '');
      NotificationBody := NotificationBody.Replace('%CreatedByUserID%', '');
      NotificationBody := NotificationBody.Replace('%ReasonForClosingCaption%', '');
      NotificationBody := NotificationBody.Replace('%ReasonForClosing%', '');
      NotificationBody := NotificationBody.Replace('%RecipientsCaption%', '');
      NotificationBody := NotificationBody.Replace('%Recipients%', '');
      NotificationBody := NotificationBody.Replace('%AdditionalInformationCaption%', '');
      NotificationBody := NotificationBody.Replace('%AdditionalInformation%', '');
      NotificationBody := NotificationBody.Replace('%ErrorCodeCaption%', '');
      NotificationBody := NotificationBody.Replace('%ErrorCode%', '');
      NotificationBody := NotificationBody.Replace('%ErrorTextCaption%', '');
      NotificationBody := NotificationBody.Replace('%ErrorText%', '');
      NotificationBody := NotificationBody.Replace('%UserFromCaption%', '');
      NotificationBody := NotificationBody.Replace('%UserFrom%', '');
      NotificationBody := NotificationBody.Replace('%UserToCaption%', '');
      NotificationBody := NotificationBody.Replace('%UserTo%', '');
      NotificationBody := NotificationBody.Replace('%TicketLinks%', '');
      NotificationBody := NotificationBody.Replace('%TicketNotes%', '');

      //SDR
      NotificationBody := NotificationBody.Replace('%SDRNoCaption%', '');
      NotificationBody := NotificationBody.Replace('%SDRNo%', '');
      NotificationBody := NotificationBody.Replace('%ServiceRequestCaption%', '');
      NotificationBody := NotificationBody.Replace('%ServiceRequest%', '');
      NotificationBody := NotificationBody.Replace('%ApplicationNameCaption%', '');
      NotificationBody := NotificationBody.Replace('%ApplicationName%', '');
      NotificationBody := NotificationBody.Replace('%DescriptionCaption%', '');
      NotificationBody := NotificationBody.Replace('%Description%', '');
      NotificationBody := NotificationBody.Replace('%DateCreatedCaption%', '');
      NotificationBody := NotificationBody.Replace('%DateCreated%', '');
      NotificationBody := NotificationBody.Replace('%TimeCreatedCaption%', '');
      NotificationBody := NotificationBody.Replace('%TimeCreated%', '');
      NotificationBody := NotificationBody.Replace('%CreatedByUserIDCaption%', '');
      NotificationBody := NotificationBody.Replace('%CreatedByUserID%', '');
      NotificationBody := NotificationBody.Replace('%SizeofRequirementCaption%', '');
      NotificationBody := NotificationBody.Replace('%SizeofRequirement%', '');
      NotificationBody := NotificationBody.Replace('%RequestorUserIDCaption%', '');
      NotificationBody := NotificationBody.Replace('%RequestorUserID%', '');
      NotificationBody := NotificationBody.Replace('%StartingDateCaption%', '');
      NotificationBody := NotificationBody.Replace('%StartingDate%', '');
      NotificationBody := NotificationBody.Replace('%StartingTimeCaption%', '');
      NotificationBody := NotificationBody.Replace('%StartingTime%', '');
      NotificationBody := NotificationBody.Replace('%FinishingDateCaption%', '');
      NotificationBody := NotificationBody.Replace('%FinishingDate%', '');
      NotificationBody := NotificationBody.Replace('%FormatedFinishingDate%', '');
      NotificationBody := NotificationBody.Replace('%FinishingTimeCaption%', '');
      NotificationBody := NotificationBody.Replace('%FinishingTime%', '');
      NotificationBody := NotificationBody.Replace('%AdditionalInformationCaption%', '');
      NotificationBody := NotificationBody.Replace('%AdditionalInformation%', '');
      NotificationBody := NotificationBody.Replace('%StatusCaption%', '');
      NotificationBody := NotificationBody.Replace('%Status%', '');
      NotificationBody := NotificationBody.Replace('%DurationCaption%', '');
      NotificationBody := NotificationBody.Replace('%Duration%', '');
      NotificationBody := NotificationBody.Replace('%DateResolvedCaption%', '');
      NotificationBody := NotificationBody.Replace('%DateResolved%', '');
      NotificationBody := NotificationBody.Replace('%TimeResolvedCaption%', '');
      NotificationBody := NotificationBody.Replace('%TimeResolved%', '');
      NotificationBody := NotificationBody.Replace('%ResolvedDurationCaption%', '');
      NotificationBody := NotificationBody.Replace('%ResolvedDuration%', '');
      NotificationBody := NotificationBody.Replace('%ResponseDateCaption%', '');
      NotificationBody := NotificationBody.Replace('%ResponseDate%', '');
      NotificationBody := NotificationBody.Replace('%ResponseTimeCaption%', '');
      NotificationBody := NotificationBody.Replace('%ResponseTime%', '');
      NotificationBody := NotificationBody.Replace('%DateReleasedCaption%', '');
      NotificationBody := NotificationBody.Replace('%DateReleased%', '');
      NotificationBody := NotificationBody.Replace('%TimeReleasedCaption%', '');
      NotificationBody := NotificationBody.Replace('%TimeReleased%', '');
      NotificationBody := NotificationBody.Replace('%UserGroupCodeCaption%', '');
      NotificationBody := NotificationBody.Replace('%UserGroupCode%', '');
      NotificationBody := NotificationBody.Replace('%UserGroupCaption%', '');
      NotificationBody := NotificationBody.Replace('%UserGroup%', '');
      NotificationBody := NotificationBody.Replace('%HandlerUserIDCaption%', '');
      NotificationBody := NotificationBody.Replace('%HandlerUserID%', '');
      NotificationBody := NotificationBody.Replace('%PriorityLevelCaption%', '');
      NotificationBody := NotificationBody.Replace('%PriorityLevel%', '');
      NotificationBody := NotificationBody.Replace('%HandlerRemarksCaption%', '');
      NotificationBody := NotificationBody.Replace('%HandlerRemarks%', '');
      NotificationBody := NotificationBody.Replace('%TitlePositionCaption%', '');
      NotificationBody := NotificationBody.Replace('%TitlePosition%', '');
      NotificationBody := NotificationBody.Replace('%HandlerTitlePositionCaption%', '');
      NotificationBody := NotificationBody.Replace('%HandlerTitlePosition%', '');
      NotificationBody := NotificationBody.Replace('%TicketNoCaption%', '');
      NotificationBody := NotificationBody.Replace('%TicketNo%', '');
      NotificationBody := NotificationBody.Replace('%SDRLinks%', '');
      NotificationBody := NotificationBody.Replace('%SDRNotes%', '');

      //INTP - CPC
      NotificationBody := NotificationBody.Replace('%CPCHumanResource%','');
      NotificationBody := NotificationBody.Replace('%CPCAccounting%','');
      NotificationBody := NotificationBody.Replace('%CPCQualityAssurance%','');
      NotificationBody := NotificationBody.Replace('%CPCDeviceManagement%','');
      NotificationBody := NotificationBody.Replace('%CPCAuditDepartment%','');
      NotificationBody := NotificationBody.Replace('%CPCSales%','');
      NotificationBody := NotificationBody.Replace('%CPCInfoCommSystem%','');
      NotificationBody := NotificationBody.Replace('%CPCInventory%','');
      NotificationBody := NotificationBody.Replace('%CPCProjectControl%','');
      NotificationBody := NotificationBody.Replace('%CPCPowerSystem%','');
      NotificationBody := NotificationBody.Replace('%CPCLogistics%','');
      NotificationBody := NotificationBody.Replace('%CPCTelecomAudit%','');
      NotificationBody := NotificationBody.Replace('%CPCTransmissionWired%','');
      NotificationBody := NotificationBody.Replace('%CPCOutsidePlantOSP%','');
      NotificationBody := NotificationBody.Replace('%CPCWarehouseManagementUnit%','');
      NotificationBody := NotificationBody.Replace('%CPCTransmissionWireless%','');
      NotificationBody := NotificationBody.Replace('%CPCProjectManagement%','');
      NotificationBody := NotificationBody.Replace('%CPCFinanceAP%','');
      NotificationBody := NotificationBody.Replace('%CPCWirelessAccess1%','');
      NotificationBody := NotificationBody.Replace('%CPCPurchasing%','');
      NotificationBody := NotificationBody.Replace('%CPCFinanceAR%','');
      NotificationBody := NotificationBody.Replace('%CPCWirelessAccess2%','');
      NotificationBody := NotificationBody.Replace('%CPCDocumentationTeam%','');
      NotificationBody := NotificationBody.Replace('%CPCPassiveUnit%','');
    END;

    LOCAL PROCEDURE ReplaceTokenWithPurchaseHeaderDetails@25(VAR NotificationBody@1001 : DotNet "'mscorlib'.System.String";PurchaseHeader@1000 : Record 38);
    VAR
      SalesLine@1007 : Record 37;
      INTP@1002 : Record 50040;
      Employee@1003 : Record 5200;
      Vendor@1018 : Record 23;
      Customer@1004 : Record 18;
      Resource@1005 : Record 156;
      PaymentTerms@1019 : Record 3;
      PaymentMethod@1020 : Record 289;
      UserGroup@1006 : Record 9000;
      Contact@1021 : Record 5050;
      SalesPerson@1022 : Record 13;
      ShippingMethod@1023 : Record 10;
      TransactionType@1028 : Record 258;
      TransactionSpec@1027 : Record 285;
      TransportMethod@1026 : Record 259;
      EntryExitPoint@1025 : Record 282;
      ChangeLog@1030 : Record 405;
      Purchaser@1029 : Record 13;
      PostCode@1032 : Record 225;
      JobOrder@1033 : Record 50012;
      CompanyInfo@1034 : Record 79;
      VendorBankAccount@1035 : Record 288;
      DescriptionOfRequest@1008 : Text;
      Justification@1009 : Text;
      SiteChange@1010 : Text;
      TeamReassignment@1011 : Text;
      MaterialEquipment@1012 : Text;
      NatureOfChangeOthers@1013 : Text;
      PresentSituation@1014 : Text;
      RecommendedChange@1015 : Text;
      RemarksLoc@1016 : Text;
      GTComments@1017 : Text;
      TermsAndCondition@1024 : Text;
      ShipingInstruction@1031 : Text;
      ShippingMarks@1036 : Text;
      PenaltyClause@1037 : Text;
      InsuranceTxt@1038 : Text;
      PriceLockClauseDefault@1039 : TextConst 'ENU="The Prices and Technical Specifications of the Products stipulated in the Purchase Order (PO) of One Commerce (Int''l.) Corporation, acknowledged by the Vendor, regardless of the circumstances, is locked and not subject to any increase, unless expressly agreed upon in writing by both Parties; The Vendor is bound to deliver the products ordered with the technical specifications, and at the price, provided in the PO."';
      PenaltyClauseDefault@1040 : TextConst 'ENU=The Seller shall pay liquidated damages equal to 1 % of the total contract for every day of delay. Delivery refers to Delivery of the Whole System. Product which fails in service due to manufacturing or material defects within 36 months from date of acceptance by OneComm inspectors shall be replaced by the manufacturer free of charge. Total Cost (including labor and materials) incurred during the replacement of such defective materials shall be borne by the supplier. Materials having warranty periods more than 36 months shall adopt the time indicated in the warranty period as the maximum time limit for such replacement.';
      ConfidentialityClauseDefault@1041 : TextConst 'ENU=Each party acknowledges that the information received by them pursuant hereto may be confidential and for its use only, and it will not use such confidential information for its own interest to the damage and prejudice of the other, or reproduce, disclose or disseminate such information to any other person (other than its employees or agents having a need to know the contents of such information, and its attorneys), except in connection with the exercise of rights pursuant to this Agreement, unless the Discloser has made such information available to the public generally or such Recipient is required to disclose such information pursuant to the lawful requirement of a court or governmental agency or where required by operation of law.';
    BEGIN
      WITH PurchaseHeader DO BEGIN
        NotificationBody := NotificationBody.Replace('%Details%','');
        ReplaceTokenWithLinkedINTPDetails(NotificationBody, PurchaseHeader."INTP No.");
        IF PurchaseHeader."Request Type" <> PurchaseHeader."Request Type"::" " THEN
          NotificationBody := NotificationBody.Replace('%DocumentType%',STRSUBSTNO('%1',"Request Type"))
        ELSE
          NotificationBody := NotificationBody.Replace('%DocumentType%',STRSUBSTNO(PurchDocTypeTxt, FORMAT("Document Type")));

        NotificationBody := NotificationBody.Replace('%DocumentNoCaption%', FIELDCAPTION("No."));
        NotificationBody := NotificationBody.Replace('%DocumentNo%',FORMAT("No."));
        NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%', Vendor.TABLECAPTION);
        NotificationBody := NotificationBody.Replace('%CustomerVendorNo%',"Pay-to Vendor No.");
        NotificationBody := NotificationBody.Replace('%CustomerVendorName%',StringConversionManagement.WindowsToASCII("Pay-to Name" + ' ' + "Pay-to Name 2"));

        // Cash Advance
        NotificationBody := NotificationBody.Replace('%JobTypeCaption%',FIELDCAPTION("Job Type"));
        NotificationBody := NotificationBody.Replace('%JobType%',FORMAT("Job Type"));
        NotificationBody := NotificationBody.Replace('%JobOrderNoCaption%',FIELDCAPTION("Job Order No."));
        NotificationBody := NotificationBody.Replace('%JobOrderNo%',"Job Order No.");
        NotificationBody := NotificationBody.Replace('%DateOfActivityFromCaption%', FIELDCAPTION("Date of Activity From"));
        NotificationBody := NotificationBody.Replace('%DateOfActivityFrom%', FORMAT("Date of Activity From"));
        NotificationBody := NotificationBody.Replace('%DateOfActivityFromFormatted%', FORMAT("Date of Activity From", 0, '<Month Text> <Closing><Day>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%DateOfActivityToCaption%',FIELDCAPTION("Date of Activity To"));
        NotificationBody := NotificationBody.Replace('%DateOfActivityTo%', FORMAT("Date of Activity To"));
        NotificationBody := NotificationBody.Replace('%DateOfActivityToFormatted%', FORMAT("Date of Activity To", 0, '<Month Text> <Closing><Day>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%CanvassSheetNoCaption%',FIELDCAPTION("Canvass Sheet No."));
        NotificationBody := NotificationBody.Replace('%CanvassSheetNo%',StringConversionManagement.WindowsToASCII("Canvass Sheet No."));
        NotificationBody := NotificationBody.Replace('%AWLCaption%',FIELDCAPTION("AWL/BL No."));
        NotificationBody := NotificationBody.Replace('%AWL%',StringConversionManagement.WindowsToASCII("AWL/BL No."));
        NotificationBody := NotificationBody.Replace('%PurposeCaption%',FIELDCAPTION(Purpose));
        NotificationBody := NotificationBody.Replace('%Purpose%',StringConversionManagement.WindowsToASCII(Purpose));
        CALCFIELDS(Amount);
        NotificationBody := NotificationBody.Replace('%AmountCaption%',FIELDCAPTION(Amount));
        NotificationBody := NotificationBody.Replace('%Amount%',FORMAT(Amount));
        NotificationBody := NotificationBody.Replace('%CurrencyCode%',"Currency Code");
        NotificationBody := NotificationBody.Replace('%PostCodeCaption%',  FIELDCAPTION("Buy-from Post Code"));
        NotificationBody := NotificationBody.Replace('%PostCode%',  FORMAT("Buy-from Post Code"));
        NotificationBody := NotificationBody.Replace('%CityCaption%',  FIELDCAPTION("Buy-from City"));
        NotificationBody := NotificationBody.Replace('%City%',  FORMAT("Buy-from City"));
        NotificationBody := NotificationBody.Replace('%CountryRegionCaption%',  FIELDCAPTION("Buy-from Country/Region Code"));
        NotificationBody := NotificationBody.Replace('%CountryRegion%',  FORMAT("Buy-from Country/Region Code"));
        NotificationBody := NotificationBody.Replace('%TypeOfActivityCaption%',  FIELDCAPTION("Type of Activity"));
        NotificationBody := NotificationBody.Replace('%TypeOfActivity%',  FORMAT("Type of Activity"));
        NotificationBody := NotificationBody.Replace('%SiteNameCaption%',  'Site Name');
        NotificationBody := NotificationBody.Replace('%SiteName%',  StringConversionManagement.WindowsToASCII(GetPostCodeSiteName));
        NotificationBody := NotificationBody.Replace('%SiteAddressCaption%',  'Site Address');
        NotificationBody := NotificationBody.Replace('%SiteAddress%',  StringConversionManagement.WindowsToASCII(GetPostCodeSiteAddress));
        NotificationBody := NotificationBody.Replace('%NoOfVisitCaption%',  FIELDCAPTION("No. of Visit"));
        NotificationBody := NotificationBody.Replace('%NoOfVisit%', FORMAT("No. of Visit"));
        NotificationBody := NotificationBody.Replace('%WorkChangeReqNoCaption%', FIELDCAPTION("Work Change Request No."));
        NotificationBody := NotificationBody.Replace('%WorkChangeReqNo%', FORMAT("Work Change Request No."));
        NotificationBody := NotificationBody.Replace('%RFENoCaption%', FIELDCAPTION("Request for Exception No."));
        NotificationBody := NotificationBody.Replace('%RFENo%', FORMAT("Request for Exception No."));
        NotificationBody := NotificationBody.Replace('%TSSRStatusCaption%',  FIELDCAPTION("TSSR Status"));
        NotificationBody := NotificationBody.Replace('%TSSRStatus%',  StringConversionManagement.WindowsToASCII(GetTSSRStatus));
        NotificationBody := NotificationBody.Replace('%RAAWAStatusCaption%',  'RAAWA Status');
        NotificationBody := NotificationBody.Replace('%RAAWAStatus%',  StringConversionManagement.WindowsToASCII(GetRAAWAStatus));
        NotificationBody := NotificationBody.Replace('%FIOStatusCaption%',  'FIO Status');
        NotificationBody := NotificationBody.Replace('%FIOStatus%',  StringConversionManagement.WindowsToASCII(GetFIOStatus));
        NotificationBody := NotificationBody.Replace('%AccessLetterRequiredCaption%',  'Access Letter Required');
        NotificationBody := NotificationBody.Replace('%AccessLetterRequired%',  StringConversionManagement.WindowsToASCII(GetAccessLetterRequired));
        NotificationBody := NotificationBody.Replace('%AccessLetterStatusCaption%',  'Access Letter Status');
        NotificationBody := NotificationBody.Replace('%AccessLetterStatus%',  StringConversionManagement.WindowsToASCII(GetAccessLetterStatus));
        NotificationBody := NotificationBody.Replace('%BldgPermitRequiredCaption%',  'Bldg Permit Required');
        NotificationBody := NotificationBody.Replace('%BldgPermitRequired%',  StringConversionManagement.WindowsToASCII(GetBldgPermitRequired));
        NotificationBody := NotificationBody.Replace('%BldgPermitStatusCaption%',  'Bldg Permit Status');
        NotificationBody := NotificationBody.Replace('%BldgPermitStatus%',  StringConversionManagement.WindowsToASCII(GetBldgPermitStatus));
        NotificationBody := NotificationBody.Replace('%ServiceOrderStatusCaption%',  'Service Order Status');
        NotificationBody := NotificationBody.Replace('%ServiceOrderStatus%',  StringConversionManagement.WindowsToASCII(GetSOStatus));

        // Meeting
        NotificationBody := NotificationBody.Replace('%MeetingCaption%', JobOrder.FIELDCAPTION(Meeting));
        NotificationBody := NotificationBody.Replace('%MeetingEmailSMSCaption%', JobOrder.FIELDCAPTION("Meeting Email/SMS Conf."));

        // Product Presentation
        NotificationBody := NotificationBody.Replace('%ProdPresentationCaption%', JobOrder.FIELDCAPTION("Product Presentation"));
        NotificationBody := NotificationBody.Replace('%ProdPresentationEmailSMSCaption%', JobOrder.FIELDCAPTION("Prod. Prstn. Email/SMS Conf."));

        // OnSite Audit
        NotificationBody := NotificationBody.Replace('%OnSiteAuditCaption%', JobOrder.FIELDCAPTION("On-Site Audit"));
        NotificationBody := NotificationBody.Replace('%AuditChecklistCaption%', JobOrder.FIELDCAPTION("Audit Checklist"));

        // Trial POC
        NotificationBody := NotificationBody.Replace('%TrialPOCCaption%', JobOrder.FIELDCAPTION("Trial/POC"));
        NotificationBody := NotificationBody.Replace('%APCTCaption%', JobOrder.FIELDCAPTION("APCT Form"));
        NotificationBody := NotificationBody.Replace('%RFECaption%', JobOrder.FIELDCAPTION("RFE Form"));

        // Site Survey
        NotificationBody := NotificationBody.Replace('%SiteSurveyCaption%', JobOrder.FIELDCAPTION("Site Survey"));
        NotificationBody := NotificationBody.Replace('%RTPSCaption%', JobOrder.FIELDCAPTION("RTPS No."));
        NotificationBody := NotificationBody.Replace('%SiteSurveySRNCaption%', JobOrder.FIELDCAPTION("Site Srvy. SR No."));

        // Permitting
        NotificationBody := NotificationBody.Replace('%PermittingCaption%', JobOrder.FIELDCAPTION(Permitting));
        NotificationBody := NotificationBody.Replace('%PrmtgTimelineCaption%', JobOrder.FIELDCAPTION("Prmtg. Timeline of ROW"));
        NotificationBody := NotificationBody.Replace('%PrmtgAFICaption%', JobOrder.FIELDCAPTION("Prmtg. AFI"));

        // Installation and Commissioning
        NotificationBody := NotificationBody.Replace('%InsCommCaption%', JobOrder.FIELDCAPTION("Installation and Commissioning"));
        NotificationBody := NotificationBody.Replace('%InsCommRFEFormCaption%', JobOrder.FIELDCAPTION("InsComm. RFE Form"));
        NotificationBody := NotificationBody.Replace('%InsCommSRNCaption%', JobOrder.FIELDCAPTION("InsComm. SR No."));
        NotificationBody := NotificationBody.Replace('%InsCommSRNFormCaption%', JobOrder.FIELDCAPTION("InsComm. SR Form"));
        NotificationBody := NotificationBody.Replace('%InsCommAFICaption%', JobOrder.FIELDCAPTION("InsComm. AFI"));
        NotificationBody := NotificationBody.Replace('%InsCommLineOfSightCaption%', JobOrder.FIELDCAPTION("InsComm. Line of Sight"));
        NotificationBody := NotificationBody.Replace('%InsCommNonLineOfSightCaption%', JobOrder.FIELDCAPTION("InsComm. Non-Line of Sight"));
        NotificationBody := NotificationBody.Replace('%InsCommPermittingCaption%', JobOrder.FIELDCAPTION("InsComm. Permitting"));
        NotificationBody := NotificationBody.Replace('%InsCommLGUCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. LGU Permit"));
        NotificationBody := NotificationBody.Replace('%InsCommHOACaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. HOA"));
        NotificationBody := NotificationBody.Replace('%InsCommFIOCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. FIO"));
        NotificationBody := NotificationBody.Replace('%InsCommBrgyPermitCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. Brgy. Permit"));
        NotificationBody := NotificationBody.Replace('%InsCommTrafficCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. Traffic"));
        NotificationBody := NotificationBody.Replace('%InsCommALPCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. ALP"));
        NotificationBody := NotificationBody.Replace('%InsCommBldgPermitCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. Bldg. Permit"));
        NotificationBody := NotificationBody.Replace('%InsCommMMDACaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. MMDA"));
        NotificationBody := NotificationBody.Replace('%InsCommRAAWACaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. RAAWA"));
        NotificationBody := NotificationBody.Replace('%InsCommDPWHCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. DPWH"));
        NotificationBody := NotificationBody.Replace('%InsCommALOCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. ALO"));
        NotificationBody := NotificationBody.Replace('%InsCommSOCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. SO"));
        NotificationBody := NotificationBody.Replace('%InsCommOthersCaption%', JobOrder.FIELDCAPTION("InsComm. Others"));

        // Testing
        NotificationBody := NotificationBody.Replace('%TestingCaption%', JobOrder.FIELDCAPTION(Testing));
        NotificationBody := NotificationBody.Replace('%TestingSRNFormCaption%', JobOrder.FIELDCAPTION("Testing SR Form"));
        NotificationBody := NotificationBody.Replace('%TestingSRNoCaption%', JobOrder.FIELDCAPTION("Testing SR No."));
        NotificationBody := NotificationBody.Replace('%TestingTestProceduresCaption%', JobOrder.FIELDCAPTION("Testing Test Procedures"));

        // Preliminary Acceptance
        NotificationBody := NotificationBody.Replace('%PreAcceptanceCaption%', JobOrder.FIELDCAPTION("Preliminary Acceptance"));
        NotificationBody := NotificationBody.Replace('%PreAcceptanceSNRFormCaption%', JobOrder.FIELDCAPTION("Pre-Accpt. SR Form"));
        NotificationBody := NotificationBody.Replace('%PreAcceptanceSRNoCaption%', JobOrder.FIELDCAPTION("Pre-Accpt. SR No."));
        NotificationBody := NotificationBody.Replace('%PreAcceptanceSchedByCustomerCaption%', JobOrder.FIELDCAPTION("Pre-Accpt. Sched. by Customer"));

        // Final Acceptance
        NotificationBody := NotificationBody.Replace('%FinalAcceptanceCaption%', JobOrder.FIELDCAPTION("Final Acceptance"));
        NotificationBody := NotificationBody.Replace('%FinalAcceptanceSNRFormCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. SR Form"));
        NotificationBody := NotificationBody.Replace('%FinalAcceptanceSRNoCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. SR No."));
        NotificationBody := NotificationBody.Replace('%FinalAcceptancePACCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. PAC"));
        NotificationBody := NotificationBody.Replace('%FinalAcceptanceSchedByCustCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. Schd. by Cust."));
        NotificationBody := NotificationBody.Replace('%FinalAcceptancePunchReportCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. Punchlist Report"));

        // Rectification
        NotificationBody := NotificationBody.Replace('%RectificationCaption%', JobOrder.FIELDCAPTION(Rectification));
        NotificationBody := NotificationBody.Replace('%RectificationSRNFormCaption%', JobOrder.FIELDCAPTION("Rectification SR Form"));
        NotificationBody := NotificationBody.Replace('%RectificationSRNoCaption%', JobOrder.FIELDCAPTION("Rectification SR No."));
        NotificationBody := NotificationBody.Replace('%RectificationPunchReportCaption%', JobOrder.FIELDCAPTION("Rectification Punchlist Report"));

        // Troubleshooting
        NotificationBody := NotificationBody.Replace('%TroubleshootingCaption%', JobOrder.FIELDCAPTION(Troubleshooting));
        NotificationBody := NotificationBody.Replace('%TroubleshootingSRNFormCaption%', JobOrder.FIELDCAPTION("Trbltng. SR Form"));
        NotificationBody := NotificationBody.Replace('%TroubleshootingSRNoCaption%', JobOrder.FIELDCAPTION("Trbltng. SR No."));
        NotificationBody := NotificationBody.Replace('%TroubleshootingNCCFNoCaption%', JobOrder.FIELDCAPTION("Trbltng. NCCF No."));
        NotificationBody := NotificationBody.Replace('%TroubleshootingUnderWarrantyCaption%', JobOrder.FIELDCAPTION("Trbltng. Under Warranty"));
        NotificationBody := NotificationBody.Replace('%TroubleshootingDeliveryRcptDateCaption%', JobOrder.FIELDCAPTION("Trbltng. DR Date"));
        NotificationBody := NotificationBody.Replace('%TroubleshootingAcceptDateCaption%', JobOrder.FIELDCAPTION("Trbltng. Date of Acceptance"));
        NotificationBody := NotificationBody.Replace('%TroubleshootingOutOfWarrantyCaption%', JobOrder.FIELDCAPTION("Trbltng. Out of Warranty"));

        IF JobOrder.GET("Job Order No.") THEN   BEGIN
          NotificationBody := NotificationBody.Replace('%Meeting%',  ReplaceTokenToChecked(JobOrder.Meeting));
          NotificationBody := NotificationBody.Replace('%MeetingEmailSMS%',  ReplaceTokenToChecked(JobOrder."Meeting Email/SMS Conf."));
          NotificationBody := NotificationBody.Replace('%ProdPresentation%', ReplaceTokenToChecked(JobOrder."Product Presentation"));
          NotificationBody := NotificationBody.Replace('%ProdPresentationEmailSMS%', ReplaceTokenToChecked(JobOrder."Prod. Prstn. Email/SMS Conf."));
          NotificationBody := NotificationBody.Replace('%OnSiteAudit%', ReplaceTokenToChecked(JobOrder."On-Site Audit"));
          NotificationBody := NotificationBody.Replace('%AuditChecklist%', ReplaceTokenToChecked(JobOrder."Audit Checklist"));
          NotificationBody := NotificationBody.Replace('%TrialPOC%', ReplaceTokenToChecked(JobOrder."Trial/POC"));
          NotificationBody := NotificationBody.Replace('%APCT%', ReplaceTokenToChecked(JobOrder."APCT Form"));
          NotificationBody := NotificationBody.Replace('%RFE%', ReplaceTokenToChecked(JobOrder."RFE Form"));
          NotificationBody := NotificationBody.Replace('%SiteSurvey%', ReplaceTokenToChecked(JobOrder."Site Survey"));
          NotificationBody := NotificationBody.Replace('%RTPS%', FORMAT(JobOrder."RTPS No."));
          NotificationBody := NotificationBody.Replace('%SiteSurveySRN%', FORMAT(JobOrder."Site Srvy. SR No."));
          NotificationBody := NotificationBody.Replace('%SiteSurveySRNForm%', ReplaceTokenToChecked(JobOrder."Site Srvy. SR Form"));
          NotificationBody := NotificationBody.Replace('%Permitting%', ReplaceTokenToChecked(JobOrder.Permitting));
          NotificationBody := NotificationBody.Replace('%PrmtgTimeline%', ReplaceTokenToChecked(JobOrder."Prmtg. Timeline of ROW"));
          NotificationBody := NotificationBody.Replace('%PrmtgAFI%', ReplaceTokenToChecked(JobOrder."Prmtg. AFI"));
          NotificationBody := NotificationBody.Replace('%InsComm%', ReplaceTokenToChecked(JobOrder."Installation and Commissioning"));
          NotificationBody := NotificationBody.Replace('%InsCommRFEForm%', ReplaceTokenToChecked(JobOrder."InsComm. RFE Form"));
          NotificationBody := NotificationBody.Replace('%InsCommSRN%', FORMAT(JobOrder."InsComm. SR No."));
          NotificationBody := NotificationBody.Replace('%InsCommSRNForm%', ReplaceTokenToChecked(JobOrder."InsComm. SR Form"));
          NotificationBody := NotificationBody.Replace('%InsCommAFI%', ReplaceTokenToChecked(JobOrder."InsComm. AFI"));
          NotificationBody := NotificationBody.Replace('%InsCommLineOfSight%', ReplaceTokenToChecked(JobOrder."InsComm. Line of Sight"));
          NotificationBody := NotificationBody.Replace('%InsCommNonLineOfSight%', ReplaceTokenToChecked(JobOrder."InsComm. Non-Line of Sight"));
          NotificationBody := NotificationBody.Replace('%InsCommPermitting%', ReplaceTokenToChecked(JobOrder."InsComm. Permitting"));
          NotificationBody := NotificationBody.Replace('%InsCommLGU%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. LGU Permit"));
          NotificationBody := NotificationBody.Replace('%InsCommHOA%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. HOA"));
          NotificationBody := NotificationBody.Replace('%InsCommFIO%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. FIO"));
          NotificationBody := NotificationBody.Replace('%InsCommBrgyPermit%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. Brgy. Permit"));
          NotificationBody := NotificationBody.Replace('%InsCommTraffic%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. Traffic"));
          NotificationBody := NotificationBody.Replace('%InsCommALP%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. ALP"));
          NotificationBody := NotificationBody.Replace('%InsCommBldgPermit%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. Bldg. Permit"));
          NotificationBody := NotificationBody.Replace('%InsCommMMDA%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. MMDA"));
          NotificationBody := NotificationBody.Replace('%InsCommRAAWA%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. RAAWA"));
          NotificationBody := NotificationBody.Replace('%InsCommDPWH%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. DPWH"));
          NotificationBody := NotificationBody.Replace('%InsCommALO%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. ALO"));
          NotificationBody := NotificationBody.Replace('%InsCommSO%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. SO"));
          NotificationBody := NotificationBody.Replace('%InsCommOthers%', StringConversionManagement.WindowsToASCII(JobOrder."InsComm. Others"));
          NotificationBody := NotificationBody.Replace('%TestingTestProcedures%', ReplaceTokenToChecked(JobOrder."Testing Test Procedures"));
          NotificationBody := NotificationBody.Replace('%TestingSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Testing SR No."));
          NotificationBody := NotificationBody.Replace('%Testing%', ReplaceTokenToChecked(JobOrder.Testing));
          NotificationBody := NotificationBody.Replace('%TestingSRNForm%', ReplaceTokenToChecked(JobOrder."Testing SR Form"));
          NotificationBody := NotificationBody.Replace('%PreAcceptance%', ReplaceTokenToChecked(JobOrder."Preliminary Acceptance"));
          NotificationBody := NotificationBody.Replace('%PreAcceptanceSNRForm%', ReplaceTokenToChecked(JobOrder."Pre-Accpt. SR Form"));
          NotificationBody := NotificationBody.Replace('%PreAcceptanceSchedByCustomer%', ReplaceTokenToChecked(JobOrder."Pre-Accpt. Sched. by Customer"));
          NotificationBody := NotificationBody.Replace('%PreAcceptanceSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Pre-Accpt. SR No."));
          NotificationBody := NotificationBody.Replace('%FinalAcceptance%', ReplaceTokenToChecked(JobOrder."Final Acceptance"));
          NotificationBody := NotificationBody.Replace('%FinalAcceptanceSNRForm%', ReplaceTokenToChecked(JobOrder."Fnl. Accpt. SR Form"));
          NotificationBody := NotificationBody.Replace('%FinalAcceptancePAC%', ReplaceTokenToChecked(JobOrder."Fnl. Accpt. PAC"));
          NotificationBody := NotificationBody.Replace('%FinalAcceptanceSchedByCust%', ReplaceTokenToChecked(JobOrder."Fnl. Accpt. Schd. by Cust."));
          NotificationBody := NotificationBody.Replace('%FinalAcceptancePunchReport%', ReplaceTokenToChecked(JobOrder."Fnl. Accpt. Punchlist Report"));
          NotificationBody := NotificationBody.Replace('%FinalAcceptanceSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Fnl. Accpt. SR No."));
          NotificationBody := NotificationBody.Replace('%Rectification%', ReplaceTokenToChecked(JobOrder.Rectification));
          NotificationBody := NotificationBody.Replace('%RectificationSRNForm%', ReplaceTokenToChecked(JobOrder."Rectification SR Form"));
          NotificationBody := NotificationBody.Replace('%RectificationPunchReport%', ReplaceTokenToChecked(JobOrder."Rectification Punchlist Report"));
          NotificationBody := NotificationBody.Replace('%RectificationSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Rectification SR No."));
          NotificationBody := NotificationBody.Replace('%TroubleshootingDeliveryRcptDate%',FORMAT(JobOrder."Trbltng. DR Date"));
          NotificationBody := NotificationBody.Replace('%TroubleshootingAcceptDate%',FORMAT(JobOrder."Trbltng. Date of Acceptance"));
          NotificationBody := NotificationBody.Replace('%TroubleshootingSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Trbltng. SR No."));
          NotificationBody := NotificationBody.Replace('%TroubleshootingNCCFNo%', StringConversionManagement.WindowsToASCII(JobOrder."Trbltng. NCCF No."));
          NotificationBody := NotificationBody.Replace('%Troubleshooting%',ReplaceTokenToChecked(JobOrder.Troubleshooting));
          NotificationBody := NotificationBody.Replace('%TroubleshootingSRNForm%',ReplaceTokenToChecked(JobOrder."Trbltng. SR Form"));
          NotificationBody := NotificationBody.Replace('%TroubleshootingUnderWarranty%',ReplaceTokenToChecked(JobOrder."Trbltng. Under Warranty"));
          NotificationBody := NotificationBody.Replace('%TroubleshootingOutOfWarranty%',ReplaceTokenToChecked(JobOrder."Trbltng. Out of Warranty"));

          IF JobOrder."RTPS No." <> '' THEN
            NotificationBody := NotificationBody.Replace('%SiteSurveyRTPSCheckbox%', 'checked')
          ELSE
            NotificationBody := NotificationBody.Replace('%SiteSurveyRTPSCheckbox%', '');

          IF JobOrder."Trbltng. NCCF No." <> '' THEN
            NotificationBody := NotificationBody.Replace('%TroubleshootingNCCFCheckbox%', 'checked')
          ELSE
            NotificationBody := NotificationBody.Replace('%TroubleshootingNCCFCheckbox%', '');

        END ELSE BEGIN
          NotificationBody := NotificationBody.Replace('%Meeting%',  '');
          NotificationBody := NotificationBody.Replace('%MeetingEmailSMS%',  '');
          NotificationBody := NotificationBody.Replace('%ProdPresentation%', '');
          NotificationBody := NotificationBody.Replace('%ProdPresentationEmailSMS%', '');
          NotificationBody := NotificationBody.Replace('%OnSiteAudit%', '');
          NotificationBody := NotificationBody.Replace('%AuditChecklist%', '');
          NotificationBody := NotificationBody.Replace('%TrialPOC%', '');
          NotificationBody := NotificationBody.Replace('%APCT%', '');
          NotificationBody := NotificationBody.Replace('%RFE%', '');
          NotificationBody := NotificationBody.Replace('%SiteSurvey%', '');
          NotificationBody := NotificationBody.Replace('%RTPS%', '');
          NotificationBody := NotificationBody.Replace('%SiteSurveySRN%', '');
          NotificationBody := NotificationBody.Replace('%SiteSurveySRNForm%', '');
          NotificationBody := NotificationBody.Replace('%SiteSurveyRTPSCheckbox%', '');
          NotificationBody := NotificationBody.Replace('%Permitting%', '');
          NotificationBody := NotificationBody.Replace('%PrmtgTimeline%', '');
          NotificationBody := NotificationBody.Replace('%PrmtgAFI%', '');
          NotificationBody := NotificationBody.Replace('%InsComm%', '');
          NotificationBody := NotificationBody.Replace('%InsCommRFEForm%', '');
          NotificationBody := NotificationBody.Replace('%InsCommSRN%', '');
          NotificationBody := NotificationBody.Replace('%InsCommSRNForm%', '');
          NotificationBody := NotificationBody.Replace('%InsCommAFI%', '');
          NotificationBody := NotificationBody.Replace('%InsCommLineOfSight%', '');
          NotificationBody := NotificationBody.Replace('%InsCommNonLineOfSight%', '');
          NotificationBody := NotificationBody.Replace('%InsCommPermitting%', '');
          NotificationBody := NotificationBody.Replace('%InsCommLGU%', '');
          NotificationBody := NotificationBody.Replace('%InsCommHOA%', '');
          NotificationBody := NotificationBody.Replace('%InsCommFIO%', '');
          NotificationBody := NotificationBody.Replace('%InsCommBrgyPermit%', '');
          NotificationBody := NotificationBody.Replace('%InsCommTraffic%', '');
          NotificationBody := NotificationBody.Replace('%InsCommALP%', '');
          NotificationBody := NotificationBody.Replace('%InsCommBldgPermit%', '');
          NotificationBody := NotificationBody.Replace('%InsCommMMDA%', '');
          NotificationBody := NotificationBody.Replace('%InsCommRAAWA%', '');
          NotificationBody := NotificationBody.Replace('%InsCommDPWH%', '');
          NotificationBody := NotificationBody.Replace('%InsCommALO%', '');
          NotificationBody := NotificationBody.Replace('%InsCommSO%', '');
          NotificationBody := NotificationBody.Replace('%InsCommOthers%', '');
          NotificationBody := NotificationBody.Replace('%TestingTestProcedures%', '');
          NotificationBody := NotificationBody.Replace('%TestingSRNo%', '');
          NotificationBody := NotificationBody.Replace('%Testing%', '');
          NotificationBody := NotificationBody.Replace('%TestingSRNForm%', '');
          NotificationBody := NotificationBody.Replace('%PreAcceptance%', '');
          NotificationBody := NotificationBody.Replace('%PreAcceptanceSNRForm%', '');
          NotificationBody := NotificationBody.Replace('%PreAcceptanceSchedByCustomer%', '');
          NotificationBody := NotificationBody.Replace('%PreAcceptanceSRNo%', '');
          NotificationBody := NotificationBody.Replace('%FinalAcceptance%', '');
          NotificationBody := NotificationBody.Replace('%FinalAcceptanceSNRForm%', '');
          NotificationBody := NotificationBody.Replace('%FinalAcceptancePAC%', '');
          NotificationBody := NotificationBody.Replace('%FinalAcceptanceSchedByCust%', '');
          NotificationBody := NotificationBody.Replace('%FinalAcceptancePunchReport%', '');
          NotificationBody := NotificationBody.Replace('%FinalAcceptanceSRNo%', '');
          NotificationBody := NotificationBody.Replace('%Rectification%', '');
          NotificationBody := NotificationBody.Replace('%RectificationSRNForm%', '');
          NotificationBody := NotificationBody.Replace('%RectificationPunchReport%', '');
          NotificationBody := NotificationBody.Replace('%RectificationSRNo%', '');
          NotificationBody := NotificationBody.Replace('%TroubleshootingNCCFCheckbox%', '');
          NotificationBody := NotificationBody.Replace('%TroubleshootingDeliveryRcptDate%','');
          NotificationBody := NotificationBody.Replace('%TroubleshootingAcceptDate%','');
          NotificationBody := NotificationBody.Replace('%TroubleshootingSRNo%', '');
          NotificationBody := NotificationBody.Replace('%TroubleshootingNCCFNo%', '');
          NotificationBody := NotificationBody.Replace('%Troubleshooting%','');
          NotificationBody := NotificationBody.Replace('%TroubleshootingSRNForm%','');
          NotificationBody := NotificationBody.Replace('%TroubleshootingUnderWarranty%','');
          NotificationBody := NotificationBody.Replace('%TroubleshootingOutOfWarranty%','');

        END;

        NotificationBody := NotificationBody.Replace('%SiteProjSatatusCaption%', 'Site/Project Status');
        IF PostCode.GET("Buy-from Post Code", "Buy-from City") THEN
          NotificationBody := NotificationBody.Replace('%SiteProjSatatus%',  StringConversionManagement.WindowsToASCII(FORMAT(PostCode."Site Status") + ' - ' + FORMAT(PostCode."Project Status")))
        ELSE
          NotificationBody := NotificationBody.Replace('%SiteProjSatatus%', '');

        NotificationBody := NotificationBody.Replace('%GroundManagerCaption%', 'Ground Manager');
        IF Resource.GET("Ground Manager No.") THEN
          NotificationBody := NotificationBody.Replace('%GroundManager%', StringConversionManagement.WindowsToASCII(Resource."No." + ' ' + Resource.Name))
        ELSE
          NotificationBody := NotificationBody.Replace('%GroundManager%', '');

        NotificationBody := NotificationBody.Replace('%NOCInChargeCaption%', 'NOC In-Charge');
        IF Resource.GET("NOC In-Charge No.") THEN
          NotificationBody := NotificationBody.Replace('%NOCInCharge%', StringConversionManagement.WindowsToASCII(Resource."No." + ' ' + Resource.Name))
        ELSE
          NotificationBody := NotificationBody.Replace('%NOCInCharge%', '');

        IF Employee.GET("Buy-from Vendor No.") THEN BEGIN
          NotificationBody := NotificationBody.Replace('%RequesterName%', StringConversionManagement.WindowsToASCII("Employee No." + ' ' + Employee.FullName));
          NotificationBody := NotificationBody.Replace('%RequesterNameDepartment%', StringConversionManagement.WindowsToASCII(Employee."Department Code" + ' ' + Employee.Department));
        END ELSE BEGIN
          NotificationBody := NotificationBody.Replace('%RequesterName%', '');
          NotificationBody := NotificationBody.Replace('%RequesterNameDepartment%', '');
        END;

        // Request for Payment
        NotificationBody := NotificationBody.Replace('%CanvassSheetNoCaption%',FIELDCAPTION("Canvass Sheet No."));
        NotificationBody := NotificationBody.Replace('%CanvassSheetNo%',StringConversionManagement.WindowsToASCII("Canvass Sheet No."));
        NotificationBody := NotificationBody.Replace('%YourReferenceCaption%',FIELDCAPTION("Your Reference"));
        NotificationBody := NotificationBody.Replace('%YourReference%',StringConversionManagement.WindowsToASCII("Your Reference"));
        NotificationBody := NotificationBody.Replace('%PaymentTermsCodeCaption%',FIELDCAPTION("Payment Terms Code"));
        IF PaymentTerms.GET("Payment Terms Code") THEN
          NotificationBody := NotificationBody.Replace('%PaymentTermsCode%',StringConversionManagement.WindowsToASCII("Payment Terms Code" + ': ' + PaymentTerms.Description))
        ELSE
        NotificationBody := NotificationBody.Replace('%PaymentTermsCode%','');

        NotificationBody := NotificationBody.Replace('%PaymentMethodCodeCaption%',FIELDCAPTION("Payment Method Code"));
        IF PaymentMethod.GET("Payment Method Code") THEN
          NotificationBody := NotificationBody.Replace('%PaymentMethodCode%',StringConversionManagement.WindowsToASCII("Payment Method Code" + ' ' + PaymentMethod.Description))
        ELSE
          NotificationBody := NotificationBody.Replace('%PaymentMethodCode%','');

        // Purchaser Order
        NotificationBody := NotificationBody.Replace('%VendorTypeCaption%', FIELDCAPTION("Vendor Type"));
        NotificationBody := NotificationBody.Replace('%VendorType%', FORMAT("Vendor Type"));
        NotificationBody := NotificationBody.Replace('%BuyFromVendorNameCaption%', FIELDCAPTION("Buy-from Vendor Name"));
        NotificationBody := NotificationBody.Replace('%BuyFromVendorName%', StringConversionManagement.WindowsToASCII("Buy-from Vendor Name" + ' ' + "Buy-from Vendor Name 2"));
        NotificationBody := NotificationBody.Replace('%BuyFromAddressCaption%', FIELDCAPTION("Buy-from Address"));
        NotificationBody := NotificationBody.Replace('%BuyFromAddress%', StringConversionManagement.WindowsToASCII("Buy-from Address" + ' ' + "Buy-from Address 2"));
        NotificationBody := NotificationBody.Replace('%BuyFromContactNameCaption%', 'Buy-from Contact Name');
        IF Contact.GET("Buy-from Contact No.") THEN
          NotificationBody := NotificationBody.Replace('%BuyFromContactName%', StringConversionManagement.WindowsToASCII("Buy-from Contact No." + ' ' + Contact.Name))
        ELSE
          NotificationBody := NotificationBody.Replace('%BuyFromContactName%', '');

        NotificationBody := NotificationBody.Replace('%TermOfShipmentCaption%', 'Term of Shipment');
        IF TransportMethod.GET(PurchaseHeader."Transport Method") THEN
          NotificationBody := NotificationBody.Replace('%TermOfShipment%', StringConversionManagement.WindowsToASCII(TransportMethod.Description))
        ELSE
          NotificationBody := NotificationBody.Replace('%TermOfShipment%', '');

        NotificationBody := NotificationBody.Replace('%BuyfromVendorTINCaption%', Vendor.FIELDCAPTION("VAT Registration No."));
        NotificationBody := NotificationBody.Replace('%BuyFromVendorTelNoCaption%', Vendor.FIELDCAPTION("Phone No."));
        NotificationBody := NotificationBody.Replace('%BuyFromVendorEmailCaption%', Vendor.FIELDCAPTION("E-Mail"));
        IF Vendor.GET("Buy-from Vendor No.") THEN BEGIN
          NotificationBody := NotificationBody.Replace('%BuyfromVendorTIN%', StringConversionManagement.WindowsToASCII(Vendor."VAT Registration No."));
          NotificationBody := NotificationBody.Replace('%BuyFromVendorTelNo%',  StringConversionManagement.WindowsToASCII(Vendor."Phone No."));
          NotificationBody := NotificationBody.Replace('%BuyFromVendorEmail%', StringConversionManagement.WindowsToASCII(Vendor."E-Mail"));
        END ELSE BEGIN
          NotificationBody := NotificationBody.Replace('%BuyfromVendorTIN%', '');
          NotificationBody := NotificationBody.Replace('%BuyFromVendorTelNo%',  '');
          NotificationBody := NotificationBody.Replace('%BuyFromVendorEmail%', '');
        END;

        NotificationBody := NotificationBody.Replace('%CompanyTINCaption%', CompanyInfo.FIELDCAPTION("VAT Registration No."));
        NotificationBody := NotificationBody.Replace('%CompanyTelNoCaption%', CompanyInfo.FIELDCAPTION("Phone No."));
        IF CompanyInfo.GET THEN BEGIN
          NotificationBody := NotificationBody.Replace('%CompanyTIN%', StringConversionManagement.WindowsToASCII(CompanyInfo."VAT Registration No."));
          NotificationBody := NotificationBody.Replace('%CompanyTelNo%', StringConversionManagement.WindowsToASCII(CompanyInfo."Phone No."));
        END ELSE BEGIN
          NotificationBody := NotificationBody.Replace('%CompanyTIN%', '');
          NotificationBody := NotificationBody.Replace('%CompanyTelNo%', '');
        END;

        NotificationBody := NotificationBody.Replace('%BankDeatilsCaption%', 'Bank Details');
        NotificationBody := NotificationBody.Replace('%BankAccNoCaption%', 'Account No.');
        IF VendorBankAccount.GET(PurchaseHeader."Pay-to Vendor No.",  PurchaseHeader."Preferred Bank Account") THEN BEGIN
          NotificationBody := NotificationBody.Replace('%BankDeatils%', StringConversionManagement.WindowsToASCII(VendorBankAccount.Name + ' ' + VendorBankAccount."Name 2"));
          NotificationBody := NotificationBody.Replace('%BankAccNo%',  StringConversionManagement.WindowsToASCII(VendorBankAccount."Bank Account No."));
        END ELSE BEGIN
          NotificationBody := NotificationBody.Replace('%BankDeatils%', '');
          NotificationBody := NotificationBody.Replace('%BankAccNo%',  '');
        END;

        NotificationBody := NotificationBody.Replace('%BeneficiaryCaption%', 'Beneficiary');
        NotificationBody := NotificationBody.Replace('%Beneficiary%', StringConversionManagement.WindowsToASCII("Pay-to Name" + ' ' + "Pay-to Name 2"));
        NotificationBody := NotificationBody.Replace('%NoOfArchvdVrsnCaption%', FIELDCAPTION("No. of Archived Versions"));
        NotificationBody := NotificationBody.Replace('%NoOfArchvdVrsn%', FORMAT("No. of Archived Versions"));
        NotificationBody := NotificationBody.Replace('%PostingDateCaption%', FIELDCAPTION("Posting Date"));
        NotificationBody := NotificationBody.Replace('%PostingDate%', FORMAT("Posting Date"));
        NotificationBody := NotificationBody.Replace('%OrderDateCaption%', FIELDCAPTION("Order Date"));
        NotificationBody := NotificationBody.Replace('%OrderDate%', FORMAT("Order Date"));
        NotificationBody := NotificationBody.Replace('%DocumentDateCaption%', FIELDCAPTION("Document Date"));
        NotificationBody := NotificationBody.Replace('%DocumentDate%', FORMAT("Document Date"));
        NotificationBody := NotificationBody.Replace('%DocumentDateFormatted%', FORMAT("Document Date", 0, '<Month Text> <Closing><Day>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%QuoteNoCaption%', FIELDCAPTION("Quote No."));
        NotificationBody := NotificationBody.Replace('%QuoteNo%', StringConversionManagement.WindowsToASCII("Quote No."));
        NotificationBody := NotificationBody.Replace('%VendorOrderNoCaption%', FIELDCAPTION("Vendor Order No."));
        NotificationBody := NotificationBody.Replace('%VendorOrderNo%', StringConversionManagement.WindowsToASCII("Vendor Order No."));
        NotificationBody := NotificationBody.Replace('%VendorShipmentNoCaption%', FIELDCAPTION("Vendor Shipment No."));
        NotificationBody := NotificationBody.Replace('%VendorShipmentNo%', StringConversionManagement.WindowsToASCII("Vendor Shipment No."));
        NotificationBody := NotificationBody.Replace('%VendorInvoiceNoCaption%', FIELDCAPTION("Vendor Invoice No."));
        NotificationBody := NotificationBody.Replace('%VendorInvoiceNo%', StringConversionManagement.WindowsToASCII("Vendor Invoice No."));
        NotificationBody := NotificationBody.Replace('%PurchaserNameCaption%', 'Purchaser Name');
        IF SalesPerson.GET("Purchaser Code") THEN
          NotificationBody := NotificationBody.Replace('%PurchaserName%', StringConversionManagement.WindowsToASCII("Purchaser Code" + ' ' + SalesPerson.Name))
        ELSE
          NotificationBody := NotificationBody.Replace('%PurchaserName%', '');
      //  NotificationBody := NotificationBody.Replace('%JobDescriptionCaption%', 'Job Description');
      //  IF INTP.GET("INTP No.") THEN
      //    NotificationBody := NotificationBody.Replace('%JobDescription%', STRSUBSTNO("INTP No." + ' ' + INTP."Project Name" + ' ' + INTP."Project Name 2"))
      //  ELSE
      //    NotificationBody := NotificationBody.Replace('%JobDescription%', '');
        NotificationBody := NotificationBody.Replace('%RefRFPNoCaption%', FIELDCAPTION("Reference RFP No."));
        NotificationBody := NotificationBody.Replace('%RefRFPNo%', StringConversionManagement.WindowsToASCII("Reference RFP No."));
        NotificationBody := NotificationBody.Replace('%StatusCaption%', FIELDCAPTION(Status));
        NotificationBody := NotificationBody.Replace('%Status%', FORMAT(Status));
        NotificationBody := NotificationBody.Replace('%PayToNameCaption%', FIELDCAPTION("Pay-to Name"));
        NotificationBody := NotificationBody.Replace('%PayToName%', StringConversionManagement.WindowsToASCII("Pay-to Vendor No." + ' ' + "Pay-to Name" + ' ' + "Pay-to Name 2"));
        NotificationBody := NotificationBody.Replace('%PayToAddressCaption%', FIELDCAPTION("Pay-to Address"));
        NotificationBody := NotificationBody.Replace('%PayToAddress%', StringConversionManagement.WindowsToASCII("Pay-to Address" + ' ' + "Pay-to Address 2"));
        NotificationBody := NotificationBody.Replace('%DueDateCaption%', FIELDCAPTION("Due Date"));
        NotificationBody := NotificationBody.Replace('%DueDate%', FORMAT("Due Date"));
        NotificationBody := NotificationBody.Replace('%PaymentDiscountCaption%', FIELDCAPTION("Payment Discount %"));
        NotificationBody := NotificationBody.Replace('%PaymentDiscount%', FORMAT("Payment Discount %"));
        NotificationBody := NotificationBody.Replace('%PaymentReferenceCaption%', FIELDCAPTION("Payment Reference"));
        NotificationBody := NotificationBody.Replace('%PaymentReference%', StringConversionManagement.WindowsToASCII("Payment Reference"));
        NotificationBody := NotificationBody.Replace('%CreditorNoCaption%', FIELDCAPTION("Creditor No."));
        NotificationBody := NotificationBody.Replace('%CreditorNo%', StringConversionManagement.WindowsToASCII("Creditor No."));
        NotificationBody := NotificationBody.Replace('%OnHoldCaption%', FIELDCAPTION("On Hold"));
        NotificationBody := NotificationBody.Replace('%OnHold%', StringConversionManagement.WindowsToASCII("On Hold"));
        NotificationBody := NotificationBody.Replace('%PricesInclVATCaption%', FIELDCAPTION("Prices Including VAT"));
        NotificationBody := NotificationBody.Replace('%PricesInclVAT%', FORMAT("Prices Including VAT"));
        NotificationBody := NotificationBody.Replace('%ShipToNameCaption%', FIELDCAPTION("Ship-to Name"));
        NotificationBody := NotificationBody.Replace('%ShipToName%', StringConversionManagement.WindowsToASCII("Ship-to Name" + ' ' + "Ship-to Name 2"));
        NotificationBody := NotificationBody.Replace('%ShipToAddressCaption%', FIELDCAPTION("Ship-to Address"));
        NotificationBody := NotificationBody.Replace('%ShipToAddress%', StringConversionManagement.WindowsToASCII("Ship-to Address" + ' ' + "Ship-to Address 2"));
        NotificationBody := NotificationBody.Replace('%ShipToContactCaption%', FIELDCAPTION("Ship-to Contact"));
        NotificationBody := NotificationBody.Replace('%ShipToContact%', StringConversionManagement.WindowsToASCII("Ship-to Contact"));
        NotificationBody := NotificationBody.Replace('%ShipToEmailCaption%', FIELDCAPTION("Ship-to Email Address"));
        NotificationBody := NotificationBody.Replace('%ShipToEmail%', StringConversionManagement.WindowsToASCII("Ship-to Email Address"));
        NotificationBody := NotificationBody.Replace('%ShippingMethodCaption%', FIELDCAPTION("Shipment Method"));
        IF ShippingMethod.GET("Shipment Method Code") THEN
          NotificationBody := NotificationBody.Replace('%ShippingMethod%', StringConversionManagement.WindowsToASCII(ShippingMethod.Code + ' - ' + "Shipment Method"))
        ELSE
          NotificationBody := NotificationBody.Replace('%ShippingMethod%', '');
        NotificationBody := NotificationBody.Replace('%LeadTimeCalculationCaption%', FIELDCAPTION("Lead Time Calculation"));
        NotificationBody := NotificationBody.Replace('%LeadTimeCalculation%', FORMAT("Lead Time Calculation"));
        NotificationBody := NotificationBody.Replace('%RequestedRcptDateCaption%', FIELDCAPTION("Requested Receipt Date"));
        NotificationBody := NotificationBody.Replace('%RequestedRcptDate%', FORMAT("Requested Receipt Date"));
        NotificationBody := NotificationBody.Replace('%RequestedRcptDateFormatted%', FORMAT("Requested Receipt Date", 0, '<Month Text> <Closing><Day>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%PromisedRcptDateCaption%', FIELDCAPTION("Promised Receipt Date"));
        NotificationBody := NotificationBody.Replace('%PromisedRcptDate%', FORMAT("Promised Receipt Date"));
        NotificationBody := NotificationBody.Replace('%ExpectedRcptDateCaption%', FIELDCAPTION("Expected Receipt Date"));
        NotificationBody := NotificationBody.Replace('%ExpectedRcptDate%', FORMAT("Expected Receipt Date"));
        NotificationBody := NotificationBody.Replace('%SellToCustomerNameCaption%', 'Sell-to Customer Name');
        IF Customer.GET("Sell-to Customer No.") THEN
          NotificationBody := NotificationBody.Replace('%SellToCustomerName%', StringConversionManagement.WindowsToASCII(Customer.Name + ' ' + Customer."Name 2"))
        ELSE
          NotificationBody := NotificationBody.Replace('%SellToCustomerName%', '');
        NotificationBody := NotificationBody.Replace('%CurrencyCaption%', 'Currency');
        NotificationBody := NotificationBody.Replace('%Currency%', "Currency Code");
        NotificationBody := NotificationBody.Replace('%TransactionTypeCaption%', FIELDCAPTION("Transaction Type"));
        IF TransactionType.GET("Transaction Type") THEN
          NotificationBody := NotificationBody.Replace('%TransactionType%', StringConversionManagement.WindowsToASCII("Transaction Type" + ' ' + TransactionType.Description))
        ELSE
          NotificationBody := NotificationBody.Replace('%TransactionType%', '');
        NotificationBody := NotificationBody.Replace('%TransactionSpecCaption%', FIELDCAPTION("Transaction Specification"));
        IF TransactionSpec.GET("Transaction Specification") THEN
          NotificationBody := NotificationBody.Replace('%TransactionSpec%', StringConversionManagement.WindowsToASCII("Transaction Specification" + ' ' + TransactionSpec.Text))
        ELSE
          NotificationBody := NotificationBody.Replace('%TransactionSpec%', '');
        NotificationBody := NotificationBody.Replace('%TransportMethodCaption%', FIELDCAPTION("Transport Method"));
        IF TransportMethod.GET("Transport Method") THEN
          NotificationBody := NotificationBody.Replace('%TransportMethod%', StringConversionManagement.WindowsToASCII(TransportMethod.Description))
        ELSE
          NotificationBody := NotificationBody.Replace('%TransportMethod%', '');
        NotificationBody := NotificationBody.Replace('%EntryPointCaption%', FIELDCAPTION("Entry Point"));
        IF EntryExitPoint.GET("Entry Point") THEN
          NotificationBody := NotificationBody.Replace('%EntryPoint%', StringConversionManagement.WindowsToASCII(("Entry Point" + ' ' + EntryExitPoint.Description)))
        ELSE
          NotificationBody := NotificationBody.Replace('%EntryPoint%', '');
        NotificationBody := NotificationBody.Replace('%AreaCaption%', FIELDCAPTION(Area));
        IF EntryExitPoint.GET("Entry Point") THEN
          NotificationBody := NotificationBody.Replace('%Area%', StringConversionManagement.WindowsToASCII("Entry Point" + ' ' + EntryExitPoint.Description))
        ELSE
          NotificationBody := NotificationBody.Replace('%Area%', '');
        NotificationBody := NotificationBody.Replace('%PrepaymentCaption%', FIELDCAPTION("Prepayment %"));
        NotificationBody := NotificationBody.Replace('%Prepayment%', FORMAT("Prepayment %"));
        NotificationBody := NotificationBody.Replace('%CompressPrepaymentCaption%', FIELDCAPTION("Compress Prepayment"));
        NotificationBody := NotificationBody.Replace('%CompressPrepayment%', FORMAT("Compress Prepayment"));
        NotificationBody := NotificationBody.Replace('%PrepmtPaymentTermsCodeCaption%', 'Prepmt. Payment Terms');
        IF PaymentTerms.GET("Prepmt. Payment Terms Code") THEN
          NotificationBody := NotificationBody.Replace('%PrepmtPaymentTermsCode%', StringConversionManagement.WindowsToASCII("Prepmt. Payment Terms Code" + ' ' + PaymentTerms.Description))
        ELSE
          NotificationBody := NotificationBody.Replace('%PrepmtPaymentTermsCode%', '');
        NotificationBody := NotificationBody.Replace('%PrepaymentDueDateCaption%', FIELDCAPTION("Prepayment Due Date"));
        NotificationBody := NotificationBody.Replace('%PrepaymentDueDate%', FORMAT("Prepayment Due Date"));
        NotificationBody := NotificationBody.Replace('%PrepmtPaymentDiscountCaption%', FIELDCAPTION("Prepmt. Payment Discount %"));
        NotificationBody := NotificationBody.Replace('%PrepmtPaymentDiscount%', FORMAT("Prepmt. Payment Discount %"));
        NotificationBody := NotificationBody.Replace('%PrepmtPmtDiscDateCaption%', FIELDCAPTION("Prepmt. Pmt. Discount Date"));
        NotificationBody := NotificationBody.Replace('%PrepmtPmtDiscDate%', FORMAT("Prepmt. Pmt. Discount Date"));
        NotificationBody := NotificationBody.Replace('%VendorCrMemoNoCaption%', FIELDCAPTION("Vendor Cr. Memo No."));
        NotificationBody := NotificationBody.Replace('%VendorCrMemoNo%', FORMAT("Vendor Cr. Memo No."));
        NotificationBody := NotificationBody.Replace('%WarrantyCaption%', FIELDCAPTION(Warranty));
        NotificationBody := NotificationBody.Replace('%Warranty%', StringConversionManagement.WindowsToASCII(Warranty));
        NotificationBody := NotificationBody.Replace('%SpecialInstructionCaption%', FIELDCAPTION("Special Instruction"));
        NotificationBody := NotificationBody.Replace('%SpecialInstruction%', StringConversionManagement.WindowsToASCII("Special Instruction"));

        // Start Terms and Condition
        NotificationBody := NotificationBody.Replace('%TermsAndConditionCaption%', FIELDCAPTION("Terms and Condition"));
        NotificationBody := NotificationBody.Replace('%CommercialTechTermsAndConditionCaption%', 'Commercial/Technical Terms and Conditions');
        CALCFIELDS("Terms and Condition");
        IF "Terms and Condition".HASVALUE THEN BEGIN
          CLEAR(TermsAndCondition);
          "Terms and Condition".CREATEINSTREAM(InStr);
          InStr.READ(TermsAndCondition);
          NotificationBody := NotificationBody.Replace('%TermsAndCondition%', StringConversionManagement.WindowsToASCII(TermsAndCondition));
        END ELSE
          NotificationBody := NotificationBody.Replace('%TermsAndCondition%', '');

        // Start of Shipping Instruction
        NotificationBody := NotificationBody.Replace('%ShippingInstructionCaption%', FIELDCAPTION("Shipping Instruction"));
        CALCFIELDS("Shipping Instruction");
        IF "Shipping Instruction".HASVALUE THEN BEGIN
          CLEAR(ShipingInstruction);
          "Shipping Instruction".CREATEINSTREAM(InStr);
          InStr.READ(ShipingInstruction);
          NotificationBody := NotificationBody.Replace('%ShippingInstruction%', StringConversionManagement.WindowsToASCII(ShipingInstruction));
        END ELSE
          NotificationBody := NotificationBody.Replace('%ShippingInstruction%', '');

        NotificationBody := NotificationBody.Replace('%ProjectManagerCaption%', 'Project Manager');
        IF Resource.GET("Project Manager No.") THEN
          NotificationBody := NotificationBody.Replace('%ProjectManager%', StringConversionManagement.WindowsToASCII("Project Manager No." + ' ' + Resource.Name + ' ' + Resource."Name 2"))
        ELSE
          NotificationBody := NotificationBody.Replace('%ProjectManager%', '');

        // Notice of Shipment
        NotificationBody := NotificationBody.Replace('%FreightBudgetCaption%', FIELDCAPTION("Freight Budget"));
        NotificationBody := NotificationBody.Replace('%FreightBudget%', FORMAT("Freight Budget"));
        NotificationBody := NotificationBody.Replace('%ShipperCaption%', 'Shipper');
        IF Vendor.GET("Shipper No.") THEN
          NotificationBody := NotificationBody.Replace('%Shipper%', StringConversionManagement.WindowsToASCII(Vendor."No." + ' ' + Vendor.Name + ' ' + Vendor."Name 2"))
        ELSE
          NotificationBody := NotificationBody.Replace('%Shipper%', '');
        NotificationBody := NotificationBody.Replace('%ConsigneeCaption%', 'Consignee');
        IF Customer.GET("Consignee Code") THEN
          NotificationBody := NotificationBody.Replace('%Consignee%', StringConversionManagement.WindowsToASCII(Customer."No." + ' ' + Customer.Name + ' ' + Customer."Name 2"))
        ELSE
          NotificationBody := NotificationBody.Replace('%Consignee%', '');

        // Shipping Marks Blob
        NotificationBody := NotificationBody.Replace('%ShippingMarksCaption%', FIELDCAPTION("Shipping Marks"));
        CALCFIELDS("Shipping Marks");
        IF "Shipping Marks".HASVALUE THEN BEGIN
          CLEAR(ShippingMarks);
          "Shipping Marks".CREATEINSTREAM(InStr);
          InStr.READ(ShippingMarks);
          NotificationBody := NotificationBody.Replace('%ShippingMarks%',  StringConversionManagement.WindowsToASCII(ShippingMarks));
        END ELSE
          NotificationBody := NotificationBody.Replace('%ShippingMarks%',  '');

        // Penalty Clause
        NotificationBody := NotificationBody.Replace('%PenaltyClauseCaption%', FIELDCAPTION("Penalty Clause"));
        CALCFIELDS("Penalty Clause");
        IF "Penalty Clause".HASVALUE THEN BEGIN
          CLEAR(PenaltyClause);
          "Penalty Clause".CREATEINSTREAM(InStr);
          InStr.READ(PenaltyClause);
          NotificationBody := NotificationBody.Replace('%PenaltyClause%',  StringConversionManagement.WindowsToASCII(PenaltyClause));
        END ELSE
          NotificationBody := NotificationBody.Replace('%PenaltyClause%', PenaltyClauseDefault);

        // Start of Insurance Blob
        NotificationBody := NotificationBody.Replace('%InsuranceCaption%', FIELDCAPTION(Insurance));
        CALCFIELDS(Insurance);
        IF Insurance.HASVALUE THEN BEGIN
          CLEAR(InsuranceTxt);
          Insurance.CREATEINSTREAM(InStr);
          InStr.READ(InsuranceTxt);
          NotificationBody := NotificationBody.Replace('%Insurance%',  StringConversionManagement.WindowsToASCII(InsuranceTxt));
        END ELSE
          NotificationBody := NotificationBody.Replace('%Insurance%', '');

        // Technical Specifications and Price Lock Clause
        NotificationBody := NotificationBody.Replace('%PriceLockClauseCaption%', 'Technical Specifications and Price Lock Clause');
        NotificationBody := NotificationBody.Replace('%PriceLockClause%', PriceLockClauseDefault);

        // Confidentiality Clause
        NotificationBody := NotificationBody.Replace('%ConfidentialityClauseCaption%', 'Confidentiality Clause');
        NotificationBody := NotificationBody.Replace('%ConfidentialityClause%', ConfidentialityClauseDefault);

        NotificationBody := NotificationBody.Replace('%TechnicalInchargeCaption%', FIELDCAPTION("Technical In-Charge"));
        IF Resource.GET("Technical In-Charge") THEN
          NotificationBody := NotificationBody.Replace('%TechnicalIncharge%', StringConversionManagement.WindowsToASCII(Resource."No." + ' ' + Resource.Name + ' ' + Resource."Name 2"))
        ELSE
          NotificationBody := NotificationBody.Replace('%TechnicalIncharge%', '');

        NotificationBody := NotificationBody.Replace('%EmployeeNameCaption%', 'Employee Name');
        NotificationBody := NotificationBody.Replace('%EmployeeDeptCaption%', Employee.FIELDCAPTION(Department));
        IF Employee.GET("Employee No.") THEN BEGIN
          NotificationBody := NotificationBody.Replace('%EmployeeName%', StringConversionManagement.WindowsToASCII(Employee."No." + ' ' + Employee.FullName));
          NotificationBody := NotificationBody.Replace('%EmployeeDept%',  StringConversionManagement.WindowsToASCII(Employee."Department Code" + ' ' + Employee.Department));
        END ELSE BEGIN
          NotificationBody := NotificationBody.Replace('%EmployeeName%', '');
          NotificationBody := NotificationBody.Replace('%EmployeeDept%', '');
        END;
        NotificationBody := NotificationBody.Replace('%CostAnalystNameCaption%', 'Cost Analyst Name');
        IF Resource.GET("Cost Analyst No.") THEN
          NotificationBody := NotificationBody.Replace('%CostAnalystName%', StringConversionManagement.WindowsToASCII(Resource."No." + ' ' + Resource.Name))
        ELSE
          NotificationBody := NotificationBody.Replace('%CostAnalystName%', '');

        NotificationBody := NotificationBody.Replace('%PurchaserCaption%', 'Purchaser');
        IF Purchaser.GET("Purchaser Code") THEN
          NotificationBody := NotificationBody.Replace('%Purchaser%', StringConversionManagement.WindowsToASCII(Purchaser.Code + ' ' + Purchaser.Name))
        ELSE
          NotificationBody := NotificationBody.Replace('%Purchaser%', '');

        // Get Purchase Line
        StripoEmailTemplate.ReplaceTokenWithPurchaseHeaderLines(NotificationBody, PurchaseHeader);

        //Get Remaks/Notes
        StripoEmailTemplate.ReplaceTokenWithRemarksNotes(NotificationBody, PurchaseHeader.RECORDID);

        //Get Approval Comments
        StripoEmailTemplate.ReplaceTokenWithApprovalComments(NotificationBody, Purchaser.RECORDID);

        // Get Approval Entry
        StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, PurchaseHeader.RECORDID);
      END;
    END;

    LOCAL PROCEDURE ReplaceTokenWithSalesHeaderDetails@4(VAR NotificationBody@1001 : DotNet "'mscorlib'.System.String";SalesHeader@1000 : Record 36);
    VAR
      Employee@1002 : Record 5200;
      Customer@1003 : Record 18;
      INTP@1007 : Record 50040;
      UserGroup@1004 : Record 9000;
      SalesLine@1005 : Record 37;
      Resource@1019 : Record 156;
      DescriptionOfRequest@1016 : Text;
      Justification@1015 : Text;
      SiteChange@1014 : Text;
      TeamReassignment@1013 : Text;
      MaterialEquipment@1012 : Text;
      NatureOfChangeOthers@1011 : Text;
      PresentSituation@1010 : Text;
      RecommendedChange@1009 : Text;
      RemarksLoc@1008 : Text;
      GTComments@1006 : Text;
      JustificationTxt@1017 : Text;
      DescriptionOfRequestTxt@1018 : Text;
    BEGIN
      WITH SalesHeader DO BEGIN

        ReplaceTokenWithLinkedINTPDetails(NotificationBody, SalesHeader."INTP No.");
        IF SalesHeader."Request type" <> SalesHeader."Request type"::" " THEN
          NotificationBody := NotificationBody.Replace('%DocumentType%',STRSUBSTNO('%1',"Request type"))
        ELSE
          NotificationBody := NotificationBody.Replace('%DocumentType%',STRSUBSTNO(PurchDocTypeTxt, FORMAT("Document Type")));

        // Headers
        NotificationBody := NotificationBody.Replace('%NoCaption%', SalesHeader.FIELDCAPTION("No."));
        NotificationBody := NotificationBody.Replace('%DocumentNo%',FORMAT(SalesHeader."No."));
        NotificationBody := NotificationBody.Replace('%Details%','');
        NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%', Customer.TABLECAPTION);
        NotificationBody := NotificationBody.Replace('%CustomerVendorNo%', SalesHeader."Sell-to Customer No.");
        NotificationBody := NotificationBody.Replace('%CustomerVendorName%', StringConversionManagement.WindowsToASCII("Sell-to Customer Name" + ' ' + "Sell-to Customer Name 2"));

        NotificationBody := NotificationBody.Replace('%CustomerNoCaption%', SalesHeader.FIELDCAPTION("Sell-to Customer No."));
        NotificationBody := NotificationBody.Replace('%CustomerNo%', SalesHeader."Sell-to Customer No.");
        NotificationBody := NotificationBody.Replace('%DocumentDateCaption%', SalesHeader.FIELDCAPTION("Document Date"));
        NotificationBody := NotificationBody.Replace('%DocumentDate%', FORMAT(SalesHeader."Document Date"));
        NotificationBody := NotificationBody.Replace('%ClientsPONOCaption%', 'Client P.O. No.');
        NotificationBody := NotificationBody.Replace('%ProjectNameCaption%', SalesHeader.FIELDCAPTION("Project Name"));
        NotificationBody := NotificationBody.Replace('%ReleasedDateCaption%', SalesHeader.FIELDCAPTION("Released Date"));
        NotificationBody := NotificationBody.Replace('%ReleasedDate%', FORMAT(SalesHeader."Released Date"));
        NotificationBody := NotificationBody.Replace('%StatusCaption%', SalesHeader.FIELDCAPTION(Status));
        NotificationBody := NotificationBody.Replace('%Status%', FORMAT(SalesHeader.Status));
        NotificationBody := NotificationBody.Replace('%CustomerAddressCaption%',SalesHeader.FIELDCAPTION("Sell-to Address"));
        NotificationBody := NotificationBody.Replace('%CustomerAddress%',FORMAT(SalesHeader."Sell-to Address" + ' ' +SalesHeader."Sell-to Address 2"));
        NotificationBody := NotificationBody.Replace('%ReleasedByUserIDCaption%',SalesHeader.FIELDCAPTION("Released By User ID"));
        NotificationBody := NotificationBody.Replace('%ReleasedByUserID%',SalesHeader."Released By User ID");

        NotificationBody := NotificationBody.Replace('%CustomerNameCaption%', 'Customer Name');
        IF Customer.GET(SalesHeader."Sell-to Customer No.") THEN
          NotificationBody := NotificationBody.Replace('%CustomerName%', StringConversionManagement.WindowsToASCII(Customer."No." + ' ' + Customer.Name + ' ' + Customer."Name 2"))
        ELSE
          NotificationBody := NotificationBody.Replace('%CustomerName%', '');

        NotificationBody := NotificationBody.Replace('%EmployeeCaption%', Employee.TABLECAPTION);
        NotificationBody := NotificationBody.Replace('%EmployeeNameCaption%', 'Employee Name');
        IF Employee.GET(SalesHeader."Employee No.") THEN BEGIN
          NotificationBody := NotificationBody.Replace('%Employee%',StringConversionManagement.WindowsToASCII(Employee."No." + ' ' + Employee."First Name" + ' ' + Employee."Last Name"));
          NotificationBody := NotificationBody.Replace('%EmployeeName%', StringConversionManagement.WindowsToASCII(Employee."No." + ' ' + Employee.FullName));
        END ELSE BEGIN
          NotificationBody := NotificationBody.Replace('%EmployeeName%', '');
          NotificationBody := NotificationBody.Replace('%Employee%', '');
        END;

        NotificationBody := NotificationBody.Replace('%DepartmentCaption%', 'Department');
        IF UserGroup.GET(SalesHeader."Department Code") THEN
          NotificationBody := NotificationBody.Replace('%Department%', StringConversionManagement.WindowsToASCII(UserGroup.Name));

        IF INTP.GET(SalesHeader."INTP No.") THEN BEGIN
          NotificationBody := NotificationBody.Replace('%ClientsPONO%', FORMAT(INTP."P.O No. (Customer)"));
          NotificationBody := NotificationBody.Replace('%ProjectName%', StringConversionManagement.WindowsToASCII(INTP."Project Name" +' '+ INTP."Project Name 2"));
        END ELSE BEGIN
          NotificationBody := NotificationBody.Replace('%ClientsPONO%', '');
          NotificationBody := NotificationBody.Replace('%ProjectName%', '');
        END;

        NotificationBody := NotificationBody.Replace('%CostAnalystCaption%', SalesHeader.FIELDCAPTION("Cost Analyst"));
        IF Resource.GET(SalesHeader."Cost Analyst") THEN
          NotificationBody := NotificationBody.Replace('%CostAnalyst%',  StringConversionManagement.WindowsToASCII(Resource."No." + ' ' + Resource.Name))
        ELSE
          NotificationBody := NotificationBody.Replace('%CostAnalyst%', '');

        // TERF and Withdrawal
        NotificationBody := NotificationBody.Replace('%DateOfReturnCaption%',SalesHeader.FIELDCAPTION("Date of Return"));
        NotificationBody := NotificationBody.Replace('%DateOfReturn%',FORMAT(SalesHeader."Date of Return"));
        NotificationBody := NotificationBody.Replace('%DeliveryAddressCaption%', 'Delivery Address');
        NotificationBody := NotificationBody.Replace('%DeliveryAddress%', StringConversionManagement.WindowsToASCII(SalesHeader."Sell-to Address" + ' ' + SalesHeader."Sell-to Address 2"));
        NotificationBody := NotificationBody.Replace('%SiteNameCaption%', SalesHeader.FIELDCAPTION("Sell-to Post Code"));
        NotificationBody := NotificationBody.Replace('%SiteName%', FORMAT(SalesHeader."Sell-to Post Code"));
        NotificationBody := NotificationBody.Replace('%ARNoCaption%', SalesHeader.FIELDCAPTION("Ack. Receipt No."));
        NotificationBody := NotificationBody.Replace('%ARNo%', FORMAT(SalesHeader."Ack. Receipt No."));
        NotificationBody := NotificationBody.Replace('%DRNoCaption%', SalesHeader.FIELDCAPTION("Deliver Receipt No."));
        NotificationBody := NotificationBody.Replace('%DRNo%', FORMAT(SalesHeader."Deliver Receipt No."));
        NotificationBody := NotificationBody.Replace('%PurposeCaption%', SalesHeader.FIELDCAPTION(Purpose));
        NotificationBody := NotificationBody.Replace('%Purpose%', FORMAT(SalesHeader.Purpose));
        NotificationBody := NotificationBody.Replace('%ReleasedByCaption%', SalesHeader.FIELDCAPTION("Released By User ID"));
        NotificationBody := NotificationBody.Replace('%ReleasedBy%', FORMAT(SalesHeader."Released By User ID"));

        SalesLine.SETRANGE("Document Type", SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.", SalesHeader."No.");
        IF SalesLine.FINDSET THEN BEGIN
          REPEAT
            CASE SalesLine."Line Type" OF
              SalesLine."Line Type"::"Description of Request":
                DescriptionOfRequest += SalesLine.Description + ' ';
              SalesLine."Line Type"::Justification:
              Justification += SalesLine.Description + ' ';
              SalesLine."Line Type"::"WCR-Nature of Work Change-Site":
                SiteChange += SalesLine.Description + ' ';
              SalesLine."Line Type"::"WCR-Nature of Work Change-Team":
                TeamReassignment += SalesLine.Description + ' ';
              SalesLine."Line Type"::"WCR-Nature of Work Change-Mats":
                MaterialEquipment += SalesLine.Description + ' ';
              SalesLine."Line Type"::"WCR-Nature of Work Change-Others":
                NatureOfChangeOthers += SalesLine.Description + ' ';
              SalesLine."Line Type"::"WCR-Present Situation":
                PresentSituation += SalesLine.Description + ' ';
              SalesLine."Line Type"::"WCR-Recommended Changes":
                RecommendedChange += SalesLine.Description + ' ';
              SalesLine."Line Type"::Remarks:
                RemarksLoc += SalesLine.Description + ' ';
              SalesLine."Line Type"::"WCR-GT Repr. Comments":
                GTComments += SalesLine.Description + ' ';
            END;
          UNTIL SalesLine.NEXT = 0;
        END;
        // Request for Exception
        DescriptionOfRequest := StringConversionManagement.WindowsToASCII(DescriptionOfRequest);
        Justification := StringConversionManagement.WindowsToASCII(Justification);
        NotificationBody := NotificationBody.Replace('%DescriptionOfRequestCaption%','Description of Request');
        NotificationBody := NotificationBody.Replace('%DescriptionOfRequest%',DescriptionOfRequest);
        NotificationBody := NotificationBody.Replace('%JustificationCaption%','Justification');
        NotificationBody := NotificationBody.Replace('%Justification%',Justification);
        NotificationBody := NotificationBody.Replace('%ExceptionToCaption%', SalesHeader.FIELDCAPTION("Type of Exception"));
        NotificationBody := NotificationBody.Replace('%ExceptionTo%', FORMAT(SalesHeader."Type of Exception"));
        NotificationBody := NotificationBody.Replace('%SubjectCaption%',SalesHeader.FIELDCAPTION(Subject));
        NotificationBody := NotificationBody.Replace('%Subject%',SalesHeader.Subject);
        NotificationBody := NotificationBody.Replace('%ApprovedBudgetCaption%',SalesHeader.FIELDCAPTION("Approved Budget"));
        NotificationBody := NotificationBody.Replace('%ApprovedBudget%',FORMAT(SalesHeader."Approved Budget"));
        NotificationBody := NotificationBody.Replace('%ApprovedTimelineCaption%',SalesHeader.FIELDCAPTION("Approved Timeline"));
        NotificationBody := NotificationBody.Replace('%ApprovedTimeline%',FORMAT(SalesHeader."Approved Timeline"));
        NotificationBody := NotificationBody.Replace('%ProposedBudgetCaption%',SalesHeader.FIELDCAPTION("Proposed Budget"));
        NotificationBody := NotificationBody.Replace('%ProposedBudget%',FORMAT(SalesHeader."Proposed Budget"));
        NotificationBody := NotificationBody.Replace('%ProposedTimelineCaption%',SalesHeader.FIELDCAPTION("Proposed Timeline"));
        NotificationBody := NotificationBody.Replace('%ProposedTimeline%',FORMAT(SalesHeader."Proposed Timeline"));
        NotificationBody := NotificationBody.Replace('%WaiverTypeCaption%',SalesHeader.FIELDCAPTION("Waiver Type"));
        NotificationBody := NotificationBody.Replace('%WaiverType%',FORMAT(SalesHeader."Waiver Type"));
        NotificationBody := NotificationBody.Replace('%PersonInchargeCaption%',SalesHeader.FIELDCAPTION("Person Incharge"));
        NotificationBody := NotificationBody.Replace('%ProjectStatusCaption%',SalesHeader.FIELDCAPTION("Project Status"));
        NotificationBody := NotificationBody.Replace('%ProjectStatus%',SalesHeader."Project Status");
        NotificationBody := NotificationBody.Replace('%PlannedNoOfDaysCaption%', SalesHeader.FIELDCAPTION("Planned No. of Days"));
        NotificationBody := NotificationBody.Replace('%PlannedNoOfDays%', FORMAT(SalesHeader."Planned No. of Days"));
        NotificationBody := NotificationBody.Replace('%TotalNoOfExtentionCaption%', SalesHeader.FIELDCAPTION("Total No. of Extension"));
        NotificationBody := NotificationBody.Replace('%TotalNoOfExtention%', FORMAT(SalesHeader."Total No. of Extension"));
        NotificationBody := NotificationBody.Replace('%ActivityStatusCaption%', SalesHeader.FIELDCAPTION("Activity Status"));
        NotificationBody := NotificationBody.Replace('%ActivityStatus%', FORMAT(SalesHeader."Activity Status"));
        NotificationBody := NotificationBody.Replace('%NoOfMobilizationCaption%', SalesHeader.FIELDCAPTION("No. of Mobilization"));
        NotificationBody := NotificationBody.Replace('%NoOfMobilization%', FORMAT(SalesHeader."No. of Mobilization"));
        NotificationBody := NotificationBody.Replace('%Mobilization%',  ReplaceTokenToChecked(SalesHeader.Mobilization));
        NotificationBody := NotificationBody.Replace('%NoOfRemobilizationCaption%', SalesHeader.FIELDCAPTION("No. of Remobilization"));
        NotificationBody := NotificationBody.Replace('%NoOfRemobilization%',  FORMAT(SalesHeader."No. of Remobilization"));
        NotificationBody := NotificationBody.Replace('%Remobilization%',  ReplaceTokenToChecked(SalesHeader.Remobilization));
        NotificationBody := NotificationBody.Replace('%RectificationCaption%', SalesHeader.FIELDCAPTION(Rectification));
        NotificationBody := NotificationBody.Replace('%Rectification%', ReplaceTokenToChecked(SalesHeader.Rectification));
        NotificationBody := NotificationBody.Replace('%TroubleshootingCaption%', SalesHeader.FIELDCAPTION(Troubleshooting));
        NotificationBody := NotificationBody.Replace('%Troubleshooting%', ReplaceTokenToChecked(SalesHeader.Troubleshooting));
        NotificationBody := NotificationBody.Replace('%WaiverTypeCaption%', SalesHeader.FIELDCAPTION("Waiver Type"));
        NotificationBody := NotificationBody.Replace('%WaiverType%', FORMAT(SalesHeader."Waiver Type"));
        NotificationBody := NotificationBody.Replace('%ForRegularizationCaption%', 'For Regularization');
        NotificationBody := NotificationBody.Replace('%StatusOfRegularizationCaption%',  SalesHeader.FIELDCAPTION("Status of Regularization"));
        NotificationBody := NotificationBody.Replace('%StatusOfRegularization%',  FORMAT(SalesHeader."Status of Regularization"));
        NotificationBody := NotificationBody.Replace('%DateRegularizedCaption%',  SalesHeader.FIELDCAPTION("Date Regularized"));
        NotificationBody := NotificationBody.Replace('%DateRegularized%',  FORMAT(SalesHeader."Date Regularized"));
        NotificationBody := NotificationBody.Replace('%OthersCaption%',  SalesHeader.FIELDCAPTION(Others));
        NotificationBody := NotificationBody.Replace('%Others%',  StringConversionManagement.WindowsToASCII(SalesHeader.Others));
        NotificationBody := NotificationBody.Replace('%ProjectInChargeNoCaption%', SalesHeader.FIELDCAPTION("Project In-Charge No."));
        NotificationBody := NotificationBody.Replace('%ProjectInChargeNo%', FORMAT(SalesHeader."Project In-Charge No."));
        NotificationBody := NotificationBody.Replace('%ProjectInChargeNameCaption%', 'Project In-Charge Name');
        NotificationBody := NotificationBody.Replace('%ProposedTimelineFormatted%', FORMAT(SalesHeader."Proposed Timeline", 0,'<Month Text> <Closing><Day>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%ApprovedTimelineFormatted%', FORMAT(SalesHeader."Approved Timeline", 0,'<Month Text> <Closing><Day>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%CommitmentDateFormatted%', FORMAT(SalesHeader."Commitment Date", 0,'<Month Text> <Closing><Day>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%ExtendCommitmentDateFormatted%', FORMAT(SalesHeader."Extension of Commitment Date", 0,'<Month Text> <Closing><Day>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%ApprovedDateOfExtensionFormatted%', FORMAT(SalesHeader."Approved Date of Extension", 0,'<Month Text> <Closing><Day>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%DateRegularizedFormatted%', FORMAT(SalesHeader."Date Regularized", 0,'<Month Text> <Closing><Day>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%DocumentDateFormatted%', FORMAT(SalesHeader."Document Date", 0,'<Month Text> <Closing><Day>, <Year4>'));

        IF SalesHeader."Description of Req. Background".HASVALUE THEN BEGIN
          CLEAR(DescriptionOfRequest);
          SalesHeader.CALCFIELDS("Description of Req. Background");
          SalesHeader."Description of Req. Background".CREATEINSTREAM(InStr);
          InStr.READ(DescriptionOfRequestTxt);
          NotificationBody := NotificationBody.Replace('%DescriptionOfRequestTxt%', StringConversionManagement.WindowsToASCII(DescriptionOfRequestTxt));
        END ELSE
          NotificationBody := NotificationBody.Replace('%DescriptionOfRequestTxt%', '');

        IF SalesHeader."Justif. Assessment of Risk".HASVALUE THEN BEGIN
          CLEAR(JustificationTxt);
          SalesHeader.CALCFIELDS("Justif. Assessment of Risk");
          SalesHeader."Justif. Assessment of Risk".CREATEINSTREAM(InStr);
          InStr.READ(JustificationTxt);
          NotificationBody := NotificationBody.Replace('%JustificationTxt%', StringConversionManagement.WindowsToASCII(JustificationTxt));
        END ELSE
          NotificationBody := NotificationBody.Replace('%JustificationTxt%', '');

        IF Resource.GET(SalesHeader."Project In-Charge No.") THEN
          NotificationBody := NotificationBody.Replace('%ProjectInChargeName%', StringConversionManagement.WindowsToASCII(Resource."No." + ' ' + Resource.Name))
        ELSE
          NotificationBody := NotificationBody.Replace('%ProjectInChargeName%', '');

        IF SalesHeader.Others <> '' THEN
          NotificationBody := NotificationBody.Replace('%OthersCb%', 'checked')
        ELSE
          NotificationBody := NotificationBody.Replace('%OthersCb%', '');

        IF SalesHeader."Status of Regularization" <> SalesHeader."Status of Regularization"::" " THEN
          NotificationBody := NotificationBody.Replace('%ForRegularization%', 'checked')
        ELSE
          NotificationBody := NotificationBody.Replace('%ForRegularization%', '');

        IF Resource.GET(SalesHeader."Person Incharge") THEN
          NotificationBody := NotificationBody.Replace('%PersonIncharge%', StringConversionManagement.WindowsToASCII(Resource."No." + ' ' + Resource.Name))
        ELSE
          NotificationBody := NotificationBody.Replace('%PersonIncharge%','');

        NotificationBody := NotificationBody.Replace('%CommitmentDateCaption%',SalesHeader.FIELDCAPTION("Commitment Date"));
        NotificationBody := NotificationBody.Replace('%CommitmentDate%',FORMAT(SalesHeader."Commitment Date"));
        NotificationBody := NotificationBody.Replace('%ExtendCommitmentDateCaption%',SalesHeader.FIELDCAPTION("Extension of Commitment Date"));
        NotificationBody := NotificationBody.Replace('%ExtendCommitmentDate%',FORMAT(SalesHeader."Extension of Commitment Date"));
        NotificationBody := NotificationBody.Replace('%ApprovedDateOfExtensionCaption%',SalesHeader.FIELDCAPTION("Approved Date of Extension"));
        NotificationBody := NotificationBody.Replace('%ApprovedDateOfExtension%',FORMAT(SalesHeader."Approved Date of Extension"));
        NotificationBody := NotificationBody.Replace('%AttachementsApprovedBudgetCaption%',SalesHeader.FIELDCAPTION("Attmt. App. Budget"));
        NotificationBody := NotificationBody.Replace('%AttachementsApprovedBudget%',FORMAT(SalesHeader."Attmt. App. Budget"));
        NotificationBody := NotificationBody.Replace('%AttachementsApprovedBudgetCb%',ReplaceTokenToChecked(SalesHeader."Attmt. App. Budget"));
        NotificationBody := NotificationBody.Replace('%AttachementsApprovedTimelineCaption%',SalesHeader.FIELDCAPTION("Attmt. App.Timeline"));
        NotificationBody := NotificationBody.Replace('%AttachementsApprovedTimeline%',FORMAT(SalesHeader."Attmt. App.Timeline"));
        NotificationBody := NotificationBody.Replace('%AttachementsApprovedTimelineCb%',ReplaceTokenToChecked(SalesHeader."Attmt. App.Timeline"));
        NotificationBody := NotificationBody.Replace('%AttachementsProposedBudgetCaption%',SalesHeader.FIELDCAPTION("Attmt. Prop. Budget"));
        NotificationBody := NotificationBody.Replace('%AttachementsProposedBudget%',FORMAT(SalesHeader."Attmt. Prop. Budget"));
        NotificationBody := NotificationBody.Replace('%AttachementsProposedBudgetCb%',ReplaceTokenToChecked(SalesHeader."Attmt. Prop. Budget"));
        NotificationBody := NotificationBody.Replace('%AttachementsProposedTimelineCaption%',SalesHeader.FIELDCAPTION("Attmt. Prop. Timeline"));
        NotificationBody := NotificationBody.Replace('%AttachementsProposedTimeline%',FORMAT(SalesHeader."Attmt. Prop. Timeline"));
        NotificationBody := NotificationBody.Replace('%AttachementsProposedTimelineCb%',ReplaceTokenToChecked(SalesHeader."Attmt. Prop. Timeline"));

        // Work Change Request
        SiteChange := StringConversionManagement.WindowsToASCII(SiteChange);
        TeamReassignment := StringConversionManagement.WindowsToASCII(TeamReassignment);
        MaterialEquipment := StringConversionManagement.WindowsToASCII(MaterialEquipment);
        NatureOfChangeOthers := StringConversionManagement.WindowsToASCII(NatureOfChangeOthers);
        PresentSituation := StringConversionManagement.WindowsToASCII(PresentSituation);
        RecommendedChange := StringConversionManagement.WindowsToASCII(RecommendedChange);
        RemarksLoc := StringConversionManagement.WindowsToASCII(RemarksLoc);
        GTComments := StringConversionManagement.WindowsToASCII(GTComments);
        NotificationBody := NotificationBody.Replace('%ProgramCaption%',SalesHeader.FIELDCAPTION("Program"));
        NotificationBody := NotificationBody.Replace('%Program%',SalesHeader."Program");
        NotificationBody := NotificationBody.Replace('%AnnexesCaption%',SalesHeader.FIELDCAPTION(Annexes));
        NotificationBody := NotificationBody.Replace('%Annexes%',SalesHeader.Annexes);
        NotificationBody := NotificationBody.Replace('%CMSTicketCaption%',SalesHeader.FIELDCAPTION("CMS Ticket No."));
        NotificationBody := NotificationBody.Replace('%CMSTicket%',SalesHeader."CMS Ticket No.");
        NotificationBody := NotificationBody.Replace('%DateOfOcularInspectionCaption%',SalesHeader.FIELDCAPTION("Date of Ocular Inspection"));
        NotificationBody := NotificationBody.Replace('%DateOfOcularInspection%',FORMAT(SalesHeader."Date of Ocular Inspection"));
        NotificationBody := NotificationBody.Replace('%ChargeableToClientCaption%',SalesHeader.FIELDCAPTION("Chargeable to Client"));
        NotificationBody := NotificationBody.Replace('%ChargeableToClient%',FORMAT(SalesHeader."Chargeable to Client"));
        NotificationBody := NotificationBody.Replace('%AdditionalWorkCaption%',SalesHeader.FIELDCAPTION("Additional Work"));
        NotificationBody := NotificationBody.Replace('%AdditionalWork%', FORMAT(SalesHeader."Additional Work"));
        NotificationBody := NotificationBody.Replace('%SiteChangeCaption%','Site Change');
        NotificationBody := NotificationBody.Replace('%SiteChange%',SiteChange);
        NotificationBody := NotificationBody.Replace('%TeamReassignmentCaption%','Team Reassignment');
        NotificationBody := NotificationBody.Replace('%TeamReassignment%', TeamReassignment);
        NotificationBody := NotificationBody.Replace('%MaterialsEquipmentCaption%','Materials/Equipment/Device Change');
        NotificationBody := NotificationBody.Replace('%MaterialsEquipment%',MaterialEquipment);
        NotificationBody := NotificationBody.Replace('%NatureOfChangeOthersCaption%', 'Others');
        NotificationBody := NotificationBody.Replace('%NatureOfChangeOthers%',NatureOfChangeOthers);
        NotificationBody := NotificationBody.Replace('%PresentSituationCaption%','Present Situation');
        NotificationBody := NotificationBody.Replace('%PresentSituation%',PresentSituation);
        NotificationBody := NotificationBody.Replace('%RecommendedChangeCaption%','Recommended Change');
        NotificationBody := NotificationBody.Replace('%RecommendedChange%',RecommendedChange);
        NotificationBody := NotificationBody.Replace('%OriginalProjectCostCaption%',SalesHeader.FIELDCAPTION("Original PO Amount"));
        NotificationBody := NotificationBody.Replace('%OriginalProjectCost%', FORMAT(SalesHeader."Original PO Amount"));
        NotificationBody := NotificationBody.Replace('%LateAFIAmountBeforeWCICaption%',SalesHeader.FIELDCAPTION("Latest AFI Amt. before WCR"));
        NotificationBody := NotificationBody.Replace('%LateAFIAmountBeforeWCI%',FORMAT(SalesHeader."Latest AFI Amt. before WCR"));
        NotificationBody := NotificationBody.Replace('%ThisWCRCostVariationWCRCaption%',SalesHeader.FIELDCAPTION("This WCR Cost Variation WCR"));
        NotificationBody := NotificationBody.Replace('%ThisWCRCostVariationWCR%',FORMAT(SalesHeader."This WCR Cost Variation WCR"));
        NotificationBody := NotificationBody.Replace('%TotalCostAfterWCRCaption%',SalesHeader.FIELDCAPTION("Total Cost After WCR"));
        NotificationBody := NotificationBody.Replace('%TotalCostAfterWCR%',FORMAT(SalesHeader."Total Cost After WCR"));
        NotificationBody := NotificationBody.Replace('%BalancePOAfterWCRCaption%',SalesHeader.FIELDCAPTION("Total PO After WCR"));
        NotificationBody := NotificationBody.Replace('%BalancePOAfterWCR%',FORMAT(SalesHeader."Total PO After WCR"));
        NotificationBody := NotificationBody.Replace('%CheckVoucherNoCaption%',SalesHeader.FIELDCAPTION("Check Voucher No."));
        NotificationBody := NotificationBody.Replace('%CheckVoucherNo%',SalesHeader."Check Voucher No.");
        NotificationBody := NotificationBody.Replace('%CashAdvanceNoCaption%',SalesHeader.FIELDCAPTION("Cash Advance No."));
        NotificationBody := NotificationBody.Replace('%CashAdvanceNo%',SalesHeader."Cash Advance No.");
        NotificationBody := NotificationBody.Replace('%CheckNoCaption%',SalesHeader.FIELDCAPTION("Check No."));
        NotificationBody := NotificationBody.Replace('%CheckNo%',SalesHeader."Check No.");
        NotificationBody := NotificationBody.Replace('%AmountToBeChargeCaption%',SalesHeader.FIELDCAPTION("Amt. to be Charged"));
        NotificationBody := NotificationBody.Replace('%AmountToBeCharge%',FORMAT(SalesHeader."Amt. to be Charged"));
        NotificationBody := NotificationBody.Replace('%GTRepresentativeCommentCaption%','GT Representative Comment');
        NotificationBody := NotificationBody.Replace('%GTRepresentativeComment%',GTComments);
        NotificationBody := NotificationBody.Replace('%RemarksCaption%','Remarks');
        NotificationBody := NotificationBody.Replace('%Remarks%',RemarksLoc);

        // Sales lines
        StripoEmailTemplate.ReplaceTokenWithSalesHeaderLines(NotificationBody, SalesHeader);

        // Remarks/Notes
        StripoEmailTemplate.ReplaceTokenWithRemarksNotes(NotificationBody, SalesHeader.RECORDID);

        // Approval/Comment
        StripoEmailTemplate.ReplaceTokenWithApprovalComments(NotificationBody, SalesHeader.RECORDID);

        // Approval Entries
        StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, SalesHeader.RECORDID);
      END;
    END;

    LOCAL PROCEDURE ReplaceTokenWithINTPDetails@11(VAR NotificationBody@1001 : DotNet "'mscorlib'.System.String";INTP@1000 : Record 50040);
    VAR
      InStr@1003 : InStream;
      CommentsText@1002 : Text;
    BEGIN
      WITH INTP DO BEGIN
        NotificationBody := NotificationBody.Replace('%DocumentDateCaption%',FIELDCAPTION("Document Date"));
        NotificationBody := NotificationBody.Replace('%DocumentDate%',FORMAT("Document Date"));
        NotificationBody := NotificationBody.Replace('%Date%',FORMAT(DT2DATE("Document Date"), 0,'<Month Text> <Day,2>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%Time%',FORMAT("Document Time"));
        NotificationBody := NotificationBody.Replace('%StatusCaption%',FIELDCAPTION(Status));
        NotificationBody := NotificationBody.Replace('%Status%',FORMAT(Status));
        NotificationBody := NotificationBody.Replace('%ApprovalStatusCaption%',FIELDCAPTION("Approval Status"));
        NotificationBody := NotificationBody.Replace('%ApprovalStatus%',FORMAT("Approval Status"));
        NotificationBody := NotificationBody.Replace('%Approval StatusCaption%',FIELDCAPTION("Approval Status"));
        NotificationBody := NotificationBody.Replace('%Approval Status%',FORMAT("Approval Status"));
        NotificationBody := NotificationBody.Replace('%NoticeToMobilizeCaption%',FIELDCAPTION("Notice To Mobilize"));
        NotificationBody := NotificationBody.Replace('%NoticeToMobilize%',FORMAT("Notice To Mobilize"));
        NotificationBody := NotificationBody.Replace('%NoticeToProceedCaption%',FIELDCAPTION("Notice To Proceed"));
        NotificationBody := NotificationBody.Replace('%NoticeToProceed%',FORMAT("Notice To Proceed"));
        NotificationBody := NotificationBody.Replace('%ClusterMobilizationCaption%',FIELDCAPTION("Clustering Mobilization"));
        NotificationBody := NotificationBody.Replace('%ClusterMobilization%',FORMAT("Clustering Mobilization"));
        NotificationBody := NotificationBody.Replace('%SupplyOnlyCaption%',FIELDCAPTION("Supply Only"));
        NotificationBody := NotificationBody.Replace('%SupplyOnly%',FORMAT("Supply Only"));
        NotificationBody := NotificationBody.Replace('%PerSiteMobilizationCaption%',FIELDCAPTION("Per Site Mobilization"));
        NotificationBody := NotificationBody.Replace('%PerSiteMobilization%',FORMAT("Per Site Mobilization"));
        NotificationBody := NotificationBody.Replace('%DemoPOCCaption%',FIELDCAPTION("Demo POC"));
        NotificationBody := NotificationBody.Replace('%DemoPOC%',FORMAT("Demo POC"));
        NotificationBody := NotificationBody.Replace('%WithPOCaption%',FIELDCAPTION("w/ P.O"));
        NotificationBody := NotificationBody.Replace('%WithPO%',FORMAT("w/ P.O"));
        NotificationBody := NotificationBody.Replace('%WithOutPOCaption%',FIELDCAPTION("w/o P.O"));
        NotificationBody := NotificationBody.Replace('%WithOutPO%',FORMAT("w/o P.O"));
        NotificationBody := NotificationBody.Replace('%PONoFromCustomerCaption%',FIELDCAPTION("P.O No. (Customer)"));
        NotificationBody := NotificationBody.Replace('%PONoFromCustomer%',StringConversionManagement.WindowsToASCII("P.O No. (Customer)"));
        NotificationBody := NotificationBody.Replace('%PODateFromCustomerCaption%',FIELDCAPTION("P.O Date (Customer)"));
        NotificationBody := NotificationBody.Replace('%PODateFromCustomer%',FORMAT("P.O Date (Customer)", 0,'<Month Text> <Day,2>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%PODateCaption%',FIELDCAPTION("P.O Date (Customer)"));
        NotificationBody := NotificationBody.Replace('%PODate%',FORMAT("P.O Date (Customer)", 0,'<Month Text> <Day,2>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%NoOfSitesCaption%',FIELDCAPTION("No of Sites"));
        NotificationBody := NotificationBody.Replace('%NoOfSites%',FORMAT("No of Sites"));
        NotificationBody := NotificationBody.Replace('%SiteNamesCaption%',FIELDCAPTION("Site Names"));
        NotificationBody := NotificationBody.Replace('%SiteNames%',StringConversionManagement.WindowsToASCII("Site Names"));
        NotificationBody := NotificationBody.Replace('%CustomerNameCaption%',FIELDCAPTION("Customer Name"));
        NotificationBody := NotificationBody.Replace('%CustomerName%',StringConversionManagement.WindowsToASCII("Customer No." + ' ' + "Customer Name"));
        NotificationBody := NotificationBody.Replace('%ProjectNameCaption%',FIELDCAPTION("Project Name"));
        NotificationBody := NotificationBody.Replace('%ProjectName%',StringConversionManagement.WindowsToASCII("Project Name" + ' ' + "Project Name 2"));
        NotificationBody := NotificationBody.Replace('%ReleasedDateOfPOCaption%',FIELDCAPTION("Release Date of P.O"));
        NotificationBody := NotificationBody.Replace('%ReleasedDateOfPO%',FORMAT("Release Date of P.O", 0,'<Month Text> <Day,2>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%SalesEngineerCaption%',FIELDCAPTION("Sales Engineer"));
        CALCFIELDS("Sales Engineer", "Project Manager", Salesperson, "Cost Analyst");
        NotificationBody := NotificationBody.Replace('%SalesEngineer%',StringConversionManagement.WindowsToASCII("Sales Engineer"));
        NotificationBody := NotificationBody.Replace('%ProjectManagerCaption%',FIELDCAPTION("Project Manager"));
        NotificationBody := NotificationBody.Replace('%ProjectManager%',StringConversionManagement.WindowsToASCII("Project Manager"));
        NotificationBody := NotificationBody.Replace('%SalesPersonCaption%',FIELDCAPTION(Salesperson));
        NotificationBody := NotificationBody.Replace('%SalesPerson%',StringConversionManagement.WindowsToASCII(Salesperson));
        NotificationBody := NotificationBody.Replace('%SalesAccountManager%',StringConversionManagement.WindowsToASCII(Salesperson));
        NotificationBody := NotificationBody.Replace('%CostAnalystCaption%',FIELDCAPTION("Cost Analyst"));
        NotificationBody := NotificationBody.Replace('%CostAnalyst%',StringConversionManagement.WindowsToASCII("Cost Analyst No." + ' ' + "Cost Analyst"));
        NotificationBody := NotificationBody.Replace('%DateOfCompleteEquipmentsReadyCaption%',FIELDCAPTION("Complete Equip. Date"));
        NotificationBody := NotificationBody.Replace('%DateOfCompleteEquipmentsReady%',FORMAT("Complete Equip. Date", 0,'<Month Text> <Day,2>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%ProjectTargetCompletionDateCaption%',FIELDCAPTION("Proj. Target Complete Date"));
        NotificationBody := NotificationBody.Replace('%ProjectTargetCompletionDate%',FORMAT("Proj. Target Complete Date", 0,'<Month Text> <Day,2>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%DeliveryToCustomerWarehouseCaption%',FIELDCAPTION("xrec. Delivery To Client Whse."));
        NotificationBody := NotificationBody.Replace('%DeliveryToCustomerWarehouse%',StringConversionManagement.WindowsToASCII("xrec. Delivery To Client Whse."));
        NotificationBody := NotificationBody.Replace('%CostProfitCenterNo%',"Global Dimension 1 Code" + '/' + "Global Dimension 2 Code");
        NotificationBody := NotificationBody.Replace('%ServiceReportNo%',"SR No.");
        NotificationBody := NotificationBody.Replace('%JobOrderNoCaption%',FIELDCAPTION("Job Order No."));
        NotificationBody := NotificationBody.Replace('%JobOrderNo%',"Job Order No.");
        NotificationBody := NotificationBody.Replace('%VendorNoCaption%',FIELDCAPTION("Vendor No."));
        NotificationBody := NotificationBody.Replace('%VendorNo%',"Vendor No.");

        NotificationBody := NotificationBody.Replace('%PONoToSupplierCaption%',FIELDCAPTION("P.O No. To Supplier"));
        NotificationBody := NotificationBody.Replace('%PONoToSupplier%',StringConversionManagement.WindowsToASCII("P.O No. To Supplier"));
        NotificationBody := NotificationBody.Replace('%DateOfDeliveryToCustomerWarehouseCaption%',FIELDCAPTION("Date of Dlvr.-Cust. Whse."));
        NotificationBody := NotificationBody.Replace('%DateOfDeliveryToCustomerWarehouse%',FORMAT("Date of Dlvr.-Cust. Whse.", 0,'<Month Text> <Day,2>, <Year4>'));

        // Person to notify
        NotificationBody := NotificationBody.Replace('%PersonToNotifyHumanResourceCaption%',FIELDCAPTION("HRD-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyHumanResource%',"HRD-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyAccountingCaption%',FIELDCAPTION("ACC-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyAccounting%',"ACC-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyAuditCaption%',FIELDCAPTION("AUD-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyAudit%',"AUD-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyInventoryCaption%',FIELDCAPTION("INV-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyInventory%',"INV-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyLogisticsCaption%',FIELDCAPTION("LOG-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyLogistics%',"LOG-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyOutsitePlantCaption%',FIELDCAPTION("OSP-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyOutsitePlant%',"OSP-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyProjectManagementCaption%',FIELDCAPTION("PMD-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyProjectManagement%',"PMD-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyPurchasingCaption%',FIELDCAPTION("PUR-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyPurchasing%',"PUR-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyQualityAssuranceCaption%',FIELDCAPTION("QAU-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyQualityAssurance%',"QAU-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifySalesCaption%',FIELDCAPTION("SAL-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifySales%',"SAL-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyProjectControlCaption%',FIELDCAPTION("PMO-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyProjectControl%',"PMO-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyTelecomAuditCaption%',FIELDCAPTION("TAU-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyTelecomAudit%',"TAU-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyWarehouseManagementCaption%',FIELDCAPTION("WMU-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyWarehouseManagement%',"WMU-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyFinanceAPCaption%',FIELDCAPTION("FIN-AP Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyFinanceAP%',"Fin-AP PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyFinanceARCaption%',FIELDCAPTION("FIN-AR Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyFinanceAR%',"FIN-AR PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyDeviceManagementCaption%',FIELDCAPTION("CPE-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyDeviceManagement%',"CPE-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyICTCaption%',FIELDCAPTION("ICT-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyICT%',"ICT-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyPowerCaption%',FIELDCAPTION("POW-00 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyPower%',"POW-00 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyTransmissionWiredCaption%',FIELDCAPTION("TRM-WRD Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyTransmissionWired%',"TRM-WRD PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyTransmissionWirelessCaption%',FIELDCAPTION("TRM-WRL Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyTransmissionWireless%',"TRM-WRL PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyWirelessAccess1Caption%',FIELDCAPTION("WRL-A1 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyWirelessAccess1%',"WRL-A1 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyWirelessAccess2Caption%',FIELDCAPTION("WRL-A2 Dept."));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyWirelessAccess2%',"WRL-A2 PTN");
        NotificationBody := NotificationBody.Replace('%PersonToNotifyOtheresCaption%',FIELDCAPTION(Others));
        NotificationBody := NotificationBody.Replace('%PersonToNotifyOtheres%',StringConversionManagement.WindowsToASCII(Others));
        // Engineering Activities
        NotificationBody := NotificationBody.Replace('%EngActSiteAcquisitionCaption%',FIELDCAPTION("Site Acquisition"));
        NotificationBody := NotificationBody.Replace('%EngActSiteAcquisition%',FORMAT("Site Acquisition"));
        NotificationBody := NotificationBody.Replace('%EngActSiteSurveyCaption%',FIELDCAPTION("Site Survey"));
        NotificationBody := NotificationBody.Replace('%EngActSiteSurvey%',FORMAT("Site Survey"));
        NotificationBody := NotificationBody.Replace('%EngActApprovedMOACaption%',FIELDCAPTION("Approved MOA/MOU"));
        NotificationBody := NotificationBody.Replace('%EngActApprovedMOA%',FORMAT("Approved MOA/MOU"));
        NotificationBody := NotificationBody.Replace('%EngActApprovedRAAWACaption%',FIELDCAPTION("Approved RAAWA/Work Permit"));
        NotificationBody := NotificationBody.Replace('%EngActApprovedRAAWA%',FORMAT("Approved RAAWA/Work Permit"));
        NotificationBody := NotificationBody.Replace('%EngActFloorPlansFromCustomerCaption%',FIELDCAPTION("Floor Plans from Customer"));
        NotificationBody := NotificationBody.Replace('%EngActFloorPlansFromCustomer%',FORMAT("Floor Plans from Customer"));
        NotificationBody := NotificationBody.Replace('%EngActContactedStructuredCablingSubconCaption%',FIELDCAPTION("Ctctd. Strctrd. Cblng Subcon"));
        NotificationBody := NotificationBody.Replace('%EngActContactedStructuredCablingSubcon%',FORMAT("Ctctd. Strctrd. Cblng Subcon"));
        NotificationBody := NotificationBody.Replace('%EngActInstallationCaption%',FIELDCAPTION(Installation));
        NotificationBody := NotificationBody.Replace('%EngActInstallation%',FORMAT(Installation));
        NotificationBody := NotificationBody.Replace('%EngActApprovedBOQCaption%',FIELDCAPTION("Approved BOQ"));
        NotificationBody := NotificationBody.Replace('%EngActApprovedBOQ%',FORMAT("Approved BOQ"));
        NotificationBody := NotificationBody.Replace('%EngActApprovedHDLAndTSSRDesignCaption%',FIELDCAPTION("Approved HLD and TSSR Design"));
        NotificationBody := NotificationBody.Replace('%EngActApprovedHDLAndTSSRDesign%',FORMAT("Approved HLD and TSSR Design"));
        NotificationBody := NotificationBody.Replace('%EngActApprovedWorkPermitRAAWACaption%',FIELDCAPTION("Approved Work Permit/RAAWA"));
        NotificationBody := NotificationBody.Replace('%EngActApprovedWorkPermitRAAWA%',FORMAT("Approved Work Permit/RAAWA"));
        NotificationBody := NotificationBody.Replace('%EngActSignedNoticeToInstallCaption%',FIELDCAPTION("Signed Notice to Install"));
        NotificationBody := NotificationBody.Replace('%EngActSignedNoticeToInstall%',FORMAT("Signed Notice to Install"));
        NotificationBody := NotificationBody.Replace('%EngActTroubleshootingCaption%',FIELDCAPTION(Troubleshooting));
        NotificationBody := NotificationBody.Replace('%EngActTroubleshooting%',FORMAT(Troubleshooting));
        NotificationBody := NotificationBody.Replace('%EngActMaintenanceCaption%',FIELDCAPTION(Maintenance));
        NotificationBody := NotificationBody.Replace('%EngActMaintenance%',FORMAT(Maintenance));
        NotificationBody := NotificationBody.Replace('%EngActQualityAuditTrialPOCCaption%',FIELDCAPTION("Quality Audit/Trial/POC"));
        NotificationBody := NotificationBody.Replace('%EngActQualityAuditTrialPOC%',FORMAT("Quality Audit/Trial/POC"));
        NotificationBody := NotificationBody.Replace('%EngActBuildingClearanceCaption%',FIELDCAPTION("Building Clearance"));
        NotificationBody := NotificationBody.Replace('%EngActBuildingClearance%',FORMAT("Building Clearance"));
        NotificationBody := NotificationBody.Replace('%EngActCommissioningCaption%',FIELDCAPTION(Commissioning));
        NotificationBody := NotificationBody.Replace('%EngActCommissioning%',FORMAT(Commissioning));
        NotificationBody := NotificationBody.Replace('%EngActDeliveryToCustomerWarehouseCaption%',FIELDCAPTION("Delivery To Customers Whse."));
        NotificationBody := NotificationBody.Replace('%EngActDeliveryToCustomerWarehouse%',FORMAT("Delivery To Customers Whse."));
        NotificationBody := NotificationBody.Replace('%EngActFinalAcceptanceCaption%',FIELDCAPTION("Final Acceptance"));
        NotificationBody := NotificationBody.Replace('%EngActFinalAcceptance%',FORMAT("Final Acceptance"));
        NotificationBody := NotificationBody.Replace('%EngActPreliminaryAcceptanceCaption%',FIELDCAPTION("Preliminary Acceptance"));
        NotificationBody := NotificationBody.Replace('%EngActPreliminaryAcceptance%',FORMAT("Preliminary Acceptance"));
        NotificationBody := NotificationBody.Replace('%EngActTestingCaption%',FIELDCAPTION(Testing));
        NotificationBody := NotificationBody.Replace('%EngActTesting%',FORMAT(Testing));
        NotificationBody := NotificationBody.Replace('%EngActRectificationCaption%',FIELDCAPTION(Rectification));
        NotificationBody := NotificationBody.Replace('%EngActRectification%',FORMAT(Rectification));
        NotificationBody := NotificationBody.Replace('%EngActShipmentAirFreightCaption%',FIELDCAPTION("Shipment (Air Freight)"));
        NotificationBody := NotificationBody.Replace('%EngActShipmentAirFreight%',FORMAT("Shipment (Air Freight)"));
        NotificationBody := NotificationBody.Replace('%EngActShipmentSeeFreightCaption%',FIELDCAPTION("Shipment (Sea Freight)"));
        NotificationBody := NotificationBody.Replace('%EngActShipmentSeeFreight%',FORMAT("Shipment (Sea Freight)"));
        NotificationBody := NotificationBody.Replace('%EngActQOthersPleaseSpecifyCaption%',FIELDCAPTION("Q. Others Please Specify"));
        NotificationBody := NotificationBody.Replace('%EngActQOthersPleaseSpecify%',FORMAT("Q. Others Please Specify"));
        NotificationBody := NotificationBody.Replace('%EngActQOthersRemarksCaption%',FIELDCAPTION("Q. Others Remarks"));
        NotificationBody := NotificationBody.Replace('%EngActQOthersRemarks%',StringConversionManagement.WindowsToASCII("Q. Others Remarks"));
        // Attachments
        NotificationBody := NotificationBody.Replace('%AttachementNoticeToProceedCaption%',FIELDCAPTION("A. Notice To Proceed"));
        NotificationBody := NotificationBody.Replace('%AttachementNoticeToProceed%',FORMAT("A. Notice To Proceed"));
        NotificationBody := NotificationBody.Replace('%AttachementTP_CTFCaption%',FIELDCAPTION("ATP/CTF"));
        NotificationBody := NotificationBody.Replace('%AttachementTP_CTF%',FORMAT("ATP/CTF"));
        NotificationBody := NotificationBody.Replace('%AttachementSignedTrialCaption%',FIELDCAPTION("A. Signed Trial"));
        NotificationBody := NotificationBody.Replace('%AttachementSignedTrial%',FORMAT("A. Signed Trial"));
        NotificationBody := NotificationBody.Replace('%AttachementPOFromCustomerCaption%',FIELDCAPTION("A. P.O. From Client"));
        NotificationBody := NotificationBody.Replace('%AttachementPOFromCustomer%',FORMAT("A. P.O. From Client"));
        NotificationBody := NotificationBody.Replace('%AttachementPOToVendorCaption%',FIELDCAPTION("A. P.O. To Supplier"));
        NotificationBody := NotificationBody.Replace('%AttachementPOToVendor%',FORMAT("A. P.O. To Supplier"));
        NotificationBody := NotificationBody.Replace('%AttachementExceptionReportCaption%',FIELDCAPTION("Exception Report"));
        NotificationBody := NotificationBody.Replace('%AttachementExceptionReport%',FORMAT("Exception Report"));
        NotificationBody := NotificationBody.Replace('%AttachementExceptionReportNoCaption%',FIELDCAPTION("Exception Report No."));
        NotificationBody := NotificationBody.Replace('%AttachementExceptionReportNo%',FORMAT("Exception Report No."));
        NotificationBody := NotificationBody.Replace('%AttachementBillOfMaterialsCaption%',FIELDCAPTION("A. Bill Of Materials"));
        NotificationBody := NotificationBody.Replace('%AttachementBillOfMaterials%',FORMAT("A. Bill Of Materials"));
        NotificationBody := NotificationBody.Replace('%AttachementAllocatedBudgetCaption%',FIELDCAPTION("A. Allocated Budget"));
        NotificationBody := NotificationBody.Replace('%AttachementAllocatedBudget%',FORMAT("A. Allocated Budget"));
        NotificationBody := NotificationBody.Replace('%AttachementOthersPleaseSpecifyCaption%',FIELDCAPTION("A. Others Please Specify"));
        NotificationBody := NotificationBody.Replace('%AttachementOthersPleaseSpecify%',FORMAT("A. Others Please Specify"));
        NotificationBody := NotificationBody.Replace('%AttachementOtherRemarksCaption%',FIELDCAPTION("A. Others Remarks"));
        NotificationBody := NotificationBody.Replace('%AttachementOtherRemarks%',StringConversionManagement.WindowsToASCII("A. Others Remarks"));
        //Warranty
        NotificationBody := NotificationBody.Replace('%WithinWarrantyCaption%',FIELDCAPTION("Within Warranty"));
        NotificationBody := NotificationBody.Replace('%WithinWarranty%',FORMAT("Within Warranty"));
        NotificationBody := NotificationBody.Replace('%WithMaintenanceServiceCaption%',FIELDCAPTION("With Maintenance Service"));
        NotificationBody := NotificationBody.Replace('%WithMaintenanceService%',FORMAT("With Maintenance Service"));
        NotificationBody := NotificationBody.Replace('%ExpiredWarrantyCaption%',FIELDCAPTION("Expired Warranty"));
        NotificationBody := NotificationBody.Replace('%ExpiredWarranty%',FORMAT("Expired Warranty"));
        NotificationBody := NotificationBody.Replace('%RemarksCaption%',FIELDCAPTION(Remarks));
        NotificationBody := NotificationBody.Replace('%Remarks%',StringConversionManagement.WindowsToASCII(Remarks));
        NotificationBody := NotificationBody.Replace('%RFENo%',"Exception Report No.");

        //Stripo Engineering Activities Checkbox
        IF "Clustering Mobilization" THEN
          NotificationBody := NotificationBody.Replace('%GCClusterMobilization%','checked');
        IF "Per Site Mobilization" THEN
          NotificationBody := NotificationBody.Replace('%GCPerSiteMobilization%','checked');
        IF "Supply Only" = "Supply Only"::Yes THEN
          NotificationBody := NotificationBody.Replace('%GCSupplyOnly%','checked');
        IF "Demo POC" THEN
          NotificationBody := NotificationBody.Replace('%GCDemoProofOfConcept%','checked');
        IF "w/ P.O" THEN
          NotificationBody := NotificationBody.Replace('%GCWithPurchaseOrder%','checked');
        IF "w/o P.O" THEN
          NotificationBody := NotificationBody.Replace('%GCWithoutPurchaseOrder%','checked');
        IF "Site Acquisition" THEN
          NotificationBody := NotificationBody.Replace('%EACSiteAcquisition%','checked');
        IF "Site Survey" THEN
          NotificationBody := NotificationBody.Replace('%EACSiteSurvey%','checked');
        IF "Approved MOA/MOU" THEN
          NotificationBody := NotificationBody.Replace('%EACApprovedMOA%','checked');
        IF "Approved RAAWA/Work Permit" THEN
          NotificationBody := NotificationBody.Replace('%EACApprovedRAAWA%','checked');
        IF "Floor Plans from Customer" THEN
          NotificationBody := NotificationBody.Replace('%EACFloorPlansFromCustomer%','checked');
        IF "Ctctd. Strctrd. Cblng Subcon" THEN
          NotificationBody := NotificationBody.Replace('%EACContactedStructuredCablingSubcon%','checked');
        IF Installation THEN
          NotificationBody := NotificationBody.Replace('%EACInstallation%','checked');
        IF "Approved BOQ" THEN
          NotificationBody := NotificationBody.Replace('%EACApprovedBOQ%','checked');
        IF "Approved HLD and TSSR Design" THEN
          NotificationBody := NotificationBody.Replace('%EACApprovedHDLAndTSSRDesign%','checked');
        IF "Approved Work Permit/RAAWA" THEN
          NotificationBody := NotificationBody.Replace('%EACApprovedWorkPermitRAAWA%','checked');
        IF "Signed Notice to Install" THEN
          NotificationBody := NotificationBody.Replace('%EACSignedNoticeToInstall%','checked');
        IF Troubleshooting THEN
          NotificationBody := NotificationBody.Replace('%EACTroubleshooting%','checked');
        IF Maintenance THEN
          NotificationBody := NotificationBody.Replace('%EACMaintenance%','checked');
        IF "Quality Audit/Trial/POC" THEN
          NotificationBody := NotificationBody.Replace('%EACQualityAuditTrialPOC%','checked');
        IF "Building Clearance" THEN
          NotificationBody := NotificationBody.Replace('%EACBuildingClearance%','checked');
        IF Commissioning THEN
          NotificationBody := NotificationBody.Replace('%EACCommissioning%','checked');
        IF "Delivery To Customers Whse." THEN
          NotificationBody := NotificationBody.Replace('%EACDeliveryToCustomerWarehouse%','checked');
        IF "Final Acceptance" THEN
          NotificationBody := NotificationBody.Replace('%EACFinalAcceptance%','checked');
        IF "Preliminary Acceptance" THEN
          NotificationBody := NotificationBody.Replace('%EACPreliminaryAcceptance%','checked');
        IF Testing THEN
          NotificationBody := NotificationBody.Replace('%EACTesting%','checked');
        IF Rectification THEN
          NotificationBody := NotificationBody.Replace('%EACRectification%','checked');
        IF "Shipment (Air Freight)" THEN
          NotificationBody := NotificationBody.Replace('%EACShipmentAirFreight%','checked');
        IF "Shipment (Sea Freight)" THEN
          NotificationBody := NotificationBody.Replace('%EACShipmentSeeFreight%','checked');
        IF "Q. Others Please Specify" THEN
          NotificationBody := NotificationBody.Replace('%EACQOthersPleaseSpecify%','checked');
        //StripO Attachments Checkbox
        IF "ATP/CTF" THEN
          NotificationBody := NotificationBody.Replace('%CPATP_CTF%','checked');
        IF "A. Notice To Proceed" THEN
          NotificationBody := NotificationBody.Replace('%CPANoticeToProceed%','checked');
        IF "A. P.O. From Client" THEN
          NotificationBody := NotificationBody.Replace('%CPAPOFromCustomer%','checked');
        IF "A. P.O. To Supplier" THEN
          NotificationBody := NotificationBody.Replace('%CPAPOToVendor%','checked');
        IF "Exception Report" THEN
          NotificationBody := NotificationBody.Replace('%CPAExceptionReport%','checked');
        IF "A. Signed Trial" THEN
          NotificationBody := NotificationBody.Replace('%CPASignedTrial%','checked');
        IF "A. Others Please Specify" THEN
          NotificationBody := NotificationBody.Replace('%CPAOthersPleaseSpecify%','checked');

        IF "A. Bill Of Materials" THEN
          NotificationBody := NotificationBody.Replace('%CPABillOfMaterials%','checked');
        IF "A. Allocated Budget" THEN
          NotificationBody := NotificationBody.Replace('%CPAAllocatedBudget%','checked');

        //StripO Warranty Checkbox
        IF "Within Warranty" THEN
          NotificationBody := NotificationBody.Replace('%CPWWithinWarranty%','checked');
        IF "Expired Warranty" THEN
          NotificationBody := NotificationBody.Replace('%CPWExpiredWarranty%','checked');
        IF "With Maintenance Service" THEN
          NotificationBody := NotificationBody.Replace('%CPWWithMaintenanceService%','checked');
        //StripO Concerned Personnel Checkbox
        IF "ACC-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCAccounting%','checked');
        IF "QAU-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCQualityAssurance%','checked');
        IF "CPE-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCDeviceManagement%','checked');
        IF "AUD-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCAuditDepartment%','checked');
        IF "SAL-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCSales%','checked');
        IF "ICT-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCInfoCommSystem%','checked');
        IF "INV-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCInventory%','checked');
        IF "PMO-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCProjectControl%','checked');
        IF "POW-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCPowerSystem%','checked');
        IF "LOG-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCLogistics%','checked');
        IF "TAU-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCTelecomAudit%','checked');
        IF "TRM-WRD Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCTransmissionWired%','checked');
        IF "OSP-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCOutsidePlantOSP%','checked');
        IF "WMU-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCWarehouseManagementUnit%','checked');
        IF "TRM-WRL Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCTransmissionWireless%','checked');
        IF "PMD-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCProjectManagement%','checked');
        IF "FIN-AP Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCFinanceAP%','checked');
        IF "WRL-A1 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCWirelessAccess1%','checked');
        IF "PUR-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCPurchasing%','checked');
        IF "FIN-AR Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCFinanceAR%','checked');
        IF "WRL-A2 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCWirelessAccess2%','checked');
        IF "RMS-DT Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCDocumentationTeam%','checked');
        IF "SCU-01 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCPassiveUnit%','checked');
        IF "HRD-00 Dept." THEN
          NotificationBody := NotificationBody.Replace('%CPCHumanResource%','checked');

        //Comments
        CALCFIELDS(Comments);
        IF Comments.HASVALUE THEN BEGIN
          Comments.CREATEINSTREAM(InStr);
          InStr.READ(CommentsText);
        END;
        NotificationBody := NotificationBody.Replace('%CommentsCaption%', FIELDCAPTION(Comments));
        NotificationBody := NotificationBody.Replace('%Comments%', StringConversionManagement.WindowsToASCII(Remarks));

        ReplaceTokenWithStripoRecordLink(NotificationBody, INTP.RECORDID);
      END;
    END;

    LOCAL PROCEDURE ReplaceTokenWithLinkedINTPDetails@53(VAR NotificationBody@1004 : DotNet "'mscorlib'.System.String";INTPNo@1001 : Code[20]);
    VAR
      Field@1005 : Record 2000000041;
      FieldRef@1003 : FieldRef;
      FieldValue@1006 : Text;
      INTP@1000 : Record 50040;
    BEGIN
      IF INTP.GET(INTPNo) THEN BEGIN
        NotificationBody := NotificationBody.Replace('%INTPNoCaption%','INTP No.');
        NotificationBody := NotificationBody.Replace('%INTPNoCaption2%','INTP No.');
        NotificationBody := NotificationBody.Replace('%INTPNo%',INTP."No.");
        NotificationBody := NotificationBody.Replace('%ProjectNameCaption%',INTP.FIELDCAPTION("Project Name"));
        NotificationBody := NotificationBody.Replace('%ProjectName%',StringConversionManagement.WindowsToASCII(INTP."Project Name" + ' ' + INTP."Project Name 2"));
        NotificationBody := NotificationBody.Replace('%ProjNameCaption%',INTP.FIELDCAPTION("Project Name"));
        NotificationBody := NotificationBody.Replace('%ProjName%',StringConversionManagement.WindowsToASCII(INTP."Project Name" + ' ' + INTP."Project Name 2"));
        NotificationBody := NotificationBody.Replace('%PONoCaption%', INTP.FIELDCAPTION("P.O No. (Customer)"));
        NotificationBody := NotificationBody.Replace('%PONo%', StringConversionManagement.WindowsToASCII(INTP."P.O No. (Customer)"));
        NotificationBody := NotificationBody.Replace('%CustomerCaption%', INTP.FIELDCAPTION("Customer Name"));
        NotificationBody := NotificationBody.Replace('%Customer%', StringConversionManagement.WindowsToASCII(INTP."Customer No." + ' ' + INTP."Customer Name"));
      END ELSE BEGIN
        NotificationBody := NotificationBody.Replace('%INTPNoCaption%',INTP.FIELDCAPTION("No."));
        NotificationBody := NotificationBody.Replace('%INTPNoCaption2%', 'INTP No.');
        NotificationBody := NotificationBody.Replace('%INTPNo%','');
        NotificationBody := NotificationBody.Replace('%ProjectNameCaption%',INTP.FIELDCAPTION("Project Name"));
        NotificationBody := NotificationBody.Replace('%ProjectName%','');
        NotificationBody := NotificationBody.Replace('%PONoCaption%', INTP.FIELDCAPTION("P.O No. (Customer)"));
        NotificationBody := NotificationBody.Replace('%PONo%', '');
        NotificationBody := NotificationBody.Replace('%CustomerCaption%', INTP.FIELDCAPTION("Customer Name"));
        NotificationBody := NotificationBody.Replace('%Customer%', '');
      END;
    END;

    LOCAL PROCEDURE ReplaceTokenWithUserDetails@32(VAR NotificationBody@1001 : DotNet "'mscorlib'.System.String";VAR User@1000 : Record 2000000120);
    VAR
      UserProperty@1002 : Record 2000000121;
    BEGIN
      WITH User DO BEGIN
        UserProperty.GET(User."User Security ID");
        NotificationBody := NotificationBody.Replace('%UserID%', User."User Name");
        NotificationBody := NotificationBody.Replace('%Password%', UserProperty."NAV Password Log");
      END;
    END;

    LOCAL PROCEDURE ReplaceTokenWithStripoRecordLink@20(VAR NotificationBody@1001 : DotNet "'mscorlib'.System.String";RecID@1000 : RecordID);
    VAR
      RecordLink@1033 : Record 2000000068;
      StringConversionMgt@1032 : Codeunit 47;
      NoteText@1031 : Text;
      CommentBody@1030 : Text;
      TempStripoHTML@1029 : Text;
      StripoHTML@1028 : Text;
      StripoCommentBodyDotNet@1027 : DotNet "'mscorlib'.System.String";
    BEGIN
       RecordLink.SETRANGE("Record ID", RecID);
        IF RecordLink.FINDSET THEN BEGIN
          REPEAT
            StripoCommentBodyDotNet := StripoCommentBodyDotNet.Copy(StripoContentBody1 + StripoContentBody2 + StripoContentBody3);
            StripoCommentBodyDotNet := StripoCommentBodyDotNet.Replace('%UserID%', RecordLink."User ID");
            StripoCommentBodyDotNet := StripoCommentBodyDotNet.Replace('%Datetime%', FORMAT(RecordLink.Created));
            IF RecordLink.Type = RecordLink.Type::Note THEN BEGIN
              StripoCommentBodyDotNet := StripoCommentBodyDotNet.Replace('%StripoCommentDetails%',StripoRecordNote);
              RecordLink.CALCFIELDS(Note);
              IF RecordLink.Note.HASVALUE THEN BEGIN
                RecordLink.Note.CREATEINSTREAM(InStr);
                InStr.READ(NoteText);
                StripoCommentBodyDotNet := StripoCommentBodyDotNet.Replace('%RecordNote%', StringConversionMgt.WindowsToASCII(NoteText));
              END ELSE
                StripoCommentBodyDotNet := StripoCommentBodyDotNet.Replace('%RecordNote%', '');
            END ELSE BEGIN
              StripoCommentBodyDotNet := StripoCommentBodyDotNet.Replace('%StripoCommentDetails%',StripoRecordLink);
              StripoCommentBodyDotNet := StripoCommentBodyDotNet.Replace('%RecordLink%', RecordLink.URL1 + RecordLink.URL2 + RecordLink.URL3 + RecordLink.URL4);
              StripoCommentBodyDotNet := StripoCommentBodyDotNet.Replace('%RecordLinkText%', StringConversionMgt.WindowsToASCII(RecordLink.Description));
            END; ;
            TempStripoHTML += StripoCommentBodyDotNet.ToString;
          UNTIL RecordLink.NEXT = 0;
          StripoCommentBodyDotNet := StripoCommentBodyDotNet.Copy(StripoContentComment1 + StripoContentComment2 + StripoContentComment3);
          StripoCommentBodyDotNet := StripoCommentBodyDotNet.Replace('%StripoCommentPart%', TempStripoHTML);
          StripoHTML := StripoCommentBodyDotNet.ToString;
          NotificationBody := NotificationBody.Replace('%StripoRecordLink%', StripoHTML);
        END;
       NotificationBody := NotificationBody.Replace('%StripoRecordLink%', '');
    END;

    LOCAL PROCEDURE ReplaceTokenWithVendorDetails@23(VAR NotificationBody@1001 : DotNet "'mscorlib'.System.String";Vendor@1000 : Record 23);
    BEGIN
      WITH Vendor DO BEGIN
        NotificationBody := NotificationBody.Replace('%CurrencyCode%','');
        NotificationBody := NotificationBody.Replace('%AddressCaption%',FIELDCAPTION(Address));
        NotificationBody := NotificationBody.Replace('%Address%',StringConversionManagement.WindowsToASCII(Address + ' ' + "Address 2"));
        NotificationBody := NotificationBody.Replace('%PhoneNoCaption%',FIELDCAPTION("Phone No."));
        NotificationBody := NotificationBody.Replace('%PhoneNo%',"Phone No.");
        NotificationBody := NotificationBody.Replace('%PrimaryContactCaption%',FIELDCAPTION("Primary Contact No."));
        NotificationBody := NotificationBody.Replace('%PrimaryContact%',"Primary Contact No." + ' ' + Contact);
        NotificationBody := NotificationBody.Replace('%EmailCaption%',FIELDCAPTION("E-Mail"));
        NotificationBody := NotificationBody.Replace('%Email%',"E-Mail");
        NotificationBody := NotificationBody.Replace('%HomePageCaption%',FIELDCAPTION("Home Page"));
        NotificationBody := NotificationBody.Replace('%HomePage%',"Home Page");
        NotificationBody := NotificationBody.Replace('%VatRegistrationNoCaption%',FIELDCAPTION("VAT Registration No."));
        NotificationBody := NotificationBody.Replace('%VatRegistrationNo%',"VAT Registration No.");
        NotificationBody := NotificationBody.Replace('%CustomerPostingGroupCaption%',FIELDCAPTION("Vendor Posting Group"));
        NotificationBody := NotificationBody.Replace('%CustomerPostingGroup%',"Vendor Posting Group");
        NotificationBody := NotificationBody.Replace('%PartnerTypeCaption%',FIELDCAPTION("Partner Type"));
        NotificationBody := NotificationBody.Replace('%PartnerType%',FORMAT("Partner Type"));
        NotificationBody := NotificationBody.Replace('%GenBusPostingGroupCaption%',FIELDCAPTION("Gen. Bus. Posting Group"));
        NotificationBody := NotificationBody.Replace('%GenBusPostingGroup%',"Gen. Bus. Posting Group");
        NotificationBody := NotificationBody.Replace('%VatBusPostingGroupCaption%',FIELDCAPTION("VAT Bus. Posting Group"));
        NotificationBody := NotificationBody.Replace('%VatBusPostingGroup%',"VAT Bus. Posting Group");
        NotificationBody := NotificationBody.Replace('%VendorPostingGroupCaption%',FIELDCAPTION("Vendor Posting Group"));
        NotificationBody := NotificationBody.Replace('%VendorPostingGroup%',FORMAT("Vendor Posting Group"));
      END;
    END;

    LOCAL PROCEDURE ReplaceTokenWithJobOrderDetails@21(VAR NotificationBody@1001 : DotNet "'mscorlib'.System.String";JobOrder@1000 : Record 50012);
    VAR
      Employee@1002 : Record 5200;
      Customer@1003 : Record 18;
      Contact@1004 : Record 5050;
      Resource@1005 : Record 156;
      UserGroup@1006 : Record 9000;
    BEGIN
      WITH JobOrder DO BEGIN
        ReplaceTokenWithLinkedINTPDetails(NotificationBody, JobOrder."INTP No.");

        // Headers
        NotificationBody := NotificationBody.Replace('%NoCaption%', JobOrder.FIELDCAPTION("No."));
        NotificationBody := NotificationBody.Replace('%No.%', FORMAT(JobOrder."No."));
        NotificationBody := NotificationBody.Replace('%JobTypeCaption%', JobOrder.FIELDCAPTION("Job Type"));
        NotificationBody := NotificationBody.Replace('%JobType%', FORMAT(JobOrder."Job Type"));
        NotificationBody := NotificationBody.Replace('%ReqForExceptionNoCaption%', JobOrder.FIELDCAPTION("Request for Exception No."));
        NotificationBody := NotificationBody.Replace('%RequestForExceptionNo%', FORMAT(JobOrder."Request for Exception No."));
        NotificationBody := NotificationBody.Replace('%INTPNoCaption%', JobOrder.FIELDCAPTION("INTP No."));
        NotificationBody := NotificationBody.Replace('%INTPNo%', FORMAT(JobOrder."INTP No."));
        NotificationBody := NotificationBody.Replace('%ProjectNameCaption%', JobOrder.FIELDCAPTION("Project Name"));
        NotificationBody := NotificationBody.Replace('%ProjectName%', StringConversionManagement.WindowsToASCII(JobOrder."Project Name" + ' ' + JobOrder."Project Name 2"));

        NotificationBody := NotificationBody.Replace('%EmployeeNameCaption%', 'Employee Name');
        IF Employee.GET(JobOrder."Employee No.") THEN
          NotificationBody := NotificationBody.Replace('%EmployeeName%', StringConversionManagement.WindowsToASCII(Employee."No." + ' ' + Employee.FullName))
        ELSE
          NotificationBody := NotificationBody.Replace('%EmployeeName%', '');

        NotificationBody := NotificationBody.Replace('%DepartmentCaption%', 'Department');
        IF UserGroup.GET(JobOrder."Department Code") THEN
          NotificationBody := NotificationBody.Replace('%Department%', StringConversionManagement.WindowsToASCII(UserGroup.Code + ' ' + UserGroup.Name))
        ELSE
          NotificationBody := NotificationBody.Replace('%Department%', '');

        NotificationBody := NotificationBody.Replace('%GroundManagerCaption%', 'Ground Manager');
        IF Resource.GET(JobOrder."Ground Manager No.") THEN
          NotificationBody := NotificationBody.Replace('%GroundManager%', StringConversionManagement.WindowsToASCII(Resource."No." + ' ' + Resource.Name))
        ELSE
          NotificationBody := NotificationBody.Replace('%GroundManager%', '');

        NotificationBody := NotificationBody.Replace('%ProjectManagerCaption%', 'Project Manager');
        IF Resource.GET(JobOrder."Ground Manager No.") THEN
          NotificationBody := NotificationBody.Replace('%ProjectManager%', StringConversionManagement.WindowsToASCII(Resource."No." + ' ' + Resource.Name))
        ELSE
          NotificationBody := NotificationBody.Replace('%ProjectManager%', '');

        NotificationBody := NotificationBody.Replace('%CustomerNameCaption%', 'Customer Name');
        IF Customer.GET(JobOrder."Customer No.") THEN
          NotificationBody := NotificationBody.Replace('%CustomerName%', StringConversionManagement.WindowsToASCII(Customer."No." + ' ' + Customer.Name + ' ' + Customer."Name 2"))
        ELSE
          NotificationBody := NotificationBody.Replace('%CustomerName%', '');

        NotificationBody := NotificationBody.Replace('%PurchaseOrderNoCaption%', JobOrder.FIELDCAPTION("P.O No."));
        NotificationBody := NotificationBody.Replace('%PurchaseOrderNo%', FORMAT(JobOrder."P.O No."));
        NotificationBody := NotificationBody.Replace('%RemarksCaption%', JobOrder.FIELDCAPTION(Remarks));
        NotificationBody := NotificationBody.Replace('%Remarks%', StringConversionManagement.WindowsToASCII(JobOrder.Remarks));
        NotificationBody := NotificationBody.Replace('%StatusCaption%', JobOrder.FIELDCAPTION(Status));
        NotificationBody := NotificationBody.Replace('%Status%', FORMAT(JobOrder.Status));
        NotificationBody := NotificationBody.Replace('%DateRequestedCaption%', JobOrder.FIELDCAPTION("Date Requested"));
        NotificationBody := NotificationBody.Replace('%DateRequested%', FORMAT(JobOrder."Date Requested"));

        // Meeting
        NotificationBody := NotificationBody.Replace('%MeetingCaption%', JobOrder.FIELDCAPTION(Meeting));
        NotificationBody := NotificationBody.Replace('%Meeting%', ReplaceTokenToChecked(JobOrder.Meeting));
        NotificationBody := NotificationBody.Replace('%MeetingEmailSMSConfirmationCaption%', JobOrder.FIELDCAPTION("Meeting Email/SMS Conf."));
        NotificationBody := NotificationBody.Replace('%MeetingEmailSMSConfirmation%', ReplaceTokenToChecked(JobOrder."Meeting Email/SMS Conf."));

        // Product Presentation
        NotificationBody := NotificationBody.Replace('%ProdPresentationCaption%', JobOrder.FIELDCAPTION("Product Presentation"));
        NotificationBody := NotificationBody.Replace('%ProdPresentation%', ReplaceTokenToChecked(JobOrder."Product Presentation"));
        NotificationBody := NotificationBody.Replace('%ProdPresentationEmailSMSCaption%', JobOrder.FIELDCAPTION("Prod. Prstn. Email/SMS Conf."));
        NotificationBody := NotificationBody.Replace('%ProdPresentationEmailSMS%', ReplaceTokenToChecked(JobOrder."Prod. Prstn. Email/SMS Conf."));

        // Onsite Audit
        NotificationBody := NotificationBody.Replace('%OnsiteAuditCaption%', JobOrder.FIELDCAPTION("On-Site Audit"));
        NotificationBody := NotificationBody.Replace('%OnsiteAudit%', ReplaceTokenToChecked(JobOrder."On-Site Audit"));
        NotificationBody := NotificationBody.Replace('%AuditChecklistCaption%', JobOrder.FIELDCAPTION("Audit Checklist"));
        NotificationBody := NotificationBody.Replace('%AuditChecklist%', ReplaceTokenToChecked(JobOrder."Audit Checklist"));

        // Trial/POC
        NotificationBody := NotificationBody.Replace('%TrialPOCCaption%', JobOrder.FIELDCAPTION("Trial/POC"));
        NotificationBody := NotificationBody.Replace('%TrialPOC%', ReplaceTokenToChecked(JobOrder."Trial/POC"));
        NotificationBody := NotificationBody.Replace('%APCTFormCaption%', JobOrder.FIELDCAPTION("APCT Form"));
        NotificationBody := NotificationBody.Replace('%APCTForm%', ReplaceTokenToChecked(JobOrder."APCT Form"));
        NotificationBody := NotificationBody.Replace('%RFEFormCaption%', JobOrder.FIELDCAPTION("RFE Form"));
        NotificationBody := NotificationBody.Replace('%RFEForm%', ReplaceTokenToChecked(JobOrder."RFE Form"));

        // Site Survey
        NotificationBody := NotificationBody.Replace('%SiteSurveyCaption%', JobOrder.FIELDCAPTION("Site Survey"));
        NotificationBody := NotificationBody.Replace('%SiteSurvey%', ReplaceTokenToChecked(JobOrder."Site Survey"));
        NotificationBody := NotificationBody.Replace('%SiteSurveyRTPSCaption%', JobOrder.FIELDCAPTION("RTPS No."));
        NotificationBody := NotificationBody.Replace('%SiteSurveyRTPS%', FORMAT(JobOrder."RTPS No."));

        IF JobOrder."RTPS No." <> '' THEN
          NotificationBody := NotificationBody.Replace('%SiteSurveyRTPSCheckbox%', 'checked')
        ELSE
          NotificationBody := NotificationBody.Replace('%SiteSurveyRTPSCheckbox%', '');

        NotificationBody := NotificationBody.Replace('%SiteSurveySRNFormCaption%', JobOrder.FIELDCAPTION("Site Srvy. SR Form"));
        NotificationBody := NotificationBody.Replace('%SiteSurveySRNForm%', ReplaceTokenToChecked(JobOrder."Site Srvy. SR Form"));
        NotificationBody := NotificationBody.Replace('%SiteSurveySRNCaption%', JobOrder.FIELDCAPTION("Site Srvy. SR No."));
        NotificationBody := NotificationBody.Replace('%SiteSurveySRN%', StringConversionManagement.WindowsToASCII(JobOrder."Site Srvy. SR No."));

        // Permitting
        NotificationBody := NotificationBody.Replace('%PermittingCaption%', JobOrder.FIELDCAPTION(Permitting));
        NotificationBody := NotificationBody.Replace('%Permitting%', ReplaceTokenToChecked(JobOrder.Permitting));
        NotificationBody := NotificationBody.Replace('%PrmtgTimelineOfROWCaption%', JobOrder.FIELDCAPTION("Prmtg. Timeline of ROW"));
        NotificationBody := NotificationBody.Replace('%PrmtgTimelineOfROW%', ReplaceTokenToChecked(JobOrder."Prmtg. Timeline of ROW"));
        NotificationBody := NotificationBody.Replace('%PrmtgAFICaption%', JobOrder.FIELDCAPTION("Prmtg. AFI"));
        NotificationBody := NotificationBody.Replace('%PrmtgAFI%', ReplaceTokenToChecked(JobOrder."Prmtg. AFI"));
        NotificationBody := NotificationBody.Replace('%PermittingSRNoCaption%', JobOrder.FIELDCAPTION("Service Report No."));
        NotificationBody := NotificationBody.Replace('%PermittingSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Service Report No."));

        // Installation and Commissioning
        NotificationBody := NotificationBody.Replace('%InsAndCommCaption%', JobOrder.FIELDCAPTION("Installation and Commissioning"));
        NotificationBody := NotificationBody.Replace('%InsAndComm%', ReplaceTokenToChecked(JobOrder."Installation and Commissioning"));
        NotificationBody := NotificationBody.Replace('%InsCommRFEFormCaption%', JobOrder.FIELDCAPTION("InsComm. RFE Form"));
        NotificationBody := NotificationBody.Replace('%InsCommRFEForm%', ReplaceTokenToChecked(JobOrder."InsComm. RFE Form"));
        NotificationBody := NotificationBody.Replace('%InsAndCommSRNoCaption%', JobOrder.FIELDCAPTION("InsComm. SR No."));
        NotificationBody := NotificationBody.Replace('%InsAndCommSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."InsComm. SR No."));
        NotificationBody := NotificationBody.Replace('%InsCommAFICaption%', JobOrder.FIELDCAPTION("InsComm. AFI"));
        NotificationBody := NotificationBody.Replace('%InsCommAFI%', ReplaceTokenToChecked(JobOrder."InsComm. AFI"));
        NotificationBody := NotificationBody.Replace('%InsCommLineOfSightCaption%', JobOrder.FIELDCAPTION("InsComm. Line of Sight"));
        NotificationBody := NotificationBody.Replace('%InsCommLineOfSight%', ReplaceTokenToChecked(JobOrder."InsComm. Line of Sight"));
        NotificationBody := NotificationBody.Replace('%InsCommNonLineOfSightCaption%', JobOrder.FIELDCAPTION("InsComm. Non-Line of Sight"));
        NotificationBody := NotificationBody.Replace('%InsCommNonLineOfSight%', ReplaceTokenToChecked(JobOrder."InsComm. Non-Line of Sight"));
        NotificationBody := NotificationBody.Replace('%InsCommPermittingCaption%', JobOrder.FIELDCAPTION("InsComm. Permitting"));
        NotificationBody := NotificationBody.Replace('%InsCommPermitting%', ReplaceTokenToChecked(JobOrder."InsComm. Permitting"));
        NotificationBody := NotificationBody.Replace('%InsCommTrafficCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. Traffic"));
        NotificationBody := NotificationBody.Replace('%InsCommTraffic%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. Traffic"));
        NotificationBody := NotificationBody.Replace('%InsCommMMDACaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. MMDA"));
        NotificationBody := NotificationBody.Replace('%InsCommMMDA%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. MMDA"));
        NotificationBody := NotificationBody.Replace('%InsCommRAAWACaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. RAAWA"));
        NotificationBody := NotificationBody.Replace('%InsCommRAAWA%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. RAAWA"));
        NotificationBody := NotificationBody.Replace('%InsCommLGUCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. LGU Permit"));
        NotificationBody := NotificationBody.Replace('%InsCommLGU%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. LGU Permit"));
        NotificationBody := NotificationBody.Replace('%InsCommBuildingCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. Bldg. Permit"));
        NotificationBody := NotificationBody.Replace('%InsCommBuilding%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. Bldg. Permit"));
        NotificationBody := NotificationBody.Replace('%InsCommBarangayCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. Brgy. Permit"));
        NotificationBody := NotificationBody.Replace('%InsCommBarangay%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. Brgy. Permit"));
        NotificationBody := NotificationBody.Replace('%InsCommDPWHCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. DPWH"));
        NotificationBody := NotificationBody.Replace('%InsCommDPWH%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. DPWH"));
        NotificationBody := NotificationBody.Replace('%InsCommServiceOrderCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. SO"));
        NotificationBody := NotificationBody.Replace('%InsCommServiceOrder%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. SO"));
        NotificationBody := NotificationBody.Replace('%InsCommAccessLetterCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. ALP"));
        NotificationBody := NotificationBody.Replace('%InsCommAccessLetter%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. ALP"));
        NotificationBody := NotificationBody.Replace('%InsCommALOCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. ALO"));
        NotificationBody := NotificationBody.Replace('%InsCommALO%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. ALO"));
        NotificationBody := NotificationBody.Replace('%InsCommFIOCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. FIO"));
        NotificationBody := NotificationBody.Replace('%InsCommFIO%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. FIO"));
        NotificationBody := NotificationBody.Replace('%InsCommHOACaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. HOA"));
        NotificationBody := NotificationBody.Replace('%InsCommHOA%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. HOA"));
        NotificationBody := NotificationBody.Replace('%InsCommOthersCaption%', JobOrder.FIELDCAPTION("InsComm. Others"));

        IF JobOrder."InsComm. Others" <> '' THEN
          NotificationBody := NotificationBody.Replace('%InsCommOthersCheckbox%', 'checked')
        ELSE
          NotificationBody := NotificationBody.Replace('%InsCommOthersCheckbox%', '');

        NotificationBody := NotificationBody.Replace('%InsCommOthers%', FORMAT(JobOrder."InsComm. Others"));

        // Testing
        NotificationBody := NotificationBody.Replace('%TestingCaption%', JobOrder.FIELDCAPTION(Testing));
        NotificationBody := NotificationBody.Replace('%Testing%', ReplaceTokenToChecked(JobOrder.Testing));
        NotificationBody := NotificationBody.Replace('%TestingSRNFormCaption%', JobOrder.FIELDCAPTION("Testing SR Form"));
        NotificationBody := NotificationBody.Replace('%TestingSRNForm%', ReplaceTokenToChecked(JobOrder."Testing SR Form"));
        NotificationBody := NotificationBody.Replace('%TestingSRNoCaption%', JobOrder.FIELDCAPTION("Testing SR No."));
        NotificationBody := NotificationBody.Replace('%TestingSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Testing SR No."));
        NotificationBody := NotificationBody.Replace('%TestingTestProceduresCaption%', JobOrder.FIELDCAPTION("Testing Test Procedures"));
        NotificationBody := NotificationBody.Replace('%TestingTestProcedures%', ReplaceTokenToChecked(JobOrder."Testing Test Procedures"));

        // Preliminary Acceptance
        NotificationBody := NotificationBody.Replace('%PreAcceptanceCaption%', JobOrder.FIELDCAPTION("Preliminary Acceptance"));
        NotificationBody := NotificationBody.Replace('%PreAcceptance%', ReplaceTokenToChecked(JobOrder."Preliminary Acceptance"));
        NotificationBody := NotificationBody.Replace('%PreAcceptanceSNRFormCaption%', JobOrder.FIELDCAPTION("Pre-Accpt. SR Form"));
        NotificationBody := NotificationBody.Replace('%PreAcceptanceSNRForm%', ReplaceTokenToChecked(JobOrder."Pre-Accpt. SR Form"));
        NotificationBody := NotificationBody.Replace('%PreAcceptanceSRNoCaption%', JobOrder.FIELDCAPTION("Pre-Accpt. SR No."));
        NotificationBody := NotificationBody.Replace('%PreAcceptanceSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Pre-Accpt. SR No."));
        NotificationBody := NotificationBody.Replace('%PreAcceptanceSchedByCustomerCaption%', JobOrder.FIELDCAPTION("Pre-Accpt. Sched. by Customer"));
        NotificationBody := NotificationBody.Replace('%PreAcceptanceSchedByCustomer%', ReplaceTokenToChecked(JobOrder."Pre-Accpt. Sched. by Customer"));

        // Final Acceptance
        NotificationBody := NotificationBody.Replace('%FinalAcceptanceCaption%', JobOrder.FIELDCAPTION("Final Acceptance"));
        NotificationBody := NotificationBody.Replace('%FinalAcceptance%', ReplaceTokenToChecked(JobOrder."Final Acceptance"));
        NotificationBody := NotificationBody.Replace('%FinalAcceptanceSNRFormCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. SR Form"));
        NotificationBody := NotificationBody.Replace('%FinalAcceptanceSNRForm%', ReplaceTokenToChecked(JobOrder."Fnl. Accpt. SR Form"));
        NotificationBody := NotificationBody.Replace('%FinalAcceptanceSRNoCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. SR No."));
        NotificationBody := NotificationBody.Replace('%FinalAcceptanceSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Fnl. Accpt. SR No."));
        NotificationBody := NotificationBody.Replace('%FinalAcceptancePACCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. PAC"));
        NotificationBody := NotificationBody.Replace('%FinalAcceptancePAC%', ReplaceTokenToChecked(JobOrder."Fnl. Accpt. PAC"));
        NotificationBody := NotificationBody.Replace('%FinalAcceptanceSchedByCustCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. Schd. by Cust."));
        NotificationBody := NotificationBody.Replace('%FinalAcceptanceSchedByCust%', ReplaceTokenToChecked(JobOrder."Fnl. Accpt. Schd. by Cust."));
        NotificationBody := NotificationBody.Replace('%FinalAcceptancePunchReportCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. Punchlist Report"));
        NotificationBody := NotificationBody.Replace('%FinalAcceptancePunchReport%', ReplaceTokenToChecked(JobOrder."Fnl. Accpt. Punchlist Report"));

        // Rectification
        NotificationBody := NotificationBody.Replace('%RectificationCaption%', JobOrder.FIELDCAPTION(Rectification));
        NotificationBody := NotificationBody.Replace('%Rectification%', ReplaceTokenToChecked(JobOrder.Rectification));
        NotificationBody := NotificationBody.Replace('%RectificationSRNFormCaption%', JobOrder.FIELDCAPTION("Rectification SR Form"));
        NotificationBody := NotificationBody.Replace('%RectificationSRNForm%', ReplaceTokenToChecked(JobOrder."Rectification SR Form"));
        NotificationBody := NotificationBody.Replace('%RectificationSRNoCaption%', JobOrder.FIELDCAPTION("Rectification SR No."));
        NotificationBody := NotificationBody.Replace('%RectificationSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Rectification SR No."));
        NotificationBody := NotificationBody.Replace('%RectificationPunchReportCaption%', JobOrder.FIELDCAPTION("Rectification Punchlist Report"));
        NotificationBody := NotificationBody.Replace('%RectificationPunchReport%', ReplaceTokenToChecked(JobOrder."Rectification Punchlist Report"));

        // Troubleshooting
        NotificationBody := NotificationBody.Replace('%TroubleshootingCaption%', JobOrder.FIELDCAPTION(Troubleshooting));
        NotificationBody := NotificationBody.Replace('%Troubleshooting%',ReplaceTokenToChecked(JobOrder.Troubleshooting));
        NotificationBody := NotificationBody.Replace('%TroubleshootingSRNFormCaption%', JobOrder.FIELDCAPTION("Trbltng. SR Form"));
        NotificationBody := NotificationBody.Replace('%TroubleshootingSRNForm%',ReplaceTokenToChecked(JobOrder."Trbltng. SR Form"));
        NotificationBody := NotificationBody.Replace('%TroubleshootingSRNoCaption%', JobOrder.FIELDCAPTION("Trbltng. SR No."));
        NotificationBody := NotificationBody.Replace('%TroubleshootingSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Trbltng. SR No."));
        NotificationBody := NotificationBody.Replace('%TroubleshootingNCCFNoCaption%', JobOrder.FIELDCAPTION("Trbltng. NCCF No."));
        NotificationBody := NotificationBody.Replace('%TroubleshootingNCCFNo%', StringConversionManagement.WindowsToASCII(JobOrder."Trbltng. NCCF No."));
        IF JobOrder."Trbltng. NCCF No." <> '' THEN
          NotificationBody := NotificationBody.Replace('%TroubleshootingNCCFCheckbox%', 'checked')
        ELSE
          NotificationBody := NotificationBody.Replace('%TroubleshootingNCCFCheckbox%', '');

        NotificationBody := NotificationBody.Replace('%TroubleshootingUnderWarrantyCaption%', JobOrder.FIELDCAPTION("Trbltng. Under Warranty"));
        NotificationBody := NotificationBody.Replace('%TroubleshootingUnderWarranty%',ReplaceTokenToChecked(JobOrder."Trbltng. Under Warranty"));
        NotificationBody := NotificationBody.Replace('%TroubleshootingDeliveryRcptDateCaption%', JobOrder.FIELDCAPTION("Trbltng. DR Date"));
        NotificationBody := NotificationBody.Replace('%TroubleshootingDeliveryRcptDate%',FORMAT(JobOrder."Trbltng. DR Date"));
        NotificationBody := NotificationBody.Replace('%TroubleshootingAcceptDateCaption%', JobOrder.FIELDCAPTION("Trbltng. Date of Acceptance"));
        NotificationBody := NotificationBody.Replace('%TroubleshootingAcceptDate%',FORMAT(JobOrder."Trbltng. Date of Acceptance"));
        NotificationBody := NotificationBody.Replace('%TroubleshootingOutOfWarrantyCaption%', JobOrder.FIELDCAPTION("Trbltng. Out of Warranty"));
        NotificationBody := NotificationBody.Replace('%TroubleshootingOutOfWarranty%',ReplaceTokenToChecked(JobOrder."Trbltng. Out of Warranty"));

        // Special Project of CEO
        NotificationBody := NotificationBody.Replace('%SpecialProjectOfCEOCaption%', JobOrder.FIELDCAPTION("Special Project of CEO"));
        NotificationBody := NotificationBody.Replace('%SpecialProjectOfCEO%',ReplaceTokenToChecked(JobOrder."Special Project of CEO"));

        // Activity
        NotificationBody := NotificationBody.Replace('%ActivityCaption%', JobOrder.FIELDCAPTION(Activity));
        NotificationBody := NotificationBody.Replace('%Activity%', StringConversionManagement.WindowsToASCII(JobOrder.Activity));

        // Vehicle Request
        StripoEmailTemplate.ReplaceTokenWithJOVehicleRequest(NotificationBody, JobOrder);

        // Public Transportation Request
        StripoEmailTemplate.ReplaceTokenWithJOPublicTranspoRequest(NotificationBody, JobOrder);

        // Airplane Ticket Request
        StripoEmailTemplate.ReplaceTokenWithJOAirplaneTicketRequest(NotificationBody, JobOrder);

        // Remarks/Notes
        StripoEmailTemplate.ReplaceTokenWithRemarksNotes(NotificationBody, JobOrder.RECORDID);

        // Approval/Comment
        StripoEmailTemplate.ReplaceTokenWithApprovalComments(NotificationBody, JobOrder.RECORDID);

        // Approval Entries
        StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, JobOrder.RECORDID);
      END;
    END;

    LOCAL PROCEDURE ReplaceTokenWithRFQDetails@17(VAR NotificationBody@1001 : DotNet "'mscorlib'.System.String";RFQ@1000 : Record 50013);
    VAR
      Employee@1002 : Record 5200;
      Customer@1003 : Record 18;
      Contact@1004 : Record 5050;
      Resource@1005 : Record 156;
    BEGIN
      WITH RFQ DO BEGIN
        NotificationBody := NotificationBody.Replace('%QuotationTypeCaption%', RFQ.FIELDCAPTION("Quotation Type"));
        NotificationBody := NotificationBody.Replace('%QuotationType%', FORMAT(RFQ."Quotation Type"));
        NotificationBody := NotificationBody.Replace('%PurposeCaption%', RFQ.FIELDCAPTION(Purpose));
        NotificationBody := NotificationBody.Replace('%Purpose%', FORMAT(RFQ.Purpose));
        NotificationBody := NotificationBody.Replace('%RequestedByCaption%', RFQ.FIELDCAPTION("Requested By"));
        IF Employee.GET(RFQ."Requested By") THEN
          NotificationBody := NotificationBody.Replace('%RequestedBy%', StringConversionManagement.WindowsToASCII(RFQ."Requested By" + ' ' + Employee.FullName))
        ELSE
          NotificationBody := NotificationBody.Replace('%RequestedBy%', '');
        NotificationBody := NotificationBody.Replace('%CustomerNameCaption%', 'Customer Name');
        IF Customer.GET(RFQ."Customer No.") THEN
          NotificationBody := NotificationBody.Replace('%CustomerName%',RFQ."Customer No." + ' ' + Customer.Name + ' ' + Customer."Name 2")
        ELSE
          NotificationBody := NotificationBody.Replace('%CustomerName%', '');
        NotificationBody := NotificationBody.Replace('%DateCreatedCaption%','Date Created');
        NotificationBody := NotificationBody.Replace('%DateCreated%',FORMAT(RFQ."Date Created",0,'<Month Text> <Day,2>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%TimeCreatedCaption%','Time Created');
        NotificationBody := NotificationBody.Replace('%TimeCreated%',FORMAT(RFQ."Time Created"));
        NotificationBody := NotificationBody.Replace('%DocumentDateCaption%',RFQ.FIELDCAPTION("Document Date"));
        NotificationBody := NotificationBody.Replace('%DocumentDate%', FORMAT(RFQ."Document Date",0,'<Month Text> <Day,2>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%StatusCaption%', RFQ.FIELDCAPTION(Status));
        NotificationBody := NotificationBody.Replace('%Status%', FORMAT(RFQ.Status));
        NotificationBody := NotificationBody.Replace('%ContactNameCaption%', 'Contact Name');
        IF Contact.GET(RFQ."Addressee No.") THEN
          NotificationBody := NotificationBody.Replace('%ContactName%', RFQ."Addressee No." + ' ' + Contact.Name + ' ' + Contact."Name 2")
        ELSE
          NotificationBody := NotificationBody.Replace('%ContactName%', '');
        NotificationBody := NotificationBody.Replace('%ContactDesignationCaption%', 'Contact Designation');
        IF Contact.GET(RFQ."Addressee No.") THEN
          NotificationBody := NotificationBody.Replace('%ContactDesignation%',StringConversionManagement.WindowsToASCII(Contact."Job Title"))
        ELSE
          NotificationBody := NotificationBody.Replace('%ContactDesignation%', '');
        NotificationBody := NotificationBody.Replace('%ContactEmailCaption%', 'Contact Email');
        IF Contact.GET(RFQ."Addressee No.") THEN
          NotificationBody := NotificationBody.Replace('%ContactEmail%',StringConversionManagement.WindowsToASCII(Contact."E-Mail"))
        ELSE
          NotificationBody := NotificationBody.Replace('%ContactEmail%', '');
        NotificationBody := NotificationBody.Replace('%BudgetCaption%', RFQ.FIELDCAPTION(Budget));
        NotificationBody := NotificationBody.Replace('%Budget%', FORMAT(RFQ.Budget,0,'<Precision,2:2><Sign><Integer Thousand><1000Character,,><Decimals><Comma,.>'));
        NotificationBody := NotificationBody.Replace('%CostAnalystNameCaption%', RFQ.FIELDCAPTION("Cost Analyst No."));
        IF Resource.GET(RFQ."Cost Analyst No.") THEN
          NotificationBody := NotificationBody.Replace('%CostAnalystName%', StringConversionManagement.WindowsToASCII(RFQ."Cost Analyst No." + ' ' + Resource.Name + ' ' + Resource."Name 2"))
        ELSE
          NotificationBody := NotificationBody.Replace('%CostAnalystName%', '');
        NotificationBody := NotificationBody.Replace('%RelatedRFQNoCaption%', RFQ.FIELDCAPTION("Related RFQ No."));
        NotificationBody := NotificationBody.Replace('%RelatedRFQNo%', FORMAT(RFQ."Related RFQ No."));
        NotificationBody := NotificationBody.Replace('%CompletedDateCaption%', RFQ.FIELDCAPTION("Completed Date"));
        NotificationBody := NotificationBody.Replace('%CompletedDate%', FORMAT(RFQ."Completed Date"));
        NotificationBody := NotificationBody.Replace('%CompletedByCaption%', RFQ.FIELDCAPTION("Completed By"));
        NotificationBody := NotificationBody.Replace('%CompletedBy%', RFQ."Completed By");
        NotificationBody := NotificationBody.Replace('%PersonInchargeNameCaption%', RFQ.FIELDCAPTION("Cost Analyst No."));
        IF Resource.GET(RFQ."Technical Lead No.") THEN
          NotificationBody := NotificationBody.Replace('%PersonInchargeName%', STRSUBSTNO(RFQ."Technical Lead No." + ' ' + FORMAT(Resource.Name) + ' ' + FORMAT(Resource."Name 2")))
        ELSE
          NotificationBody := NotificationBody.Replace('%PersonInchargeName%', '');
        NotificationBody := NotificationBody.Replace('%TechnologyHouseCaption%', RFQ.FIELDCAPTION("Technology House"));
        NotificationBody := NotificationBody.Replace('%TechnologyHouse%', StringConversionManagement.WindowsToASCII(RFQ."Technology House"));
        NotificationBody := NotificationBody.Replace('%IsEqpmntTypeApprovedByClientCaption%', RFQ.FIELDCAPTION("Client Type Approve"));
        NotificationBody := NotificationBody.Replace('%IsEqpmntTypeApprovedByClient%', FORMAT(RFQ."Client Type Approve"));
        NotificationBody := NotificationBody.Replace('%DoesItReqNTCTypeApprovalCaption%', RFQ.FIELDCAPTION("NTC Type Approval"));
        NotificationBody := NotificationBody.Replace('%DoesItReqNTCTypeApproval%', FORMAT(RFQ."NTC Type Approval"));
        NotificationBody := NotificationBody.Replace('%IsEqpmntFreqRelCaption%',RFQ.FIELDCAPTION("Equipment Freq. Related"));
        NotificationBody := NotificationBody.Replace('%IsEqpmntFreqRel%', FORMAT(RFQ."Equipment Freq. Related"));
        NotificationBody := NotificationBody.Replace('%PermitToImportCaption%', RFQ.FIELDCAPTION("Permit To Import"));
        NotificationBody := NotificationBody.Replace('%PermitToImport%', FORMAT(RFQ."Permit To Import"));
        NotificationBody := NotificationBody.Replace('%PermitToPurchaseCaption%', RFQ.FIELDCAPTION("Permit To Purchase"));
        NotificationBody := NotificationBody.Replace('%PermitToPurchase%', FORMAT(RFQ."Permit To Purchase"));
        NotificationBody := NotificationBody.Replace('%PermitToPossessCaption%', RFQ.FIELDCAPTION("Permit To Possess"));
        NotificationBody := NotificationBody.Replace('%PermitToPossess%', FORMAT(RFQ."Permit To Possess"));
        NotificationBody := NotificationBody.Replace('%ConstructionPermitCaption%', RFQ.FIELDCAPTION("Construction Permit"));
        NotificationBody := NotificationBody.Replace('%ConstructionPermit%', FORMAT(RFQ."Construction Permit"));
        NotificationBody := NotificationBody.Replace('%RadioStationLicenseCaption%', RFQ.FIELDCAPTION("Radio Station License"));
        NotificationBody := NotificationBody.Replace('%RadioStationLicense%', FORMAT(RFQ."Radio Station License"));
        NotificationBody := NotificationBody.Replace('%OthersCaption%', RFQ.FIELDCAPTION("ASD Others"));
        IF Others = '' THEN
        NotificationBody := NotificationBody.Replace('%Others%','&nbsp');

        NotificationBody := NotificationBody.Replace('%Others%', FORMAT(RFQ.Others));
        NotificationBody := NotificationBody.Replace('%RepeatOrderCaption%', RFQ.FIELDCAPTION("Repeat Order"));
        NotificationBody := NotificationBody.Replace('%RepeatOrder%', FORMAT(RFQ."Repeat Order"));
        NotificationBody := NotificationBody.Replace('%EquipmentCaption%', RFQ.FIELDCAPTION("QTP Equipment"));
        NotificationBody := NotificationBody.Replace('%Equipment%', StringConversionManagement.WindowsToASCII((RFQ."QTP Equipment")));
        NotificationBody := NotificationBody.Replace('%ServicesCaption%', RFQ.FIELDCAPTION("QTP Services"));
        NotificationBody := NotificationBody.Replace('%Services%', StringConversionManagement.WindowsToASCII((RFQ."QTP Services")));
        NotificationBody := NotificationBody.Replace('%Competitor1Caption%', RFQ.FIELDCAPTION("Competitor 1"));
        NotificationBody := NotificationBody.Replace('%Competitor1%', StringConversionManagement.WindowsToASCII((RFQ."Competitor 1")));
        NotificationBody := NotificationBody.Replace('%CompetitorPrice1Caption%', RFQ.FIELDCAPTION("Competitor Price 1"));
        NotificationBody := NotificationBody.Replace('%CompetitorPrice1%', FORMAT(RFQ."Competitor Price 1",0,'<Precision,2:2><Sign><Integer Thousand><1000Character,,><Decimals><Comma,.>'));
        NotificationBody := NotificationBody.Replace('%Competitor2Caption%', RFQ.FIELDCAPTION("Competitor 2"));
        NotificationBody := NotificationBody.Replace('%Competitor2%', StringConversionManagement.WindowsToASCII(RFQ."Competitor 2"));
        NotificationBody := NotificationBody.Replace('%CompetitorPrice2Caption%', RFQ.FIELDCAPTION("Competitor Price 2"));
        NotificationBody := NotificationBody.Replace('%CompetitorPrice2%', FORMAT(RFQ."Competitor Price 2",0,'<Precision,2:2><Sign><Integer Thousand><1000Character,,><Decimals><Comma,.>'));
        NotificationBody := NotificationBody.Replace('%Competitor3Caption%', RFQ.FIELDCAPTION("Competitor 3"));
        NotificationBody := NotificationBody.Replace('%Competitor3%', StringConversionManagement.WindowsToASCII((RFQ."Competitor 3")));
        NotificationBody := NotificationBody.Replace('%CompetitorPrice3Caption%', RFQ.FIELDCAPTION("Competitor Price 3"));
        NotificationBody := NotificationBody.Replace('%CompetitorPrice3%', FORMAT(RFQ."Competitor Price 3",0,'<Precision,2:2><Sign><Integer Thousand><1000Character,,><Decimals><Comma,.>'));
        NotificationBody := NotificationBody.Replace('%DeadlineForSubmissionCaption%', RFQ.FIELDCAPTION("Deadline for Submission"));
        NotificationBody := NotificationBody.Replace('%DeadlineForSubmission%', FORMAT(RFQ."Deadline for Submission",0,'<Month Text> <Day,2>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%TimelineOfTheProjCaption%', RFQ.FIELDCAPTION("Timeline of the Project"));
        NotificationBody := NotificationBody.Replace('%TimelineOfTheProj%', FORMAT(RFQ."Timeline of the Project",0,'<Month Text> <Day,2>, <Year4>'));
        NotificationBody := NotificationBody.Replace('%RemarksCaption%', RFQ.FIELDCAPTION(Remarks));
        NotificationBody := NotificationBody.Replace('%Remarks%', (RFQ.Remarks));
        NotificationBody := NotificationBody.Replace('%IfRevisedCancelledWhyCaption%', RFQ.FIELDCAPTION("If Revised/Cancelled Why"));
        NotificationBody := NotificationBody.Replace('%IfRevisedCancelledWhy%', (RFQ."If Revised/Cancelled Why"));
        // NEW CODES
        NotificationBody := NotificationBody.Replace('%AddressCaption%',FIELDCAPTION(Address));
        NotificationBody := NotificationBody.Replace('%Address%', FORMAT(RFQ.Address));
        NotificationBody := NotificationBody.Replace('%QuotationCodeCaption%',RFQ.FIELDCAPTION("No."));
        NotificationBody := NotificationBody.Replace('%RFQNo%', FORMAT(RFQ."No."));
        NotificationBody := NotificationBody.Replace('%NameOfTheProject%',RFQ.FIELDCAPTION("Project Description"));
        NotificationBody := NotificationBody.Replace('%ProjectDescription%', StringConversionManagement.WindowsToASCII((RFQ."Project Description")));
        NotificationBody := NotificationBody.Replace('%AddresseeCaption%',FIELDCAPTION(Addressee));
        NotificationBody := NotificationBody.Replace('%Addressee%', StringConversionManagement.WindowsToASCII(RFQ.Addressee));
        NotificationBody := NotificationBody.Replace('%AddresseeDesignationCaption%',FIELDCAPTION("Addressee Designation"));
        NotificationBody := NotificationBody.Replace('%AddresseeDesignation%', StringConversionManagement.WindowsToASCII(RFQ."Addressee Designation"));
        NotificationBody := NotificationBody.Replace('%EmailCaption%','Email');
        NotificationBody := NotificationBody.Replace('%Email%', (RFQ.Email));
        NotificationBody := NotificationBody.Replace('%QTPEquipmentCaption%',RFQ.FIELDCAPTION("QTP Equipment"));
        NotificationBody := NotificationBody.Replace('%QTPEquipment%', StringConversionManagement.WindowsToASCII((RFQ."QTP Equipment")));
        NotificationBody := NotificationBody.Replace('%QTPServicesCaption%',RFQ.FIELDCAPTION("QTP Services"));
        NotificationBody := NotificationBody.Replace('%QTPServices%', StringConversionManagement.WindowsToASCII((RFQ."QTP Services")));
        NotificationBody := NotificationBody.Replace('%OtherAttachmentCaption%',RFQ.FIELDCAPTION("ASD Others"));
        NotificationBody := NotificationBody.Replace('%OtherAttachment%', StringConversionManagement.WindowsToASCII((RFQ."ASD Others Text")));
        NotificationBody := NotificationBody.Replace('%BOMCaption%',RFQ.FIELDCAPTION("ASD BOM"));
        NotificationBody := NotificationBody.Replace('%DesignCaption%',RFQ.FIELDCAPTION("ASD Design"));

        NotificationBody := NotificationBody.Replace('%ServiceCaption%',RFQ.FIELDCAPTION("ASD Service Engineering"));
        NotificationBody := NotificationBody.Replace('%InstallationCaption%',RFQ.FIELDCAPTION("ASD Installation Material"));
        NotificationBody := NotificationBody.Replace('%IsWhyCaption%',RFQ.FIELDCAPTION("If Revised/Cancelled Why"));
        NotificationBody := NotificationBody.Replace('%IsWhy%', FORMAT(RFQ."If Revised/Cancelled Why"));
        // CHECKED BOX
        IF "ASD BOM" THEN
          NotificationBody := NotificationBody.Replace('%BOMChecked%','checked');
        IF "ASD Design" THEN
          NotificationBody := NotificationBody.Replace('%DesignChecked%','checked');
        IF "ASD Installation Material" THEN
          NotificationBody := NotificationBody.Replace('%InstallationChecked%','checked');
        IF "ASD Service Engineering" THEN
          NotificationBody := NotificationBody.Replace('%ServiceChecked%','checked');
        IF "ASD Others" THEN
          NotificationBody := NotificationBody.Replace('%OthersChecked%','checked');
      END;
    END;

    LOCAL PROCEDURE SetTokenToValueOfField@5(VAR NotificationBody@1004 : DotNet "'mscorlib'.System.String";Token@1000 : Text;RecRef@1002 : RecordRef;FieldName@1001 : Text);
    VAR
      Field@1005 : Record 2000000041;
      StringConversionMgmt@1007 : Codeunit 47;
      FieldRef@1003 : FieldRef;
      FieldValue@1006 : Text;
    BEGIN
      Field.SETRANGE(TableNo,RecRef.NUMBER);
      Field.SETRANGE(FieldName,FieldName);
      IF Field.FINDFIRST THEN BEGIN
        FieldRef := RecRef.FIELD(Field."No.");
        IF Field.Type = Field.Type::Decimal THEN
          FieldValue := FORMAT(FieldRef.VALUE,0,'<Precision,2:2><Standard Format,0>')
        ELSE
          FieldValue := FORMAT(FieldRef.VALUE);
      END;
      NotificationBody := NotificationBody.Replace(Token,StringConversionMgmt.WindowsToASCII(FieldValue));
    END;

    LOCAL PROCEDURE SetTokenToCaptionOfField@31(VAR NotificationBody@1004 : DotNet "'mscorlib'.System.String";Token@1000 : Text;RecRef@1002 : RecordRef;FieldName@1001 : Text);
    VAR
      Field@1005 : Record 2000000041;
      FieldRef@1003 : FieldRef;
      FieldValue@1006 : Text;
    BEGIN
      Field.SETRANGE(TableNo,RecRef.NUMBER);
      Field.SETRANGE(FieldName,FieldName);
      IF Field.FINDFIRST THEN BEGIN
        FieldRef := RecRef.FIELD(Field."No.");
        FieldValue := FORMAT(FieldRef.CAPTION);
      END;
      NotificationBody := NotificationBody.Replace(Token,FieldValue);
    END;

    LOCAL PROCEDURE ReplaceTokenToChecked@34(VAR FieldBoolean@1000 : Boolean) : Text;
    BEGIN
      IF FieldBoolean THEN
        EXIT('checked');
      EXIT('');
    END;

    BEGIN
    {
      !! Documentation Codeunit 50581 Custom Notification Management

        9:40 AM Thursday, August 15, 2024
          Modify ReplaceTokenWithJobOrderDetails function,  add other job order details and job order lines.
          Add ReplaceTokenToChecked function for boolean fields to set checkbox value in the email template.

        12:43 PM Friday, August 16, 2024
          Add blank table row if there's no data.

        11:10 PM Tuesday, August 20, 2024
          Add approval entry table based on stripo approval entry template.

        2:26 PM Tuesday,  September 10, 2024
          Add function ReplaceTokenSalesHeaderDetails

        3:33 PM Wednesday, October 16, 2024
          Add Approval-WW and Approval-TERF in ReplaceTokensWithCustomApprovalInfo function.

        1:17 PM, thursday October 17, 2024
          Migrate script from Code unit 1510 function ConstructSalesHeaderDetailsForHTML to ReplaceTokenSalesHeaderDetails.
          Migrate Sales Header ReplaceTokensWithRecInfo to ReplaceTokensWithCustomApprovalInfo

        1:42 PM Friday, October 18, 2024
          Add script in ReplaceTokenWithSalesHeaderDetails function for REquest for Exception.

        2:25 PM Tuesday, October 22, 2024
          Add script to get purchase lines in ReplaceTokenWithPurchaseHeaderDetails function.

        8:11 PM Wednesday, October 23, 2024
          Modify function ReplaceTokenWithPurchaseHeaderDetails add script for cash advance.

        11:14 AM Friday, October 25, 2024
          Modify function ReplaceTokenWithPurchaseHeaderDetails add script for cash purchase order.

        10:31 AM Tuesday,  November 5, 2024
          Modify script for retrieving cost analyst in ReplaceTokenWithPurchaseHeaderDetails function.
    }
    END.
  }
}

