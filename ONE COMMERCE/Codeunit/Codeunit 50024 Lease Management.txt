OBJECT Codeunit 50024 Lease Management
{
  OBJECT-PROPERTIES
  {
    Date=06/26/18;
    Time=12:26:01 AM;
    Modified=Yes;
    Version List=NAVW25.00.00.08.04;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ConfigProgressBar@1000 : Codeunit 8615;
      Txt01@1001 : TextConst 'ENU=Rent Worksheet';

    PROCEDURE CreateBilling@2();
    VAR
      Customer@1000 : Record 18;
      StandardRentalWorksheet@1002 : Record 50037;
      GenerateBillingDialog@1003 : Page 50209;
      FilterDate@1001 : Date;
    BEGIN
      IF GenerateBillingDialog.RUNMODAL <> ACTION::Yes THEN
        EXIT;

      FilterDate := GenerateBillingDialog.GetDate;
      // Customer.SETFILTER("Start of Lease", '<>''''&..%1',FilterDate);
      Customer.SETFILTER("End of Lease", '<>''''&>=%1', FilterDate);
      Customer.SETFILTER("Start of Billing Cycle", '<>''''&<=%1',FilterDate);
      Customer.SETFILTER(Blocked, '<>%1&<>%2', Customer.Blocked::All, Customer.Blocked::Invoice);
      IF Customer.FINDSET THEN BEGIN
        ConfigProgressBar.Init(Customer.COUNT, 1, Txt01);
        REPEAT
          IF NOT StandardRentalWorksheet.GET(FilterDate, Customer."No.") THEN BEGIN
            StandardRentalWorksheet.INIT;
            StandardRentalWorksheet.VALIDATE("Posting Date", FilterDate);
            StandardRentalWorksheet.VALIDATE("Customer No.", Customer."No.");
            StandardRentalWorksheet.VALIDATE("Water Charge", CalculateWaterCharge(Customer."No.",FilterDate));
            StandardRentalWorksheet.INSERT(TRUE);
            ConfigProgressBar.Update(Customer."No.");
          END;
        UNTIL Customer.NEXT = 0;
        ConfigProgressBar.Close;
      END;
    END;

    PROCEDURE PostStandardRentalWorksheet@1();
    VAR
      StandardRentalWorksheet@1000 : Record 50037;
      SalesHeader@1001 : Record 36;
      PostConfirmDialog@1002 : TextConst 'ENU=Do you want to post the worksheet?';
      SalesLine@1003 : Record 37;
      CustomerPostingGroup@1004 : Record 92;
      Customer@1005 : Record 18;
    BEGIN
      IF NOT CONFIRM(PostConfirmDialog, FALSE) THEN
        EXIT;

      TestStandardRentWorkSheet;

      StandardRentalWorksheet.LOCKTABLE;
      CustomerPostingGroup.LOCKTABLE;

      IF StandardRentalWorksheet.FINDSET THEN BEGIN
        REPEAT
          Customer.GET(StandardRentalWorksheet."Customer No.");
          CustomerPostingGroup.GET(Customer."Customer Posting Group");

          CLEAR(SalesHeader);
          SalesHeader.INIT;
          SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;
          SalesHeader.INSERT(TRUE);
          SalesHeader.SetHideValidationDialog(FALSE);
          SalesHeader.VALIDATE("Sell-to Customer No.", StandardRentalWorksheet."Customer No.");
          SalesHeader.VALIDATE("Posting Date", StandardRentalWorksheet."Posting Date");
          SalesHeader.VALIDATE("Due Date", StandardRentalWorksheet."Due Date");
          SalesHeader.VALIDATE("External Document No.", FORMAT(SalesHeader."Due Date", 0,'<Month Text> <Year4>'));
          SalesHeader.MODIFY;

          CLEAR(SalesLine);
          // Monthly Rent
          SalesLine.INIT;
          SalesLine."Document Type" := SalesHeader."Document Type";
          SalesLine."Document No." := SalesHeader."No.";
          SalesLine."Line No." := 10000;
          SalesLine.VALIDATE(Type, SalesLine.Type::Item);
          SalesLine.VALIDATE("No.", CustomerPostingGroup."Monthly Rent Item No.");
          SalesLine.Description := STRSUBSTNO('%1 for %2', StandardRentalWorksheet.FIELDCAPTION("Monthly Rent"),
            FORMAT(SalesHeader."Due Date", 0,'<Month Text> <Year4>'));
          SalesLine.VALIDATE(Quantity,1);
          SalesLine.VALIDATE("Unit Price", StandardRentalWorksheet."Monthly Rent");
          SalesLine.INSERT(TRUE);

          // Water Charge
          IF StandardRentalWorksheet."Water Charge" > 0 THEN BEGIN
            SalesLine.INIT;
            SalesLine."Document Type" := SalesHeader."Document Type";
            SalesLine."Document No." := SalesHeader."No.";
            SalesLine."Line No." := 20000;
            SalesLine.VALIDATE(Type, SalesLine.Type::Item);
            SalesLine.VALIDATE("No.", CustomerPostingGroup."Water Charge Item No.");
            SalesLine.Description := STRSUBSTNO('%1 for %2', StandardRentalWorksheet.FIELDCAPTION("Water Charge"),
              FORMAT(SalesHeader."Posting Date", 0,'<Month Text> <Year4>'));
            SalesLine.VALIDATE(Quantity,1);
            SalesLine.VALIDATE("Unit Price", StandardRentalWorksheet."Water Charge");
            SalesLine.INSERT(TRUE);
          END;

          // Electricity Charge
          IF StandardRentalWorksheet."Electricity Charge" > 0 THEN BEGIN
            SalesLine.INIT;
            SalesLine."Document Type" := SalesHeader."Document Type";
            SalesLine."Document No." := SalesHeader."No.";
            SalesLine."Line No." := 30000;
            SalesLine.VALIDATE(Type, SalesLine.Type::Item);
            SalesLine.VALIDATE("No.", CustomerPostingGroup."Electricity Charge Item No.");
            SalesLine.Description := STRSUBSTNO('%1 for %2', StandardRentalWorksheet.FIELDCAPTION("Electricity Charge"),
              FORMAT(SalesHeader."Posting Date", 0,'<Month Text> <Year4>'));
            SalesLine.VALIDATE(Quantity,1);
            SalesLine.VALIDATE("Unit Price", StandardRentalWorksheet."Electricity Charge");
            SalesLine.INSERT(TRUE);
          END;

          // Late Payment Charge
          IF StandardRentalWorksheet."Late Payment Charge" > 0 THEN BEGIN
            SalesLine.INIT;
            SalesLine."Document Type" := SalesHeader."Document Type";
            SalesLine."Document No." := SalesHeader."No.";
            SalesLine."Line No." := 40000;
            SalesLine.VALIDATE(Type, SalesLine.Type::Item);
            SalesLine.VALIDATE("No.", CustomerPostingGroup."Late Payment Charge Item No.");
            SalesLine.VALIDATE(Quantity,1);
            SalesLine.VALIDATE("Unit Price", StandardRentalWorksheet."Late Payment Charge");
            SalesLine.INSERT(TRUE);
          END;

          CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
        UNTIL StandardRentalWorksheet.NEXT = 0;
      END;

      StandardRentalWorksheet.DELETEALL;
    END;

    LOCAL PROCEDURE TestStandardRentWorkSheet@5();
    VAR
      Customer@1001 : Record 18;
      CustomerPostingGroup@1002 : Record 92;
      StandardRentalWorksheet@1000 : Record 50037;
    BEGIN
      IF StandardRentalWorksheet.FINDSET THEN
        REPEAT
          Customer.GET(StandardRentalWorksheet."Customer No.");
          Customer.TESTFIELD("Start of Lease");
          Customer.TESTFIELD("End of Lease");
          Customer.TESTFIELD("Start of Billing Cycle");
          Customer.TESTFIELD("Customer Posting Group");
          CustomerPostingGroup.GET(Customer."Customer Posting Group");
          StandardRentalWorksheet.TESTFIELD("Posting Date");
          StandardRentalWorksheet.TESTFIELD("Customer No.");
          IF StandardRentalWorksheet."Monthly Rent" <= 0 THEN
            StandardRentalWorksheet.FIELDERROR("Monthly Rent");
          IF StandardRentalWorksheet.Amount <= 0 THEN
            StandardRentalWorksheet.FIELDERROR(Amount);
          StandardRentalWorksheet.TESTFIELD("Due Date");

          IF StandardRentalWorksheet."Monthly Rent" > 0 THEN
            CustomerPostingGroup.TESTFIELD("Monthly Rent Item No.");
          IF StandardRentalWorksheet."Water Charge" > 0 THEN
            CustomerPostingGroup.TESTFIELD("Water Charge Item No.");
          IF StandardRentalWorksheet."Electricity Charge" > 0 THEN
            CustomerPostingGroup.TESTFIELD("Electricity Charge Item No.");
          IF StandardRentalWorksheet."Internet Charge" > 0 THEN
            CustomerPostingGroup.TESTFIELD("Internet Charge Item No.");
          IF StandardRentalWorksheet."Late Payment Charge" > 0 THEN
            CustomerPostingGroup.TESTFIELD("Late Payment Charge Item No.");

        UNTIL StandardRentalWorksheet.NEXT = 0;
    END;

    LOCAL PROCEDURE ReplaceTokenWithSalesInvoiceHeaderDetails@12(VAR NotificationBody@1001 : DotNet "'mscorlib'.System.String";SalesInvoiceHeader@1000 : Record 112);
    VAR
      Customer@1002 : Record 18;
      Text01@1003 : TextConst 'ENU=Invoice due tomorrow';
      SalesInvoiceLine@1005 : Record 113;
    BEGIN
      WITH SalesInvoiceHeader DO BEGIN
        Customer.GET("Bill-to Customer No.");
        NotificationBody := NotificationBody.Replace('%InvoiceNOS%', "No.");
        NotificationBody := NotificationBody.Replace('%DueDate%', FORMAT("Due Date", 0, '<Month Text> <Day,2> <Year4>'));
        NotificationBody := NotificationBody.Replace('%Description%', Text01);
      END;

      NotificationBody := NotificationBody.Replace('%InvoiceNOS%', '');
      NotificationBody := NotificationBody.Replace('%DueDate%', '');
      NotificationBody := NotificationBody.Replace('%Description%', '');
    END;

    PROCEDURE SendDueEmailNotification@3(SalesInvoiceHeader@1016 : Record 112);
    VAR
      CompanyInformation@1010 : Record 79;
      Customer@1014 : Record 18;
      DocumentSendingProfile@1012 : Record 60;
      CustLedgerEntry@1003 : Record 21;
      ServiceEMailQueue@1006 : Record 5935;
      ServiceEMailQueue2@1007 : Record 5935;
      EntryNo@1009 : Integer;
      EmailBody@1005 : Text;
      InStr@1001 : InStream;
      OutStr@1002 : OutStream;
      NotificationBodyString@1000 : DotNet "'mscorlib'.System.String";
      SubjectTxt@1018 : TextConst 'ENU=%1 - Billing No. %2';
      Filename@1017 : TextConst 'ENU=Billing No. %1.pdf';
    BEGIN
      {
        Prevent Sending of Email parameter
        No Email Address
        No Document Sending Profile is Setup
        Document Sending Profile is not Set to E-Mail Yes
        No Document Sending Profile Email Template
        Customer Ledger Entry is closed

      }
      CompanyInformation.GET;
      Customer.GET(SalesInvoiceHeader."Sell-to Customer No.");
      CustLedgerEntry.GET(SalesInvoiceHeader."Cust. Ledger Entry No.");

      DocumentSendingProfile.GET(Customer."Document Sending Profile");
      DocumentSendingProfile.CALCFIELDS("Before Due Invoice HET");

      IF (Customer."E-Mail" = '') OR (Customer."Document Sending Profile" = '') OR
       (DocumentSendingProfile."E-Mail" <> DocumentSendingProfile."E-Mail"::"Yes (Use Default Settings)") OR
       (NOT DocumentSendingProfile."Before Due Invoice HET".HASVALUE) OR (NOT CustLedgerEntry.Open)  THEN
        EXIT;

      // Set the E-Mail Template for Sending
      DocumentSendingProfile."Before Due Invoice HET".CREATEINSTREAM(InStr);
      InStr.READ(EmailBody);
      NotificationBodyString := NotificationBodyString.Copy(EmailBody);
      ReplaceTokenWithSalesInvoiceHeaderDetails(NotificationBodyString, SalesInvoiceHeader);
      EmailBody := NotificationBodyString.ToString;

      IF ServiceEMailQueue2.FINDLAST THEN
        EntryNo := ServiceEMailQueue2."Entry No." + 1
      ELSE
        EntryNo := 1;

      // Queue the Email
      WITH ServiceEMailQueue DO BEGIN
        ServiceEMailQueue."Entry No." := EntryNo;
        ServiceEMailQueue."To Address" := Customer."E-Mail";
        ServiceEMailQueue."Copy-to Address" := DocumentSendingProfile."CC E-Mail";
        ServiceEMailQueue."Blind Copy-to Address" := DocumentSendingProfile."BCC E-Mail";
        ServiceEMailQueue."Subject Line" := STRSUBSTNO(SubjectTxt, CompanyInformation.Name, SalesInvoiceHeader."No.");
        ServiceEMailQueue."Document No." := SalesInvoiceHeader."No.";
        ServiceEMailQueue."Document Type" := ServiceEMailQueue."Document Type"::" ";
        ServiceEMailQueue.Body.CREATEOUTSTREAM(OutStr);
        OutStr.WRITE(EmailBody);
        ServiceEMailQueue.INSERT;
      END;
    END;

    LOCAL PROCEDURE DueEmailNotification@23();
    VAR
      SalesInvoiceHeader@1008 : Record 112;
      DueDate@1006 : Date;
      Text01@1009 : TextConst 'ENU=Invoice due tomorrow';
    BEGIN
      DueDate := CALCDATE('<+1D>', WORKDATE);
      SalesInvoiceHeader.SETFILTER("Due Date", '<%1', DueDate);
      SalesInvoiceHeader.SETRANGE("Request type", SalesInvoiceHeader."Request type"::Others);
      SalesInvoiceHeader.SETFILTER("Remaining Amount", '<>0');

      IF SalesInvoiceHeader.FINDSET THEN BEGIN
        REPEAT
          IF SalesInvoiceHeader."Bill-to Customer No." <> '' THEN BEGIN
            SendDueEmailNotification(SalesInvoiceHeader);
          END;
        UNTIL SalesInvoiceHeader.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CalculateWaterCharge@4(CustomerNo@1005 : Code[20];CutoffDate@1006 : Date) : Decimal;
    VAR
      Customer@1004 : Record 18;
      StartOfLease@1002 : Date;
      CalculatedWaterCharge@1000 : Decimal;
      DaysInMonth@1003 : Integer;
    BEGIN
      Customer.GET(CustomerNo);
      StartOfLease := Customer."Start of Lease";

      IF CutoffDate <= CALCDATE('<+1M-1D>', StartOfLease) THEN BEGIN
        DaysInMonth := CALCDATE('<CM>', StartOfLease) - DMY2DATE(1, DATE2DMY(StartOfLease, 2), DATE2DMY(StartOfLease, 3)) + 1;
        CalculatedWaterCharge := Customer."Fixed Water Charge" * (CutoffDate - StartOfLease + 1) / DaysInMonth;
      END ELSE
        CalculatedWaterCharge := Customer."Fixed Water Charge";
      EXIT(CalculatedWaterCharge);
    END;

    BEGIN
    END.
  }
}

