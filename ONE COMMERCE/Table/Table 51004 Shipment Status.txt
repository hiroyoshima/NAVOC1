OBJECT Table 51004 Shipment Status
{
  OBJECT-PROPERTIES
  {
    Date=06/26/18;
    Time=12:10:26 AM;
    Modified=Yes;
    Version List=NAVOC1.00.02.23;
  }
  PROPERTIES
  {
    OnInsert=VAR
               LineNo@1000 : Integer;
               RecordCount@1001 : Integer;
               Txt0001@1002 : TextConst 'ENU=Splitting of ITEM Quantity greater than 10 is not allowed.';
             BEGIN
               CLEAR(RecordCount);
               Rec.SETRANGE("Document Type","Document Type");
               Rec.SETRANGE("Document No.","Document No.");
               Rec.SETRANGE("Purch. Line No.", "Purch. Line No.");
               RecordCount := Rec.COUNT;
               IF Rec.COUNT < 9 THEN BEGIN
                Rec.FINDLAST;
                "Line No." := Rec."Line No." + 100;
               END ELSE ERROR(Txt0004);
             END;

  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                IF "Document Type" <> "Document Type"::Order THEN
                                                                  ERROR(Txt0001,"Document Type");
                                                              END;

                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Document No.        ;Code20        ;FieldClass=Normal;
                                                   TableRelation="Purchase Header".No. WHERE (Document Type=FIELD(Document Type)) }
    { 3   ;   ;Purch. Line No.     ;Integer       ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                   Document No.=FIELD(Document No.)) }
    { 4   ;   ;Line No.            ;Integer        }
    { 20  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF NOT (Type IN [Type::Item, Type::"Fixed Asset"]) THEN BEGIN
                                                                  ERROR(Txt0002,Type);
                                                                END;
                                                              END;

                                                   OptionCaptionML=ENU=,G/L Account,Item,Resource,Fixed Asset,Charge (Item);
                                                   OptionString=,G/L Account,Item,Resource,Fixed Asset,Charge (Item) }
    { 30  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(G/L Account)) "G/L Account".No. WHERE (Blocked=CONST(No),
                                                                                                                       Direct Posting=CONST(Yes))
                                                                                                                       ELSE IF (Type=CONST(Item)) Item.No. WHERE (No.=FIELD(No.))
                                                                                                                       ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset".No. WHERE (No.=FIELD(No.));
                                                   OnValidate=BEGIN

                                                                IF "No." = '' THEN
                                                                  EXIT;

                                                                CASE Type OF
                                                                  Type::Item:
                                                                    BEGIN
                                                                      Item.GET("No.");
                                                                      Description := Item.Description;
                                                                      "Unit of Measure" := Item."Base Unit of Measure";
                                                                    END;
                                                                  Type::"Fixed Asset":
                                                                    BEGIN
                                                                      FixedAsset.GET("No.");
                                                                      Description := FixedAsset.Description;
                                                                    END;
                                                                END;
                                                              END;
                                                               }
    { 40  ;   ;Expected Receipt Date;Date          }
    { 50  ;   ;Description         ;Text50         }
    { 60  ;   ;Unit of Measure     ;Text10        ;CaptionML=ENU=Unit of Measure }
    { 70  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                CLEAR(ShipStatQTYSum);
                                                                CLEAR(ShipmentStatus);
                                                                PurchaseLine.GET("Document Type", "Document No.", "Purch. Line No.");
                                                                IF Rec.Quantity <> xRec.Quantity THEN BEGIN
                                                                  ShipmentStatus.SETRANGE("Document Type","Document Type");
                                                                  ShipmentStatus.SETRANGE("Document No.","Document No.");
                                                                  ShipmentStatus.SETRANGE("Purch. Line No.","Purch. Line No.");
                                                                  ShipmentStatus.SETRANGE("No.","No.");
                                                                  ShipmentStatus.FINDSET;
                                                                  ShipmentStatus.CALCSUMS(Quantity);
                                                                  ShipStatQTYSum := ShipmentStatus.Quantity;
                                                                  ShipStatQTYSum := (ShipStatQTYSum - xRec.Quantity) + Rec.Quantity;
                                                                  IF ShipStatQTYSum <= PurchaseLine.Quantity THEN
                                                                    EXIT ELSE ERROR(Txt0003);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 80  ;   ;Outstanding Quantity;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Line"."Outstanding Quantity" WHERE (Type=FIELD(Type),
                                                                                                                    Line No.=FIELD(Purch. Line No.),
                                                                                                                    Document No.=FIELD(Document No.)));
                                                   DecimalPlaces=0:5 }
    { 90  ;   ;Qty. to Invoice     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Line"."Qty. to Invoice" WHERE (Type=FIELD(Type),
                                                                                                               Line No.=FIELD(Purch. Line No.),
                                                                                                               Document No.=FIELD(Document No.)));
                                                   DecimalPlaces=0:5 }
    { 100 ;   ;Qty. to Receive     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Line"."Qty. to Receive" WHERE (Type=FIELD(Type),
                                                                                                               Line No.=FIELD(Purch. Line No.),
                                                                                                               Document No.=FIELD(Document No.)));
                                                   DecimalPlaces=0:5 }
    { 120 ;   ;INTP No.            ;Code20         }
    { 130 ;   ;Vendor Type         ;Option        ;OptionCaptionML=ENU=Local,Foreign,Employee;
                                                   OptionString=Local,Foreign,Employee }
    { 140 ;   ;Buy from Vendor No. ;Text50         }
    { 150 ;   ;Buy from Vendor Name;Text50         }
    { 160 ;   ;Buy from Address    ;Text50         }
    { 170 ;   ;Project Name        ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Internal Notice to Proceed"."Project Name" WHERE (No.=FIELD(INTP No.))) }
    { 180 ;   ;Customer No.        ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Internal Notice to Proceed"."Customer No." WHERE (No.=FIELD(INTP No.))) }
    { 190 ;   ;Customer Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Internal Notice to Proceed"."Customer Name" WHERE (No.=FIELD(INTP No.))) }
    { 200 ;   ;P.O. No. (Customer) ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Internal Notice to Proceed"."P.O No. (Customer)" WHERE (No.=FIELD(INTP No.))) }
    { 210 ;   ;Status              ;Option        ;OptionString=Vendor,BOC,Delivered }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Purch. Line No.,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PurchHeader@1000 : Record 38;
      PurchaseLine@1011 : Record 39;
      Item@1001 : Record 27;
      FixedAsset@1002 : Record 5600;
      UnitOfMeasure@1003 : Record 204;
      Txt0001@1004 : TextConst 'ENU=%1 Document Type is not allowed. Only ORDER Document Type is allowed.';
      Txt0002@1005 : TextConst 'ENU=%1 Type is not allowed. Type FIXED ASSET and ITEM are only allowed';
      ShipmentStatus@1010 : Record 51004;
      ShipmentStatus1@1006 : Record 51004;
      ShipStatQTYSum@1008 : Decimal;
      Txt0003@1009 : TextConst 'ENU=Total Quantity cannot exceed Quantitiy on Purchase Line Quantity.';
      Txt0004@1007 : TextConst 'ENU=Splitting of Item Quantity more than 10 is not allowed.';

    PROCEDURE CreateShipmentStatus@1(VAR PurchaseLine@1000 : Record 39);
    VAR
      PurchaseHeader@1001 : Record 38;
      INTP@1002 : Record 50040;
      LineNo@1003 : Integer;
    BEGIN
      CLEAR(LineNo);
      CLEAR(Rec);
      WITH Rec DO BEGIN
        "Document Type" := PurchaseLine."Document Type";
        "Document No." := PurchaseLine."Document No.";
        "Purch. Line No." := PurchaseLine."Line No.";

        IF Rec.FINDLAST THEN BEGIN
          LineNo := Rec."Line No." + 1000;
          "Line No." := LineNo - (LineNo MOD 1000);
        END ELSE "Line No." := 1000;

        Type := PurchaseLine.Type;
        VALIDATE("No.", PurchaseLine."No.");
        Description := PurchaseLine.Description;
        VALIDATE("Unit of Measure", PurchaseLine."Unit of Measure");
        Quantity := PurchaseLine.Quantity;
        "Outstanding Quantity" := PurchaseLine."Outstanding Quantity";
        "Expected Receipt Date" := PurchaseLine."Expected Receipt Date";

        PurchaseHeader.GET(PurchaseLine."Document Type", PurchaseLine."Document No.");
        "Vendor Type" := PurchaseHeader."Vendor Type";
        "Buy from Vendor No." := PurchaseHeader."Buy-from Vendor No.";
        "Buy from Vendor Name" := PurchaseHeader."Buy-from Vendor Name";
        "Buy from Address" := PurchaseHeader."Buy-from Address";
        INSERT;
      END;
    END;

    PROCEDURE OnModifyPurchaseLine@23(VAR NewPurchaseLine@1000 : Record 39;VAR xRecPurchaseLine@1001 : Record 39);
    VAR
      ShipmentStatus@1002 : Record 51004;
    BEGIN
      ShipmentStatus.SETRANGE("Document Type", NewPurchaseLine."Document Type");
      ShipmentStatus.SETRANGE("Document No.", NewPurchaseLine."Document No.");
      ShipmentStatus.SETRANGE("Purch. Line No.", NewPurchaseLine."Line No.");
      IF NewPurchaseLine.Type <> xRecPurchaseLine.Type THEN BEGIN
         ShipmentStatus.MODIFYALL(Type, NewPurchaseLine.Type,TRUE);
      END;
      IF NewPurchaseLine."No." <> xRecPurchaseLine."No." THEN BEGIN
         ShipmentStatus.MODIFYALL("No.", NewPurchaseLine."No.",TRUE);
      END;
      IF NewPurchaseLine.Quantity <> xRecPurchaseLine.Quantity THEN BEGIN
         ShipmentStatus.MODIFYALL(Quantity, NewPurchaseLine.Quantity,TRUE);
      END;
      IF NewPurchaseLine.Description <> xRecPurchaseLine.Description THEN BEGIN
         ShipmentStatus.MODIFYALL(Description, NewPurchaseLine.Description,TRUE);
      END;
      IF NewPurchaseLine."Expected Receipt Date" <> xRecPurchaseLine."Expected Receipt Date" THEN BEGIN
         ShipmentStatus.MODIFYALL(Description, NewPurchaseLine.Description,TRUE);
      END;
      IF NewPurchaseLine."Unit of Measure" <> xRecPurchaseLine."Unit of Measure" THEN BEGIN
         ShipmentStatus.MODIFYALL("Unit of Measure", NewPurchaseLine."Unit of Measure",TRUE);
      END;
    END;

    PROCEDURE OnDeletePurchaseLine@36(VAR PurchaseLine@1000 : Record 39);
    VAR
      ShipmentStatus@1001 : Record 51004;
    BEGIN
      ShipmentStatus.SETRANGE("Document Type", PurchaseLine."Document Type");
      ShipmentStatus.SETRANGE("Document No.", PurchaseLine."Document No.");
      ShipmentStatus.SETRANGE("Purch. Line No.", PurchaseLine."Line No.");
      ShipmentStatus.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE CheckTotalQuantity@25(VAR CurrRecShipmentStatus@1000 : Record 51004);
    VAR
      ShipmentStatus@1001 : Record 51004;
    BEGIN
      WITH CurrRecShipmentStatus DO BEGIN
        TESTFIELD("Document Type");
        TESTFIELD("Document No.");
        TESTFIELD("Purch. Line No.");
        ShipmentStatus.SETCURRENTKEY("Document Type", "Document No.", "Purch. Line No.");
        ShipmentStatus.SETRANGE("Document Type", "Document Type");
        ShipmentStatus.SETRANGE("Document No.", "Document No.");
        ShipmentStatus.SETRANGE("Purch. Line No.", "Purch. Line No.");
        GetPurchaseLine;
        ShipmentStatus.CALCSUMS(Quantity);
        MESSAGE(FORMAT(ShipmentStatus.Quantity));
        MESSAGE(FORMAT(PurchaseLine.Quantity));
        IF (ShipmentStatus.Quantity + ShipmentStatus.Quantity) > PurchaseLine.Quantity THEN
          ERROR('Quantity must be less than the quantity in purchase line.');

      END;
    END;

    LOCAL PROCEDURE GetPurchaseLine@27();
    BEGIN
      PurchaseLine.GET("Document Type", "Document No.", "Purch. Line No.");
    END;

    BEGIN
    END.
  }
}

