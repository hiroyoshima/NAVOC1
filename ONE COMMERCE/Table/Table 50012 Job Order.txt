OBJECT Table 50012 Job Order
{
  OBJECT-PROPERTIES
  {
    Date=06/26/18;
    Time=12:34:38 AM;
    Modified=Yes;
    Version List=NAVW25.00.00.06;
  }
  PROPERTIES
  {
    Permissions=TableData 50026=rimd;
    DataCaptionFields=No.,Project Name;
    OnInsert=BEGIN
               InitInsert;
             END;

    OnDelete=VAR
               PurchaseHeader@1000 : Record 38;
               JobOrderActivity@1001 : Record 50026;
               JOActivityCashRequest@1002 : Record 50028;
             BEGIN
               TestLinkedPurchaseInvoice(2);

               JobOderLines.SETRANGE("Job Order No.", "No.");
               JobOderLines.DELETEALL;

               PurchaseHeader.SETRANGE("Document Type", PurchaseHeader."Document Type"::Invoice);
               PurchaseHeader.SETRANGE("Request Type", PurchaseHeader."Request Type"::"Cash Advance");
               PurchaseHeader.SETRANGE("Job Order No.", "No.");
               PurchaseHeader.DELETEALL(TRUE);

               JobOrderActivity.SETRANGE("Job Order No.", "No.");
               JobOrderActivity.DELETEALL;

               JOActivityCashRequest.SETRANGE("Job Order No.", "No.");
               JOActivityCashRequest.DELETEALL;

               ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
             END;

    OnRename=BEGIN
               ERROR(Txt02,TABLECAPTION);
             END;

    CaptionML=ENU=Job Order;
    LookupPageID=Page50013;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  JobOrderSetup.GET;
                                                                  NoSeriesMgt.TestManual(JobOrderSetup."Job Order Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;
                                                               }
    { 13  ;   ;Job Type            ;Option        ;OnValidate=BEGIN
                                                                TestAdminRights;

                                                                IF ("Job Type" = "Job Type"::Others) AND ("INTP No." = '') THEN BEGIN
                                                                  CLEAR("Project Name");
                                                                  CLEAR("Project Name 2");
                                                                END;

                                                                // Check if the activity requires Service Engineering
                                                                IF "Job Type" <> "Job Type"::"Service Engineering" THEN
                                                                  TestActivityGroupRestriction;
                                                              END;

                                                   OptionCaptionML=ENU=Service Engineering,Others,Pre-Delivery Inspection,Inspection Upon Delivery;
                                                   OptionString=Service Engineering,Others,Pre-Delivery Inspection,Inspection Upon Delivery }
    { 15  ;   ;Job No.             ;Code20        ;TableRelation=Job WHERE (Status=CONST(Order));
                                                   OnValidate=VAR
                                                                Project@1000 : Record 50005;
                                                              BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 16  ;   ;Project Name        ;Text250       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 17  ;   ;Project Name 2      ;Text250       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 18  ;   ;RTPS No.            ;Code20        ;TableRelation="RTPS Document" WHERE (Status=FILTER(<>Open));
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 20  ;   ;Sales Related       ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 30  ;No ;Other Activities    ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 60  ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=VAR
                                                                Employee@1000 : Record 5200;
                                                              BEGIN
                                                                TESTFIELD("Employee No.");
                                                                TestAdminRights;
                                                                IF "Employee No." <> xRec."Employee No." THEN
                                                                  IF Employee.GET("Employee No.") THEN BEGIN
                                                                    VALIDATE("Department Code", Employee."Department Code");
                                                                  END ELSE
                                                                    VALIDATE("Department Code", '');
                                                                CALCFIELDS("Employee Name");
                                                              END;
                                                               }
    { 61  ;   ;Employee Name       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Search Name" WHERE (No.=FIELD(Employee No.)));
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;

                                                   Editable=No }
    { 70  ;   ;Department Code     ;Code20        ;TableRelation="User Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Department Code");
                                                                CALCFIELDS(Department);
                                                              END;
                                                               }
    { 71  ;   ;Department          ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("User Group".Name WHERE (Code=FIELD(Department Code)));
                                                   Editable=No }
    { 80  ;   ;Date Requested      ;Date          ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 90  ;   ;P.O No.             ;Code100       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 91  ;   ;Service Report No.  ;Code250        }
    { 100 ;   ;Customer No.        ;Code20        ;TableRelation=Customer WHERE (Customer Type=CONST(Customer));
                                                   OnValidate=VAR
                                                                Cust@1000 : Record 18;
                                                                InternalNoticetoProceed@1002 : Record 50040;
                                                                RecordRestrictionMgt@1001 : Codeunit 1550;
                                                              BEGIN
                                                                TestAdminRights;
                                                                CALCFIELDS("Customer Deposit Booked", "Customer Deposit Required");

                                                                IF InternalNoticetoProceed.GET("INTP No.") THEN
                                                                  TESTFIELD("Customer No.", InternalNoticetoProceed."Customer No.");


                                                                IF Cust.GET("Customer No.") THEN BEGIN
                                                                  RecordRestrictionMgt.CheckRecordHasUsageRestrictions(Cust.RECORDID);
                                                                  Cust.TESTFIELD("Gen. Bus. Posting Group");
                                                                  Cust.TESTFIELD("Customer Posting Group");
                                                                  Cust.TESTFIELD("VAT Bus. Posting Group");
                                                                END ELSE BEGIN
                                                                  CLEAR(Cust);
                                                                END;
                                                                "Customer Name" := Cust.Name;
                                                              END;
                                                               }
    { 101 ;   ;Customer Name       ;Text50        ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 130 ;   ;Remarks             ;Text250       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;

                                                   CaptionML=ENU=Remarks }
    { 140 ;   ;Ordinary P.O.       ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 150 ;   ;TurnKey             ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 160 ;   ;Site Survey         ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT "Site Survey" THEN BEGIN
                                                                  CLEAR("RTPS No.");
                                                                  CLEAR("Site Srvy. SR Form");
                                                                  CLEAR("Site Srvy. SR No.");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                  VALIDATE("Site Srvy. SR Form", TRUE);
                                                                END;
                                                              END;
                                                               }
    { 161 ;   ;Site Srvy. SR Form  ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;

                                                                IF "Site Srvy. SR Form" = FALSE THEN
                                                                  CLEAR("Site Srvy. SR No.");
                                                              END;

                                                   CaptionML=ENU=Service Report Form }
    { 162 ;   ;Site Srvy. SR No.   ;Code20        ;CaptionML=ENU=Service Report No. }
    { 170 ;   ;Trial/POC           ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT "Trial/POC" THEN BEGIN
                                                                  CLEAR("APCT Form");
                                                                  CLEAR("RFE Form");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                END;
                                                              END;
                                                               }
    { 171 ;   ;APCT Form           ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Approval to Proceed/Conduct Trial }
    { 172 ;   ;RFE Form            ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Request for Exception }
    { 180 ;   ;OSP                 ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 190 ;   ;Rectification       ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT Rectification THEN BEGIN
                                                                  CLEAR("Rectification SR Form");
                                                                  CLEAR("Rectification SR No.");
                                                                  CLEAR("Rectification Punchlist Report");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                  VALIDATE("Rectification SR Form", TRUE);
                                                                END;
                                                              END;
                                                               }
    { 191 ;   ;Rectification Punchlist Report;Boolean;
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU="Punchlist Report/List of Deficiencies (as applicable) " }
    { 192 ;   ;Rectification SR Form;Boolean      ;OnValidate=BEGIN
                                                                IF "Rectification SR Form" = FALSE THEN
                                                                  CLEAR("Rectification SR No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TestAdminRights;
                                                              TestJobTypeProjectRelated;
                                                            END;

                                                   CaptionML=ENU=Service Report Form }
    { 193 ;   ;Rectification SR No.;Code20        ;CaptionML=ENU=Service Report No. }
    { 200 ;   ;Final Acceptance    ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT "Final Acceptance" THEN BEGIN
                                                                  CLEAR("Fnl. Accpt. SR Form");
                                                                  CLEAR("Fnl. Accpt. SR No.");
                                                                  CLEAR("Fnl. Accpt. Schd. by Cust.");
                                                                  CLEAR("Fnl. Accpt. Punchlist Report");
                                                                  CLEAR("Fnl. Accpt. PAC");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                  VALIDATE("Fnl. Accpt. SR Form", TRUE);
                                                                END;
                                                              END;
                                                               }
    { 201 ;   ;Fnl. Accpt. SR Form ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;

                                                                IF "Fnl. Accpt. SR Form" = FALSE THEN
                                                                  CLEAR("Fnl. Accpt. SR No.");
                                                              END;

                                                   CaptionML=ENU=Service Report Form }
    { 202 ;   ;Fnl. Accpt. SR No.  ;Code20        ;CaptionML=ENU=Service Report No. }
    { 203 ;   ;Fnl. Accpt. Schd. by Cust.;Boolean ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Schedule Confirmed by Customer }
    { 204 ;   ;Fnl. Accpt. Punchlist Report;Boolean;
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Cleared Punchlist Report/List of Deficiencies (signed by customer) }
    { 205 ;   ;Fnl. Accpt. PAC     ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Preliminary Acceptance Certificate }
    { 210 ;   ;Installation and Commissioning;Boolean;
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT "Installation and Commissioning" THEN BEGIN
                                                                  CLEAR("InsComm. 1st Trip");
                                                                  CLEAR("InsComm. 2nd Trip");
                                                                  CLEAR("InsComm. 3rd Trip");
                                                                  CLEAR("InsComm. RFE Form");
                                                                  CLEAR("InsComm. SR Form");
                                                                  CLEAR("InsComm. SR No.");
                                                                  VALIDATE("InsComm. AFI", FALSE);
                                                                  CLEAR("InsComm. Permitting");
                                                                  CLEAR("InsComm. Others");
                                                                  CLEAR("InsComm. As Plan");
                                                                  CLEAR("InsComm. TSSR");
                                                                  CLEAR("InsComm. Others");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                  VALIDATE("InsComm. SR Form", TRUE);
                                                                END;
                                                              END;
                                                               }
    { 220 ;   ;InsComm. 1st Trip   ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 221 ;   ;InsComm. 2nd Trip   ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 222 ;   ;InsComm. 3rd Trip   ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 223 ;   ;InsComm. RFE Form   ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Request for Exemption Form }
    { 224 ;   ;InsComm. SR Form    ;Boolean       ;OnValidate=BEGIN
                                                                IF "InsComm. SR Form" = FALSE THEN
                                                                  CLEAR("InsComm. SR No.");
                                                              END;

                                                   CaptionML=ENU=Service Report Form }
    { 225 ;   ;InsComm. SR No.     ;Code20        ;CaptionML=ENU=Service Report No. }
    { 226 ;   ;InsComm. AFI        ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                IF NOT "InsComm. AFI" THEN BEGIN
                                                                  CLEAR("InsComm. Line of Sight");
                                                                  CLEAR("InsComm. Non-Line of Sight");
                                                                  VALIDATE("InsComm. Permitting", FALSE);
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Approved for Installation (Signed by Customer) }
    { 227 ;   ;InsComm. As Plan    ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=As Plan (Signed by Customer) }
    { 228 ;   ;InsComm. TSSR       ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Technical Site Survey Report (Signed by Customer) }
    { 230 ;   ;Troubleshooting     ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT Troubleshooting THEN BEGIN
                                                                  CLEAR("Trbltng. Under Warranty");
                                                                  CLEAR("Trbltng. DR Date");
                                                                  CLEAR("Trbltng. Date of Acceptance");
                                                                  CLEAR("Trbltng. Out of Warranty");
                                                                  CLEAR("Out of Wrrnty. 1st Trip");
                                                                  CLEAR("Out of Wrrnty. 2nd Trip");
                                                                  CLEAR("Trbltng. NCCF No.");
                                                                  VALIDATE("Trbltng. SR Form",FALSE);
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                  VALIDATE("Trbltng. SR Form", TRUE);
                                                                END;
                                                              END;
                                                               }
    { 231 ;   ;Trbltng. NCCF No.   ;Code20        ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Non-Conformance Complaint Form No. }
    { 232 ;   ;Trbltng. SR Form    ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                IF  NOT "Trbltng. SR Form" THEN BEGIN
                                                                  CLEAR("Trbltng. SR No.");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Service Report Form }
    { 233 ;   ;Trbltng. SR No.     ;Code20        ;CaptionML=ENU=Service Report No. }
    { 240 ;   ;Trbltng. Under Warranty;Boolean    ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;

                                                                IF "Trbltng. Under Warranty" = FALSE THEN BEGIN
                                                                  CLEAR("Trbltng. DR Date");
                                                                  CLEAR("Trbltng. Date of Acceptance");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Under Warranty }
    { 241 ;   ;Trbltng. DR Date    ;Date          ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Delivery Receipt Date }
    { 242 ;   ;Trbltng. Date of Acceptance;Date   ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Date of Acceptance }
    { 250 ;   ;Trbltng. Out of Warranty;Boolean   ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;

                                                                IF "Trbltng. Out of Warranty" = FALSE THEN BEGIN
                                                                  CLEAR("Out of Wrrnty. 1st Trip");
                                                                  CLEAR("Out of Wrrnty. 2nd Trip");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Out of Warranty }
    { 260 ;   ;Out of Wrrnty. 1st Trip;Boolean    ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=1st Trip }
    { 261 ;   ;Out of Wrrnty. 2nd Trip;Boolean    ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=2nd Trip }
    { 270 ;   ;On-Site Audit       ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT "On-Site Audit" THEN BEGIN
                                                                  CLEAR("On-Site Aud. 1st Trip");
                                                                  CLEAR("On-Site Aud. 2nd Trip");
                                                                  CLEAR("On-Site Aud. 3rd Trip");
                                                                  CLEAR("Audit Checklist");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                END;
                                                              END;
                                                               }
    { 280 ;   ;On-Site Aud. 1st Trip;Boolean      ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=1st Trip }
    { 281 ;   ;On-Site Aud. 2nd Trip;Boolean      ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=2nd Trip }
    { 282 ;   ;On-Site Aud. 3rd Trip;Boolean      ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=3rd Trip }
    { 290 ;   ;Meeting             ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;

                                                                IF Meeting = FALSE THEN
                                                                  CLEAR("Meeting Email/SMS Conf.");
                                                              END;
                                                               }
    { 291 ;   ;Meeting Email/SMS Conf.;Boolean    ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;

                                                   CaptionML=ENU=Email/SMS Confirmation }
    { 300 ;   ;Product Presentation;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;

                                                                IF "Product Presentation" = FALSE THEN
                                                                  CLEAR("Prod. Prstn. Email/SMS Conf.");
                                                              END;
                                                               }
    { 301 ;   ;Prod. Prstn. Email/SMS Conf.;Boolean;
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;

                                                   CaptionML=ENU=Email/SMS Confirmation }
    { 310 ;   ;With P.O            ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 311 ;   ;Without P.O         ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 320 ;   ;Others              ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                IF NOT Others THEN
                                                                  SetActivity;
                                                              END;
                                                               }
    { 321 ;   ;Activity            ;Text250       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;

                                                   CaptionML=ENU=Activity }
    { 330 ;   ;Point of Origin     ;Text50         }
    { 340 ;   ;Time of Departure   ;Time          ;TableRelation="Time Selector";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Time of Departure");
                                                                IF "Document Date" = 0D THEN
                                                                  VALIDATE("Document Date", TODAY);

                                                                IF ("Time of Arrival" = 0T) OR ("Time of Departure" >= "Time of Arrival") THEN
                                                                  "Time of Arrival" := "Time of Departure" + 1800000;
                                                              END;

                                                   ValidateTableRelation=No }
    { 350 ;   ;Destination         ;Text50         }
    { 360 ;   ;Time of Arrival     ;Time          ;TableRelation="Time Selector";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Time of Arrival");
                                                                IF "Document Date" = 0D THEN
                                                                  VALIDATE("Document Date", TODAY);

                                                                IF ("Time of Departure" = 0T) OR ("Time of Arrival" <= "Time of Departure") THEN
                                                                  "Time of Departure" := "Time of Arrival" - 1800000;
                                                              END;

                                                   ValidateTableRelation=No }
    { 370 ;   ;Name of Passengers  ;Text100        }
    { 500 ;   ;No. Series          ;Code20         }
    { 510 ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 530 ;   ;Date Needed         ;Date          ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 800 ;No ;Requested By        ;Text50        ;TableRelation=Employee;
                                                   OnLookup=VAR
                                                              Employee@1000 : Record 5200;
                                                            BEGIN
                                                              IF PAGE.RUNMODAL(0,Employee) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                "Endorsed By" := GetEmployeeName(Employee."No.");
                                                              END;
                                                            END;

                                                   Description=Not in Document and List }
    { 810 ;No ;Endorsed By         ;Text50        ;TableRelation=Employee;
                                                   OnLookup=VAR
                                                              Employee@1000 : Record 5200;
                                                            BEGIN
                                                              IF PAGE.RUNMODAL(0,Employee) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                "Requested By" := GetEmployeeName(Employee."No.");
                                                              END;
                                                            END;

                                                   Description=Not in Document and List }
    { 900 ;   ;Status              ;Option        ;OptionCaptionML=ENU=Open,Pending Approval,Released,Cancelled,Posted;
                                                   OptionString=Open,Pending Approval,Released,Cancelled,Posted }
    { 920 ;   ;Audit Checklist     ;Boolean        }
    { 930 ;   ;Permitting          ;Boolean       ;OnValidate=BEGIN
                                                                SetActivity;
                                                                IF Permitting = FALSE THEN BEGIN
                                                                  CLEAR("Prmtg. AFI");
                                                                  CLEAR("Prmtg. As Plan");
                                                                  CLEAR("Prmtg. TSSR");
                                                                  CLEAR("Prmtg. Timeline of ROW");
                                                                END;
                                                              END;
                                                               }
    { 940 ;   ;Prmtg. AFI          ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Approved for Installation (Signed by Customer) }
    { 945 ;   ;Prmtg. As Plan      ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=As Plan (Signed by Customer) }
    { 950 ;   ;Prmtg. TSSR         ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Technical Site Survey Report (Signed by Customer) }
    { 955 ;   ;Prmtg. Timeline of ROW;Boolean     ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Timeline of ROW }
    { 1000;   ;Vehicle Request     ;Boolean        }
    { 1010;   ;Public Transportation Request;Boolean }
    { 1020;   ;Airplane Ticket Request;Boolean     }
    { 1030;   ;Project Category    ;Code20        ;TableRelation="Project Category" }
    { 50196;  ;Responsibility Center;Code20       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                IF "Responsibility Center" <> UserSetupManagement.GetJobOrderFilter THEN
                                                                  ERROR(Txt01, TABLECAPTION, UserSetupManagement.GetJobOrderFilter);
                                                              END;
                                                               }
    { 50197;  ;INTP No.            ;Code20        ;TableRelation="Internal Notice to Proceed" WHERE (Status=FILTER(<>Cancelled),
                                                                                                     Approval Status=CONST(Released));
                                                   OnValidate=VAR
                                                                INTP@1000 : Record 50040;
                                                              BEGIN
                                                                TestAdminRights;
                                                                CALCFIELDS("Customer Deposit Booked");
                                                                CALCFIELDS("Customer Deposit Required");
                                                                IF "INTP No." <> '' THEN BEGIN
                                                                  INTP.GET("INTP No.");
                                                                END ELSE BEGIN
                                                                  CLEAR(INTP);
                                                                END;

                                                                "Job No." := INTP."Job No.";
                                                                "Project Name" := INTP."Project Name";
                                                                "Project Name 2" := INTP."Project Name 2";
                                                                VALIDATE("Project Category", INTP."Project Category Code");
                                                                VALIDATE("P.O No.", INTP."P.O No. (Customer)");
                                                                VALIDATE("Customer No.", INTP."Customer No.");
                                                              END;
                                                               }
    { 50200;  ;Incoming Document Entry No.;Integer }
    { 50201;  ;InsComm. Line of Sight;Boolean     ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Line of Sight }
    { 50202;  ;InsComm. Non-Line of Sight;Boolean ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Non-Line of Sight }
    { 50210;  ;InsComm. Permitting ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                IF NOT "InsComm. Permitting" THEN BEGIN
                                                                  CLEAR("InsComm. Prmt. LGU Permit");
                                                                  CLEAR("InsComm. Prmt. Brgy. Permit");
                                                                  CLEAR("InsComm. Prmt. Bldg. Permit");
                                                                  CLEAR("InsComm. Prmt. DPWH");
                                                                  CLEAR("InsComm. Prmt. MMDA");
                                                                  CLEAR("InsComm. Prmt. Traffic");
                                                                  CLEAR("InsComm. Prmt. HOA");
                                                                  CLEAR("InsComm. Prmt. ALO");
                                                                  CLEAR("InsComm. Prmt. ALP");
                                                                  CLEAR("InsComm. Prmt. FIO");
                                                                  CLEAR("InsComm. Prmt. RAAWA");
                                                                  CLEAR("InsComm. Prmt. SO");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Permitting }
    { 50215;  ;InsComm. Prmt. LGU Permit;Boolean  ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=LGU Permit }
    { 50220;  ;InsComm. Prmt. Brgy. Permit;Boolean;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Barangay Permit }
    { 50225;  ;InsComm. Prmt. Bldg. Permit;Boolean;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Building Permit }
    { 50230;  ;InsComm. Prmt. DPWH ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=DPWH }
    { 50235;  ;InsComm. Prmt. MMDA ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=MMDA }
    { 50240;  ;InsComm. Prmt. Traffic;Boolean     ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Traffic }
    { 50245;  ;InsComm. Prmt. HOA  ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Home Owners Association (HOA) }
    { 50250;  ;InsComm. Prmt. ALO  ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Adjacent Lot Owner (ALO) }
    { 50255;  ;InsComm. Prmt. ALP  ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Access Letter/Pass }
    { 50260;  ;InsComm. Prmt. FIO  ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Facility Impelementation Order }
    { 50265;  ;InsComm. Prmt. RAAWA;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=RAAWA }
    { 50270;  ;InsComm. Prmt. SO   ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Service Order (SO) }
    { 50275;  ;InsComm. Others     ;Text50        ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Others }
    { 50280;  ;Testing             ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT Testing THEN BEGIN
                                                                  CLEAR("Testing Test Procedures");
                                                                  CLEAR("Testing SR Form");
                                                                  CLEAR("Testing SR No.");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                  VALIDATE("Testing SR Form", TRUE);
                                                                END;
                                                              END;
                                                               }
    { 50281;  ;Testing Test Procedures;Boolean    ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Test Proceedure/Parameters }
    { 50282;  ;Testing SR Form     ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                                IF "Testing SR Form" = FALSE THEN
                                                                  CLEAR("Testing SR No.");
                                                              END;

                                                   CaptionML=ENU=Service Report Form }
    { 50283;  ;Testing SR No.      ;Code20        ;CaptionML=ENU=Service Report No. }
    { 50300;  ;Preliminary Acceptance;Boolean     ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT "Preliminary Acceptance" THEN BEGIN
                                                                  CLEAR("Pre-Accpt. SR Form");
                                                                  CLEAR("Pre-Accpt. SR No.");
                                                                  CLEAR("Pre-Accpt. Sched. by Customer");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                  VALIDATE("Pre-Accpt. SR Form", TRUE);
                                                                END;
                                                              END;
                                                               }
    { 50301;  ;Pre-Accpt. SR Form  ;Boolean       ;OnValidate=BEGIN
                                                                IF "Pre-Accpt. SR Form" = FALSE THEN
                                                                  CLEAR("Pre-Accpt. SR No.");
                                                              END;

                                                   CaptionML=ENU=Service Report Form }
    { 50302;  ;Pre-Accpt. SR No.   ;Code20        ;CaptionML=ENU=Service Report No. }
    { 50303;  ;Pre-Accpt. Sched. by Customer;Boolean;
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Schedule Confirmed by Customer }
    { 50340;  ;Special Project of CEO;Boolean     ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF "Special Project of CEO" = TRUE THEN
                                                                  TESTFIELD("Job Type", "Job Type"::Others);
                                                              END;
                                                               }
    { 50350;  ;Ground Manager No.  ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                                 CALCFIELDS("Ground Manager");
                                                              END;
                                                               }
    { 50351;  ;Project Manager No. ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 50360;  ;Request for Exception No.;Code20   ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Invoice),
                                                                                           Request type=CONST(Request For Exception),
                                                                                           Status=FILTER(Released|Pending Approval));
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;

                                                   OnLookup=VAR
                                                              SalesHdr@1000 : Record 36;
                                                            BEGIN
                                                              TestAdminRights;
                                                              SalesHdr.SETFILTER(Status, '%1|%2',SalesHdr.Status::Released, SalesHdr.Status::"Pending Approval");
                                                              IF "Request for Exception No." <> '' THEN
                                                               IF  SalesHdr.GET(SalesHdr."Document Type"::Invoice, "Request for Exception No.") THEN;
                                                              IF PAGE.RUNMODAL(PAGE::"Request for Exceptions", SalesHdr) = ACTION::LookupOK THEN BEGIN
                                                                 xRec := Rec;
                                                               VALIDATE("Request for Exception No.",SalesHdr."No.");
                                                              END;
                                                            END;
                                                             }
    { 50370;  ;Created By User ID  ;Code50        ;TableRelation="User Setup" }
    { 50380;  ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status, Status::Open);
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 50390;  ;NOC In-Charge No.   ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Person),
                                                                                 Blocked=CONST(No)) }
    { 50400;  ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                // Deprecated
                                                                //PostCode.ValidateCity(City, "Post Code", "Country/Region Code", (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No }
    { 50410;  ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>")) "Post Code".City WHERE (Country/Region Code=CONST());
                                                   OnValidate=BEGIN
                                                                // Deprecated
                                                                //PostCode.ValidateCity(City, "Post Code", "Country/Region Code", (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No }
    { 50420;  ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                // Deprecated
                                                                //PostCode.ValidateCity(City, "Post Code", "Country/Region Code", (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;
                                                               }
    { 50430;  ;Customer Deposit Booked;Boolean    ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Invoice Header" WHERE (INTP No.=FIELD(INTP No.),
                                                                                                   Bill-to Customer No.=FIELD(Customer No.),
                                                                                                   Request type=CONST(Others),
                                                                                                   Amount=FILTER(<>0)));
                                                   Editable=No }
    { 50431;  ;Customer Deposit Required;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Internal Notice to Proceed"."Advance Deposit" WHERE (No.=FIELD(INTP No.)));
                                                   Editable=No }
    { 50440;  ;Technical In-Charge No.;Code20     ;TableRelation=Resource WHERE (Type=CONST(Person),
                                                                                 Blocked=CONST(No)) }
    { 50450;  ;Ground Manager      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Resource.Name WHERE (No.=FIELD(Ground Manager No.)));
                                                   Editable=No }
    { 50460;  ;Project Manager     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Resource.Name WHERE (No.=FIELD(Project Manager No.)));
                                                   Editable=No }
    { 50470;  ;NOC In-Charge       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Resource.Name WHERE (No.=FIELD(NOC In-Charge No.)));
                                                   Editable=No }
    { 50480;  ;Technical In-Charge ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Resource.Name WHERE (No.=FIELD(Technical In-Charge No.)));
                                                   Editable=No }
    { 50490;  ;Global Dimension 1 Code;Code20     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Internal Notice to Proceed"."Global Dimension 1 Code" WHERE (No.=FIELD(Global Dimension 1 Code)));
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1),
                                                                                               Blocked=CONST(No));
                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 50500;  ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Blocked=CONST(No));
                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Project Name                             }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Project Name,Customer No.,Customer Name }
  }
  CODE
  {
    VAR
      JobOderLines@1000 : Record 50551;
      Job@1001 : Record 167;
      Txt02@1002 : TextConst 'ENU=You cannot rename a %1.';
      UserSetup@1003 : Record 91;
      UserGroup@1004 : Record 9000;
      JobOrderSetup@1008 : Record 50027;
      PostCode@1013 : Record 225;
      PurchaseHeader@1015 : Record 38;
      PurchInvHeader@1014 : Record 122;
      JobOrderLine@1017 : Record 50551;
      SalesHeader@1018 : Record 36;
      JobOrderActivity@1021 : Record 50026;
      JOActivityCashRequest@1022 : Record 50028;
      ApprovalsMgmt@1005 : Codeunit 1535;
      NoSeriesMgt@1007 : Codeunit 396;
      Err02@1006 : TextConst 'ENU=You''re not allowed to modify %1 field.';
      Err03@1009 : TextConst 'ENU=You must select atleast one activity for service engineering.';
      Err04@1010 : TextConst 'ENU=You do not have a valid User Setup. Please contact your administrator.';
      UserSetupManagement@1011 : Codeunit 5700;
      Err05@1016 : TextConst 'ENU=You''re not allowed to %1 %2 because it is already linked to a purchase document.';
      Err06@1019 : TextConst 'ENU=Unable to locate customer deposit. Please contact your Finance Department.';
      Err07@1020 : TextConst 'ENU=The %1 used in %2 %3 is invalid. Please select %1 %4 for the %2 %3.';
      Txt01@1012 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.';

    PROCEDURE InitInsert@61();
    VAR
      NoSeriesMgt@1000 : Codeunit 396;
    BEGIN
      IF "No." = '' THEN BEGIN
        NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series",TODAY,"No.","No. Series");
      END;

      InitRecord;
    END;

    LOCAL PROCEDURE InitRecord@17();
    BEGIN
      TestDefaultNoSeries;
      // TODO: Add a function to automatic setup the User Setup of a User creating a Job Order.
      IF "Document Date" = 0D THEN
        VALIDATE("Document Date", TODAY);
      IF "Date Requested" = 0D THEN
        VALIDATE("Date Requested", TODAY);
      IF "Created By User ID" = '' THEN
        VALIDATE("Created By User ID", USERID);

      IF "Employee No." = '' THEN
        VALIDATE("Employee No.", UserSetupManagement.GetUserSetupEmployeeNo);

      IF "Responsibility Center" = '' THEN
        "Responsibility Center" := UserSetup."JO Ctr. Filter";

      TestUserSetup;

      TESTFIELD("Employee No.");
      TESTFIELD("Department Code");

      IF "Job Type" = "Job Type"::"Service Engineering" THEN BEGIN
        TESTFIELD("INTP No.");
        TESTFIELD("Project Name");
        TESTFIELD("Customer No.");
        TESTFIELD("Customer Name");
      END;
    END;

    PROCEDURE InitPageValues@13();
    VAR
      Employee@1000 : Record 5200;
    BEGIN
      IF "No." = '' THEN BEGIN
        "Document Date" := TODAY;
        "Date Requested" := TODAY;
        "Created By User ID" := USERID;

        "Responsibility Center" := UserSetupManagement.GetJobOrderFilter;
        IF Employee.GET(UserSetupManagement.GetUserSetupEmployeeNo) THEN BEGIN
          Employee.TESTFIELD("Department Code");
          VALIDATE("Employee No.", Employee."No.");
          VALIDATE("Department Code", Employee."Department Code");
        END;
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@1() : Code[20];
    BEGIN
      TestDefaultNoSeries;

      EXIT(JobOrderSetup."Job Order Nos.");
    END;

    LOCAL PROCEDURE GetEmployeeName@2(EmpNo@1000 : Code[20]) : Text;
    VAR
      Employee@1001 : Record 5200;
    BEGIN
      IF Employee.GET(EmpNo) THEN
        EXIT(Employee."First Name"+ ' '+Employee."Last Name");
    END;

    PROCEDURE PrintDocument@3();
    VAR
      JobOrderForm@1000 : Report 50012;
    BEGIN
      CLEAR(JobOrderForm);
      JobOrderForm.SetReportFilter("No.");
      JobOrderForm.RUNMODAL;
    END;

    LOCAL PROCEDURE TestUserSetup@23();
    VAR
      UserSetup@1000 : Record 91;
      UserIdNotInSetupErr@1002 : TextConst '@@@=User ID NAVUser does not exist in the Approval User Setup window.;ENU=User ID %1 does not exist in the User Setup window. Please contact your administrator.';
      EmployeeNoNotInSetupErr@1001 : TextConst '@@@=User ID NAVUser does not exist in the Approval User Setup window.;ENU=Employee No. %1 does not exist in the User Setup window. Please contact your administrator.';
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        ERROR(UserIdNotInSetupErr, USERID);

      IF "Employee No." <> '' THEN BEGIN
        UserSetup.RESET;
        UserSetup.SETRANGE("Employee No.", "Employee No.");
        IF NOT UserSetup.FINDFIRST THEN
          ERROR(EmployeeNoNotInSetupErr, "Employee No.");
        UserSetup.TESTFIELD("User Group Code");
      END;
    END;

    LOCAL PROCEDURE TestDefaultNoSeries@20();
    BEGIN
      JobOrderSetup.GET;
      JobOrderSetup.TESTFIELD("Job Order Nos.");
    END;

    PROCEDURE TestJobOrderField@4();
    VAR
      INTP@1000 : Record 50040;
      ErrRFECommitmentDateExpired@1001 : TextConst 'ENU=Your %1 for the %2 %3 has been expired. Please regularize your %2.';
    BEGIN
      // TODO Create a setup for requiring the related records
      TESTFIELD("Date Requested");
      TESTFIELD("Employee No.");
      TESTFIELD("Department Code");

      IF "INTP No." <> '' THEN BEGIN
        INTP.GET("INTP No.");
        IF INTP."Supply Only" <> INTP."Supply Only"::Yes THEN
          TESTFIELD("Project Manager No.");
        TESTFIELD("Project Category");
        IF INTP."Notice To Mobilize" THEN BEGIN
          INTP.TESTFIELD("P.O No. (Customer)");
          INTP.TESTFIELD("P.O Date (Customer)");
          IF INTP."Advance Deposit" THEN BEGIN
            CALCFIELDS("Customer Deposit Booked");
          IF NOT "Customer Deposit Booked" THEN
            ERROR(Err06);
          END;
        END;

        TESTFIELD("Customer No.", INTP."Customer No.");

        IF INTP."P.O No. (Customer)" = '' THEN BEGIN
          TESTFIELD("Request for Exception No.");
          IF SalesHeader.GET(SalesHeader."Document Type"::Invoice, "Request for Exception No.") THEN BEGIN
            SalesHeader.TESTFIELD(Status, SalesHeader.Status::Released);
            IF NOT (SalesHeader."Type of Exception" IN [SalesHeader."Type of Exception"::" ", SalesHeader."Type of Exception"::"Mobilization - without PO from Customer"]) THEN
              SalesHeader.FIELDERROR("Type of Exception");
            SalesHeader.TESTFIELD("Sell-to Customer No.", "Customer No.");
            // Check if the rfe is partial waiver
            IF (SalesHeader."Waiver Type" <> SalesHeader."Waiver Type"::"Full Waiver") AND (SalesHeader."Commitment Date" < TODAY) THEN BEGIN
              ERROR(ErrRFECommitmentDateExpired, SalesHeader.FIELDCAPTION("Commitment Date"),
                        SalesHeader."Request type"::"Request For Exception", SalesHeader."No.");
            END;
          END;
        END;
      END;

      IF "Job Type" = "Job Type"::"Service Engineering" THEN BEGIN
        TESTFIELD("INTP No.");
        TESTFIELD("Project Name");
        TESTFIELD("Customer No.");
        TESTFIELD("Customer Name");
      END;

      // TestJobOrderLines;
      TestJOActivities;
      TestActivityGroupRestriction;
      TestJOActivityCashRequest;
    END;

    PROCEDURE TestJobTypeProjectRelated@9();
    BEGIN
      TESTFIELD("Job Type", "Job Type"::"Service Engineering");
    END;

    PROCEDURE TestLinkedPurchaseDocuments@5(TypeOfTransaction@1000 : ',Modify,Delete');
    BEGIN
      PurchaseHeader.SETRANGE("Document Type", PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.SETRANGE("Request Type", PurchaseHeader."Request Type"::"Cash Advance");
      PurchaseHeader.SETRANGE("Job Order No.", "No.");

      PurchInvHeader.SETRANGE("Request Type", PurchInvHeader."Request Type"::"Cash Advance");
      PurchInvHeader.SETRANGE("Job Order No.", "No.");

      IF PurchaseHeader.FINDFIRST OR PurchInvHeader.FINDFIRST THEN
        ERROR(Err05, FORMAT(TypeOfTransaction), "No.");
    END;

    PROCEDURE TestLinkedPurchaseInvoice@31(TypeOfTransaction@1000 : ',Modify,Delete');
    BEGIN
      PurchInvHeader.SETCURRENTKEY("Job Order No.");
      PurchInvHeader.SETRANGE("Job Order No.", "No.");

      IF PurchInvHeader.FINDFIRST THEN
        ERROR(Err05, FORMAT(TypeOfTransaction), "No.");
    END;

    LOCAL PROCEDURE TestJOActivities@26();
    VAR
      ErrNoActivity@1000 : TextConst 'ENU=Please indicate at least one (1) activity.';
      JobOrderActivityJobs@1002 : Record 50026;
      JobNo@1003 : Code[20];
      RequireJob@1001 : Boolean;
    BEGIN
      RequireJob := JobRequired;

      JobNo := '';
      JobOrderActivityJobs.SETRANGE("Job Order No.", "No.");
      JobOrderActivityJobs.SETFILTER("Job No.", '<>''''');
      IF JobOrderActivityJobs.FINDFIRST THEN
        JobNo := JobOrderActivityJobs."Job No.";

      JobOrderActivity.SETRANGE("Job Order No.", "No.");
      IF JobOrderActivity.FINDSET THEN BEGIN
        REPEAT
          JobOrderActivity.TESTFIELD("Type of Activity");
          JobOrderActivity.TESTFIELD(Description);
          JobOrderActivity.TESTFIELD("Date From");
          JobOrderActivity.TESTFIELD("Date To");

          IF JobOrderActivity."Job No." <> '' THEN BEGIN
            JobOrderActivity.TESTFIELD("Job No.", JobNo);
            JobOrderActivity.TESTFIELD("Job Task No.");
            Job.GET(JobOrderActivity."Job No.");
            IF Job."INTP No." <> "INTP No." THEN
              ERROR(Err07, FIELDCAPTION("INTP No."), TABLECAPTION, "No.", Job."INTP No.");
          END;

          IF RequireJob THEN BEGIN
            JobOrderActivity.TESTFIELD("Job No.");
            JobOrderActivity.TESTFIELD("Job Task No.");
            Job.GET(JobOrderActivity."Job No.");
            IF Job."INTP No." <> "INTP No." THEN
              ERROR(Err07, FIELDCAPTION("INTP No."), TABLECAPTION, "No.", Job."INTP No.");
          END;

        UNTIL JobOrderActivity.NEXT = 0;
      END ELSE
        ERROR(ErrNoActivity);
    END;

    LOCAL PROCEDURE TestActivityGroupRestriction@29();
    VAR
      JobOrderActivity@1001 : Record 50026;
      TypeofActivity@1000 : Record 50025;
      GroupRestricitonErr@1002 : TextConst 'ENU=You''re not allowed to change the %1 when the %2 is %3.';
    BEGIN
      JobOrderActivity.SETRANGE("Job Order No.", "No.");
      IF JobOrderActivity.FINDSET THEN
        REPEAT
          IF TypeofActivity.GET(JobOrderActivity."Type of Activity") AND
              (TypeofActivity."Group Restriction" = TypeofActivity."Group Restriction"::Trade) THEN
            TESTFIELD("Job Type", "Job Type"::"Service Engineering");
        UNTIL JobOrderActivity.NEXT = 0;
    END;

    LOCAL PROCEDURE TestJOActivityCashRequest@36();
    VAR
      JOActivityCashRequest@1003 : Record 50028;
      JOActivityCashRequestJob@1000 : Record 50028;
      RequireJob@1002 : Boolean;
    BEGIN
      // Check the fields in Job Order Activity Cash Request is duly filledout
      RequireJob := JobRequired;

      JOActivityCashRequest.SETRANGE("Job Order No.", "No.");
      IF JOActivityCashRequest.FINDSET THEN BEGIN
        REPEAT
          IF JOActivityCashRequest.Type IN [JOActivityCashRequest.Type::Item, JOActivityCashRequest.Type::"G/L Account"] THEN BEGIN
            JOActivityCashRequest.TESTFIELD("No.");
            JOActivityCashRequest.TESTFIELD(Description);
            JOActivityCashRequest.TESTFIELD("Unit of Measure Code");
            IF JobOrderActivity.GET(JOActivityCashRequest."Job Order No.", JOActivityCashRequest."Job Order Activity Line No.") THEN BEGIN
              JOActivityCashRequest.TESTFIELD("Job No.", JobOrderActivity."Job No.");
              JOActivityCashRequest.TESTFIELD("Job Task No.", JobOrderActivity."Job Task No.");

              IF Job.GET(JobOrderActivity."Job No.") AND (Job."INTP No." <> "INTP No.") THEN
                ERROR(Err07, FIELDCAPTION("INTP No."), TABLECAPTION, "No.", Job."INTP No.");
            END;
            IF RequireJob THEN BEGIN
              JOActivityCashRequest.TESTFIELD("Job No.");
              JOActivityCashRequest.TESTFIELD("Job Task No.");
              Job.GET(JobOrderActivity."Job No.");
              IF Job."INTP No." <> "INTP No." THEN
                ERROR(Err07, FIELDCAPTION("INTP No."), TABLECAPTION, "No.", Job."INTP No.");
            END;
          END;
        UNTIL JOActivityCashRequest.NEXT = 0;
      END;
    END;

    PROCEDURE TestJOActivityRestriction@30();
    VAR
      ErrJOActivityCashRequestErr@1000 : TextConst 'ENU=The restriction was imposed because the Job Order Cash request is present. You must process the Cash Advance request through the Job Order Cash request.';
    BEGIN
      JOActivityCashRequest.SETRANGE("Job Order No.", "No.");
      IF JOActivityCashRequest.FINDFIRST THEN
        ERROR(ErrJOActivityCashRequestErr);
    END;

    PROCEDURE AssistEdit@6() : Boolean;
    BEGIN
      JobOrderSetup.GET;
      JobOrderSetup.TESTFIELD(JobOrderSetup."Job Order Nos.");
      IF NoSeriesMgt.SelectSeries(JobOrderSetup."Job Order Nos.",xRec."No. Series","No. Series") THEN BEGIN
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    PROCEDURE TestJobOrderLines@7();
    VAR
      Error001@1001 : TextConst 'ENU=Job Order %1 must atleast have a value in Request for Vehicle, Request for Transportation or Request for Airplane Ticket.';
    BEGIN
      JobOrderLine.SETRANGE("Job Order No.", "No.");
      IF JobOrderLine.FINDSET THEN BEGIN
        REPEAT
          CASE JobOrderLine."Line Type" OF
            JobOrderLine."Line Type"::"Car Request":
              BEGIN
                JobOrderLine.TESTFIELD("Date Needed");
                JobOrderLine.TESTFIELD(Destination);
                JobOrderLine.TESTFIELD("Site Name");
                JobOrderLine.TESTFIELD("Time of Departure");
                JobOrderLine.TESTFIELD("Time of Arrival");
              END;
            JobOrderLine."Line Type"::"Public Transpo Request":
              BEGIN
                JobOrderLine.TESTFIELD("Date Needed");
                JobOrderLine.TESTFIELD("Destination From");
                JobOrderLine.TESTFIELD("Destination To");
                JobOrderLine.TESTFIELD("Name of Passengers");
                JobOrderLine.TESTFIELD("Date From");
                JobOrderLine.TESTFIELD("Date To");
              END;
            JobOrderLine."Line Type"::"Airplane Ticket Request":
              BEGIN
                JobOrderLine.TESTFIELD("Date Needed");
                JobOrderLine.TESTFIELD("First Name");
                JobOrderLine.TESTFIELD("Middle Name");
                JobOrderLine.TESTFIELD("Last Name");
                JobOrderLine.TESTFIELD(Birthdate);
                JobOrderLine.TESTFIELD(Destination);
                JobOrderLine.TESTFIELD("Date From");
                JobOrderLine.TESTFIELD("Date To");
              END;
          END;
        UNTIL JobOrderLine.NEXT = 0;
      END ELSE BEGIN
        ERROR(Error001, "No.");
      END;
    END;

    PROCEDURE TestAdminRights@8();
    BEGIN
      IF (UserSetup.GET(USERID) AND (UserSetup."JO Admin" = FALSE)) OR NOT UserSetup.GET(USERID) THEN
        TESTFIELD(Status, Status::Open);
    END;

    PROCEDURE GetGroundManagerName@10() : Text;
    VAR
      Res@1000 : Record 156;
    BEGIN
      IF Res.GET("Ground Manager No.") THEN
        EXIT(Res.Name + Res."Name 2");

      EXIT('');
    END;

    PROCEDURE GetProjectManagerName@12() : Text;
    VAR
      Res@1000 : Record 156;
    BEGIN
      IF Res.GET("Project Manager No.") THEN
        EXIT(Res.Name + Res."Name 2");

      EXIT('');
    END;

    LOCAL PROCEDURE GetStartDateOfActivity@18() : Date;
    VAR
      JobOrderActivity@1000 : Record 50026;
    BEGIN
      JobOrderActivity.SETCURRENTKEY("Date From");
      JobOrderActivity.SETASCENDING("Date From", TRUE);
      JobOrderActivity.SETRANGE("Job Order No.", "No.");
      JobOrderActivity.SETFILTER("Date From", '<>''''');
      IF JobOrderActivity.FINDFIRST THEN
        EXIT(JobOrderActivity."Date From");
      EXIT(0D);
    END;

    LOCAL PROCEDURE GetLastDateOfActivity@25() : Date;
    VAR
      JobOrderActivity@1000 : Record 50026;
    BEGIN
      JobOrderActivity.SETCURRENTKEY("Date To");
      JobOrderActivity.SETASCENDING("Date To", TRUE);
      JobOrderActivity.SETRANGE("Job Order No.", "No.");
      JobOrderActivity.SETFILTER("Date To", '<>''''');
      IF JobOrderActivity.FINDLAST THEN
        EXIT(JobOrderActivity."Date To");
      EXIT(0D);
    END;

    LOCAL PROCEDURE GetActivityDetails@27() : Text[50];
    VAR
      JobOrderActivity@1000 : Record 50026;
    BEGIN
      IF Remarks <> '' THEN
        EXIT(STRSUBSTNO('%1...', COPYSTR(Remarks, 1,47)));

      JobOrderActivity.SETRANGE("Job Order No.", "No.");
      JobOrderActivity.FINDFIRST;
      EXIT(JobOrderActivity."Type of Activity");
    END;

    [Integration]
    PROCEDURE OnJobOrderNewNote@28(VAR JobOrder@1000 : Record 50012);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnJobOrderNewLink@21(VAR JobOrder@1000 : Record 50012);
    BEGIN
    END;

    LOCAL PROCEDURE ResetFields@11();
    BEGIN
      // Deprecated
      {
      VALIDATE(Meeting, FALSE);
      VALIDATE("Product Presentation", FALSE);
      VALIDATE("Trial/POC", FALSE);
      VALIDATE("Site Survey", FALSE);
      VALIDATE(Permitting, FALSE);
      VALIDATE("Installation and Commissioning", FALSE);
      VALIDATE(Testing, FALSE);
      VALIDATE("On-Site Audit", FALSE);
      VALIDATE("Preliminary Acceptance", FALSE);
      VALIDATE("Final Acceptance", FALSE);
      VALIDATE(Rectification, FALSE);
      VALIDATE(Troubleshooting, FALSE);
      VALIDATE(Others, FALSE);
      VALIDATE("Special Project of CEO", FALSE);
      }
    END;

    LOCAL PROCEDURE SetActivity@14();
    BEGIN
      // Deprecated
      {
      CLEAR(Activity);
      IF Meeting THEN
        Activity += ', ' + FIELDCAPTION(Meeting);
      IF "Product Presentation" THEN
        Activity += ', ' + FIELDCAPTION("Product Presentation");
      IF "Trial/POC" THEN
        Activity += ', ' + FIELDCAPTION("Trial/POC");
      IF "Site Survey" THEN
        Activity += ', ' + FIELDCAPTION("Site Survey");
      IF Permitting THEN
        Activity += ', ' + FIELDCAPTION(Permitting);
      IF "Installation and Commissioning" THEN
        Activity += ', ' + FIELDCAPTION("Installation and Commissioning");
      IF Testing THEN
        Activity += ', ' + FIELDCAPTION(Testing);
      IF "On-Site Audit" THEN
        Activity += ', ' + FIELDCAPTION("On-Site Audit");
      IF "Preliminary Acceptance" THEN
        Activity += ', ' + FIELDCAPTION("Preliminary Acceptance");
      IF "Final Acceptance" THEN
        Activity += ', ' + FIELDCAPTION("Final Acceptance");
      IF Rectification THEN
        Activity += ', ' + FIELDCAPTION(Rectification);
      IF Troubleshooting THEN
        Activity += ', ' + FIELDCAPTION(Troubleshooting);
      IF "Special Project of CEO" THEN
        Activity += ', ' + FIELDCAPTION("Special Project of CEO");

      Activity := COPYSTR(Activity, 3, STRLEN(Activity));
      }
    END;

    PROCEDURE SetNoVisibility@19() : Boolean;
    VAR
      NoSeries@1000 : Record 308;
    BEGIN
      JobOrderSetup.GET;
      IF NoSeries.GET(JobOrderSetup."Job Order Nos.")THEN
        EXIT(NoSeries."Manual Nos.")
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE SetAdminFieldVisibility@24() : Boolean;
    BEGIN
      IF UserSetup.GET(USERID) AND UserSetup."JO Admin" THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CreateCashAdvanceFromJOActivityCashRequest@16(VAR JobOrder@1000 : Record 50012);
    VAR
      PurchInvHeader@1006 : Record 122;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      ErrExistingCARequest@1003 : TextConst 'ENU=You''re not allowed to process multiple Cash Advance request. %1 is already linked to %2 %3.';
      JobOrderActivity@1008 : Record 50026;
      TempJobOrderActivity@1007 : TEMPORARY Record 50026;
      JOActivityCashRequest@1004 : Record 50028;
      LineNos@1005 : Integer;
    BEGIN
      // TODO default dimension for non project related transaction
      WITH JobOrder DO BEGIN
        JOActivityCashRequest.SETRANGE("Job Order No.", "No.");
        IF NOT JOActivityCashRequest.FINDSET THEN
          EXIT;

        TESTFIELD(Status, Status::Released);
        // Check if there's a related cash advance request
        PurchaseHeader.SETCURRENTKEY("Document Type", "Request Type", "Job Order No.");
        PurchaseHeader.SETRANGE("Document Type", PurchaseHeader."Document Type"::Invoice);
        PurchaseHeader.SETRANGE( "Request Type", PurchaseHeader."Request Type"::"Cash Advance");
        PurchaseHeader.SETRANGE("Job Order No.", "No.");
        IF PurchaseHeader.FINDFIRST THEN
          ERROR(ErrExistingCARequest, FORMAT(JobOrder.RECORDID), PurchaseHeader."Request Type"::"Cash Advance",
            PurchaseHeader."No.");

        // check if there's a related posted cash advance request
        PurchInvHeader.SETCURRENTKEY("Request Type", "Job Order No.");
        PurchInvHeader.SETRANGE( "Request Type", PurchaseHeader."Request Type"::"Cash Advance");
        PurchInvHeader.SETRANGE("Job Order No.", "No.");
        IF PurchInvHeader.FINDFIRST THEN
          ERROR(ErrExistingCARequest, FORMAT(JobOrder.RECORDID), PurchInvHeader."Request Type"::"Cash Advance",
            PurchInvHeader."No.");

        // Check the per site activity
        TempJobOrderActivity.DELETEALL;
        JobOrderActivity.SETRANGE("Job Order No.", "No.");
        IF JobOrderActivity.FINDSET THEN BEGIN
          REPEAT
            TempJobOrderActivity.RESET;
            TempJobOrderActivity.SETRANGE("Site Code", JobOrderActivity."Site Code");
            TempJobOrderActivity.SETRANGE(City, JobOrderActivity.City);
            TempJobOrderActivity.SETRANGE("Country/Region Code", JobOrderActivity."Country/Region Code");
            TempJobOrderActivity.SETRANGE("Job Order No.", "No.");

            JOActivityCashRequest.RESET;
            JOActivityCashRequest.SETRANGE("Job Order Activity Line No.", JobOrderActivity."Line No.");
            JOActivityCashRequest.SETRANGE("Job Order No.", "No.");

            // Check if there's Job Order Activity and JO Activity Cash Request
            IF NOT TempJobOrderActivity.FINDFIRST AND JOActivityCashRequest.FINDFIRST THEN BEGIN
              TempJobOrderActivity.INIT;
              TempJobOrderActivity := JobOrderActivity;
              TempJobOrderActivity.INSERT;
            END;
          UNTIL JobOrderActivity.NEXT = 0;
        END;

        TempJobOrderActivity.RESET;
        IF TempJobOrderActivity.FINDSET THEN BEGIN
          REPEAT
          // Create Cash Advance Header
          CLEAR(PurchaseHeader);
          PurchaseHeader.INIT;
          PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Invoice;
          PurchaseHeader."Request Type" := PurchaseHeader."Request Type"::"Cash Advance";
          PurchaseHeader."Job Type" := "Job Type" + 1; // add +1 for index arrangement of Job Type in Purchase Header
          PurchaseHeader.INSERT(TRUE);
          PurchaseHeader.SetHideValidationDialog(TRUE); // hide the validation message for changing the vendor details
          PurchaseHeader.VALIDATE("Buy-from Vendor No.", "Employee No.");
          PurchaseHeader.VALIDATE("Ground Manager No.", "Ground Manager No.");
          PurchaseHeader.VALIDATE("Project Manager No.", "Project Manager No.");
          IF STRLEN(Remarks) > 47 THEN
            PurchaseHeader.Purpose := STRSUBSTNO('%1...', COPYSTR(Remarks, 1, 47))
          ELSE
            PurchaseHeader.Purpose := Remarks;
          PurchaseHeader."Job Order No." := "No.";
          PurchaseHeader."Date of Activity From" := GetStartDateOfActivity;
          PurchaseHeader."Date of Activity To" := GetLastDateOfActivity;
          PurchaseHeader."Created By User ID" := "Created By User ID";
          PurchaseHeader."NOC In-Charge No." := "NOC In-Charge No.";
          PurchaseHeader."Technical In-Charge" := "Technical In-Charge No.";
          PurchaseHeader."Request for Exception No." :=  "Request for Exception No.";
          PurchaseHeader."Responsibility Center" := "Responsibility Center";

          // Set the site details
          PurchaseHeader."Buy-from Post Code" := TempJobOrderActivity."Site Code";
          PurchaseHeader."Buy-from City" := TempJobOrderActivity.City;
          PurchaseHeader.Purpose := GetActivityDetails;
          PurchaseHeader."Buy-from Country/Region Code" := TempJobOrderActivity."Country/Region Code";
          PurchaseHeader.VALIDATE("INTP No.", "INTP No.");
          PurchaseHeader.VALIDATE("Currency Code", "Currency Code");
          PurchaseHeader."Incoming Document Entry No." := "Incoming Document Entry No.";
          PurchaseHeader.MODIFY(TRUE);

          // Look for all Job Order Activity
          JobOrderActivity.RESET;
          JobOrderActivity.SETRANGE("Job Order No.", "No.");
          JobOrderActivity.SETRANGE("Site Code", TempJobOrderActivity."Site Code");
          JobOrderActivity.SETRANGE(City, TempJobOrderActivity.City);
          JobOrderActivity.SETRANGE("Country/Region Code", TempJobOrderActivity."Country/Region Code");
          LineNos := 0;
          IF JobOrderActivity.FINDSET THEN BEGIN
            REPEAT
              // Look for all JO Activity Cash Advance Request
              JOActivityCashRequest.RESET;
              JOActivityCashRequest.SETRANGE("Job Order No.", "No.");
              JOActivityCashRequest.SETRANGE("Job Order Activity Line No.", JobOrderActivity."Line No.");
              IF JOActivityCashRequest.FINDSET THEN BEGIN
                REPEAT
                  LineNos += 10000;
                  PurchaseLine.INIT;
                  PurchaseLine."Document Type" := PurchaseHeader."Document Type";
                  PurchaseLine."Document No." := PurchaseHeader."No.";
                  PurchaseLine."Line No." := LineNos;
                  PurchaseLine.VALIDATE(Type, JOActivityCashRequest.Type);
                  PurchaseLine.VALIDATE("No.", JOActivityCashRequest."No.");
                  PurchaseLine.VALIDATE(Description, JOActivityCashRequest.Description);
                  PurchaseLine.VALIDATE("Unit of Measure Code", JOActivityCashRequest."Unit of Measure Code");
                  PurchaseLine.VALIDATE(Quantity, JOActivityCashRequest.Quantity);
                  PurchaseLine.VALIDATE("Direct Unit Cost", JOActivityCashRequest."Unit Cost");
                  PurchaseLine.VALIDATE("INTP No.", "INTP No.");
                  PurchaseLine."Request Type" := PurchaseHeader."Request Type";
                  // Jobs Linking
                  PurchaseLine.VALIDATE("Job No.", JOActivityCashRequest."Job No.");
                  PurchaseLine.VALIDATE("Job Task No.", JOActivityCashRequest."Job Task No.");
                  PurchaseLine.VALIDATE("Job Planning Line No.", JOActivityCashRequest."Job Planning Line No.");
                  PurchaseLine.INSERT(TRUE);
                UNTIL JOActivityCashRequest.NEXT = 0;
              END;
            UNTIL JobOrderActivity.NEXT = 0;
          END;

          // Set the status of Cash Advance to Released
          PurchaseHeader.Status := PurchaseHeader.Status::Released;
          PurchaseHeader.MODIFY(TRUE);
          UNTIL TempJobOrderActivity.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE IsAdmin@22() : Boolean;
    BEGIN
      IF UserSetup.GET(USERID) THEN
        EXIT(UserSetup."JO Admin");

      EXIT(FALSE);
    END;

    PROCEDURE DeleteCashAdvanceDocument@45();
    VAR
      PurchaseHeader@1000 : Record 38;
      DeleteCADocMsg@1001 : TextConst 'ENU=Do you want to delete the related Cash Advance request?';
    BEGIN
      // This code is applied to Codeunit 50551 Release Doc. Integration Event
      PurchaseHeader.SETRANGE("Document Type", PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.SETRANGE("Request Type", PurchaseHeader."Request Type"::"Cash Advance");
      PurchaseHeader.SETRANGE("Job Order No.", "No.");
      IF PurchaseHeader.FINDSET THEN BEGIN
        IF NOT CONFIRM(DeleteCADocMsg, FALSE) THEN
          ERROR('');
        PurchaseHeader.DELETEALL(TRUE);
      END;
    END;

    PROCEDURE EnableCashAdvance@15() : Boolean;
    BEGIN
      JobOrderSetup.GET;
      EXIT(JobOrderSetup."Enable Cash Advance");
    END;

    LOCAL PROCEDURE JobRequired@38() : Boolean;
    VAR
      InternalNoticetoProceed@1000 : Record 50040;
    BEGIN
      IF InternalNoticetoProceed.GET("INTP No.") THEN
        EXIT(InternalNoticetoProceed."Require Job in Purch. Docs.");

      EXIT(FALSE);
    END;

    BEGIN
    {
        !! Documentation Table 50012 Job Order

          1:26 PM Tuesday, July 30, 2024
            Adjust InitRecord function, removed validate employee no.
            Adjust TestJobOrderDetails function, activity is not required if job type is not equal to others.

          1:13 PM Friday, August 2, 2024
            Remove the Assigned User ID and Approver User ID fields.
            Add a function to check the user setup of the user. TestUserSetup.

          2:53 PM Wednesday, August 7, 2024
            Adjust TestJobOrderDetails function, set type of request when Job Type is equal to Service Engineering

          5:55 PM Wednesday, March 19, 2025
            Add New Fields (NOC In-Charge No., Post Code, City, Country, Customer Deposit (Boolean), Technical In-Charge)

          5:48PM Friday, March 21, 2025
            Create Map from JO - Cash Advance(NOC In-Charge No. and Technical In-Charge)

          11:50AM Monday, March 24, 2025
            Create Map From JO - Cash Advance(Request for Exception No., Post Code, City, Country/Region Code)
            Add a function to check if the user is administrator of Job Order
            Add reference for person involve on the project. ex. Project Manager
            Set the Request for Exception as mandatory when the INTP is equal to Notice to Proceed

          3:17 PM Wednesday, March 26, 2025
            Separate the setup of Job Order

          10:51 AM Friday, April 4, 2025
            Add delete function for Job Order Activity and JO Activity Cash Request

          3:55 PM Monday, April 7, 2025
            Additional Filter implemented to Customer Deposit Required. Isolate the filter to Sales Invoices Only
            Auto populate Project Category upon selecting the INTP No.
    }
    END.
  }
}

