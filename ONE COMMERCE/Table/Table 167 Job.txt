OBJECT Table 167 Job
{
  OBJECT-PROPERTIES
  {
    Date=06/26/18;
    Time=12:24:14 AM;
    Modified=Yes;
    Version List=NAVW19.00.00.49146,NAVOC1.00.02.33;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Description;
    OnInsert=BEGIN
               JobsSetup.GET;

               IF "No." = '' THEN BEGIN
                 JobsSetup.TESTFIELD("Job Nos.");
                 NoSeriesMgt.InitSeries(JobsSetup."Job Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               IF GETFILTER("Bill-to Customer No.") <> '' THEN
                 IF GETRANGEMIN("Bill-to Customer No.") = GETRANGEMAX("Bill-to Customer No.") THEN
                   VALIDATE("Bill-to Customer No.",GETRANGEMIN("Bill-to Customer No."));

               IF NOT "Apply Usage Link" THEN
                 VALIDATE("Apply Usage Link",JobsSetup."Apply Usage Link by Default");
               IF "WIP Method" = '' THEN
                 VALIDATE("WIP Method",JobsSetup."Default WIP Method");
               // PHP Start of Customization - Disable the auto fillup of Job Posting Setup to automatically generate the fixed cost. TESTFIELD the Job Posting Setup oninsert in Job Task
               // IF "Job Posting Group" = '' THEN
               //  VALIDATE("Job Posting Group",JobsSetup."Default Job Posting Group");
               // PHP End
               VALIDATE("WIP Posting Method",JobsSetup."Default WIP Posting Method");

               DimMgt.UpdateDefaultDim(
                 DATABASE::Job,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
               InitWIPFields;

               "Creation Date" := TODAY;
               "Last Date Modified" := "Creation Date";
               // PHP Start
               SetupJobTaskNoSeries;
               // PHP End
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
             END;

    OnDelete=VAR
               CommentLine@1004 : Record 97;
               JobTask@1000 : Record 1001;
               JobResPrice@1001 : Record 1012;
               JobItemPrice@1002 : Record 1013;
               JobGLAccPrice@1003 : Record 1014;
             BEGIN
               MoveEntries.MoveJobEntries(Rec);

               JobTask.SETCURRENTKEY("Job No.");
               JobTask.SETRANGE("Job No.","No.");
               JobTask.DELETEALL(TRUE);

               JobResPrice.SETRANGE("Job No.","No.");
               JobResPrice.DELETEALL;

               JobItemPrice.SETRANGE("Job No.","No.");
               JobItemPrice.DELETEALL;

               JobGLAccPrice.SETRANGE("Job No.","No.");
               JobGLAccPrice.DELETEALL;

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Job);
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               DimMgt.DeleteDefaultDim(DATABASE::Job,"No.");
             END;

    OnRename=BEGIN
               UpdateJobNoInReservationEntries;
               "Last Date Modified" := TODAY;
             END;

    CaptionML=ENU=Job;
    LookupPageID=Page89;
    DrillDownPageID=Page89;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  JobsSetup.GET;
                                                                  NoSeriesMgt.TestManual(JobsSetup."Job Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   AltSearchField=Search Description;
                                                   CaptionML=ENU=No. }
    { 2   ;   ;Search Description  ;Code50        ;CaptionML=ENU=Search Description }
    { 3   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Description" = UPPERCASE(xRec.Description)) OR ("Search Description" = '') THEN
                                                                  "Search Description" := Description;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 4   ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 5   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                // PHP Start
                                                                IF "INTP No." <> '' THEN BEGIN
                                                                  INTP.GET("INTP No.");
                                                                  TESTFIELD("Bill-to Customer No.", INTP."Customer No.");
                                                                END;
                                                                // PHP End

                                                                {
                                                                **** PHP Start of orginal code
                                                                IF ("Bill-to Customer No." = '') OR ("Bill-to Customer No." <> xRec."Bill-to Customer No.") THEN
                                                                  IF JobLedgEntryExist OR JobPlanningLineExist THEN
                                                                    ERROR(Text000,FIELDCAPTION("Bill-to Customer No."),TABLECAPTION);
                                                                UpdateCust;
                                                                **** PHP End of orginal code
                                                                }

                                                                // PHP Start
                                                                // Allow to change the bill to customer details if No Sales Entry in the Job Ledger Entry
                                                                IF ("Bill-to Customer No." = '') OR ("Bill-to Customer No." <> xRec."Bill-to Customer No.") THEN
                                                                  IF JobLedgEntryEntryTypeSsaleExist THEN
                                                                    ERROR(Text000,FIELDCAPTION("Bill-to Customer No."),TABLECAPTION);
                                                                UpdateCust;
                                                                // PHP End
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer No. }
    { 12  ;   ;Creation Date       ;Date          ;CaptionML=ENU=Creation Date;
                                                   Editable=No }
    { 13  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                CheckDate;
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 14  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                CheckDate;
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 19  ;   ;Status              ;Option        ;InitValue=Planning;
                                                   OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF xRec.Status <> Status THEN BEGIN
                                                                  IF Status = Status::Completed THEN
                                                                    VALIDATE(Complete,TRUE);
                                                                  IF xRec.Status = xRec.Status::Completed THEN BEGIN
                                                                    IF DIALOG.CONFIRM(Text004) THEN
                                                                      VALIDATE(Complete,FALSE)
                                                                    ELSE
                                                                      Status := xRec.Status;
                                                                  END;
                                                                  JobPlanningLine.SETCURRENTKEY("Job No.");
                                                                  JobPlanningLine.SETRANGE("Job No.","No.");
                                                                  JobPlanningLine.MODIFYALL(Status,Status);
                                                                  MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Planning,Quote,Order,Completed;
                                                   OptionString=Planning,Quote,Order,Completed }
    { 20  ;   ;Person Responsible No.;Code20      ;TableRelation=Resource WHERE (Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                // TESTFIELD("Job Status", "Job Status"::"0"); // PHP Start
                                                              END;

                                                   CaptionML=ENU=Person Responsible No. }
    { 21  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                                // TESTFIELD("Job Status", "Job Status"::"0"); // PHP Start
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 22  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 23  ;   ;Job Posting Group   ;Code10        ;TableRelation="Job Posting Group";
                                                   OnValidate=BEGIN
                                                                // PHP Start
                                                                IF Status IN [Status::Completed, Status::Order] THEN
                                                                  FIELDERROR(Status);
                                                                CreateJobTaskLineForFixedCost;
                                                                // PHP End
                                                              END;

                                                   CaptionML=ENU=Job Posting Group }
    { 24  ;   ;Blocked             ;Option        ;CaptionML=ENU=Blocked;
                                                   OptionCaptionML=ENU=" ,Posting,All,Editing";
                                                   OptionString=[ ,Posting,All,Editing] }
    { 29  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 30  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Job),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 31  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=ENU=Customer Disc. Group }
    { 32  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=ENU=Customer Price Group }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 49  ;   ;Scheduled Res. Qty. ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Quantity (Base)" WHERE (Job No.=FIELD(No.),
                                                                                                                Schedule Line=CONST(Yes),
                                                                                                                Type=CONST(Resource),
                                                                                                                No.=FIELD(Resource Filter),
                                                                                                                Planning Date=FIELD(Planning Date Filter)));
                                                   CaptionML=ENU=Scheduled Res. Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 50  ;   ;Resource Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Resource;
                                                   CaptionML=ENU=Resource Filter }
    { 51  ;   ;Posting Date Filter ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Posting Date Filter }
    { 55  ;   ;Resource Gr. Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Resource Group";
                                                   CaptionML=ENU=Resource Gr. Filter }
    { 56  ;   ;Scheduled Res. Gr. Qty.;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Quantity (Base)" WHERE (Job No.=FIELD(No.),
                                                                                                                Schedule Line=CONST(Yes),
                                                                                                                Type=CONST(Resource),
                                                                                                                Resource Group No.=FIELD(Resource Gr. Filter),
                                                                                                                Planning Date=FIELD(Planning Date Filter)));
                                                   CaptionML=ENU=Scheduled Res. Gr. Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 57  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 58  ;   ;Bill-to Name        ;Text50        ;CaptionML=ENU=Bill-to Name }
    { 59  ;   ;Bill-to Address     ;Text50        ;CaptionML=ENU=Bill-to Address }
    { 60  ;   ;Bill-to Address 2   ;Text50        ;CaptionML=ENU=Bill-to Address 2 }
    { 61  ;   ;Bill-to City        ;Text30        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Bill-to City }
    { 63  ;   ;Bill-to County      ;Text30        ;CaptionML=ENU=Bill-to County }
    { 64  ;   ;Bill-to Post Code   ;Code20        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Bill-to Post Code }
    { 66  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 67  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Bill-to Country/Region Code;
                                                   Editable=Yes }
    { 68  ;   ;Bill-to Name 2      ;Text50        ;CaptionML=ENU=Bill-to Name 2 }
    { 117 ;   ;Reserve             ;Option        ;AccessByPermission=TableData 27=R;
                                                   CaptionML=ENU=Reserve;
                                                   OptionCaptionML=ENU=Never,Optional,Always;
                                                   OptionString=Never,Optional,Always }
    { 1000;   ;WIP Method          ;Code20        ;TableRelation="Job WIP Method".Code WHERE (Valid=CONST(Yes));
                                                   OnValidate=VAR
                                                                JobTask@1000 : Record 1001;
                                                                JobWIPMethod@1001 : Record 1006;
                                                              BEGIN
                                                                IF "WIP Posting Method" = "WIP Posting Method"::"Per Job Ledger Entry" THEN BEGIN
                                                                  JobWIPMethod.GET("WIP Method");
                                                                  IF NOT JobWIPMethod."WIP Cost" THEN
                                                                    ERROR(Text017,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Cost"));
                                                                  IF NOT JobWIPMethod."WIP Sales" THEN
                                                                    ERROR(Text017,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Sales"));
                                                                END;

                                                                JobTask.SETRANGE("Job No.","No.");
                                                                JobTask.SETRANGE("WIP-Total",JobTask."WIP-Total"::Total);
                                                                IF JobTask.FINDFIRST THEN
                                                                  IF CONFIRM(Text014,TRUE,JobTask.FIELDCAPTION("WIP Method"),JobTask.TABLECAPTION,JobTask."WIP-Total") THEN
                                                                    JobTask.MODIFYALL("WIP Method","WIP Method",TRUE);

                                                              END;

                                                   CaptionML=ENU=WIP Method }
    { 1001;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF "Currency Code" <> xRec."Currency Code" THEN
                                                                  IF NOT JobLedgEntryExist THEN BEGIN
                                                                    CurrencyUpdatePlanningLines;
                                                                    CurrencyUpdatePurchLines;
                                                                  END ELSE
                                                                    ERROR(Text000,FIELDCAPTION("Currency Code"),TABLECAPTION);
                                                                CurrencyCheck;
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 1002;   ;Bill-to Contact No. ;Code20        ;OnValidate=BEGIN
                                                                IF ("Bill-to Contact No." <> xRec."Bill-to Contact No.") AND
                                                                   (xRec."Bill-to Contact No." <> '')
                                                                THEN
                                                                  IF ("Bill-to Contact No." = '') AND ("Bill-to Customer No." = '') THEN BEGIN
                                                                    INIT;
                                                                    "No. Series" := xRec."No. Series";
                                                                    VALIDATE(Description,xRec.Description);
                                                                  END;

                                                                IF ("Bill-to Customer No." <> '') AND ("Bill-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Bill-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text005,Cont."No.",Cont.Name,"Bill-to Customer No.");
                                                                END;
                                                                UpdateBillToCust("Bill-to Contact No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF ("Bill-to Customer No." <> '') AND Cont.GET("Bill-to Contact No.") THEN
                                                                Cont.SETRANGE("Company No.",Cont."Company No.")
                                                              ELSE
                                                                IF Cust.GET("Bill-to Customer No.") THEN BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.");
                                                                END ELSE
                                                                  Cont.SETFILTER("Company No.",'<>''''');

                                                              IF "Bill-to Contact No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Bill-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   AccessByPermission=TableData 5050=R;
                                                   CaptionML=ENU=Bill-to Contact No. }
    { 1003;   ;Bill-to Contact     ;Text50        ;CaptionML=ENU=Bill-to Contact }
    { 1004;   ;Planning Date Filter;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Planning Date Filter }
    { 1005;   ;Total WIP Cost Amount;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                              Job Complete=CONST(No),
                                                                                                              Type=FILTER(Accrued Costs|Applied Costs|Recognized Costs)));
                                                   CaptionML=ENU=Total WIP Cost Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1006;   ;Total WIP Cost G/L Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reversed=CONST(No),
                                                                                                                  Job Complete=CONST(No),
                                                                                                                  Type=FILTER(Accrued Costs|Applied Costs|Recognized Costs)));
                                                   CaptionML=ENU=Total WIP Cost G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1007;   ;WIP Entries Exist   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP Entry" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=ENU=WIP Entries Exist }
    { 1008;   ;WIP Posting Date    ;Date          ;CaptionML=ENU=WIP Posting Date;
                                                   Editable=No }
    { 1009;   ;WIP G/L Posting Date;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min("Job WIP G/L Entry"."WIP Posting Date" WHERE (Reversed=CONST(No),
                                                                                                                 Job No.=FIELD(No.)));
                                                   CaptionML=ENU=WIP G/L Posting Date;
                                                   Editable=No }
    { 1011;   ;Invoice Currency Code;Code10       ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                CurrencyCheck;
                                                              END;

                                                   CaptionML=ENU=Invoice Currency Code }
    { 1012;   ;Exch. Calculation (Cost);Option    ;CaptionML=ENU=Exch. Calculation (Cost);
                                                   OptionCaptionML=ENU=Fixed FCY,Fixed LCY;
                                                   OptionString=Fixed FCY,Fixed LCY }
    { 1013;   ;Exch. Calculation (Price);Option   ;CaptionML=ENU=Exch. Calculation (Price);
                                                   OptionCaptionML=ENU=Fixed FCY,Fixed LCY;
                                                   OptionString=Fixed FCY,Fixed LCY }
    { 1014;   ;Allow Schedule/Contract Lines;Boolean;
                                                   CaptionML=ENU=Allow Schedule/Contract Lines }
    { 1015;   ;Complete            ;Boolean       ;OnValidate=BEGIN
                                                                IF Complete <> xRec.Complete THEN
                                                                  ChangeJobCompletionStatus;
                                                              END;

                                                   CaptionML=ENU=Complete }
    { 1017;   ;Recog. Sales Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                              Type=FILTER(Recognized Sales)));
                                                   CaptionML=ENU=Recog. Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1018;   ;Recog. Sales G/L Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reversed=CONST(No),
                                                                                                                  Type=FILTER(Recognized Sales)));
                                                   CaptionML=ENU=Recog. Sales G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1019;   ;Recog. Costs Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                             Type=FILTER(Recognized Costs)));
                                                   CaptionML=ENU=Recog. Costs Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1020;   ;Recog. Costs G/L Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                 Reversed=CONST(No),
                                                                                                                 Type=FILTER(Recognized Costs)));
                                                   CaptionML=ENU=Recog. Costs G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1021;   ;Total WIP Sales Amount;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                             Job Complete=CONST(No),
                                                                                                             Type=FILTER(Accrued Sales|Applied Sales|Recognized Sales)));
                                                   CaptionML=ENU=Total WIP Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1022;   ;Total WIP Sales G/L Amount;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                 Reversed=CONST(No),
                                                                                                                 Job Complete=CONST(No),
                                                                                                                 Type=FILTER(Accrued Sales|Applied Sales|Recognized Sales)));
                                                   CaptionML=ENU=Total WIP Sales G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1023;   ;WIP Completion Calculated;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP Entry" WHERE (Job No.=FIELD(No.),
                                                                                            Job Complete=CONST(Yes)));
                                                   CaptionML=ENU=WIP Completion Calculated }
    { 1024;   ;Next Invoice Date   ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min("Job Planning Line"."Planning Date" WHERE (Job No.=FIELD(No.),
                                                                                                              Contract Line=CONST(Yes),
                                                                                                              Qty. to Invoice=FILTER(<>0)));
                                                   CaptionML=ENU=Next Invoice Date }
    { 1025;   ;Apply Usage Link    ;Boolean       ;InitValue=Yes;
                                                   OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                                JobLedgerEntry@1001 : Record 169;
                                                                JobUsageLink@1002 : Record 1020;
                                                              BEGIN
                                                                IF "Apply Usage Link" THEN BEGIN
                                                                  JobLedgerEntry.SETCURRENTKEY("Job No.");
                                                                  JobLedgerEntry.SETRANGE("Job No.","No.");
                                                                  JobLedgerEntry.SETRANGE("Entry Type",JobLedgerEntry."Entry Type"::Usage);
                                                                  IF JobLedgerEntry.FINDFIRST THEN BEGIN
                                                                    JobUsageLink.SETRANGE("Entry No.",JobLedgerEntry."Entry No.");
                                                                    IF NOT JobUsageLink.FINDFIRST THEN
                                                                      ERROR(Text013,TABLECAPTION);
                                                                  END;

                                                                  JobPlanningLine.SETCURRENTKEY("Job No.");
                                                                  JobPlanningLine.SETRANGE("Job No.","No.");
                                                                  JobPlanningLine.SETRANGE("Schedule Line",TRUE);
                                                                  IF JobPlanningLine.FINDSET THEN
                                                                    REPEAT
                                                                      JobPlanningLine.VALIDATE("Usage Link",TRUE);
                                                                      IF JobPlanningLine."Planning Date" = 0D THEN
                                                                        JobPlanningLine.VALIDATE("Planning Date",WORKDATE);
                                                                      JobPlanningLine.MODIFY(TRUE);
                                                                    UNTIL JobPlanningLine.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Apply Usage Link }
    { 1026;   ;WIP Warnings        ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP Warning" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=ENU=WIP Warnings;
                                                   Editable=No }
    { 1027;   ;WIP Posting Method  ;Option        ;OnValidate=VAR
                                                                JobLedgerEntry@1000 : Record 169;
                                                                JobWIPEntry@1001 : Record 1004;
                                                                JobWIPMethod@1002 : Record 1006;
                                                              BEGIN
                                                                IF xRec."WIP Posting Method" = "WIP Posting Method"::"Per Job Ledger Entry" THEN BEGIN
                                                                  JobLedgerEntry.SETRANGE("Job No.","No.");
                                                                  JobLedgerEntry.SETFILTER("Amt. Posted to G/L",'<>%1',0);
                                                                  IF JobLedgerEntry.FINDFIRST THEN
                                                                    ERROR(Text015,FIELDCAPTION("WIP Posting Method"),xRec."WIP Posting Method");
                                                                END;

                                                                JobWIPEntry.SETRANGE("Job No.","No.");
                                                                IF JobWIPEntry.FINDFIRST THEN
                                                                  ERROR(Text016,FIELDCAPTION("WIP Posting Method"));

                                                                IF "WIP Posting Method" = "WIP Posting Method"::"Per Job Ledger Entry" THEN BEGIN
                                                                  JobWIPMethod.GET("WIP Method");
                                                                  IF NOT JobWIPMethod."WIP Cost" THEN
                                                                    ERROR(Text017,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Cost"));
                                                                  IF NOT JobWIPMethod."WIP Sales" THEN
                                                                    ERROR(Text017,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Sales"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=WIP Posting Method;
                                                   OptionCaptionML=ENU=Per Job,Per Job Ledger Entry;
                                                   OptionString=Per Job,Per Job Ledger Entry }
    { 1028;   ;Applied Costs G/L Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reverse=CONST(No),
                                                                                                                  Job Complete=CONST(No),
                                                                                                                  Type=FILTER(Applied Costs)));
                                                   CaptionML=ENU=Applied Costs G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1029;   ;Applied Sales G/L Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reverse=CONST(No),
                                                                                                                  Job Complete=CONST(No),
                                                                                                                  Type=FILTER(Applied Sales)));
                                                   CaptionML=ENU=Applied Sales G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1030;   ;Calc. Recog. Sales Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Sales Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=ENU=Calc. Recog. Sales Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1031;   ;Calc. Recog. Costs Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Costs Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=ENU=Calc. Recog. Costs Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1032;   ;Calc. Recog. Sales G/L Amount;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Sales G/L Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=ENU=Calc. Recog. Sales G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1033;   ;Calc. Recog. Costs G/L Amount;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Costs G/L Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=ENU=Calc. Recog. Costs G/L Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1034;   ;WIP Completion Posted;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP G/L Entry" WHERE (Job No.=FIELD(No.),
                                                                                                Job Complete=CONST(Yes)));
                                                   CaptionML=ENU=WIP Completion Posted }
    { 50000;  ;RFQ No.             ;Code20        ;TableRelation="Request For Quotation" WHERE (Status=FILTER(<>Open));
                                                   Description=X8OC0.01 }
    { 50020;  ;Cost Analyst No.    ;Code20        ;TableRelation=Resource WHERE (Job Type=CONST(Job Analyst));
                                                   OnValidate=VAR
                                                                Employee@1000 : Record 5200;
                                                              BEGIN
                                                                IF "Cost Analyst No." <> '' THEN BEGIN
                                                                  Resource.GET("Cost Analyst No.");
                                                                  Resource.TESTFIELD("Time Sheet Owner User ID");
                                                                  Resource.TESTFIELD("Time Sheet Approver User ID");
                                                                END;
                                                              END;

                                                   Description=X8OC0.01 }
    { 50021;  ;Cost Analyst        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Resource.Name WHERE (No.=FIELD(Cost Analyst No.)));
                                                   Editable=No }
    { 50024;  ;Notice to Mobilize No.;Code50       }
    { 50025;  ;P.O No.             ;Code50         }
    { 50027;  ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser }
    { 50028;  ;Technical In-charge No.;Code20     ;TableRelation=Resource }
    { 50030;  ;RTPS No.            ;Code20        ;TableRelation="RTPS Document" WHERE (Status=FILTER(<>Open));
                                                   OnValidate=BEGIN
                                                                IF "RTPS No." <> '' THEN BEGIN
                                                                  RFTS.GET("RTPS No.");
                                                                END ELSE BEGIN
                                                                  CLEAR(RFTS);
                                                                END;

                                                                IF RFTS."Bill of Materials" = TRUE THEN BEGIN
                                                                  "Customer Project Name" := RFTS."Information of Project";
                                                                END ELSE BEGIN
                                                                  "Customer Project Name" := RFTS."Project Description";
                                                                END;
                                                                VALIDATE(Description, RFTS."Project Description");
                                                                VALIDATE("Bill-to Contact No.", RFTS."Contact No.");
                                                                VALIDATE("Salesperson Code", RFTS."Salesperson Code");
                                                                VALIDATE("Technical In-charge No.",RFTS."Technical In-charge");

                                                                IF NOT JobLedgEntryExist AND NOT JobPlanningLineExist THEN
                                                                    VALIDATE("Bill-to Customer No.", RFTS."Customer No.");
                                                              END;
                                                               }
    { 50031;  ;Project Analyst No. ;Code20        ;TableRelation=Resource WHERE (Job Type=CONST(Job Coordinator)) }
    { 50032;  ;P.O Release Date    ;Date           }
    { 50070;  ;WHT Prod. Posting Group;Code10     ;TableRelation="WHT Product Posting Group" }
    { 50100;  ;Customer Project Name;Text250       }
    { 50101;  ;Decimal Place       ;Decimal       ;InitValue=0.01;
                                                   DecimalPlaces=2:5;
                                                   MinValue=0 }
    { 50102;  ;Rounding Type       ;Option        ;OptionCaptionML=ENU=Nearest,Up,Down;
                                                   OptionString=Nearest,Up,Down }
    { 50110;  ;Approval Status     ;Option        ;OptionCaptionML=ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment;
                                                   Editable=No }
    { 50115;  ;INTP No.            ;Code20        ;TableRelation="Internal Notice to Proceed" WHERE (Status=FILTER(<>Cancelled),
                                                                                                     Approval Status=CONST(Released));
                                                   OnValidate=VAR
                                                                INTP@1000 : Record 50040;
                                                              BEGIN
                                                                IF INTP.GET("INTP No.") THEN BEGIN
                                                                  IF INTP."Customer No." <> "Bill-to Customer No." THEN
                                                                    VALIDATE("Bill-to Customer No.", INTP."Customer No.");
                                                                  VALIDATE("Person Responsible No.", INTP."Project Manager No.");
                                                                  VALIDATE("Technical In-charge No.", INTP."Sales Engineer No.");
                                                                  VALIDATE("Salesperson Code", INTP."Salesperson No.");
                                                                  VALIDATE("Cost Analyst No.", INTP."Cost Analyst No.");
                                                                END ELSE BEGIN
                                                                  VALIDATE("Bill-to Customer No.", '');
                                                                  VALIDATE("Person Responsible No.", '');
                                                                  VALIDATE("Technical In-charge No.", '');
                                                                  VALIDATE("Salesperson Code", '');
                                                                  VALIDATE("Cost Analyst No.", '');
                                                                END;

                                                                IF "INTP No." <> '' THEN
                                                                  CreateDefaultDim(DATABASE::"Internal Notice to Proceed", "INTP No.")
                                                                ELSE
                                                                  DeleteDefaultDim;
                                                              END;
                                                               }
    { 50120;  ;Salesperson         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Salesperson Code)));
                                                   Editable=No }
    { 50125;  ;Technical In-charge ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Resource.Name WHERE (No.=FIELD(Technical In-charge No.)));
                                                   Editable=No }
    { 50130;  ;Project Analyst     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Resource.Name WHERE (No.=FIELD(Project Analyst No.)));
                                                   Editable=No }
    { 50135;  ;Person Responsible  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Resource.Name WHERE (No.=FIELD(Person Responsible No.)));
                                                   Editable=No }
    { 50140;  ;Automatic Split Resource Qty.;Boolean;
                                                   OnValidate=BEGIN
                                                                IF "Automatic Split Resource Qty." = FALSE THEN BEGIN
                                                                  CLEAR("Res. Base Qty. to Split");
                                                                  CLEAR("Res. Base Unit of Measure");
                                                                END;
                                                              END;
                                                               }
    { 50145;  ;Res. Base Unit of Measure;Code10   ;TableRelation="Unit of Measure" }
    { 50150;  ;Res. Base Qty. to Split;Decimal    ;MinValue=0 }
    { 50155;  ;Responsibility Center;Code10       ;TableRelation="Responsibility Center" }
    { 50160;  ;Job Task No. Series ;Code10        ;TableRelation="No. Series" }
    { 50165;  ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group" }
    { 50170;  ;Incoming Document Entry No.;Integer }
    { 50175;  ;Job Progress        ;Option        ;OnValidate=BEGIN
                                                                IF "Job Progress" = "Job Progress"::"FAT (100%)" THEN
                                                                  VALIDATE(Status, Status::Completed);

                                                                // IF "Job Progress" IN ["Job Progress"::"Site Survey/Engineering (20%)", "Job Progress"::"Permitting/Ready to Build (40%)", "Job Progress"::"70% Accomplishment (60%)", "Job Progress"::"PAT (80%)"] THEN
                                                                //  VALIDATE(Status, Status::Order);
                                                              END;

                                                   OptionCaptionML=ENU=" ,Site Survey/Engineering (20%),Permitting/Ready to Build (40%),70% Accomplishment (60%),PAT (80%),FAT (100%)";
                                                   OptionString=[ ,Site Survey/Engineering (20%),Permitting/Ready to Build (40%),70% Accomplishment (60%),PAT (80%),FAT (100%)] }
    { 50176;  ;Mark as Copy Only   ;Boolean        }
    { 50190;  ;Usage Res. Qty.     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Ledger Entry"."Quantity (Base)" WHERE (Job No.=FIELD(No.),
                                                                                                               Entry Type=CONST(Usage),
                                                                                                               Type=CONST(Resource),
                                                                                                               No.=FIELD(Resource Filter)));
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 50200;  ;Schedule (Total Cost);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Total Cost (LCY)" WHERE (Job No.=FIELD(No.),
                                                                                                                 Schedule Line=CONST(Yes)));
                                                   CaptionML=ENU=Schedule (Total Cost);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 50210;  ;Schedule (Total Price);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Line Amount (LCY)" WHERE (Job No.=FIELD(No.),
                                                                                                                  Schedule Line=CONST(Yes)));
                                                   CaptionML=ENU=Schedule (Total Price);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 50220;  ;Contract (Total Cost);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Total Cost (LCY)" WHERE (Job No.=FIELD(No.),
                                                                                                                 Contract Line=CONST(Yes)));
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 50230;  ;Contract (Total Price);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Line Amount (LCY)" WHERE (Job No.=FIELD(No.),
                                                                                                                  Contract Line=CONST(Yes)));
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 50240;  ;PLA ID              ;Code20         }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Description                       }
    {    ;Bill-to Customer No.                     }
    {    ;Description                              }
    {    ;Status                                   }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Description,Bill-to Customer No.,Starting Date,Status }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot change %1 because one or more entries are associated with this %2.';
      JobsSetup@1004 : Record 315;
      PostCode@1015 : Record 225;
      Job@1014 : Record 167;
      Cust@1006 : Record 18;
      Cont@1005 : Record 5050;
      User@1031 : Record 2000000120;
      Usersetup@1030 : Record 91;
      RFTS@1029 : Record 50010;
      Resource@1028 : Record 156;
      ContBusinessRelation@1001 : Record 5054;
      JobTask@1032 : Record 1001;
      JobPlanningLine@1033 : Record 1003;
      Item@1034 : Record 27;
      JobPostingSetup@1035 : Record 208;
      INTP@1038 : Record 50040;
      NoSeriesMgt@1010 : Codeunit 396;
      DimMgt@1012 : Codeunit 408;
      Text003@1022 : TextConst 'ENU=You must run the %1 and %2 functions to create and post the completion entries for this job.';
      Text004@1017 : TextConst 'ENU=This will delete any unposted WIP entries for this job and allow you to reverse the completion postings for this job.\\Do you wish to continue?';
      Text005@1019 : TextConst 'ENU=Contact %1 %2 is related to a different company than customer %3.';
      Text006@1018 : TextConst 'ENU=Contact %1 %2 is not related to customer %3.';
      Text007@1009 : TextConst 'ENU=Contact %1 %2 is not related to a customer.';
      Text008@1002 : TextConst 'ENU=%1 %2 must not be blocked with type %3.';
      Text009@1008 : TextConst 'ENU=You must run the %1 function to reverse the completion entries that have already been posted for this job.';
      MoveEntries@1003 : Codeunit 361;
      Text010@1007 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text011@1023 : TextConst 'ENU=%1 must be equal to or earlier than %2.';
      Text012@1011 : TextConst 'ENU=You cannot set %1 to %2, as this %3 has set %4 to %5.';
      Text013@1013 : TextConst 'ENU=A usage link cannot be enabled for the entire %1 because usage without the usage link already has been posted.';
      Text014@1016 : TextConst 'ENU=Do you want to set the %1 on every %2 of type %3?';
      Text015@1020 : TextConst 'ENU=%1 must be %2 because job WIP general ledger entries already were posted with this setting.';
      Text016@1021 : TextConst 'ENU=%1 cannot be modified because the job has associated job WIP entries.';
      Text017@1024 : TextConst 'ENU=The selected %1 requires the %2 to have %3 enabled.';
      Text018@1025 : TextConst 'ENU=%1 is set to %2.';
      Text019@1036 : TextConst 'ENU=This will create additional %1 for calculating the fixed cost.';
      Text020@1037 : TextConst 'ENU=Do you want to recalculate the fixed cost?';
      UpdateJobTaskDimQst@1026 : TextConst 'ENU=You have changed a dimension.\\Do you want to update the lines?';
      DifferentCurrenciesErr@1027 : TextConst 'ENU=You cannot plan and invoice a job in different currencies.';

    PROCEDURE AssistEdit@2(OldJob@1000 : Record 167) : Boolean;
    BEGIN
      WITH Job DO BEGIN
        Job := Rec;
        JobsSetup.GET;
        JobsSetup.TESTFIELD("Job Nos.");
        IF NoSeriesMgt.SelectSeries(JobsSetup."Job Nos.",OldJob."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := Job;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::Job,"No.",FieldNumber,ShortcutDimCode);
      UpdateJobTaskDimension(FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    LOCAL PROCEDURE UpdateBillToCont@27(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1001 : Record 18;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Bill-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Bill-to Customer No.");
          IF ContBusRel.FINDFIRST THEN
            "Bill-to Contact No." := ContBusRel."Contact No.";
        END;
        "Bill-to Contact" := Cust.Contact;
      END;
    END;

    LOCAL PROCEDURE JobLedgEntryExist@5() : Boolean;
    VAR
      JobLedgEntry@1000 : Record 169;
    BEGIN
      CLEAR(JobLedgEntry);
      JobLedgEntry.SETCURRENTKEY("Job No.");
      JobLedgEntry.SETRANGE("Job No.","No.");
      EXIT(JobLedgEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE JobLedgEntryEntryTypeSsaleExist@46() : Boolean;
    VAR
      JobLedgEntry@1000 : Record 169;
    BEGIN
      // PHP Start
      CLEAR(JobLedgEntry);
      JobLedgEntry.SETCURRENTKEY("Job No.");
      JobLedgEntry.SETRANGE("Job No.","No.");
      JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
      EXIT(JobLedgEntry.FINDFIRST);
      // PHP End
    END;

    LOCAL PROCEDURE JobPlanningLineExist@3() : Boolean;
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      JobPlanningLine.INIT;
      JobPlanningLine.SETRANGE("Job No.","No.");
      EXIT(JobPlanningLine.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateBillToCust@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Cust@1004 : Record 18;
      Cont@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Bill-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Bill-to Contact" := Cont.Name
        ELSE
          IF Cust.GET("Bill-to Customer No.") THEN
            "Bill-to Contact" := Cust.Contact
          ELSE
            "Bill-to Contact" := '';
      END ELSE BEGIN
        "Bill-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Bill-to Customer No." = '' THEN
          VALIDATE("Bill-to Customer No.",ContBusinessRelation."No.")
        ELSE
          IF "Bill-to Customer No." <> ContBusinessRelation."No." THEN
            ERROR(Text006,Cont."No.",Cont.Name,"Bill-to Customer No.");
      END ELSE
        ERROR(Text007,Cont."No.",Cont.Name);
    END;

    LOCAL PROCEDURE UpdateCust@4();
    BEGIN
      IF "Bill-to Customer No." <> '' THEN BEGIN
        Cust.GET("Bill-to Customer No.");
        Cust.TESTFIELD("Customer Posting Group");
        Cust.TESTFIELD("Bill-to Customer No.",'');
        IF Cust.Blocked = Cust.Blocked::All THEN
          ERROR(
            Text012,
            FIELDCAPTION("Bill-to Customer No."),
            "Bill-to Customer No.",
            Cust.TABLECAPTION,
            FIELDCAPTION(Blocked),
            Cust.Blocked);
        "Bill-to Name" := Cust.Name;
        "Bill-to Name 2" := Cust."Name 2";
        "Bill-to Address" := Cust.Address;
        "Bill-to Address 2" := Cust."Address 2";
        "Bill-to City" := Cust.City;
        "Bill-to Post Code" := Cust."Post Code";
        "Bill-to Country/Region Code" := Cust."Country/Region Code";
        "Invoice Currency Code" := Cust."Currency Code";
        IF "Invoice Currency Code" <> '' THEN
          IF "Currency Code" <> "Invoice Currency Code" THEN
            "Currency Code" := '';
        "Customer Disc. Group" := Cust."Customer Disc. Group";
        "Customer Price Group" := Cust."Customer Price Group";
        "Language Code" := Cust."Language Code";
        "Bill-to County" := Cust.County;
        Reserve := Cust.Reserve;
        UpdateBillToCont("Bill-to Customer No.");
      END ELSE BEGIN
        "Bill-to Name" := '';
        "Bill-to Name 2" := '';
        "Bill-to Address" := '';
        "Bill-to Address 2" := '';
        "Bill-to City" := '';
        "Bill-to Post Code" := '';
        "Bill-to Country/Region Code" := '';
        "Invoice Currency Code" := '';
        "Customer Disc. Group" := '';
        "Customer Price Group" := '';
        "Language Code" := '';
        "Bill-to County" := '';
        VALIDATE("Bill-to Contact No.",'');
      END;
    END;

    PROCEDURE InitWIPFields@1();
    BEGIN
      "WIP Posting Date" := 0D;
      "WIP G/L Posting Date" := 0D;
    END;

    PROCEDURE TestBlocked@6();
    BEGIN
      IF Blocked = Blocked::" " THEN
        EXIT;
      ERROR(Text008,TABLECAPTION,"No.",Blocked);
    END;

    PROCEDURE CurrencyUpdatePlanningLines@10();
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.","No.");
      IF JobPlanningLine.FIND('-') THEN
        REPEAT
          JobPlanningLine.CALCFIELDS("Qty. Transferred to Invoice");
          IF JobPlanningLine."Qty. Transferred to Invoice" <> 0 THEN
            ERROR(Text000,FIELDCAPTION("Currency Code"),TABLECAPTION);
          JobPlanningLine.VALIDATE("Currency Code","Currency Code");
          JobPlanningLine.VALIDATE("Currency Date");
          JobPlanningLine.MODIFY;
        UNTIL JobPlanningLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CurrencyUpdatePurchLines@17();
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      MODIFY;
      PurchLine.SETRANGE("Job No.","No.");
      IF PurchLine.FINDSET THEN
        REPEAT
          PurchLine.VALIDATE("Job Currency Code","Currency Code");
          PurchLine.VALIDATE("Job Task No.");
          PurchLine.MODIFY;
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ChangeJobCompletionStatus@7();
    VAR
      AllObjwithCaption@1003 : Record 2000000058;
      JobLedgerEntry@1000 : Record 169;
      JobCalcWIP@1001 : Codeunit 1000;
      ReportCaption1@1002 : Text[250];
      ReportCaption2@1004 : Text[250];
      EndingDate@1005 : Date;
    BEGIN
      AllObjwithCaption.GET(AllObjwithCaption."Object Type"::Report,REPORT::"Job Calculate WIP");
      ReportCaption1 := AllObjwithCaption."Object Caption";
      AllObjwithCaption.GET(AllObjwithCaption."Object Type"::Report,REPORT::"Job Post WIP to G/L");
      ReportCaption2 := AllObjwithCaption."Object Caption";

      IF Complete THEN BEGIN
        IF "Ending Date" = 0D THEN
          EndingDate := WORKDATE
        ELSE
          EndingDate := "Ending Date";

        JobLedgerEntry.SETRANGE("Job No.","No.");
        REPEAT
          IF JobLedgerEntry."Posting Date" > EndingDate THEN
            EndingDate := JobLedgerEntry."Posting Date";
        UNTIL JobLedgerEntry.NEXT = 0;

        IF "Ending Date" < EndingDate THEN
          VALIDATE("Ending Date",EndingDate);
        MESSAGE(Text018,FIELDCAPTION("Ending Date"),"Ending Date");

        MESSAGE(Text003,ReportCaption1,ReportCaption2);
      END ELSE BEGIN
        JobCalcWIP.ReOpenJob("No.");
        "WIP Posting Date" := 0D;
        MESSAGE(Text009,ReportCaption2);
      END;
    END;

    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Job,GETPOSITION)
      ELSE
        MESSAGE(Text010);
    END;

    PROCEDURE GetQuantityAvailable@9(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1002 : Code[10];InEntryType@1004 : 'Usage,Sale,Both';Direction@1005 : 'Positive,Negative,Both') QtyBase : Decimal;
    VAR
      JobLedgEntry@1003 : Record 169;
    BEGIN
      CLEAR(JobLedgEntry);
      JobLedgEntry.SETCURRENTKEY("Job No.","Entry Type",Type,"No.");
      JobLedgEntry.SETRANGE("Job No.","No.");
      IF NOT (InEntryType = InEntryType::Both) THEN
        JobLedgEntry.SETRANGE("Entry Type",InEntryType);
      JobLedgEntry.SETRANGE(Type,JobLedgEntry.Type::Item);
      JobLedgEntry.SETRANGE("No.",ItemNo);
      IF JobLedgEntry.FINDSET THEN
        REPEAT
          IF (JobLedgEntry."Location Code" = LocationCode) AND
             (JobLedgEntry."Variant Code" = VariantCode) AND
             ((Direction = Direction::Both) OR
              ((Direction = Direction::Positive) AND (JobLedgEntry."Quantity (Base)" > 0)) OR
              ((Direction = Direction::Negative) AND (JobLedgEntry."Quantity (Base)" < 0)))
          THEN
            QtyBase := QtyBase + JobLedgEntry."Quantity (Base)";

        UNTIL JobLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDate@30();
    BEGIN
      IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN
        ERROR(Text011,FIELDCAPTION("Starting Date"),FIELDCAPTION("Ending Date"));
    END;

    PROCEDURE CalcAccWIPCostsAmount@15() : Decimal;
    BEGIN
      EXIT("Total WIP Cost Amount" + "Applied Costs G/L Amount");
    END;

    PROCEDURE CalcAccWIPSalesAmount@16() : Decimal;
    BEGIN
      EXIT("Total WIP Sales Amount" - "Applied Sales G/L Amount");
    END;

    PROCEDURE CalcRecognizedProfitAmount@11() : Decimal;
    BEGIN
      EXIT("Calc. Recog. Sales Amount" - "Calc. Recog. Costs Amount");
    END;

    PROCEDURE CalcRecognizedProfitPercentage@12() : Decimal;
    BEGIN
      IF "Calc. Recog. Sales Amount" <> 0 THEN
        EXIT((CalcRecognizedProfitAmount / "Calc. Recog. Sales Amount") * 100);
      EXIT(0);
    END;

    PROCEDURE CalcRecognizedProfitGLAmount@14() : Decimal;
    BEGIN
      EXIT("Calc. Recog. Sales G/L Amount" - "Calc. Recog. Costs G/L Amount");
    END;

    PROCEDURE CalcRecognProfitGLPercentage@13() : Decimal;
    BEGIN
      IF "Calc. Recog. Sales G/L Amount" <> 0 THEN
        EXIT((CalcRecognizedProfitGLAmount / "Calc. Recog. Sales G/L Amount") * 100);
      EXIT(0);
    END;

    PROCEDURE CurrencyCheck@23();
    BEGIN
      IF ("Invoice Currency Code" <> "Currency Code") AND ("Invoice Currency Code" <> '') AND ("Currency Code" <> '') THEN
        ERROR(DifferentCurrenciesErr);
    END;

    PROCEDURE PercentCompleted@19() : Decimal;
    VAR
      JobCalcStatistics@1000 : Codeunit 1008;
      CL@1001 : ARRAY [16] OF Decimal;
    BEGIN
      JobCalcStatistics.JobCalculateCommonFilters(Rec);
      JobCalcStatistics.CalculateAmounts;
      JobCalcStatistics.GetLCYCostAmounts(CL);
      IF CL[4] <> 0 THEN
        EXIT((CL[8] / CL[4]) * 100);
      EXIT(0);
    END;

    PROCEDURE PercentInvoiced@20() : Decimal;
    VAR
      JobCalcStatistics@1000 : Codeunit 1008;
      PL@1002 : ARRAY [16] OF Decimal;
    BEGIN
      JobCalcStatistics.JobCalculateCommonFilters(Rec);
      JobCalcStatistics.CalculateAmounts;
      JobCalcStatistics.GetLCYPriceAmounts(PL);
      IF PL[12] <> 0 THEN
        EXIT((PL[16] / PL[12]) * 100);
      EXIT(0);
    END;

    PROCEDURE PercentOverdue@18() : Decimal;
    VAR
      JobPlanningLine@1000 : Record 1003;
      QtyOverdue@1001 : Decimal;
      QtyOnSchedule@1002 : Decimal;
      QtyTotal@1003 : Decimal;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.","No.");
      IF JobPlanningLine.FINDSET THEN
        REPEAT
          IF (JobPlanningLine."Planning Date" < WORKDATE) AND (JobPlanningLine."Remaining Qty." > 0) THEN
            QtyOverdue += 1
          ELSE
            QtyOnSchedule += 1;
        UNTIL JobPlanningLine.NEXT = 0;
      QtyTotal := QtyOverdue + QtyOnSchedule;
      IF QtyTotal <> 0 THEN
        EXIT((QtyOverdue / QtyTotal) * 100);
      EXIT(0);
    END;

    LOCAL PROCEDURE UpdateJobNoInReservationEntries@21();
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      ReservEntry.SETFILTER("Source Type",'%1|%2',DATABASE::"Job Planning Line",DATABASE::"Job Journal Line");
      ReservEntry.SETRANGE("Source ID",xRec."No.");
      ReservEntry.MODIFYALL("Source ID","No.",TRUE);
    END;

    LOCAL PROCEDURE UpdateJobTaskDimension@22(FieldNumber@1001 : Integer;ShortcutDimCode@1000 : Code[20]);
    VAR
      JobTask@1002 : Record 1001;
    BEGIN
      IF GUIALLOWED THEN
        IF NOT CONFIRM(UpdateJobTaskDimQst,FALSE) THEN
          EXIT;

      JobTask.SETRANGE("Job No.","No.");
      IF JobTask.FINDSET(TRUE) THEN
        REPEAT
          CASE FieldNumber OF
            1:
              JobTask.VALIDATE("Global Dimension 1 Code",ShortcutDimCode);
            2:
              JobTask.VALIDATE("Global Dimension 2 Code",ShortcutDimCode);
          END;
          JobTask.MODIFY(TRUE);
        UNTIL JobTask.NEXT = 0;
    END;

    PROCEDURE TestfieldJobStatusAwarded@25();
    BEGIN
      TESTFIELD("Notice to Mobilize No.");
      TESTFIELD("P.O No.");
      TESTFIELD("Salesperson Code");
      TESTFIELD("Person Responsible No.");
      TESTFIELD("Technical In-charge No.");
      TESTFIELD("Bill-to Customer No.");
      TESTFIELD("Bill-to Name");
      TESTFIELD(Description);
    END;

    PROCEDURE TestfieldJobStatusLostCancelled@31();
    BEGIN
      TESTFIELD("Salesperson Code");
      TESTFIELD("Person Responsible No.");
      TESTFIELD("Technical In-charge No.");
      TESTFIELD("Cost Analyst No.");
      TESTFIELD("Project Analyst No.");
      TESTFIELD("Bill-to Customer No.");
      TESTFIELD("Bill-to Name");
      TESTFIELD(Description);
    END;

    PROCEDURE TestJobStatus@42();
    BEGIN
      // PHP End
      IF Status = Status::Order THEN
        TESTFIELD(Status, Status::Planning);
      // PHP Start
    END;

    PROCEDURE TestfieldJobs@41();
    VAR
      JobPlanningLines@1000 : Record 1003;
    BEGIN
      // PHP Start
      JobPlanningLines.SETRANGE("Job No.", "No.");
      JobPlanningLines.SETFILTER("No.", '<>''''');
      JobPlanningLines.SETFILTER(Quantity, '<>0');
      IF JobPlanningLines.FINDSET THEN
        REPEAT
          JobPlanningLines.TESTFIELD("Unit of Measure Code");
        UNTIL JobPlanningLines.NEXT = 0;
    END;

    LOCAL PROCEDURE SetupJobTaskNoSeries@24();
    VAR
      NoSeries@1000 : Record 308;
      NoSeriesLines@1001 : Record 309;
      JobSetup@1003 : Record 315;
      NoSeriesMgmt@1002 : Codeunit 396;
    BEGIN
      JobSetup.GET;
      IF JobSetup."No Series for Job Task" <> '' THEN BEGIN
        NoSeries.INIT;
        NoSeries.Code := NoSeriesMgmt.GetNextNo(JobSetup."No Series for Job Task", TODAY, TRUE);
        NoSeries.Description := "No." + ' Job Task No. Series';
        NoSeries."Default Nos." := TRUE;
        NoSeries."Manual Nos." := TRUE;

        IF NoSeries.INSERT THEN BEGIN
          NoSeriesLines.INIT;
          NoSeriesLines."Series Code" := NoSeries.Code;
          NoSeriesLines."Line No." := 1000;
          NoSeriesLines.VALIDATE("Starting No.", 'A000000010');
          NoSeriesLines.VALIDATE("Increment-by No.", 20);
          NoSeriesLines.VALIDATE("Ending No.",'A999999910');
          NoSeriesLines.VALIDATE(Open, TRUE);
          IF NoSeriesLines.INSERT(TRUE) THEN
            "Job Task No. Series" := NoSeries.Code;
        END;
      END;
    END;

    PROCEDURE PercentCompletedByQty@32() : Decimal;
    VAR
      JobCalcStatistics@1000 : Codeunit 1008;
      CL@1001 : ARRAY [16] OF Decimal;
    BEGIN
      JobCalcStatistics.JobCalculateCommonFilters(Rec);
      JobCalcStatistics.CalculateJobQuantity;
      JobCalcStatistics.GetQuantity(CL);
      IF CL[4] <> 0 THEN
        EXIT((CL[8] / CL[4]) * 100);
      EXIT(0);
    END;

    PROCEDURE TestJobStatusPlanningQuote@28();
    BEGIN
      // PHP Start
      IF Status IN [Status::Completed, Status::Order] THEN
        FIELDERROR(Status);
    END;

    LOCAL PROCEDURE CreateDefaultDim@33(TableId@1000 : Integer;NoCode@1001 : Code[20]);
    VAR
      DefaultDim@1003 : Record 352;
      JobDim@1002 : Record 352;
      INTPDim@1004 : Record 352;
    BEGIN
      // PHP START
      IF NoCode <> '' THEN BEGIN
        DefaultDim.SETRANGE("Table ID",TableId);
        DefaultDim.SETRANGE("No.", NoCode);

        JobDim.RESET; // Check if Job Default Dims are match to the matching dimension.
        JobDim.SETRANGE("Table ID", DATABASE::Job);
        JobDim.SETRANGE("No.", "No.");
        IF JobDim.FINDSET THEN BEGIN
          REPEAT
            IF NOT INTPDim.GET(DATABASE::"Internal Notice to Proceed", "INTP No.", JobDim."Dimension Code") THEN BEGIN
              DimMgt.DefaultDimOnDelete(JobDim);
              JobDim.DELETE;
            END;
          UNTIL JobDim.NEXT = 0;
        END;

        JobDim.RESET;
        IF DefaultDim.FINDSET THEN BEGIN
          REPEAT
            IF NOT JobDim.GET(DATABASE::Job, "No.", DefaultDim."Dimension Code") THEN BEGIN
              JobDim.INIT;
              JobDim."Table ID" := DATABASE::Job;
              JobDim."No." := "No.";
              JobDim."Dimension Code" := DefaultDim."Dimension Code";
              JobDim."Dimension Value Code" := DefaultDim."Dimension Value Code";
              JobDim."Value Posting" := JobDim."Value Posting"::"Same Code";
              JobDim.INSERT;
              DimMgt.DefaultDimOnInsert(JobDim);
            END ELSE BEGIN
              JobDim."Dimension Value Code" := DefaultDim."Dimension Value Code";
              JobDim."Value Posting" := JobDim."Value Posting"::"Same Code";
              JobDim.MODIFY;
              DimMgt.DefaultDimOnModify(JobDim);
            END;
          UNTIL DefaultDim.NEXT = 0
        END;
      END;
    END;

    LOCAL PROCEDURE DeleteDefaultDim@50();
    VAR
      DefaultDim@1003 : Record 352;
      JobDim@1002 : Record 352;
    BEGIN
      // PHP START
      DefaultDim.SETRANGE("Table ID", DATABASE::Job);
      DefaultDim.SETRANGE("No.", "No.");
      IF DefaultDim.FINDSET THEN BEGIN
        REPEAT
          DimMgt.DefaultDimOnDelete(DefaultDim);
          DefaultDim.DELETE;
        UNTIL DefaultDim.NEXT = 0;
      END;
    END;

    PROCEDURE CalcFixedCost@58();
    VAR
      Itm@1004 : Record 27;
      JPL@1001 : Record 1003;
      JobPostingGrp@1000 : Record 208;
      TotalScheduledPrice@1002 : Decimal;
      TotalScheduledBenefits@1003 : Decimal;
      TotalScheduledCommunication@1006 : Decimal;
      TotalScheduledBackroomSupport@1005 : Decimal;
    BEGIN
      // PHP Start
      IF NOT CONFIRM(Text020, FALSE) THEN
        EXIT;

      IF JobPostingGrp.GET("Job Posting Group") THEN BEGIN
        // Update Backroom Support Account
        IF JobPostingGrp."OSP Backroom Support Account" <> '' THEN BEGIN
          Itm.GET(JobPostingGrp."OSP Backroom Support Account");
          JPL.RESET;
          JPL.SETRANGE("Job No.", "No.");
          JPL.SETRANGE(Type, JPL.Type::Item);
          JPL.SETRANGE("Job Posting Group ID", "Job Posting Group");
          JPL.SETRANGE("No.", JobPostingGrp."OSP Backroom Support Account");
          TotalScheduledPrice := GetScheduledTotalPrice * (Itm."Percentage Calc. (Contract)" / 100);
          IF JPL.FINDFIRST THEN BEGIN
            JPL.VALIDATE(Quantity, 1);
            JPL.VALIDATE("Unit Cost", TotalScheduledPrice);
            JPL.MODIFY;
          END;
        END;

        // Update Barracks Rental Account
        IF JobPostingGrp."Barracks Rental Account" <> '' THEN BEGIN
          Itm.GET(JobPostingGrp."Barracks Rental Account");
          JPL.RESET;
          JPL.SETRANGE("Job No.", "No.");
          JPL.SETRANGE(Type, JPL.Type::Item);
          JPL.SETRANGE("Job Posting Group ID", "Job Posting Group");
          JPL.SETRANGE("No.", JobPostingGrp."Barracks Rental Account");
          TotalScheduledPrice := GetScheduledTotalPrice * (Itm."Percentage Calc. (Contract)" / 100);
          IF JPL.FINDFIRST THEN BEGIN
              JPL.VALIDATE(Quantity, 1);
            JPL.VALIDATE("Unit Cost", TotalScheduledPrice);
            JPL.MODIFY;
          END;
        END;

        // Update Permitting Account
        IF JobPostingGrp."Permitting Account" <> '' THEN BEGIN
          Itm.GET(JobPostingGrp."Permitting Account");
          JPL.RESET;
          JPL.SETRANGE("Job No.", "No.");
          JPL.SETRANGE(Type, JPL.Type::Item);
          JPL.SETRANGE("Job Posting Group ID", "Job Posting Group");
          JPL.SETRANGE("No.", JobPostingGrp."Permitting Account");
          TotalScheduledPrice := GetScheduledTotalPrice * (Itm."Percentage Calc. (Contract)" / 100);
          IF JPL.FINDFIRST THEN BEGIN
              JPL.VALIDATE(Quantity, 1);
            JPL.VALIDATE("Unit Cost", TotalScheduledPrice);
            JPL.MODIFY;
          END;
        END;

        // Update In house Benefits Account
        IF JobPostingGrp."OSP Inhouse Benefits Account" <> '' THEN BEGIN
          JPL.RESET;
          JPL.SETRANGE("Job No.", "No.");
          JPL.SETRANGE(Type, JPL.Type::Item);
          JPL.SETRANGE("Job Posting Group ID", "Job Posting Group");
          JPL.SETRANGE("No.", JobPostingGrp."OSP Inhouse Benefits Account");
          TotalScheduledBenefits := GetScheduledTotalCostBenefits;
          IF JPL.FINDFIRST THEN BEGIN
            JPL.VALIDATE(Quantity, 1);
            JPL.VALIDATE("Unit Cost", TotalScheduledBenefits);
            JPL.MODIFY;
          END;
        END;

        // Update Insurance Account
        IF JobPostingGrp."Insurance Account" <> '' THEN BEGIN
          Itm.GET(JobPostingGrp."Insurance Account");
          JPL.RESET;
          JPL.SETRANGE("Job No.", "No.");
          JPL.SETRANGE(Type, JPL.Type::Item);
          JPL.SETRANGE("Job Posting Group ID", "Job Posting Group");
          JPL.SETRANGE("No.", JobPostingGrp."Insurance Account");
          TotalScheduledPrice := GetScheduledTotalPrice * (Itm."Percentage Calc. (Contract)" / 100);
          IF JPL.FINDFIRST THEN BEGIN
              JPL.VALIDATE(Quantity, 1);
            JPL.VALIDATE("Unit Cost", TotalScheduledPrice);
            JPL.MODIFY;
          END;
        END;
          // Update Miscelleneous Account
        IF JobPostingGrp."Miscelleneous Account" <> '' THEN BEGIN
          Itm.GET(JobPostingGrp."Miscelleneous Account");
          JPL.RESET;
          JPL.SETRANGE("Job No.", "No.");
          JPL.SETRANGE(Type, JPL.Type::Item);
          JPL.SETRANGE("Job Posting Group ID", "Job Posting Group");
          JPL.SETRANGE("No.", JobPostingGrp."Miscelleneous Account");
          TotalScheduledPrice := GetScheduledTotalPrice * (Itm."Percentage Calc. (Contract)" / 100);
          IF JPL.FINDFIRST THEN BEGIN
              JPL.VALIDATE(Quantity, 1);
            JPL.VALIDATE("Unit Cost", TotalScheduledPrice);
            JPL.MODIFY;
          END;
        END;

          // Update Tools & Equipment Depreciation Account
        IF JobPostingGrp."Tools & Eqpmt. Depr. Account" <> '' THEN BEGIN
          Itm.GET(JobPostingGrp."Tools & Eqpmt. Depr. Account");
          JPL.RESET;
          JPL.SETRANGE("Job No.", "No.");
          JPL.SETRANGE(Type, JPL.Type::Item);
          JPL.SETRANGE("Job Posting Group ID", "Job Posting Group");
          JPL.SETRANGE("No.", JobPostingGrp."Tools & Eqpmt. Depr. Account");
          TotalScheduledPrice := GetScheduledTotalPrice * (Itm."Percentage Calc. (Contract)" / 100);
          IF JPL.FINDFIRST THEN BEGIN
              JPL.VALIDATE(Quantity, 1);
            JPL.VALIDATE("Unit Cost", TotalScheduledPrice);
            JPL.MODIFY;
          END;
        END;

        // Update Communication Account
        IF JobPostingGrp."Communication Account" <> '' THEN BEGIN
          JPL.RESET;
          JPL.SETRANGE("Job No.", "No.");
          JPL.SETRANGE(Type, JPL.Type::Item);
          JPL.SETRANGE("Job Posting Group ID", "Job Posting Group");
          JPL.SETRANGE("No.", JobPostingGrp."Communication Account");
          TotalScheduledCommunication := GetScheduledTotalCostCommunication;
          IF JPL.FINDFIRST THEN BEGIN
            JPL.VALIDATE(Quantity, 1);
            JPL.VALIDATE("Unit Cost", TotalScheduledCommunication);
            JPL.MODIFY;
          END;
        END;
         // Update Backroom Support
      //  IF JobPostingGrp."Backroom Support Account" <> '' THEN BEGIN
      //    JPL.RESET;
      //    JPL.SETRANGE("Job No.", "No.");
      //    JPL.SETRANGE(Type, JPL.Type::Item);
      //    JPL.SETRANGE("Job Posting Group ID", "Job Posting Group");
      //    JPL.SETRANGE("No.", JobPostingGrp."Backroom Support Account");
      //    TotalScheduledBackroomSupport:= GetScheduledTotalCostBackroomSupport;
      //    IF JPL.FINDFIRST THEN BEGIN
      //      JPL.VALIDATE(Quantity, 1);
      //      JPL.VALIDATE("Unit Cost", TotalScheduledBackroomSupport);
      //      JPL.MODIFY;
      //    END;
      //  END;

      END;


      // PHP Start
    END;

    LOCAL PROCEDURE GetScheduledTotalPrice@37() : Decimal;
    VAR
      JPL@1000 : Record 1003;
      TotalLineAmt@1001 : Decimal;
    BEGIN
      // PHP Start
       JPL.RESET;
       JPL.SETRANGE("Job No.", "No.");
       JPL.SETRANGE("Schedule Line", TRUE);
       TotalLineAmt := 0;
       IF JPL.FINDSET THEN BEGIN
        REPEAT
           TotalLineAmt += JPL."Line Amount";
        UNTIL JPL.NEXT = 0;
       END;
       EXIT(TotalLineAmt);
      // PHP End
    END;

    LOCAL PROCEDURE GetScheduledTotalCostBenefits@188() : Decimal;
    VAR
      JPL@1000 : Record 1003;
      TotalAmt@1001 : Decimal;
    BEGIN
      // PHP Start
       JPL.RESET;
       JPL.SETRANGE("Job No.", "No.");
       JPL.SETRANGE("Schedule Line", TRUE);
       TotalAmt := 0;

       IF JPL.FINDSET THEN BEGIN
        REPEAT
          TotalAmt += JPL."Total In-House Benefits Cost";
        UNTIL JPL.NEXT = 0;
       END;

       EXIT(TotalAmt);
      // PHP End
    END;

    LOCAL PROCEDURE GetScheduledTotalCostCommunication@39() : Decimal;
    VAR
      JPL@1000 : Record 1003;
      TotalAmt@1001 : Decimal;
    BEGIN
      // PHP Start
       JPL.RESET;
       JPL.SETRANGE("Job No.", "No.");
       JPL.SETRANGE("Schedule Line", TRUE);
       TotalAmt := 0;

       IF JPL.FINDSET THEN BEGIN
        REPEAT
          TotalAmt += JPL."Total Communication Cost";
        UNTIL JPL.NEXT = 0;
       END;

       EXIT(TotalAmt);
      // PHP End
    END;

    LOCAL PROCEDURE GetScheduledTotalCostBackroomSupport@63() : Decimal;
    VAR
      JPL@1000 : Record 1003;
      TotalAmt@1001 : Decimal;
    BEGIN
      // PHP Start
       JPL.RESET;
       JPL.SETRANGE("Job No.", "No.");
       JPL.SETRANGE("Schedule Line", TRUE);
       TotalAmt := 0;

       IF JPL.FINDSET THEN BEGIN
        REPEAT
           TotalAmt += JPL."Total Backroom Support Cost";
        UNTIL JPL.NEXT = 0;
       END;

       EXIT(TotalAmt);
      // PHP End
    END;

    LOCAL PROCEDURE CreateJobTaskLineForFixedCost@35();
    BEGIN
      // Create a setup for autocreation of JTL and JPL in Job Setup
      TESTFIELD("Bill-to Customer No.");
      IF JobPostingSetup.GET("Job Posting Group") THEN BEGIN
        MESSAGE(Text019, JobTask.TABLECAPTION);

        IF NOT CheckFixedCostIfHasBeenGenerated THEN
        IF JobPostingSetup."OSP Backroom Support Account" <> '' THEN BEGIN
          Item.GET(JobPostingSetup."OSP Backroom Support Account");
          IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Item) THEN BEGIN
            CreateJobTask(Item.Description, JobTask."Job Task Type"::Posting);
            InitJobPlanningLineFixedCost(JobTask);
            JobPlanningLine.INSERT(TRUE);
          END;
        END;

        IF JobPostingSetup."Barracks Rental Account" <> '' THEN BEGIN
          Item.GET(JobPostingSetup."Barracks Rental Account");
          IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Item) THEN BEGIN
            CreateJobTask(Item.Description, JobTask."Job Task Type"::Posting);
            InitJobPlanningLineFixedCost(JobTask);
            JobPlanningLine.INSERT(TRUE);
          END;
        END;

        IF JobPostingSetup."OSP Inhouse Benefits Account" <> '' THEN BEGIN
          Item.GET(JobPostingSetup."OSP Inhouse Benefits Account");
          IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Item) THEN BEGIN
            CreateJobTask(Item.Description, JobTask."Job Task Type"::Posting);
            InitJobPlanningLineFixedCost(JobTask);
            JobPlanningLine.INSERT(TRUE);
          END;
        END;

        IF JobPostingSetup."Backroom Support Account" <> '' THEN BEGIN
          Item.GET(JobPostingSetup."Backroom Support Account");
          IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Item) THEN BEGIN
            CreateJobTask(Item.Description, JobTask."Job Task Type"::Posting);
            InitJobPlanningLineFixedCost(JobTask);
            JobPlanningLine.INSERT(TRUE);
          END;
        END;

        IF JobPostingSetup."Communication Account" <> '' THEN BEGIN
          Item.GET(JobPostingSetup."Communication Account");
          IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Item) THEN BEGIN
            CreateJobTask(Item.Description, JobTask."Job Task Type"::Posting);
            InitJobPlanningLineFixedCost(JobTask);
            JobPlanningLine.INSERT(TRUE);
          END;
        END;

        IF JobPostingSetup."Insurance Account" <> '' THEN BEGIN
          Item.GET(JobPostingSetup."Insurance Account");
          IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Item) THEN BEGIN
            CreateJobTask(Item.Description, JobTask."Job Task Type"::Posting);
            InitJobPlanningLineFixedCost(JobTask);
            JobPlanningLine.INSERT(TRUE);
          END;
        END;

        IF JobPostingSetup."Permitting Account" <> '' THEN BEGIN
          Item.GET(JobPostingSetup."Permitting Account");
          IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Item) THEN BEGIN
            CreateJobTask(Item.Description, JobTask."Job Task Type"::Posting);
            InitJobPlanningLineFixedCost(JobTask);
            JobPlanningLine.INSERT(TRUE);
          END;
        END;

        IF JobPostingSetup."Miscelleneous Account" <> '' THEN BEGIN
          Item.GET(JobPostingSetup."Miscelleneous Account");
          IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Item) THEN BEGIN
            CreateJobTask(Item.Description, JobTask."Job Task Type"::Posting);
            InitJobPlanningLineFixedCost(JobTask);
            JobPlanningLine.INSERT(TRUE);
          END;
        END;

        IF JobPostingSetup."Tools & Eqpmt. Depr. Account" <> '' THEN BEGIN
          Item.GET(JobPostingSetup."Tools & Eqpmt. Depr. Account");
          IF NOT CheckCustomJobPostingGroupAccountInJobPlanningLine(Item) THEN BEGIN
            CreateJobTask(Item.Description, JobTask."Job Task Type"::Posting);
            InitJobPlanningLineFixedCost(JobTask);
            JobPlanningLine.INSERT(TRUE);
          END;
        END;

        IF NOT CheckFixedCostIfHasBeenGenerated THEN BEGIN
          CreateJobTask('Car Depreciation', JobTask."Job Task Type"::Posting);
        END;
        IF CheckFixedCostIfHasBeenGenerated THEN
          UpdateJobPostingGroupID;
      END;
    END;

    LOCAL PROCEDURE CreateJobTask@38(Desc@1000 : Text;JobTaskType@1001 : 'Posting,Heading,Total,Begin-Total,End-Total');
    VAR
      LastJobTaskForFixedCost@1002 : Record 1001;
    BEGIN
      // PHP Start
      LastJobTaskForFixedCost.RESET;
      LastJobTaskForFixedCost.SETRANGE("Job No.", "No.");
      LastJobTaskForFixedCost.SETFILTER("Job Posting Group ID", '<>''''');
      JobTask.INIT;
      JobTask."Job No." := "No.";
      IF LastJobTaskForFixedCost.FINDLAST THEN
        JobTask."Job Task No." := NoSeriesMgt.IncrementNo(LastJobTaskForFixedCost."Job Task No.", 10)
      ELSE
        JobTask."Job Task No." := '10FC010';

      JobTask.Description := Desc;
      JobTask.VALIDATE("Job Task Type", JobTaskType);
      JobTask."No. Series" := "Job Task No. Series";
      JobTask.VALIDATE("Job Posting Group ID", JobPostingSetup.Code);
      DimMgt.InsertJobTaskDim(JobTask."Job No.",JobTask."Job Task No.",JobTask."Global Dimension 1 Code",JobTask."Global Dimension 2 Code");
      JobTask.INSERT;
      // PHP End
    END;

    LOCAL PROCEDURE InitJobPlanningLineFixedCost@45(JT@1000 : Record 1001);
    BEGIN
      // PHP Start
      JobPlanningLine.INIT;
      JobPlanningLine."Job No." := "No.";
      JobPlanningLine."Job Task No." := JT."Job Task No.";
      JobPlanningLine."Line No." := 10000;
      JobPlanningLine.VALIDATE("Line Type", JobPlanningLine."Line Type"::Schedule);
      JobPlanningLine.VALIDATE("Planned Delivery Date", TODAY);
      JobPlanningLine.VALIDATE(Type, JobPlanningLine.Type::Item);
      JobPlanningLine.VALIDATE("No.", Item."No.");
      JobPlanningLine.VALIDATE(Quantity, 1);
      JobPlanningLine.VALIDATE("Unit Cost", 0);
      JobPlanningLine.VALIDATE("Job Posting Group ID", JobPostingSetup.Code);
      // PHP End
    END;

    LOCAL PROCEDURE CheckCustomJobPostingGroupAccountInJobPlanningLine@36(Itm@1000 : Record 27) : Boolean;
    VAR
      JPL@1001 : Record 1003;
    BEGIN
      // PHP Start
      JPL.RESET;
      JPL.SETRANGE("Job No.", "No.");
      JPL.SETRANGE(Type, JPL.Type::Item);
      JPL.SETRANGE("No.", Itm."No.");
      IF JPL.FINDFIRST THEN
        EXIT(TRUE);

      EXIT(FALSE);
      // PHP End
    END;

    LOCAL PROCEDURE CheckFixedCostIfHasBeenGenerated@34() : Boolean;
    VAR
      JT@1000 : Record 1001;
    BEGIN
      // PHP Start
       JT.SETRANGE("Job No.", "No.");
       JT.SETRANGE("Job Posting Group ID",xRec."Job Posting Group");
       IF JT.FINDFIRST THEN
        EXIT(TRUE);

      EXIT(FALSE);
      // PHP End
    END;

    LOCAL PROCEDURE UpdateJobPostingGroupID@43();
    VAR
      JT@1001 : Record 1001;
      JPL@1000 : Record 1003;
    BEGIN
      // PHP Start
      JT.SETRANGE("Job No.", "No.");
      JT.SETFILTER("Job Posting Group ID", '<>''''');
      IF JT.FINDSET THEN
        REPEAT
          JT."Job Posting Group ID" := "Job Posting Group";
          JT.MODIFY;
        UNTIL JT.NEXT = 0;

      JPL.SETRANGE("Job No.", "No.");
      JPL.SETFILTER("Job Posting Group ID", '<>''''');
      IF JPL.FINDSET THEN
        REPEAT
          JPL."Job Posting Group ID" := "Job Posting Group";
          JPL.MODIFY;
        UNTIL JPL.NEXT = 0;
      // PHP End
    END;

    BEGIN
    {
      !! Documentation Table 167 Job

        6:41 PM Wednesday, November 6, 2024
          Allow to change the bill to customer details if No Sales Entry in the Job Ledger Entry
    }
    END.
  }
}

