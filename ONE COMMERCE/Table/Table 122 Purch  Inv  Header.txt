OBJECT Table 122 Purch. Inv. Header
{
  OBJECT-PROPERTIES
  {
    Date=10/12/18;
    Time=12:02:48 PM;
    Modified=Yes;
    Version List=NAVW19.00.00.49968,PHL0.01,PF-01,NAVOC1.00.02;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Buy-from Vendor Name;
    OnDelete=VAR
               PostedDeferralHeader@1000 : Record 1704;
               DeferralUtilities@1001 : Codeunit 1720;
             BEGIN
               LOCKTABLE;
               PostPurchLinesDelete.DeletePurchInvLines(Rec);

               PurchCommentLine.SETRANGE("Document Type",PurchCommentLine."Document Type"::"Posted Invoice");
               PurchCommentLine.SETRANGE("No.","No.");
               PurchCommentLine.DELETEALL;

               ApprovalsMgmt.DeletePostedApprovalEntries(RECORDID);
               PostedDeferralHeader.DeleteForDoc(DeferralUtilities.GetPurchDeferralDocType,'','',
                 PurchCommentLine."Document Type"::"Posted Invoice","No.");
             END;

    CaptionML=ENU=Purch. Inv. Header;
    LookupPageID=Page146;
    DrillDownPageID=Page146;
  }
  FIELDS
  {
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Buy-from Vendor No.;
                                                   NotBlank=Yes }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 4   ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Pay-to Vendor No.;
                                                   NotBlank=Yes }
    { 5   ;   ;Pay-to Name         ;Text50        ;CaptionML=ENU=Pay-to Name }
    { 6   ;   ;Pay-to Name 2       ;Text50        ;CaptionML=ENU=Pay-to Name 2 }
    { 7   ;   ;Pay-to Address      ;Text50        ;CaptionML=ENU=Pay-to Address }
    { 8   ;   ;Pay-to Address 2    ;Text50        ;CaptionML=ENU=Pay-to Address 2 }
    { 9   ;   ;Pay-to City         ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Pay-to City }
    { 10  ;   ;Pay-to Contact      ;Text50        ;CaptionML=ENU=Pay-to Contact }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=ENU=Your Reference }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   CaptionML=ENU=Ship-to Code }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 15  ;   ;Ship-to Address     ;Text50        ;CaptionML=ENU=Ship-to Address }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to City }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=ENU=Ship-to Contact }
    { 19  ;   ;Order Date          ;Date          ;CaptionML=ENU=Order Date }
    { 20  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 21  ;   ;Expected Receipt Date;Date         ;CaptionML=ENU=Expected Receipt Date }
    { 22  ;   ;Posting Description ;Text50        ;CaptionML=ENU=Posting Description }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Payment Terms Code }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 25  ;   ;Payment Discount %  ;Decimal       ;CaptionML=ENU=Payment Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=ENU=Pmt. Discount Date }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=ENU=Shipment Method Code }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=ENU=Location Code }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Vendor Posting Group;Code10        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=ENU=Vendor Posting Group;
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code;
                                                   Editable=No }
    { 33  ;   ;Currency Factor     ;Decimal       ;CaptionML=ENU=Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 35  ;   ;Prices Including VAT;Boolean       ;CaptionML=ENU=Prices Including VAT }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;CaptionML=ENU=Invoice Disc. Code }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 43  ;   ;Purchaser Code      ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Purchaser Code }
    { 44  ;   ;Order No.           ;Code20        ;AccessByPermission=TableData 120=R;
                                                   CaptionML=ENU=Order No. }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purch. Comment Line" WHERE (Document Type=CONST(Posted Invoice),
                                                                                                  No.=FIELD(No.),
                                                                                                  Document Line No.=CONST(0)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=ENU=No. Printed;
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=ENU=On Hold }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=ENU=Applies-to Doc. Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnLookup=BEGIN
                                                              VendLedgEntry.SETCURRENTKEY("Document No.");
                                                              VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                              VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                              PAGE.RUN(0,VendLedgEntry);
                                                            END;

                                                   CaptionML=ENU=Applies-to Doc. No. }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   CaptionML=ENU=Bal. Account No. }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purch. Inv. Line".Amount WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purch. Inv. Line"."Amount Including VAT" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount Including VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 66  ;   ;Vendor Order No.    ;Code35        ;CaptionML=ENU=Vendor Order No. }
    { 68  ;   ;Vendor Invoice No.  ;Code35        ;CaptionML=ENU=Vendor Invoice No. }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=ENU=VAT Registration No. }
    { 72  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Sell-to Customer No. }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=ENU=VAT Country/Region Code }
    { 79  ;   ;Buy-from Vendor Name;Text50        ;CaptionML=ENU=Buy-from Vendor Name }
    { 80  ;   ;Buy-from Vendor Name 2;Text50      ;CaptionML=ENU=Buy-from Vendor Name 2 }
    { 81  ;   ;Buy-from Address    ;Text50        ;CaptionML=ENU=Buy-from Address }
    { 82  ;   ;Buy-from Address 2  ;Text50        ;CaptionML=ENU=Buy-from Address 2 }
    { 83  ;   ;Buy-from City       ;Text30        ;TableRelation="Post Code".City;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Buy-from City }
    { 84  ;   ;Buy-from Contact    ;Text50        ;CaptionML=ENU=Buy-from Contact }
    { 85  ;   ;Pay-to Post Code    ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Pay-to Post Code }
    { 86  ;   ;Pay-to County       ;Text30        ;CaptionML=ENU=Pay-to County }
    { 87  ;   ;Pay-to Country/Region Code;Code10  ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Pay-to Country/Region Code }
    { 88  ;   ;Buy-from Post Code  ;Code20        ;TableRelation="Post Code";
                                                   CaptionML=ENU=Buy-from Post Code }
    { 89  ;   ;Buy-from County     ;Text30        ;CaptionML=ENU=Buy-from County }
    { 90  ;   ;Buy-from Country/Region Code;Code10;TableRelation=Country/Region;
                                                   CaptionML=ENU=Buy-from Country/Region Code }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to Post Code }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=ENU=Ship-to County }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Ship-to Country/Region Code }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Bank Account;
                                                   OptionString=G/L Account,Bank Account }
    { 95  ;   ;Order Address Code  ;Code10        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Buy-from Vendor No.));
                                                   CaptionML=ENU=Order Address Code }
    { 97  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Entry Point }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=ENU=Payment Method Code }
    { 107 ;   ;Pre-Assigned No. Series;Code10     ;TableRelation="No. Series";
                                                   CaptionML=ENU=Pre-Assigned No. Series }
    { 108 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 110 ;   ;Order No. Series    ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Order No. Series }
    { 111 ;   ;Pre-Assigned No.    ;Code20        ;CaptionML=ENU=Pre-Assigned No. }
    { 112 ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=ENU=User ID }
    { 113 ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Source Code }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 115 ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 116 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=ENU=VAT Base Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 135 ;   ;Prepayment No. Series;Code10       ;TableRelation="No. Series";
                                                   CaptionML=ENU=Prepayment No. Series }
    { 140 ;   ;Prepayment Invoice  ;Boolean       ;CaptionML=ENU=Prepayment Invoice }
    { 141 ;   ;Prepayment Order No.;Code20        ;CaptionML=ENU=Prepayment Order No. }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=ENU=Quote No.;
                                                   Editable=No }
    { 170 ;   ;Creditor No.        ;Code20        ;CaptionML=ENU=Creditor No.;
                                                   Numeric=Yes }
    { 171 ;   ;Payment Reference   ;Code50        ;CaptionML=ENU=Payment Reference;
                                                   Numeric=Yes }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 1300;   ;Canceled By         ;Code20        ;TableRelation="Purch. Cr. Memo Hdr.";
                                                   CaptionML=ENU=Canceled By;
                                                   Editable=No }
    { 1301;   ;Canceled            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purch. Cr. Memo Hdr." WHERE (Canceled=CONST(Yes),
                                                                                                   Applies-to Doc. Type=CONST(Invoice),
                                                                                                   Applies-to Doc. No.=FIELD(No.)));
                                                   CaptionML=ENU=Canceled;
                                                   Editable=No }
    { 1302;   ;Paid                ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=-Exist("Vendor Ledger Entry" WHERE (Entry No.=FIELD(Vendor Ledger Entry No.),
                                                                                                   Open=FILTER(Yes)));
                                                   CaptionML=ENU=Paid;
                                                   Editable=No }
    { 1303;   ;Remaining Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor Ledger Entry No.=FIELD(Vendor Ledger Entry No.)));
                                                   CaptionML=ENU=Remaining Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1304;   ;Vendor Ledger Entry No.;Integer    ;TableRelation="Vendor Ledger Entry"."Entry No.";
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Vendor Ledger Entry No.;
                                                   Editable=No }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purch. Inv. Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Invoice Discount Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   CaptionML=ENU=Campaign No. }
    { 5052;   ;Buy-from Contact No.;Code20        ;TableRelation=Contact;
                                                   CaptionML=ENU=Buy-from Contact No. }
    { 5053;   ;Pay-to Contact No.  ;Code20        ;TableRelation=Contact;
                                                   CaptionML=ENU=Pay-to Contact No. }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=ENU=Responsibility Center }
    { 50001;  ;Request Type        ;Option        ;CaptionML=ENU=Request Type;
                                                   OptionCaptionML=ENU=" ,Cash Advance,Request for Payment,Liquidation,Reimbursement";
                                                   OptionString=[ ,Cash Advance,Request for Payment,Liquidation,Reimbursement] }
    { 50030;  ;Request for Purchase No.;Code20    ;TableRelation="Request for Purchase";
                                                   Editable=No }
    { 50031;  ;Created By          ;Text100       ;Editable=No }
    { 50500;  ;WHT Business Posting Group;Code10  ;TableRelation="WHT Business Posting Group";
                                                   CaptionML=ENU=WHT Business Posting Group;
                                                   Description=PHL0.01 }
    { 50501;  ;Actual Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Actual Vendor No.;
                                                   Description=PHL0.01 }
    { 50510;  ;Job Order No.       ;Code20        ;TableRelation="Job Order" WHERE (Status=CONST(Released));
                                                   Editable=No }
    { 50520;  ;Rem. WHT Prepaid Amount (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("WHT Entry"."Remaining Unrealized Amount" WHERE (Document Type=CONST(Invoice),
                                                                                                                    Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Rem. WHT Prepaid Amount (LCY);
                                                   Description=PHL0.01 }
    { 50521;  ;Paid WHT Prepaid Amount (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("WHT Entry".Amount WHERE (Document Type=CONST(Payment),
                                                                                             Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Paid WHT Prepaid Amount (LCY);
                                                   Description=PHL0.01 }
    { 50522;  ;Total WHT Prepaid Amount (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("WHT Entry"."Unrealized Amount" WHERE (Document Type=CONST(Invoice),
                                                                                                          Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Total WHT Prepaid Amount (LCY);
                                                   Description=PHL0.01 }
    { 50600;  ;Job No.             ;Code20        ;TableRelation=Job WHERE (Blocked=CONST(" ")) }
    { 50610;  ;Job Type            ;Option        ;OptionCaptionML=ENU=" ,Service Engineering,Others,Pre-Delivery Inspection,Inspection Upon Delivery";
                                                   OptionString=[ ,Service Engineering,Others,Pre-Delivery Inspection,Inspection Upon Delivery] }
    { 50615;  ;Canvass Sheet No.   ;Code20         }
    { 50620;  ;AWL/BL No.          ;Code20         }
    { 50625;  ;Service Report No.  ;Code100        }
    { 50630;  ;INTP No.            ;Code20        ;TableRelation="Internal Notice to Proceed" WHERE (Approval Status=FILTER(<>Open)) }
    { 50631;  ;Special Instruction ;Text250        }
    { 50632;  ;Benificiary         ;Text50         }
    { 50633;  ;Warranty            ;Text250        }
    { 50636;  ;Shipment Method     ;Text100        }
    { 50640;  ;Terms and Condition ;BLOB          ;SubType=Memo }
    { 50641;  ;Shipping Instruction;BLOB          ;SubType=Memo }
    { 50642;  ;Penalty Clause      ;BLOB          ;SubType=Memo }
    { 50710;  ;Vendor Type         ;Option        ;OptionCaptionML=ENU=Local,Foreign,Employee;
                                                   OptionString=Local,Foreign,Employee }
    { 50725;  ;Endorse To          ;Code20        ;TableRelation=Resource }
    { 50730;  ;Purpose             ;Text50         }
    { 50735;  ;Ship-to Email Address;Text50        }
    { 50740;  ;Date of Activity From;Date          }
    { 50745;  ;Date of Activity To ;Date           }
    { 50750;  ;Ground Manager No.  ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Person)) }
    { 50755;  ;NOC In-Charge No.   ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Person)) }
    { 50760;  ;Request for Exception No.;Code20   ;OnValidate=VAR
                                                                SalesHdr@1000 : Record 36;
                                                              BEGIN
                                                                SalesHdr.SETRANGE(Status, SalesHdr.Status::Released);
                                                                IF "Request for Exception No." <> '' THEN
                                                                  IF  SalesHdr.GET(SalesHdr."Document Type"::Invoice, "Request for Exception No.") THEN
                                                                    PAGE.RUNMODAL(PAGE::"Request for Exception", SalesHdr);
                                                              END;
                                                               }
    { 50765;  ;Work Change Request No.;Code20     ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Invoice),
                                                                                           Request type=CONST(Work Change Request),
                                                                                           Status=FILTER(Released|Pending Approval));
                                                   OnLookup=VAR
                                                              SalesHdr@1000 : Record 36;
                                                            BEGIN
                                                            END;
                                                             }
    { 50770;  ;Project Manager No. ;Code20        ;TableRelation=Resource }
    { 50775;  ;Payment Terms       ;BLOB          ;SubType=Memo }
    { 50780;  ;Generate Notice of Shipment;Option ;OptionCaptionML=ENU=" ,Yes,No";
                                                   OptionString=[ ,Yes,No] }
    { 50785;  ;Freight Budget      ;Decimal       ;AutoFormatType=2 }
    { 50790;  ;Shipper No.         ;Code20        ;TableRelation=Vendor }
    { 50791;  ;Consignee Code      ;Code20        ;TableRelation=Customer }
    { 50795;  ;Shipping Marks      ;BLOB          ;SubType=Memo }
    { 50800;  ;Insurance           ;BLOB          ;SubType=Memo }
    { 50810;  ;Preferred Bank Account;Code10      ;TableRelation="Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Pay-to Vendor No.));
                                                   CaptionML=ENU=Preferred Bank Account }
    { 50820;  ;Technical In-Charge ;Code20        ;TableRelation=Resource }
    { 50850;  ;Type of Activity    ;Option        ;OptionCaptionML=ENU=" ,Site Survey,Asset Checklist,Installation,Commissioning & Testing,Pre-PAT,PAT,Punchlist Clearing,Troubleshooting,Permitting,Rectification";
                                                   OptionString=[ ,Site Survey,Asset Checklist,Installation,Commissioning & Testing,Pre-PAT,PAT,Punchlist Clearing,Troubleshooting,Permitting,Rectification];
                                                   Description=Daily Deployment Report;
                                                   Editable=No }
    { 50851;  ;No. of Visit        ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Daily Deployment Report" WHERE (Post Code=FIELD(Buy-from Post Code),
                                                                                                      Follow-up Visit=CONST(Yes),
                                                                                                      Type of Activity=FIELD(Type of Activity)));
                                                   BlankZero=Yes;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Order No.                                }
    {    ;Pre-Assigned No.                         }
    {    ;Vendor Invoice No.,Posting Date          }
    {    ;Buy-from Vendor No.                      }
    {    ;Prepayment Order No.,Prepayment Invoice  }
    {    ;Pay-to Vendor No.                        }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Buy-from Vendor No.,Pay-to Vendor No.,Posting Date,Posting Description }
    { 2   ;Brick               ;No.,Buy-from Vendor Name,Amount,Due Date,Amount Including VAT }
  }
  CODE
  {
    VAR
      PurchInvHeader@1000 : Record 122;
      PurchCommentLine@1001 : Record 43;
      VendLedgEntry@1002 : Record 25;
      PostPurchLinesDelete@1003 : Codeunit 364;
      DimMgt@1004 : Codeunit 408;
      ApprovalsMgmt@1008 : Codeunit 1535;
      UserSetupMgt@1005 : Codeunit 5700;
      PostCode@1006 : Record 225;
      IncomingDoc@1007 : Record 130;
      INTP@1009 : Record 50040;
      Employee@1010 : Record 5200;
      JO@1011 : Record 50012;

    PROCEDURE PrintRecords@1(ShowRequestForm@1000 : Boolean);
    VAR
      ReportSelection@1001 : Record 77;
    BEGIN
      WITH PurchInvHeader DO BEGIN
        COPY(Rec);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"P.Invoice");
        ReportSelection.SETFILTER("Report ID",'<>0');
        ReportSelection.FIND('-');
        REPEAT
          REPORT.RUNMODAL(ReportSelection."Report ID",ShowRequestForm,FALSE,PurchInvHeader);
        UNTIL ReportSelection.NEXT = 0;
      END;
    END;

    PROCEDURE Navigate@2();
    VAR
      NavigateForm@1000 : Page 344;
    BEGIN
      NavigateForm.SetDoc("Posting Date","No.");
      NavigateForm.RUN;
    END;

    PROCEDURE ShowDimensions@3();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"No."));
    END;

    PROCEDURE SetSecurityFilterOnRespCenter@4();
    BEGIN
      IF UserSetupMgt.GetPurchasesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetPurchasesFilter);
        FILTERGROUP(0);
      END;
    END;

    PROCEDURE GetPostCodeSiteName@87() : Text;
    BEGIN
      PostCode.SETRANGE(Code, "Buy-from Post Code");
      IF PostCode.FINDFIRST THEN
        EXIT(PostCode.Name);

      EXIT('');
    END;

    PROCEDURE GetPostCodeSiteAddress@91() : Text;
    BEGIN
      PostCode.SETRANGE(Code, "Buy-from Post Code");
      IF PostCode.FINDFIRST THEN
        EXIT(PostCode.Address + ' ' + PostCode."Address 2");

      EXIT('');
    END;

    PROCEDURE GetIncomingDocTSSRStatus@6() : Text;
    BEGIN
      IncomingDoc.SETRANGE("Post Code", "Buy-from Post Code");
      IncomingDoc.SETRANGE("Record Type", IncomingDoc."Record Type"::Document);
      IncomingDoc.SETRANGE("Record Class", IncomingDoc."Record Class"::TSSR);
      IF IncomingDoc.FINDLAST THEN
        EXIT(FORMAT(IncomingDoc."TSSR Status"));

      EXIT('');
    END;

    PROCEDURE GetIncomingDocRAAWAStatus@8() : Text;
    BEGIN
      IncomingDoc.SETRANGE("Post Code", "Buy-from Post Code");
      IncomingDoc.SETRANGE("Record Type", IncomingDoc."Record Type"::Document);
      IncomingDoc.SETRANGE("Record Class", IncomingDoc."Record Class"::RAAWA);
      IF IncomingDoc.FINDLAST THEN
        EXIT(FORMAT(IncomingDoc."RAAWA Status"));

      EXIT('');
    END;

    PROCEDURE GetIncomingDocFIOStatus@9() : Text;
    BEGIN
      IncomingDoc.SETRANGE("Post Code", "Buy-from Post Code");
      IncomingDoc.SETRANGE("Record Type", IncomingDoc."Record Type"::Document);
      IncomingDoc.SETRANGE("Record Class", IncomingDoc."Record Class"::FIO);
      IF IncomingDoc.FINDLAST THEN
        EXIT(FORMAT(IncomingDoc."FIO Status"));

      EXIT('');
    END;

    PROCEDURE GetIncomingDocAccessLetterRequired@28() : Text;
    BEGIN
      IncomingDoc.SETRANGE("Post Code", "Buy-from Post Code");
      IncomingDoc.SETRANGE("Record Type", IncomingDoc."Record Type"::Document);
      IncomingDoc.SETRANGE("Record Class", IncomingDoc."Record Class"::"Access Letter");
      IF IncomingDoc.FINDLAST THEN
        EXIT(FORMAT(IncomingDoc."Access Letter Required"));

      EXIT('');
    END;

    PROCEDURE GetIncomingDocAccessLetterStatus@10() : Text;
    BEGIN
      IncomingDoc.SETRANGE("Post Code", "Buy-from Post Code");
      IncomingDoc.SETRANGE("Record Type", IncomingDoc."Record Type"::Document);
      IncomingDoc.SETRANGE("Record Class", IncomingDoc."Record Class"::"Access Letter");
      IF IncomingDoc.FINDLAST THEN
        EXIT(FORMAT(IncomingDoc."Access Letter Status"));

      EXIT('');
    END;

    PROCEDURE GetIncomingDocBldgPermitRequired@64() : Text;
    BEGIN
      IncomingDoc.SETRANGE("Post Code", "Buy-from Post Code");
      IncomingDoc.SETRANGE("Record Type", IncomingDoc."Record Type"::Document);
      IncomingDoc.SETRANGE("Record Class", IncomingDoc."Record Class"::"Building Permit");
      IF IncomingDoc.FINDLAST THEN
        EXIT(FORMAT(IncomingDoc."Bldg. Permit Required"));

      EXIT('');
    END;

    PROCEDURE GetIncomingDocBldgPermitStatus@11() : Text;
    BEGIN
      IncomingDoc.SETRANGE("Post Code", "Buy-from Post Code");
      IncomingDoc.SETRANGE("Record Type", IncomingDoc."Record Type"::Document);
      IncomingDoc.SETRANGE("Record Class", IncomingDoc."Record Class"::"Building Permit");
      IF IncomingDoc.FINDLAST THEN
        EXIT(FORMAT(IncomingDoc."Bldg. Permit Status"));

      EXIT('');
    END;

    PROCEDURE GetIncomingDocSOStatus@12() : Text;
    BEGIN
      IncomingDoc.SETRANGE("Post Code", "Buy-from Post Code");
      IncomingDoc.SETRANGE("Record Type", IncomingDoc."Record Type"::Document);
      IncomingDoc.SETRANGE("Record Class", IncomingDoc."Record Class"::SO);
      IF IncomingDoc.FINDLAST THEN
        EXIT(FORMAT(IncomingDoc."SO Status"));

      EXIT('');
    END;

    PROCEDURE GetINTPPONoCustomer@14() : Text;
    BEGIN
      IF ("INTP No." <> '') AND (INTP.GET("INTP No.")) THEN
        EXIT(INTP."P.O No. (Customer)");

      EXIT('');
    END;

    PROCEDURE GetINTPProjectName@15() : Text;
    BEGIN
      IF ("INTP No." <> '') AND (INTP.GET("INTP No.")) THEN
        EXIT(INTP."Project Name" + ' ' + INTP."Project Name 2");

      EXIT('');
    END;

    PROCEDURE GetINTPCustomerName@16() : Text;
    BEGIN
      IF ("INTP No." <> '') AND (INTP.GET("INTP No.")) THEN
        EXIT(INTP."Customer Name");

      EXIT('');
    END;

    PROCEDURE GetEmployeeGroundManagerName@5() : Text;
    BEGIN
      IF Employee.GET("Ground Manager No.") THEN
        EXIT(Employee."Last Name" + ', ' + Employee."First Name");

      EXIT('');
    END;

    PROCEDURE GetEmployeeNOCInchargeName@7() : Text;
    BEGIN
      IF Employee.GET("NOC In-Charge No.") THEN
        EXIT(Employee."Last Name" + ', ' + Employee."First Name");

      EXIT('');
    END;

    PROCEDURE GetJODocumentDate@115() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Document Date"));

      EXIT('');
    END;

    PROCEDURE GetJODateRequested@116() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Date Requested"));

      EXIT('');
    END;

    PROCEDURE GetJOType@13() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Job Type"));

      EXIT('');
    END;

    PROCEDURE GetJOINTPNo@17() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(JO."INTP No.");

      EXIT('');
    END;

    PROCEDURE GetJOJobNo@18() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(JO."Job No.");

      EXIT('');
    END;

    PROCEDURE GetJOProjectName@19() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(JO."Project Name" + ' ' + JO."Project Name 2");

      EXIT('');
    END;

    PROCEDURE GetJOPONo@20() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(JO."P.O No.");

      EXIT('');
    END;

    PROCEDURE GetJOSRNo@21() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(JO."Service Report No.");

      EXIT('');
    END;

    PROCEDURE GetJOEmployeeName@22() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(JO."Employee Name");

      EXIT('');
    END;

    PROCEDURE GetJODepartment@23() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(JO.Department);

      EXIT('');
    END;

    PROCEDURE GetJOCustomerName@24() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(JO."Customer Name");

      EXIT('');
    END;

    PROCEDURE GetJORemarks@25() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(JO.Remarks);

      EXIT('');
    END;

    PROCEDURE GetJOSalesRelated@26() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Sales Related"));

      EXIT('');
    END;

    PROCEDURE GetJOOrdinaryPO@27() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Ordinary P.O."));

      EXIT('');
    END;

    PROCEDURE GetJOTurnkey@29() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO.TurnKey));

      EXIT('');
    END;

    PROCEDURE GetJOOSP@30() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO.OSP));

      EXIT('');
    END;

    PROCEDURE GetJOMeeting@31() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO.Meeting));

      EXIT('');
    END;

    PROCEDURE GetJOMeetingEmailSMSConf@32() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Meeting Email/SMS Conf."));

      EXIT('');
    END;

    PROCEDURE GetJOProductPresentation@33() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Product Presentation"));

      EXIT('');
    END;

    PROCEDURE GetJOProdPrstnEmailSMSConf@34() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Prod. Prstn. Email/SMS Conf."));

      EXIT('');
    END;

    PROCEDURE GetJOSiteSurvey@35() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Site Survey"));

      EXIT('');
    END;

    PROCEDURE GetJOSiteSrvySRForm@36() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Site Srvy. SR Form"));

      EXIT('');
    END;

    PROCEDURE GetJOSiteSrvySRNo@37() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Site Srvy. SR No."));

      EXIT('');
    END;

    PROCEDURE GetJOSiteSrvyRTPSNo@38() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."RTPS No."));

      EXIT('');
    END;

    PROCEDURE GetJOPermitting@39() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO.Permitting));

      EXIT('');
    END;

    PROCEDURE GetJOPrmtgAFI@40() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Prmtg. AFI"));

      EXIT('');
    END;

    PROCEDURE GetJOPrmtgAsPlan@41() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Prmtg. As Plan"));

      EXIT('');
    END;

    PROCEDURE GetJOPrmtgTSSR@42() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Prmtg. TSSR"));

      EXIT('');
    END;

    PROCEDURE GetJOPrmtgTimelineOfROW@43() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Prmtg. Timeline of ROW"));

      EXIT('');
    END;

    PROCEDURE GetJOTrialPOC@44() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Trial/POC"));

      EXIT('');
    END;

    PROCEDURE GetJOAPCTForm@45() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."APCT Form"));

      EXIT('');
    END;

    PROCEDURE GetJORFEForm@46() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."RFE Form"));

      EXIT('');
    END;

    PROCEDURE GetJOOnSiteAudit@47() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."On-Site Audit"));

      EXIT('');
    END;

    PROCEDURE GetJOOnSiteAud1stTrip@48() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."On-Site Aud. 1st Trip"));

      EXIT('');
    END;

    PROCEDURE GetJOOnSiteAud2ndTrip@49() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."On-Site Aud. 2nd Trip"));

      EXIT('');
    END;

    PROCEDURE GetJOOnsiteAud3rdTrip@50() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."On-Site Aud. 3rd Trip"));

      EXIT('');
    END;

    PROCEDURE GetJOAuditChecklist@51() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Audit Checklist"));

      EXIT('');
    END;

    PROCEDURE GetJOInstallationAndCommissioning@52() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Installation and Commissioning"));

      EXIT('');
    END;

    PROCEDURE GetJOInsComm1stTrip@53() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. 1st Trip"));

      EXIT('');
    END;

    PROCEDURE GetJOInsComm2ndTrip@54() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. 2nd Trip"));

      EXIT('');
    END;

    PROCEDURE GetJOInsComm3rdTrip@55() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. 3rd Trip"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommRFEForm@56() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. RFE Form"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommSRForm@57() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. SR Form"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommSRNo@58() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. SR No."));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommLineOfSight@59() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Line of Sight"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommNonLineOfSight@60() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Non-Line of Sight"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommAFI@61() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. AFI"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommPermitting@62() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Permitting"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommPrmtgLGUPermit@63() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Prmt. LGU Permit"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommPrmtgBrgyPermit@65() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Prmt. Brgy. Permit"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommPrmtgBldgPermit@66() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Prmt. Bldg. Permit"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommPrmtgDPWH@67() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Prmt. DPWH"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommPrmtgMMDA@68() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Prmt. MMDA"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommPrmtgTraffic@69() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Prmt. Traffic"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommPrmtgHOA@70() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Prmt. HOA"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommPrmtgALO@71() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Prmt. ALO"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommPrmtgALP@72() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Prmt. ALP"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommPrmtgFIO@73() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Prmt. FIO"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommPrmtgRAAWA@74() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Prmt. RAAWA"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommPrmtgSO@75() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Prmt. SO"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommOthers@76() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. Others"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommAsPlan@77() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. As Plan"));

      EXIT('');
    END;

    PROCEDURE GetJOInsCommTSSR@78() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."InsComm. TSSR"));

      EXIT('');
    END;

    PROCEDURE GetJOTesting@79() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO.Testing));

      EXIT('');
    END;

    PROCEDURE GetJOTestingSRForm@80() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Testing SR Form"));

      EXIT('');
    END;

    PROCEDURE GetJOTestingSRNo@81() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Testing SR No."));

      EXIT('');
    END;

    PROCEDURE GetJOTestingTestProceedures@82() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Testing Test Procedures"));

      EXIT('');
    END;

    PROCEDURE GetJOPreliminaryAcceptance@83() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Preliminary Acceptance"));

      EXIT('');
    END;

    PROCEDURE GetJOPreAccptSRForm@86() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Pre-Accpt. SR Form"));

      EXIT('');
    END;

    PROCEDURE GetJOPreAccptSRNo@88() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Pre-Accpt. SR No."));

      EXIT('');
    END;

    PROCEDURE GetJOPreAccptSchedByCust@89() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Pre-Accpt. Sched. by Customer"));

      EXIT('');
    END;

    PROCEDURE GetJOFinalAcceptance@90() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Final Acceptance"));

      EXIT('');
    END;

    PROCEDURE GetJOFnlAccptSRForm@92() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Fnl. Accpt. SR Form"));
      EXIT('');
    END;

    PROCEDURE GetJOFnlAccptSRNo@93() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Fnl. Accpt. SR No."));

      EXIT('');
    END;

    PROCEDURE GetJOFnlAccptSchedByCust@94() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Fnl. Accpt. Schd. by Cust."));

      EXIT('');
    END;

    PROCEDURE GetJOFnlAccptPunchlist@95() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Fnl. Accpt. Punchlist Report"));

      EXIT('');
    END;

    PROCEDURE GetJOFnlAccptPAC@96() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Fnl. Accpt. PAC"));

      EXIT('');
    END;

    PROCEDURE GetJORectification@98() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO.Rectification));

      EXIT('');
    END;

    PROCEDURE GetJOrectificationSRForm@99() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Rectification SR Form"));

      EXIT('');
    END;

    PROCEDURE GetJORectificationSRNo@100() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Rectification SR No."));

      EXIT('');
    END;

    PROCEDURE GetJORectificationPunchList@101() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Rectification Punchlist Report"));

      EXIT('');
    END;

    PROCEDURE GetJOTroubleshooting@102() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO.Troubleshooting));

      EXIT('');
    END;

    PROCEDURE GetJOUnderWarranty@103() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Trbltng. Under Warranty"));

      EXIT('');
    END;

    PROCEDURE GetJOTroubleshootingDRDate@104() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Trbltng. DR Date"));

      EXIT('');
    END;

    PROCEDURE GetJOTroubleshootingDateOfAcceptance@105() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Trbltng. Date of Acceptance"));

      EXIT('');
    END;

    PROCEDURE GetJOOutOfWarranty@106() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Trbltng. Out of Warranty"));

      EXIT('');
    END;

    PROCEDURE GetJOOutOfWarranty1stTrip@107() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Out of Wrrnty. 1st Trip"));

      EXIT('');
    END;

    PROCEDURE GetJOOutOfWarranty2ndTrip@108() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Out of Wrrnty. 2nd Trip"));

      EXIT('');
    END;

    PROCEDURE GetJOTroubleshootingNCCFNo@109() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Trbltng. NCCF No."));

      EXIT('');
    END;

    PROCEDURE GetJOTroubleshootingSRForm@110() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Trbltng. SR Form"));

      EXIT('');
    END;

    PROCEDURE GetJOTroubleshootingSRNo@111() : Text;
    BEGIN
      IF JO.GET("Job Order No.") THEN
        EXIT(FORMAT(JO."Trbltng. SR No."));

      EXIT('');
    END;

    BEGIN
    END.
  }
}

