NOTES: DYNAMICS NAV ADMINISTRATION AND WORKFLOW OBJECTS

11:43 AM Thursday, August 1, 2024
    OBJECT Modification "Dynamic Request Page Field"(Table 1516)
    {
    OBJECT-PROPERTIES
    {
        Date=06/26/18;
        Time=[ 3:28:27 AM];
        Modified=Yes;
        Version List=NAVW19.00,NAVOC1.00.02.00;
    }
    PROPERTIES
    {
        Target="Dynamic Request Page Field"(Table 1516);
    }
    CHANGES
    {
        { PropertyModification;
                            Target="Table Caption"(Field 4);
                            Property=Data type;
                            OriginalValue=Text30;
                            ModifiedValue=Text250 }
        { PropertyModification;
                            Target="Field Caption"(Field 6);
                            Property=Data type;
                            OriginalValue=Text30;
                            ModifiedValue=Text250 }
    }
    CODE
    {

        BEGIN
        END.
    }
    }

12:04 PM Monday, August 12, 2024
    ! New Object Added OBJECT Modification "Config. Package Card"(Page 8614)

    OBJECT Modification "Config. Package Card"(Page 8614)
    {
    OBJECT-PROPERTIES
    {
        Date=06/28/18;
        Time=[ 9:37:03 PM];
        Modified=Yes;
        Version List=NAVW19.00,NAVOC1.00.02.00;
    }
    PROPERTIES
    {
        Target="Config. Package Card"(Page 8614);
    }
    CHANGES
    {
        { Insertion         ;InsertAfter=Control 10;
                            ChangedElements=ControlCollection
                            {
                            { 27  ;0   ;Container ;
                                        ContainerType=FactBoxArea }

                            { 16  ;1   ;Part      ;
                                        PartType=System;
                                        SystemPartID=Notes }

                            { 25  ;1   ;Part      ;
                                        PartType=System;
                                        SystemPartID=RecordLinks }

                            }
                            }
        { Insertion         ;Documentation=BEGIN
                                            !! Documentation Page 8614 Config. Package Card

                                            12:00 PM Monday, August 12, 2024
                                            Show the Notes and Links
                                        END;
                                            }
    }
    CODE
    {

        BEGIN
        END.
    }
    }

10:56 PM Monday, August 12, 2024
    ! Change the property of uploading of signature.

    OBJECT Modification "User Setup"(Page 119)
    {
    OBJECT-PROPERTIES
    {
        Date=06/26/18;
        Time=12:02:41 AM;
        Modified=Yes;
        Version List=NAVW17.00,PHL0.01,NAVOC1.00.02.00;
    }
    PROPERTIES
    {
        Target="User Setup"(Page 119);
    }
    CHANGES
    {
        { PropertyModification;
                            Target=ViewSignature(Action 91);
                            Property=AccessByPermission;
                            OriginalValue=TableData 91=D;
                            ModifiedValue=TableData 91=MD }
        { Insertion         ;Documentation=BEGIN
                                            !! Documentation Page 119 User Setup

                                            10:53 PM Monday, August 12, 2024
                                            Change the property of uploading of signature.
                                        END;
                                            }
    }
    CODE
    {

        BEGIN
        END.
    }
    }

11:43 AM Wednesday, August 21, 2024
    ! Change the email notification of Job Order from pdf attachment to html form.
    !! Include the migration of NAVOC1.00.02.00.01 - Stripo Notification Template

    OBJECT Modification "Custom Notification Management"(Codeunit 50581)
    {
      OBJECT-PROPERTIES
      {
        Date=06/27/18;
        Time=[ 7:50:34 PM];
        Modified=Yes;
        Version List=NAVOC1.00.02.00;
      }
      PROPERTIES
      {
        Target="Custom Notification Management"(Codeunit 50581);
      }
      CHANGES
      {
        { Insertion         ;Documentation=BEGIN
                                             !! Documentation Codeunit 50581 Custom Notification Management

                                             9:40 AM Thursday, August 15, 2024
                                               Modify ReplaceTokenWithJobOrderDetails function,  add other job order details and job order lines.
                                               Add ReplaceTokenToChecked function for boolean fields to set checkbox value in the email template.

                                             12:43 PM Friday, August 16, 2024
                                               Add blank table row if there's no data.

                                             11:10 PM Tuesday, August 20, 2024
                                               Add approval entry table based on stripo approval entry template.
                                           END;
                                            }
        { CodeModification  ;OriginalCode=BEGIN
                                            DataTypeManagement.GetRecordRef(NotificationEntry."Triggered By Record",RecRef);
                                              CASE NotificationEntry.Type OF
                                                NotificationEntry.Type::"New-Tckt": // Status Notification of Ticket
                                            #4..180
                                                    CASE NotificationEntry."Action Type" OF
                                                      NotificationEntry."Action Type"::Started:
                                                        BEGIN
                                                          NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(Action2StartTxt, Task."Assigned To", LOWERCASE(Task.TABLECAPTION)));
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                            STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                                                        END;
                                                      NotificationEntry."Action Type"::Postponed:
                                                        BEGIN
                                                          NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionPostponedTxt, Task."Assigned To", LOWERCASE(Task.TABLECAPTION)));
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                            STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To"));
                                                        END;
                                                      NotificationEntry."Action Type"::Completed:
                                                        BEGIN
                                                          NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionCompletedTxt, Task."Completed By", LOWERCASE(Task.TABLECAPTION)));
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                            STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To"));
                                                        END;
                                                      NotificationEntry."Action Type"::"Change of Priority":
                                                        BEGIN
                                                          NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionChangeOfPriorityLevel, FORMAT(Task.Priority), LOWERCASE(Task.TABLECAPTION)));
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',STRSUBSTNO(StatusChangeActionFieldChangeTxt, LOWERCASE(Task.TABLECAPTION)));
                                                        END;
                                                      NotificationEntry."Action Type"::"Change of Commitment Date":
                                                        BEGIN
                                                          NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(Action2CommitmentChangeTxt, Task."Assigned To", LOWERCASE(Task.TABLECAPTION)));
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                            STRSUBSTNO(StatusChangeActionCommitmentIsUpdatedTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                                                        END;
                                                      NotificationEntry."Action Type"::"Aging Before Due":
                                                        BEGIN
                                                          NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionAgingBeforeDueTxt, Task.GetNoOfDaysLeft, LOWERCASE(Task.TABLECAPTION)));
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                            STRSUBSTNO(Action3AgingBeforeDueTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                                                        END;
                                                      NotificationEntry."Action Type"::"Aging Overdue":
                                                        BEGIN
                                                          NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionAgingOverdueTxt, (Task.GetNoOfDaysLeft), LOWERCASE(Task.TABLECAPTION)));
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                            STRSUBSTNO(Action3AgingBeforeDueTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                                                        END;
                                                      NotificationEntry."Action Type"::"Percent Complete Update":
                                                        BEGIN
                                                          NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionPercentCompleteUpdate, FORMAT(Task."Percent Complete",0,'<precision, 1:0><standard format, 0> %')));
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                            STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To"));
                                                        END;
                                                      NotificationEntry."Action Type"::"New Note",NotificationEntry."Action Type"::"New Link":
                                                        BEGIN
                                                          NotificationBody := NotificationBody.Replace('%Action%',
                                                            STRSUBSTNO(ActionNewRecordLinkTxt, NotificationEntry."Created By", LOWERCASE(FORMAT(NotificationEntry."Action Type"))));
                                                          IF Task.Status = Task.Status::Completed THEN
                                                            NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                              STRSUBSTNO(StatusChangeAction2ResolvedClosedTxt,Task.TABLECAPTION,LOWERCASE(FORMAT(Task.Status)),FORMAT(Task."Completed DateTime")))
                                                          ELSE
                                                            NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                              STRSUBSTNO(StatusChangeActionStartedTxt, Task.TABLECAPTION, FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                                                        END;
                                                    END;

                                            #242..244
                                                  // End Statement
                                                END;
                                              END;
                                          END;

                             ModifiedCode=BEGIN
                                            #1..183
                                                          NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(Action2StartTxt, Task."Assigned To User ID", LOWERCASE(Task.TABLECAPTION)));
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                            STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                                            #187..189
                                                          NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionPostponedTxt, Task."Assigned To User ID", LOWERCASE(Task.TABLECAPTION)));
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                            STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To User ID"));
                                            #193..195
                                                          NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionCompletedTxt, Task."Completed By User ID", LOWERCASE(Task.TABLECAPTION)));
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                            STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To User ID"));
                                            #199..206
                                                          NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(Action2CommitmentChangeTxt, Task."Assigned To User ID", LOWERCASE(Task.TABLECAPTION)));
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                            STRSUBSTNO(StatusChangeActionCommitmentIsUpdatedTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                                            #210..214
                                                            STRSUBSTNO(Action3AgingBeforeDueTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                                            #216..220
                                                            STRSUBSTNO(Action3AgingBeforeDueTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                                            #222..226
                                                            STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To User ID"));
                                            #228..234
                                                              STRSUBSTNO(StatusChangeAction2ResolvedClosedTxt,Task.TABLECAPTION,LOWERCASE(FORMAT(Task.Status)),FORMAT(Task."Date Completed")))
                                                          ELSE
                                                            NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                              STRSUBSTNO(StatusChangeActionStartedTxt, Task.TABLECAPTION, FORMAT(Task."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                                            #239..247
                                          END;

                             Target=PopulateCustomNotificationTemplateWithRecordInfo(PROCEDURE 12) }
        { CodeModification  ;OriginalCode=BEGIN
                                            // Record from approval entry
                                            RecRef.SETTABLE(ApprovalEntry);

                                            #4..73
                                                    SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
                                                    NotificationBody := NotificationBody.Replace('%Details%','');
                                                    ReplaceTokenWithJobOrderDetails(NotificationBody, JobOrder);
                                                    StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, RFQ.RECORDID);
                                                  END;
                                                DATABASE::Task:
                                                  BEGIN
                                            #81..95
                                                    SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
                                                    SetTokenToValueOfField(NotificationBody,'%No%',RecRef,'No.');
                                                    ReplaceTokenWithINTPDetails(NotificationBody, INTP);
                                                   StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, INTP.RECORDID);
                                                  END;
                                              END;
                                            END;
                                          END;

                             ModifiedCode=BEGIN
                                            #1..76
                                                    StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, RecRef.RECORDID);
                                            #78..98
                                                    StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, INTP.RECORDID);
                                            #100..102
                                          END;

                             Target=ReplaceTokensWithCustomApprovalInfo(PROCEDURE 1) }
        { CodeModification  ;OriginalCode=BEGIN
                                            CASE RecRef.NUMBER OF
                                              DATABASE::"Request For Quotation":
                                                BEGIN
                                            #4..114
                                                  SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
                                                  NotificationBody := NotificationBody.Replace('%Details%','');
                                                  ReplaceTokenWithJobOrderDetails(NotificationBody, JobOrder);
                                                END;
                                            END;
                                          END;

                             ModifiedCode=BEGIN
                                            #1..117
                                                  StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, JobOrder.RECORDID);
                                                END;
                                            END;
                                          END;

                             Target=ReplaceTokensWithRecInfo(PROCEDURE 2) }
        { CodeModification  ;OriginalCode=BEGIN
                                            WITH JobOrder DO BEGIN
                                              ReplaceTokenWithLinkedINTPDetails(NotificationBody, JobOrder."INTP No.");
                                              NotificationBody := NotificationBody.Replace('%JobTypeCaption%', JobOrder.FIELDCAPTION("Job Type"));
                                              NotificationBody := NotificationBody.Replace('%JobType%', FORMAT(JobOrder."Job Type"));
                                              NotificationBody := NotificationBody.Replace('%INTPNoCaption%', JobOrder.FIELDCAPTION("INTP No."));
                                              NotificationBody := NotificationBody.Replace('%INTPNo%', FORMAT(JobOrder."INTP No."));
                                              NotificationBody := NotificationBody.Replace('%EmployeeNameCaption%', 'Employee Name');
                                              IF Employee.GET(JobOrder."Employee No.") THEN
                                                NotificationBody := NotificationBody.Replace('%EmployeeName%', StringConversionManagement.WindowsToASCII(Employee."No." + ' ' + Employee.FullName))
                                              ELSE
                                                NotificationBody := NotificationBody.Replace('%EmployeeName%', '');
                                              NotificationBody := NotificationBody.Replace('%DepartmentCaption%', 'Department');
                                              IF UserGroup.GET(JobOrder."Department Code") THEN
                                                NotificationBody := NotificationBody.Replace('%Department%', StringConversionManagement.WindowsToASCII(UserGroup.Code + ' ' + UserGroup.Name))
                                              ELSE
                                                NotificationBody := NotificationBody.Replace('%Department%', '');
                                              NotificationBody := NotificationBody.Replace('%CustomerNameCaption%', 'Customer Name');
                                              IF Customer.GET(JobOrder."Customer No.") THEN
                                                NotificationBody := NotificationBody.Replace('%CustomerName%', StringConversionManagement.WindowsToASCII(Customer."No." + ' ' + Customer.Name + ' ' + Customer."Name 2"))
                                              ELSE
                                                NotificationBody := NotificationBody.Replace('%CustomerName%', '');
                                              NotificationBody := NotificationBody.Replace('%RemarksCaption%', JobOrder.FIELDCAPTION(Remarks));
                                              NotificationBody := NotificationBody.Replace('%Remarks%', StringConversionManagement.WindowsToASCII(JobOrder.Remarks));
                                              NotificationBody := NotificationBody.Replace('%StatusCaption%', JobOrder.FIELDCAPTION(Status));
                                              NotificationBody := NotificationBody.Replace('%Status%', FORMAT(JobOrder.Status));
                                              NotificationBody := NotificationBody.Replace('%DateRequestedCaption%', JobOrder.FIELDCAPTION("Date Requested"));
                                              NotificationBody := NotificationBody.Replace('%DateRequested%', FORMAT(JobOrder."Date Requested"));
                                              NotificationBody := NotificationBody.Replace('%SiteSurveyCaption%', JobOrder.FIELDCAPTION("Site Survey"));
                                              NotificationBody := NotificationBody.Replace('%SiteSurvey%', FORMAT(JobOrder."Site Survey"));
                                              NotificationBody := NotificationBody.Replace('%SiteSurveySRNoCaption%', JobOrder.FIELDCAPTION("Site Srvy. SR No."));
                                              NotificationBody := NotificationBody.Replace('%SiteSurveySRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Site Srvy. SR No."));
                                              NotificationBody := NotificationBody.Replace('%PermittingCaption%', JobOrder.FIELDCAPTION(Permitting));
                                              NotificationBody := NotificationBody.Replace('%Permitting%', FORMAT(JobOrder.Permitting));
                                              NotificationBody := NotificationBody.Replace('%PermittingSRNoCaption%', JobOrder.FIELDCAPTION("Service Report No."));
                                              NotificationBody := NotificationBody.Replace('%PermittingSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Service Report No."));
                                              NotificationBody := NotificationBody.Replace('%InsAndCommCaption%', JobOrder.FIELDCAPTION("Installation and Commissioning"));
                                              NotificationBody := NotificationBody.Replace('%InsAndComm%', FORMAT(JobOrder."Installation and Commissioning"));
                                              NotificationBody := NotificationBody.Replace('%InsAndCommSRNoCaption%', JobOrder.FIELDCAPTION("InsComm. SR No."));
                                              NotificationBody := NotificationBody.Replace('%InsAndCommSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."InsComm. SR No."));
                                              NotificationBody := NotificationBody.Replace('%TestingCaption%', JobOrder.FIELDCAPTION(Testing));
                                              NotificationBody := NotificationBody.Replace('%Testing%', FORMAT(JobOrder.Testing));
                                              NotificationBody := NotificationBody.Replace('%TestingSRNoCaption%', JobOrder.FIELDCAPTION("Testing SR No."));
                                              NotificationBody := NotificationBody.Replace('%TestingSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Testing SR No."));
                                              NotificationBody := NotificationBody.Replace('%PreAcceptanceCaption%', JobOrder.FIELDCAPTION("Preliminary Acceptance"));
                                              NotificationBody := NotificationBody.Replace('%PreAcceptance%', FORMAT(JobOrder."Preliminary Acceptance"));
                                              NotificationBody := NotificationBody.Replace('%PreAcceptanceSRNoCaption%', JobOrder.FIELDCAPTION("Pre-Accpt. SR No."));
                                              NotificationBody := NotificationBody.Replace('%PreAcceptanceSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Pre-Accpt. SR No."));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptanceCaption%', JobOrder.FIELDCAPTION("Final Acceptance"));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptance%', FORMAT(JobOrder."Final Acceptance"));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptanceSRNoCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. SR No."));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptanceSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Fnl. Accpt. SR No."));
                                              NotificationBody := NotificationBody.Replace('%RectificationCaption%', JobOrder.FIELDCAPTION(Rectification));
                                              NotificationBody := NotificationBody.Replace('%Rectification%', FORMAT(JobOrder.Rectification));
                                              NotificationBody := NotificationBody.Replace('%RectificationSRNoCaption%', JobOrder.FIELDCAPTION("Rectification SR No."));
                                              NotificationBody := NotificationBody.Replace('%RectificationSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Rectification SR No."));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingCaption%', JobOrder.FIELDCAPTION(Troubleshooting));
                                              NotificationBody := NotificationBody.Replace('%Troubleshooting%',FORMAT(JobOrder.Troubleshooting));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingSRNoCaption%', JobOrder.FIELDCAPTION("Trbltng. SR No."));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Trbltng. SR No."));
                                            END;
                                          END;

                             ModifiedCode=BEGIN
                                            WITH JobOrder DO BEGIN
                                              ReplaceTokenWithLinkedINTPDetails(NotificationBody, JobOrder."INTP No.");

                                              // Headers
                                              NotificationBody := NotificationBody.Replace('%NoCaption%', JobOrder.FIELDCAPTION("No."));
                                              NotificationBody := NotificationBody.Replace('%No.%', FORMAT(JobOrder."No."));
                                              NotificationBody := NotificationBody.Replace('%JobTypeCaption%', JobOrder.FIELDCAPTION("Job Type"));
                                              NotificationBody := NotificationBody.Replace('%JobType%', FORMAT(JobOrder."Job Type"));
                                              NotificationBody := NotificationBody.Replace('%ReqForExceptionNoCaption%', JobOrder.FIELDCAPTION("Request for Exception No."));
                                              NotificationBody := NotificationBody.Replace('%RequestForExceptionNo%', FORMAT(JobOrder."Request for Exception No."));
                                              NotificationBody := NotificationBody.Replace('%INTPNoCaption%', JobOrder.FIELDCAPTION("INTP No."));
                                              NotificationBody := NotificationBody.Replace('%INTPNo%', FORMAT(JobOrder."INTP No."));
                                              NotificationBody := NotificationBody.Replace('%ProjectNameCaption%', JobOrder.FIELDCAPTION("Project Name"));
                                              NotificationBody := NotificationBody.Replace('%ProjectName%', StringConversionManagement.WindowsToASCII(JobOrder."Project Name" + ' ' + JobOrder."Project Name 2"));

                                            #7..11

                                            #12..16

                                              NotificationBody := NotificationBody.Replace('%GroundManagerCaption%', 'Ground Manager');
                                              IF Resource.GET(JobOrder."Ground Manager No.") THEN
                                                NotificationBody := NotificationBody.Replace('%GroundManager%', StringConversionManagement.WindowsToASCII(Resource."No." + ' ' + Resource.Name))
                                              ELSE
                                                NotificationBody := NotificationBody.Replace('%GroundManager%', '');

                                              NotificationBody := NotificationBody.Replace('%ProjectManagerCaption%', 'Project Manager');
                                              IF Resource.GET(JobOrder."Ground Manager No.") THEN
                                                NotificationBody := NotificationBody.Replace('%ProjectManager%', StringConversionManagement.WindowsToASCII(Resource."No." + ' ' + Resource.Name))
                                              ELSE
                                                NotificationBody := NotificationBody.Replace('%ProjectManager%', '');

                                            #17..21

                                              NotificationBody := NotificationBody.Replace('%PurchaseOrderNoCaption%', JobOrder.FIELDCAPTION("P.O No."));
                                              NotificationBody := NotificationBody.Replace('%PurchaseOrderNo%', FORMAT(JobOrder."P.O No."));
                                            #22..27

                                              // Meeting
                                              NotificationBody := NotificationBody.Replace('%MeetingCaption%', JobOrder.FIELDCAPTION(Meeting));
                                              NotificationBody := NotificationBody.Replace('%Meeting%', ReplaceTokenToChecked(JobOrder.Meeting));
                                              NotificationBody := NotificationBody.Replace('%MeetingEmailSMSConfirmationCaption%', JobOrder.FIELDCAPTION("Meeting Email/SMS Conf."));
                                              NotificationBody := NotificationBody.Replace('%MeetingEmailSMSConfirmation%', ReplaceTokenToChecked(JobOrder."Meeting Email/SMS Conf."));

                                              // Product Presentation
                                              NotificationBody := NotificationBody.Replace('%ProdPresentationCaption%', JobOrder.FIELDCAPTION("Product Presentation"));
                                              NotificationBody := NotificationBody.Replace('%ProdPresentation%', ReplaceTokenToChecked(JobOrder."Product Presentation"));
                                              NotificationBody := NotificationBody.Replace('%ProdPresentationEmailSMSCaption%', JobOrder.FIELDCAPTION("Prod. Prstn. Email/SMS Conf."));
                                              NotificationBody := NotificationBody.Replace('%ProdPresentationEmailSMS%', ReplaceTokenToChecked(JobOrder."Prod. Prstn. Email/SMS Conf."));

                                              // Onsite Audit
                                              NotificationBody := NotificationBody.Replace('%OnsiteAuditCaption%', JobOrder.FIELDCAPTION("On-Site Audit"));
                                              NotificationBody := NotificationBody.Replace('%OnsiteAudit%', ReplaceTokenToChecked(JobOrder."On-Site Audit"));
                                              NotificationBody := NotificationBody.Replace('%AuditChecklistCaption%', JobOrder.FIELDCAPTION("Audit Checklist"));
                                              NotificationBody := NotificationBody.Replace('%AuditChecklist%', ReplaceTokenToChecked(JobOrder."Audit Checklist"));

                                              // Trial/POC
                                              NotificationBody := NotificationBody.Replace('%TrialPOCCaption%', JobOrder.FIELDCAPTION("Trial/POC"));
                                              NotificationBody := NotificationBody.Replace('%TrialPOC%', ReplaceTokenToChecked(JobOrder."Trial/POC"));
                                              NotificationBody := NotificationBody.Replace('%APCTFormCaption%', JobOrder.FIELDCAPTION("APCT Form"));
                                              NotificationBody := NotificationBody.Replace('%APCTForm%', ReplaceTokenToChecked(JobOrder."APCT Form"));
                                              NotificationBody := NotificationBody.Replace('%RFEFormCaption%', JobOrder.FIELDCAPTION("RFE Form"));
                                              NotificationBody := NotificationBody.Replace('%RFEForm%', ReplaceTokenToChecked(JobOrder."RFE Form"));

                                              // Site Survey
                                              NotificationBody := NotificationBody.Replace('%SiteSurveyCaption%', JobOrder.FIELDCAPTION("Site Survey"));
                                              NotificationBody := NotificationBody.Replace('%SiteSurvey%', ReplaceTokenToChecked(JobOrder."Site Survey"));
                                              NotificationBody := NotificationBody.Replace('%SiteSurveyRTPSCaption%', JobOrder.FIELDCAPTION("RTPS No."));
                                              NotificationBody := NotificationBody.Replace('%SiteSurveyRTPS%', FORMAT(JobOrder."RTPS No."));

                                              IF JobOrder."RTPS No." <> '' THEN
                                                NotificationBody := NotificationBody.Replace('%SiteSurveyRTPSCheckbox%', 'checked')
                                              ELSE
                                                NotificationBody := NotificationBody.Replace('%SiteSurveyRTPSCheckbox%', '');

                                              NotificationBody := NotificationBody.Replace('%SiteSurveySRNFormCaption%', JobOrder.FIELDCAPTION("Site Srvy. SR Form"));
                                              NotificationBody := NotificationBody.Replace('%SiteSurveySRNForm%', ReplaceTokenToChecked(JobOrder."Site Srvy. SR Form"));
                                              NotificationBody := NotificationBody.Replace('%SiteSurveySRNCaption%', JobOrder.FIELDCAPTION("Site Srvy. SR No."));
                                              NotificationBody := NotificationBody.Replace('%SiteSurveySRN%', StringConversionManagement.WindowsToASCII(JobOrder."Site Srvy. SR No."));

                                              // Permitting
                                              NotificationBody := NotificationBody.Replace('%PermittingCaption%', JobOrder.FIELDCAPTION(Permitting));
                                              NotificationBody := NotificationBody.Replace('%Permitting%', ReplaceTokenToChecked(JobOrder.Permitting));
                                              NotificationBody := NotificationBody.Replace('%PrmtgTimelineOfROWCaption%', JobOrder.FIELDCAPTION("Prmtg. Timeline of ROW"));
                                              NotificationBody := NotificationBody.Replace('%PrmtgTimelineOfROW%', ReplaceTokenToChecked(JobOrder."Prmtg. Timeline of ROW"));
                                              NotificationBody := NotificationBody.Replace('%PrmtgAFICaption%', JobOrder.FIELDCAPTION("Prmtg. AFI"));
                                              NotificationBody := NotificationBody.Replace('%PrmtgAFI%', ReplaceTokenToChecked(JobOrder."Prmtg. AFI"));
                                              NotificationBody := NotificationBody.Replace('%PermittingSRNoCaption%', JobOrder.FIELDCAPTION("Service Report No."));
                                              NotificationBody := NotificationBody.Replace('%PermittingSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Service Report No."));

                                              // Installation and Commissioning
                                              NotificationBody := NotificationBody.Replace('%InsAndCommCaption%', JobOrder.FIELDCAPTION("Installation and Commissioning"));
                                              NotificationBody := NotificationBody.Replace('%InsAndComm%', ReplaceTokenToChecked(JobOrder."Installation and Commissioning"));
                                              NotificationBody := NotificationBody.Replace('%InsCommRFEFormCaption%', JobOrder.FIELDCAPTION("InsComm. RFE Form"));
                                              NotificationBody := NotificationBody.Replace('%InsCommRFEForm%', ReplaceTokenToChecked(JobOrder."InsComm. RFE Form"));
                                              NotificationBody := NotificationBody.Replace('%InsAndCommSRNoCaption%', JobOrder.FIELDCAPTION("InsComm. SR No."));
                                              NotificationBody := NotificationBody.Replace('%InsAndCommSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."InsComm. SR No."));
                                              NotificationBody := NotificationBody.Replace('%InsCommAFICaption%', JobOrder.FIELDCAPTION("InsComm. AFI"));
                                              NotificationBody := NotificationBody.Replace('%InsCommAFI%', ReplaceTokenToChecked(JobOrder."InsComm. AFI"));
                                              NotificationBody := NotificationBody.Replace('%InsCommLineOfSightCaption%', JobOrder.FIELDCAPTION("InsComm. Line of Sight"));
                                              NotificationBody := NotificationBody.Replace('%InsCommLineOfSight%', ReplaceTokenToChecked(JobOrder."InsComm. Line of Sight"));
                                              NotificationBody := NotificationBody.Replace('%InsCommNonLineOfSightCaption%', JobOrder.FIELDCAPTION("InsComm. Non-Line of Sight"));
                                              NotificationBody := NotificationBody.Replace('%InsCommNonLineOfSight%', ReplaceTokenToChecked(JobOrder."InsComm. Non-Line of Sight"));
                                              NotificationBody := NotificationBody.Replace('%InsCommPermittingCaption%', JobOrder.FIELDCAPTION("InsComm. Permitting"));
                                              NotificationBody := NotificationBody.Replace('%InsCommPermitting%', ReplaceTokenToChecked(JobOrder."InsComm. Permitting"));
                                              NotificationBody := NotificationBody.Replace('%InsCommTrafficCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. Traffic"));
                                              NotificationBody := NotificationBody.Replace('%InsCommTraffic%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. Traffic"));
                                              NotificationBody := NotificationBody.Replace('%InsCommMMDACaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. MMDA"));
                                              NotificationBody := NotificationBody.Replace('%InsCommMMDA%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. MMDA"));
                                              NotificationBody := NotificationBody.Replace('%InsCommRAAWACaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. RAAWA"));
                                              NotificationBody := NotificationBody.Replace('%InsCommRAAWA%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. RAAWA"));
                                              NotificationBody := NotificationBody.Replace('%InsCommLGUCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. LGU Permit"));
                                              NotificationBody := NotificationBody.Replace('%InsCommLGU%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. LGU Permit"));
                                              NotificationBody := NotificationBody.Replace('%InsCommBuildingCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. Bldg. Permit"));
                                              NotificationBody := NotificationBody.Replace('%InsCommBuilding%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. Bldg. Permit"));
                                              NotificationBody := NotificationBody.Replace('%InsCommBarangayCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. Brgy. Permit"));
                                              NotificationBody := NotificationBody.Replace('%InsCommBarangay%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. Brgy. Permit"));
                                              NotificationBody := NotificationBody.Replace('%InsCommDPWHCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. DPWH"));
                                              NotificationBody := NotificationBody.Replace('%InsCommDPWH%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. DPWH"));
                                              NotificationBody := NotificationBody.Replace('%InsCommServiceOrderCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. SO"));
                                              NotificationBody := NotificationBody.Replace('%InsCommServiceOrder%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. SO"));
                                              NotificationBody := NotificationBody.Replace('%InsCommAccessLetterCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. ALP"));
                                              NotificationBody := NotificationBody.Replace('%InsCommAccessLetter%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. ALP"));
                                              NotificationBody := NotificationBody.Replace('%InsCommALOCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. ALO"));
                                              NotificationBody := NotificationBody.Replace('%InsCommALO%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. ALO"));
                                              NotificationBody := NotificationBody.Replace('%InsCommFIOCaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. FIO"));
                                              NotificationBody := NotificationBody.Replace('%InsCommFIO%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. FIO"));
                                              NotificationBody := NotificationBody.Replace('%InsCommHOACaption%', JobOrder.FIELDCAPTION("InsComm. Prmt. HOA"));
                                              NotificationBody := NotificationBody.Replace('%InsCommHOA%', ReplaceTokenToChecked(JobOrder."InsComm. Prmt. HOA"));
                                              NotificationBody := NotificationBody.Replace('%InsCommOthersCaption%', JobOrder.FIELDCAPTION("InsComm. Others"));

                                              IF JobOrder."InsComm. Others" <> '' THEN
                                                NotificationBody := NotificationBody.Replace('%InsCommOthersCheckbox%', 'checked')
                                              ELSE
                                                NotificationBody := NotificationBody.Replace('%InsCommOthersCheckbox%', '');

                                              NotificationBody := NotificationBody.Replace('%InsCommOthers%', FORMAT(JobOrder."InsComm. Others"));

                                              // Testing
                                              NotificationBody := NotificationBody.Replace('%TestingCaption%', JobOrder.FIELDCAPTION(Testing));
                                              NotificationBody := NotificationBody.Replace('%Testing%', ReplaceTokenToChecked(JobOrder.Testing));
                                              NotificationBody := NotificationBody.Replace('%TestingSRNFormCaption%', JobOrder.FIELDCAPTION("Testing SR Form"));
                                              NotificationBody := NotificationBody.Replace('%TestingSRNForm%', ReplaceTokenToChecked(JobOrder."Testing SR Form"));
                                              NotificationBody := NotificationBody.Replace('%TestingSRNoCaption%', JobOrder.FIELDCAPTION("Testing SR No."));
                                              NotificationBody := NotificationBody.Replace('%TestingSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Testing SR No."));
                                              NotificationBody := NotificationBody.Replace('%TestingTestProceduresCaption%', JobOrder.FIELDCAPTION("Testing Test Procedures"));
                                              NotificationBody := NotificationBody.Replace('%TestingTestProcedures%', ReplaceTokenToChecked(JobOrder."Testing Test Procedures"));

                                              // Preliminary Acceptance
                                              NotificationBody := NotificationBody.Replace('%PreAcceptanceCaption%', JobOrder.FIELDCAPTION("Preliminary Acceptance"));
                                              NotificationBody := NotificationBody.Replace('%PreAcceptance%', ReplaceTokenToChecked(JobOrder."Preliminary Acceptance"));
                                              NotificationBody := NotificationBody.Replace('%PreAcceptanceSNRFormCaption%', JobOrder.FIELDCAPTION("Pre-Accpt. SR Form"));
                                              NotificationBody := NotificationBody.Replace('%PreAcceptanceSNRForm%', ReplaceTokenToChecked(JobOrder."Pre-Accpt. SR Form"));
                                              NotificationBody := NotificationBody.Replace('%PreAcceptanceSRNoCaption%', JobOrder.FIELDCAPTION("Pre-Accpt. SR No."));
                                              NotificationBody := NotificationBody.Replace('%PreAcceptanceSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Pre-Accpt. SR No."));
                                              NotificationBody := NotificationBody.Replace('%PreAcceptanceSchedByCustomerCaption%', JobOrder.FIELDCAPTION("Pre-Accpt. Sched. by Customer"));
                                              NotificationBody := NotificationBody.Replace('%PreAcceptanceSchedByCustomer%', ReplaceTokenToChecked(JobOrder."Pre-Accpt. Sched. by Customer"));

                                              // Final Acceptance
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptanceCaption%', JobOrder.FIELDCAPTION("Final Acceptance"));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptance%', ReplaceTokenToChecked(JobOrder."Final Acceptance"));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptanceSNRFormCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. SR Form"));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptanceSNRForm%', ReplaceTokenToChecked(JobOrder."Fnl. Accpt. SR Form"));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptanceSRNoCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. SR No."));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptanceSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Fnl. Accpt. SR No."));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptancePACCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. PAC"));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptancePAC%', ReplaceTokenToChecked(JobOrder."Fnl. Accpt. PAC"));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptanceSchedByCustCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. Schd. by Cust."));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptanceSchedByCust%', ReplaceTokenToChecked(JobOrder."Fnl. Accpt. Schd. by Cust."));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptancePunchReportCaption%', JobOrder.FIELDCAPTION("Fnl. Accpt. Punchlist Report"));
                                              NotificationBody := NotificationBody.Replace('%FinalAcceptancePunchReport%', ReplaceTokenToChecked(JobOrder."Fnl. Accpt. Punchlist Report"));

                                              // Rectification
                                              NotificationBody := NotificationBody.Replace('%RectificationCaption%', JobOrder.FIELDCAPTION(Rectification));
                                              NotificationBody := NotificationBody.Replace('%Rectification%', ReplaceTokenToChecked(JobOrder.Rectification));
                                              NotificationBody := NotificationBody.Replace('%RectificationSRNFormCaption%', JobOrder.FIELDCAPTION("Rectification SR Form"));
                                              NotificationBody := NotificationBody.Replace('%RectificationSRNForm%', ReplaceTokenToChecked(JobOrder."Rectification SR Form"));
                                              NotificationBody := NotificationBody.Replace('%RectificationSRNoCaption%', JobOrder.FIELDCAPTION("Rectification SR No."));
                                              NotificationBody := NotificationBody.Replace('%RectificationSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Rectification SR No."));
                                              NotificationBody := NotificationBody.Replace('%RectificationPunchReportCaption%', JobOrder.FIELDCAPTION("Rectification Punchlist Report"));
                                              NotificationBody := NotificationBody.Replace('%RectificationPunchReport%', ReplaceTokenToChecked(JobOrder."Rectification Punchlist Report"));

                                              // Troubleshooting
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingCaption%', JobOrder.FIELDCAPTION(Troubleshooting));
                                              NotificationBody := NotificationBody.Replace('%Troubleshooting%',ReplaceTokenToChecked(JobOrder.Troubleshooting));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingSRNFormCaption%', JobOrder.FIELDCAPTION("Trbltng. SR Form"));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingSRNForm%',ReplaceTokenToChecked(JobOrder."Trbltng. SR Form"));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingSRNoCaption%', JobOrder.FIELDCAPTION("Trbltng. SR No."));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingSRNo%', StringConversionManagement.WindowsToASCII(JobOrder."Trbltng. SR No."));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingNCCFNoCaption%', JobOrder.FIELDCAPTION("Trbltng. NCCF No."));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingNCCFNo%', StringConversionManagement.WindowsToASCII(JobOrder."Trbltng. NCCF No."));
                                              IF JobOrder."Trbltng. NCCF No." <> '' THEN
                                                NotificationBody := NotificationBody.Replace('%TroubleshootingNCCFCheckbox%', 'checked')
                                              ELSE
                                                NotificationBody := NotificationBody.Replace('%TroubleshootingNCCFCheckbox%', '');

                                              NotificationBody := NotificationBody.Replace('%TroubleshootingUnderWarrantyCaption%', JobOrder.FIELDCAPTION("Trbltng. Under Warranty"));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingUnderWarranty%',ReplaceTokenToChecked(JobOrder."Trbltng. Under Warranty"));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingDeliveryRcptDateCaption%', JobOrder.FIELDCAPTION("Trbltng. DR Date"));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingDeliveryRcptDate%',FORMAT(JobOrder."Trbltng. DR Date"));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingAcceptDateCaption%', JobOrder.FIELDCAPTION("Trbltng. Date of Acceptance"));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingAcceptDate%',FORMAT(JobOrder."Trbltng. Date of Acceptance"));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingOutOfWarrantyCaption%', JobOrder.FIELDCAPTION("Trbltng. Out of Warranty"));
                                              NotificationBody := NotificationBody.Replace('%TroubleshootingOutOfWarranty%',ReplaceTokenToChecked(JobOrder."Trbltng. Out of Warranty"));

                                              // Special Project of CEO
                                              NotificationBody := NotificationBody.Replace('%SpecialProjectOfCEOCaption%', JobOrder.FIELDCAPTION("Special Project of CEO"));
                                              NotificationBody := NotificationBody.Replace('%SpecialProjectOfCEO%',ReplaceTokenToChecked(JobOrder."Special Project of CEO"));

                                              // Activity
                                              NotificationBody := NotificationBody.Replace('%ActivityCaption%', JobOrder.FIELDCAPTION(Activity));
                                              NotificationBody := NotificationBody.Replace('%Activity%', StringConversionManagement.WindowsToASCII(JobOrder.Activity));

                                              // Vehicle Request
                                              StripoEmailTemplate.ReplaceTokenWithJOVehicleRequest(NotificationBody, JobOrder);

                                              // Public Transportation Request
                                              StripoEmailTemplate.ReplaceTokenWithJOPublicTranspoRequest(NotificationBody, JobOrder);

                                              // Airplane Ticket Request
                                              StripoEmailTemplate.ReplaceTokenWithJOAirplaneTicketRequest(NotificationBody, JobOrder);

                                              // Remarks/Notes
                                              StripoEmailTemplate.ReplaceTokenWithRemarksNotes(NotificationBody, JobOrder.RECORDID);

                                              // Approval/Comment
                                              StripoEmailTemplate.ReplaceTokenWithApprovalComments(NotificationBody, JobOrder.RECORDID);

                                              // Approval Entries
                                              StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, JobOrder.RECORDID);
                                            END;
                                          END;

                             Target=ReplaceTokenWithJobOrderDetails(PROCEDURE 21) }
        { Insertion         ;InsertAfter=SetTokenToCaptionOfField(PROCEDURE 31);
                             ChangedElements=PROCEDURECollection
                             {
                               LOCAL PROCEDURE ReplaceTokenToChecked@34(VAR FieldBoolean@1000 : Boolean) : Text;
                               BEGIN
                                 IF FieldBoolean THEN
                                   EXIT('checked');
                                 EXIT('');
                               END;

                             }
                              }
      }
      CODE
      {

        BEGIN
        END.
      }
    }

    OBJECT Modification "Custom Approval Management"(Codeunit 50582)
    {
      OBJECT-PROPERTIES
      {
        Date=06/27/18;
        Time=[ 6:49:59 PM];
        Modified=Yes;
        Version List=NAVOC1.00.02.00;
      }
      PROPERTIES
      {
        Target="Custom Approval Management"(Codeunit 50582);
      }
      CHANGES
      {
        { CodeModification  ;OriginalCode=BEGIN
                                            10:33 PM Monday, July 29, 2024
                                              Migrated the functions from Codeunit 1535 Approvals Mgmt. for Create an approval request for the record using approver.
                                          END;

                             ModifiedCode=BEGIN
                                            !! Documentation Codeunit 50582 Custom Approval Management

                                            10:33 PM Monday, July 29, 2024
                                              Migrated the functions from Codeunit 1535 Approvals Mgmt. for Create an approval request for the record using approver.

                                            10:38 AM Wednesday, August 21, 2024
                                              Update the CreateApprovalEntryNotification: Remove the attachment on the email notification of Job Order.
                                          END;

                             Target=Documentation }
        { CodeModification  ;OriginalCode=BEGIN
                                            { ******************
                                            Applied to Codeunit 1535 Approvals Mgmt. > CreateApprovalEntryNotification function
                                            To create a notification for the approval of documents, sending and approval.
                                            ApprovalsMgmt.CreateApprovalEntryNotification
                                            ****************** }

                                            IF NOT WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
                                              EXIT(TRUE);

                                            IF NOT RecRef.GET(ApprovalEntry."Record ID to Approve") THEN
                                              EXIT(TRUE);

                                            IF WorkflowStepArgument."Notification User ID" = '' THEN
                                              WorkflowStepArgument.VALIDATE("Notification User ID",ApprovalEntry."Approver ID");

                                            // Log SMS Notification
                                            TaskerSMSLogs.LogApprovalSMSNotification(ApprovalEntry);

                                            ApprovalEntry.RESET;
                                            CASE ApprovalEntry."Table ID" OF
                                              DATABASE::Item:
                                                CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-Item",WorkflowStepArgument."Notification User ID",
                                                  ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),'','');
                                              DATABASE::Vendor:
                                                CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-Vendor",WorkflowStepArgument."Notification User ID",
                                                  ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),'','');
                                              DATABASE::Customer:
                                                CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-Customer",WorkflowStepArgument."Notification User ID",
                                                  ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),'','');
                                              DATABASE::"Job Order":
                                                BEGIN
                                                  RecRef.SETTABLE(JobOrder);
                                                  IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
                                                    FilePath := FileManagement.ServerTempFileName('pdf');
                                                    FileName := JobOrder.TABLECAPTION + ' ' + JobOrder."No." + '.pdf';
                                                    JobOrderReportPrinter.SetReportFilter(JobOrder."No.");
                                                    JobOrderReportPrinter.SAVEASPDF(FilePath);
                                                  END;
                                                  CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-JO",WorkflowStepArgument."Notification User ID",ApprovalEntry,
                                                    WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),FilePath,FileName);
                                                END;
                                              DATABASE::Job:
                                                CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-Job", WorkflowStepArgument."Notification User ID",
                                                  ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),'','');
                                              DATABASE::Ticket:
                                                CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Appvl-Tckt", WorkflowStepArgument."Notification User ID",ApprovalEntry,
                                                  WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),'','');
                                              DATABASE::"Software Development Request":
                                                CustomNotifEntryMgmt.CreateNewEntryWithCustomActionForSDR(NotificationEntry.Type::"Appvl-SDR", WorkflowStepArgument."Notification User ID",ApprovalEntry,
                                                  WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",0,UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"));
                                              DATABASE::"Request For Quotation":
                                                CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-RFQ",WorkflowStepArgument."Notification User ID",
                                                  ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), '', '');
                                              DATABASE::"Internal Notice to Proceed":
                                                CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-INTP",WorkflowStepArgument."Notification User ID",
                                                  ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), '', '');
                                              DATABASE::"Sales Header":
                                                BEGIN
                                                  RecRef.SETTABLE(SalesHeader);
                                                  CASE SalesHeader."Request type" OF
                                                    SalesHeader."Request type"::"Tools & Equipment Requisition":
                                                      BEGIN
                                                        IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
                                                          FilePath := SalesHeaderReportPrinter.SaveAsPDFSalesHeader(SalesHeader);
                                                          FileName := FORMAT(SalesHeader."Request type") + ' ' + SalesHeader."No." + '.pdf';
                                                        END;
                                                        CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-TERF",WorkflowStepArgument."Notification User ID",
                                                          ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), FilePath, FileName);
                                                      END;
                                                    SalesHeader."Request type"::Withdrawal:
                                                      BEGIN
                                                        IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
                                                          FilePath := SalesHeaderReportPrinter.SaveAsPDFSalesHeader(SalesHeader);
                                                          FileName := FORMAT(SalesHeader."Request type") + ' ' + SalesHeader."No." + '.pdf';
                                                        END;
                                                        CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-WW",WorkflowStepArgument."Notification User ID",
                                                          ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), FilePath, FileName);
                                                      END;
                                                    SalesHeader."Request type"::"Return Merchandise Authorization":
                                                      BEGIN
                                                        CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-C-RMA",WorkflowStepArgument."Notification User ID",
                                                          ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),'','');
                                                      END;
                                                    SalesHeader."Request type"::"Request For Exception":
                                                      BEGIN
                                                        IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
                                                          FilePath := SalesHeaderReportPrinter.SaveAsPDFSalesHeader(SalesHeader);
                                                          FileName := FORMAT(SalesHeader."Request type") + ' ' + SalesHeader."No." + '.pdf';
                                                        END;
                                                        CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-RFE",WorkflowStepArgument."Notification User ID",
                                                          ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), FilePath, FileName);
                                                      END;
                                                    SalesHeader."Request type"::"Work Change Request":
                                                      BEGIN
                                                        IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
                                                          FilePath := SalesHeaderReportPrinter.SaveAsPDFSalesHeader(SalesHeader);
                                                          FileName := FORMAT(SalesHeader."Request type") + ' ' + SalesHeader."No." + '.pdf';
                                                        END;
                                                        CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-WCR",WorkflowStepArgument."Notification User ID",
                                                          ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), FilePath, FileName);
                                                      END;
                                                  END;
                                                END;
                                              DATABASE::"Purchase Header":
                                                BEGIN
                                                  RecRef.SETTABLE(PurchaseHeader);
                                                  CASE PurchaseHeader."Document Type" OF
                                                    PurchaseHeader."Document Type"::Order:
                                                      BEGIN
                                                        IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
                                                          FilePath := PurchDocPrinter.SavePurchaseHeaderReportAsPdf(PurchaseHeader);
                                                          FileName := 'Purchase ' + FORMAT(PurchaseHeader."Document Type") + ' ' + PurchaseHeader."No." + '.pdf';
                                                        END;
                                                        CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-PO",WorkflowStepArgument."Notification User ID",
                                                          ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), FilePath, FileName);
                                                      END;
                                                    PurchaseHeader."Document Type"::Invoice:
                                                      BEGIN
                                                        CASE PurchaseHeader."Request Type" OF
                                                          PurchaseHeader."Request Type"::"Request for Payment":
                                                              CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-RFPay",WorkflowStepArgument."Notification User ID",
                                                                ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), '', '');
                                                          PurchaseHeader."Request Type"::"Cash Advance":
                                                              CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-CA",WorkflowStepArgument."Notification User ID",
                                                                ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), '', '');
                                                          PurchaseHeader."Request Type"::"Request for Purchase":
                                                              CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-RFPur",WorkflowStepArgument."Notification User ID",
                                                                ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), '', '');
                                                        END;
                                                      END;
                                                  END;
                                                END;
                                              ELSE
                                                EXIT(FALSE);
                                            END;

                                            EXIT(TRUE);
                                          END;

                             ModifiedCode=BEGIN
                                            #1..30
                                                CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-JO",WorkflowStepArgument."Notification User ID",
                                                  ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),'','');
                                            #42..137
                                          END;

                             Target=CreateApprovalEntryNotification(PROCEDURE 50) }
      }
      CODE
      {

        BEGIN
        END.
      }
    }

11:15 PM Wednesday, August 21, 2024
  ! Additional  OBJECT Page 50049 Trigger Approval Service for sending the approval in web service

  OBJECT Page 50049 Trigger Approval Service
  {
    OBJECT-PROPERTIES
    {
      Date=06/26/18;
      Time=12:16:18 AM;
      Modified=Yes;
      Version List=NAVOC1.00.02.00;
    }
    PROPERTIES
    {
      InsertAllowed=Yes;
      DeleteAllowed=No;
      ModifyAllowed=No;
      SourceTable=Table99008535;
      DelayedInsert=No;
      PageType=Card;
      SourceTableTemporary=Yes;
      OnModifyRecord=VAR
                       JobOrder@1000 : Record 50012;
                     BEGIN
                       CASE Document OF
                         Document::"Job Order":
                           BEGIN
                             JobOrder.GET(DocumentNo);
                             CASE ApprovalAction OF
                               ApprovalAction::"Send Approval":
                                 BEGIN
                                   IF ApprovalsMgmt.CheckJOApprovalsWorkflowEnabled(JobOrder) THEN
                                     ApprovalsMgmt.OnSendJOForApproval(JobOrder);
                                 END;
                               ApprovalAction::"Cancel Approval":
                                 IF JobOrder.Status = JobOrder.Status::"Pending Approval" THEN
                                   ApprovalsMgmt.OnCancelJOApprovalRequest(JobOrder);
                               ELSE
                                 ERROR(Txt01);
                             END;
                           END;
                         ELSE
                           ERROR(Txt01);
                       END;
                     END;

    }
    CONTROLS
    {
      { 1   ;    ;Container ;
                  ContainerType=ContentArea }

      { 5   ;1   ;Group     ;
                  Name=General;
                  CaptionML=ENU=General;
                  GroupType=Group }

      { 2   ;2   ;Field     ;
                  Name=Document;
                  SourceExpr=Document }

      { 3   ;2   ;Field     ;
                  Name=DocumentNo;
                  SourceExpr=DocumentNo }

      { 4   ;2   ;Field     ;
                  Name=ApprovalAction;
                  SourceExpr=ApprovalAction }

    }
    CODE
    {
      VAR
        ApprovalsMgmt@1002 : Codeunit 1535;
        ReleaseMgmt@1004 : Codeunit 50551;
        Document@1000 : 'Job Order';
        DocumentNo@1001 : Code[20];
        ApprovalAction@1003 : 'Send Approval,Cancel Approval';
        Txt01@1005 : TextConst 'ENU=Invalid request sent. Please select a valid request or contact your system administrator.';

      BEGIN
      {
        !! Documentation Page 50049 Trigger Approval Process
      }
      END.
    }
  }

10:11 PM Monday, October 14, 2024
  ! Change the Contact Email Length from 50 to 250.
  !! Selected object update based on the change logs

  OBJECT Modification "User Group Member"(Table 9001)
  {
    OBJECT-PROPERTIES
    {
      Date=06/26/18;
      Time=12:15:03 AM;
      Modified=Yes;
      Version List=NAVW19.00.00.46621,NAVOC1.00.02.00;
    }
    PROPERTIES
    {
      Target="User Group Member"(Table 9001);
    }
    CHANGES
    {
      { Insertion         ;Documentation=BEGIN
                                          !! Documentation Table 9001 User Group Member

                                            12:05 PM Monday, October 14, 2024
                                              Change the Contact Email Length from 50 to 250.


                                        END;
                                          }
      { PropertyModification;
                          Target="Contact Email"(Field 7);
                          Property=Data type;
                          OriginalValue=Text50;
                          ModifiedValue=Text250 }
    }
    CODE
    {

      BEGIN
      END.
    }
  }

3:40 PM Thursday, October 17, 2024
  ! Remove the attachment in Withdrawal and Tools & Equipment Requisition Form

  ! Transfer the code for notification from Notification Management to Custom Notification Management

  OBJECT Modification "Notification Management"(Codeunit 1510)
  {
    OBJECT-PROPERTIES
    {
      Date=06/26/18;
      Time=[ 7:30:41 PM];
      Modified=Yes;
      Version List=NAVW19.00,NAVOC1.00.02.00;
    }
    PROPERTIES
    {
      Target="Notification Management"(Codeunit 1510);
    }
    CHANGES
    {
      { Insertion         ;Documentation=BEGIN
                                          !! Documentation Codeunit 1510 Notification Management

                                            10:57 AM Tuesday, October 15, 2024
                                              Code transfer of ReplaceTokenWithApprovalInfo NotificationEntry.Type::"Approval-WW", NotificationEntry.Type::"Approval-TERF"
                                                to CustomNotificationManagement.ReplaceTokensWithCustomApprovalInfo

                                              Code transfer of ReplaceTokensWithRecInfo Sales Header to CustomNotificationManagement.ReplaceTokensWithRecInfo
                                        END;
                                          }
      { CodeModification  ;OriginalCode=BEGIN
                                          // Special Mappings
                                          CASE RecRef.NUMBER OF
                                            DATABASE::"Incoming Document":
                                              BEGIN
                                                NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(RecRef.CAPTION));
                                                SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'Entry No.');
                                              END;
                                            DATABASE::Item:
                                              BEGIN
                                                RecRef.SETTABLE(Item);
                                                NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(RecRef.CAPTION));
                                                SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
                                                ConstructItemDetailsForHTML(NotificationBody, Item);
                                              END;
                                            DATABASE::Customer:
                                              BEGIN
                                                RecRef.SETTABLE(Customer);
                                                NotificationBody := NotificationBody.Replace('%DocumentType%',RecRef.CAPTION);
                                                SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
                                                NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%',RecRef.CAPTION);
                                                SetTokenToValueOfField(NotificationBody,'%CustomerVendorNo%',RecRef,'No.');
                                                SetTokenToValueOfField(NotificationBody,'%CustomerVendorName%',RecRef,'Name');
                                                ConstructCustomerDetailsForHTML(NotificationBody, Customer);

                                              END;
                                            DATABASE::"Approval Entry":
                                              BEGIN
                                                NotificationBody := NotificationBody.Replace('%DocumentType%','');
                                                SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'Record ID to Approve');
                                              END;
                                            // PHP Start
                                            DATABASE::Opportunity:
                                              BEGIN
                                                RecRef.SETTABLE(Opportunity);
                                                NotificationBody := NotificationBody.Replace('%DocumentType%','');
                                                NotificationBody := NotificationBody.Replace('%DocumentNo%',FORMAT(RecRef.RECORDID));
                                                NotificationBody := NotificationBody.Replace('%Details%',Opportunity.Description);
                                                OpporNotifDispatcher.ConstructOpportunityDetailsForHTML(NotificationBody,Opportunity);
                                              END;
                                            DATABASE::"To-do":
                                              BEGIN
                                                RecRef.SETTABLE(ToDo);
                                                NotificationBody := NotificationBody.Replace('%DocumentType%','');
                                                NotificationBody := NotificationBody.Replace('%DocumentNo%',FORMAT(RecRef.RECORDID));
                                                NotificationBody := NotificationBody.Replace('%Details%',ToDo.Description);
                                                NotificationBody := NotificationBody.Replace('%Description%',ToDo.Description);
                                                ToDoNotifDispatcher.ConstructTodoDetailsForHTML(NotificationBody,ToDo);
                                              END;
                                            DATABASE::Job:
                                              BEGIN
                                                RecRef.SETTABLE(Job);
                                                NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(Job.TABLECAPTION));
                                                SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
                                                NotificationBody := NotificationBody.Replace('%Details%',ReplaceSpecChar(Job.Description));
                                                ConstructJobDetailsForHTML(NotificationBody, Job);
                                              END;
                                            DATABASE::"Sales Header":
                                              BEGIN
                                                // General Setup
                                                RecRef.SETTABLE(SalesHeader);
                                                NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%', Customer.TABLECAPTION);
                                                NotificationBody := NotificationBody.Replace('%CustomerVendorNo%',SalesHeader."Sell-to Customer No.");
                                                NotificationBody := NotificationBody.Replace('%CustomerVendorName%',ReplaceSpecChar(SalesHeader."Sell-to Customer Name" + ' ' + SalesHeader."Sell-to Customer Name 2"));

                                                NotificationBody := NotificationBody.Replace('%Details%','');
                                                NotificationBody := NotificationBody.Replace('%DocumentType%',STRSUBSTNO('%1',SalesHeader."Request type"));
                                                NotificationBody := NotificationBody.Replace('%DocumentNo%',FORMAT(SalesHeader."No."));
                                                NotificationBody := NotificationBody.Replace('%DocumentDateCaption%',SalesHeader.FIELDCAPTION("Document Date"));
                                                NotificationBody := NotificationBody.Replace('%DocumentDate%',FORMAT(SalesHeader."Document Date"));
                                                ConstructSalesHeaderDetailsForHTML(NotificationBody, SalesHeader);
                                              END;
                                            DATABASE::"User Setup":
                                              BEGIN
                                                RecRef.SETTABLE(UserSetup);

                                                NotificationBody := NotificationBody.Replace('%UserID%',UserSetup."User ID");
                                                NotificationBody := NotificationBody.Replace('%ApproverIDCaption%',UserSetup.FIELDCAPTION("Approver ID"));
                                                NotificationBody := NotificationBody.Replace('%ApproverID%',UserSetup."Approver ID");
                                                ChangeLog.SETCURRENTKEY("Table No.", "Primary Key Field 1 Value");
                                                ChangeLog.SETRANGE("Table No.", DATABASE::"User Setup");
                                                ChangeLog.SETRANGE("Primary Key Field 1 Value", UserSetup."User ID");
                                                IF ChangeLog.FINDLAST THEN BEGIN
                                                  NotificationBody := NotificationBody.Replace('%OldApproverIDCaption%','Old Approver ID');
                                                  NotificationBody := NotificationBody.Replace('%OldApproverID%',ChangeLog."Old Value");
                                                END ELSE BEGIN
                                                  NotificationBody := NotificationBody.Replace('%OldApproverIDCaption%','Old Approver ID');
                                                  NotificationBody := NotificationBody.Replace('%OldApproverID%','');
                                                END;
                                              END;
                                            // PHP End
                                            ELSE BEGIN
                                              CustomNotificationManagement.ReplaceTokensWithRecInfo(NotificationBody, RecRef); // PHP Start
                                              NotificationBody := NotificationBody.Replace('%DocumentType%','');
                                              NotificationBody := NotificationBody.Replace('%DocumentNo%',FORMAT(RecRef.RECORDID));
                                            END;
                                          END;

                                          // Generic Mappings
                                          SetTokenToCaptionOfField(NotificationBody,'%AmountCaption%',RecRef,'Amount');
                                          SetTokenToValueOfField(NotificationBody,'%Amount%',RecRef,'Amount');

                                          SetTokenToValueOfField(NotificationBody,'%CurrencyCode%',RecRef,'Currency Code');

                                          SetTokenToCaptionOfField(NotificationBody,'%AmountLCYCaption%',RecRef,'Amount (LCY)');
                                          SetTokenToValueOfField(NotificationBody,'%AmountLCY%',RecRef,'Amount (LCY)');

                                          SetTokenToCaptionOfField(NotificationBody,'%DueDateCaption%',RecRef,'Due Date');
                                          SetTokenToValueOfField(NotificationBody,'%DueDate%',RecRef,'Due Date');

                                          NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%','');
                                          NotificationBody := NotificationBody.Replace('%CustomerVendorNo%','');
                                          NotificationBody := NotificationBody.Replace('%CustomerVendorName%','');
                                        END;

                          ModifiedCode=BEGIN
                                          #1..56
                                          #72..112
                                        END;

                          Target=ReplaceTokensWithRecInfo(PROCEDURE 38) }
      { CodeModification  ;OriginalCode=BEGIN
                                          RecRef.SETTABLE(ApprovalEntry);

                                          HtmlCommentLines := GetApprovalCommentLines(ApprovalEntry);
                                          #4..7
                                            NotificationEntry.Type::"Approval-Vendor", NotificationEntry.Type::"Approval-Item", NotificationEntry.Type::"Approval-Customer",
                                            NotificationEntry.Type::"Approval-RFQ",
                                            NotificationEntry.Type::"Approval-JO",
                                            NotificationEntry.Type::"Approval-RFE",NotificationEntry.Type::"Approval-WCR", NotificationEntry.Type::"Approval-TERF",NotificationEntry.Type::"Approval-WW", NotificationEntry.Type::"Approval-C-RMA",
                                            // PHP End
                                            NotificationEntry.Type::Approval:
                                              CASE ApprovalEntry.Status OF
                                                ApprovalEntry.Status::Open:
                                                  BEGIN
                                                    // PHP Start
                                                    IF ApprovalEntry."Table ID" = DATABASE::"Sales Header" THEN BEGIN
                                                      SalesHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.");
                                                        IF SalesHeader."Extension of Commitment Date" <> 0D THEN // Change the action if extension of RFE is requested
                                          #21..39
                                            NotificationEntry.Type::Overdue:
                                              NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionOverdueTxt,FORMAT(ApprovalEntry."Due Date",10)));
                                            // PHP Start
                                            NotificationEntry.Type::"Overdue-RFE":
                                              NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionOverdueRFETxt,''));
                                            NotificationEntry.Type::NOS:
                                          #46..142
                                          END;

                                          NotificationBody := NotificationBody.Replace('%ApprovalComments%',HtmlCommentLines);
                                        END;

                          ModifiedCode=BEGIN
                                          #1..10
                                            // !! TODO Transfer the code to Custom Notification Management
                                            NotificationEntry.Type::"Approval-RFE",NotificationEntry.Type::"Approval-WCR", NotificationEntry.Type::"Approval-C-RMA",
                                          #12..17
                                                    // !! TODO Transfer the code to Custom Notification Management
                                          #18..42
                                            // !! TODO Transfer the code to Custom Notification Management
                                          #43..145
                                        END;

                          Target=ReplaceTokensWithApprovalInfo(PROCEDURE 15) }
    }
    CODE
    {

      BEGIN
      END.
    }
  }

  OBJECT Modification "Custom Notification Management"(Codeunit 50581)
  {
    OBJECT-PROPERTIES
    {
      Date=07/09/18;
      Time=11:39:21 PM;
      Modified=Yes;
      Version List=NAVOC1.00.02.00;
    }
    PROPERTIES
    {
      Target="Custom Notification Management"(Codeunit 50581);
    }
    CHANGES
    {
      { CodeModification  ;OriginalCode=BEGIN
                                          !! Documentation Codeunit 50581 Custom Notification Management

                                          9:40 AM Thursday, August 15, 2024
                                            Modify ReplaceTokenWithJobOrderDetails function,  add other job order details and job order lines.
                                            Add ReplaceTokenToChecked function for boolean fields to set checkbox value in the email template.

                                          12:43 PM Friday, August 16, 2024
                                            Add blank table row if there's no data.

                                          11:10 PM Tuesday, August 20, 2024
                                            Add approval entry table based on stripo approval entry template.
                                        END;

                          ModifiedCode=BEGIN
                                          !! Documentation Codeunit 50581 Custom Notification Management

                                            9:40 AM Thursday, August 15, 2024
                                              Modify ReplaceTokenWithJobOrderDetails function,  add other job order details and job order lines.
                                              Add ReplaceTokenToChecked function for boolean fields to set checkbox value in the email template.

                                            12:43 PM Friday, August 16, 2024
                                              Add blank table row if there's no data.

                                            11:10 PM Tuesday, August 20, 2024
                                              Add approval entry table based on stripo approval entry template.

                                            2:26 PM Tuesday,  September 10, 2024
                                              Add function ReplaceTokenSalesHeaderDetails

                                            3:33 PM Wednesday, October 16, 2024
                                              Add Approval-WW and Approval-TERF in ReplaceTokensWithCustomApprovalInfo function.

                                            1:17 PM, thursday October 17, 2024
                                              Migrate script from Code unit 1510 function ConstructSalesHeaderDetailsForHTML to ReplaceTokenSalesHeaderDetails.
                                              Migrate Sales Header ReplaceTokensWithRecInfo to ReplaceTokensWithCustomApprovalInfo
                                        END;

                          Target=Documentation }
      { CodeModification  ;OriginalCode=BEGIN
                                          DataTypeManagement.GetRecordRef(NotificationEntry."Triggered By Record",RecRef);
                                            CASE NotificationEntry.Type OF
                                              NotificationEntry.Type::"New-Tckt": // Status Notification of Ticket
                                          #4..180
                                                  CASE NotificationEntry."Action Type" OF
                                                    NotificationEntry."Action Type"::Started:
                                                      BEGIN
                                                        NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(Action2StartTxt, Task."Assigned To", LOWERCASE(Task.TABLECAPTION)));
                                                        NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                          STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                                                      END;
                                                    NotificationEntry."Action Type"::Postponed:
                                                      BEGIN
                                                        NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionPostponedTxt, Task."Assigned To", LOWERCASE(Task.TABLECAPTION)));
                                                        NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                          STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To"));
                                                      END;
                                                    NotificationEntry."Action Type"::Completed:
                                                      BEGIN
                                                        NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionCompletedTxt, Task."Completed By", LOWERCASE(Task.TABLECAPTION)));
                                                        NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                          STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To"));
                                                      END;
                                                    NotificationEntry."Action Type"::"Change of Priority":
                                                      BEGIN
                                                        NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionChangeOfPriorityLevel, FORMAT(Task.Priority), LOWERCASE(Task.TABLECAPTION)));
                                                        NotificationBody := NotificationBody.Replace('%StatusChangeAction%',STRSUBSTNO(StatusChangeActionFieldChangeTxt, LOWERCASE(Task.TABLECAPTION)));
                                                      END;
                                                    NotificationEntry."Action Type"::"Change of Commitment Date":
                                                      BEGIN
                                                        NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(Action2CommitmentChangeTxt, Task."Assigned To", LOWERCASE(Task.TABLECAPTION)));
                                                        NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                          STRSUBSTNO(StatusChangeActionCommitmentIsUpdatedTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                                                      END;
                                                    NotificationEntry."Action Type"::"Aging Before Due":
                                                      BEGIN
                                                        NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionAgingBeforeDueTxt, Task.GetNoOfDaysLeft, LOWERCASE(Task.TABLECAPTION)));
                                                        NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                          STRSUBSTNO(Action3AgingBeforeDueTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                                                      END;
                                                    NotificationEntry."Action Type"::"Aging Overdue":
                                                      BEGIN
                                                        NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionAgingOverdueTxt, (Task.GetNoOfDaysLeft), LOWERCASE(Task.TABLECAPTION)));
                                                        NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                          STRSUBSTNO(Action3AgingBeforeDueTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                                                      END;
                                                    NotificationEntry."Action Type"::"Percent Complete Update":
                                                      BEGIN
                                                        NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionPercentCompleteUpdate, FORMAT(Task."Percent Complete",0,'<precision, 1:0><standard format, 0> %')));
                                                        NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                          STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To"));
                                                      END;
                                                    NotificationEntry."Action Type"::"New Note",NotificationEntry."Action Type"::"New Link":
                                                      BEGIN
                                                        NotificationBody := NotificationBody.Replace('%Action%',
                                                          STRSUBSTNO(ActionNewRecordLinkTxt, NotificationEntry."Created By", LOWERCASE(FORMAT(NotificationEntry."Action Type"))));
                                                        IF Task.Status = Task.Status::Completed THEN
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                            STRSUBSTNO(StatusChangeAction2ResolvedClosedTxt,Task.TABLECAPTION,LOWERCASE(FORMAT(Task.Status)),FORMAT(Task."Completed DateTime")))
                                                        ELSE
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                            STRSUBSTNO(StatusChangeActionStartedTxt, Task.TABLECAPTION, FORMAT(Task."Due Date",0,'<Month Text> <Day,2>, <Year4>')));
                                                      END;
                                                  END;

                                          #242..244
                                                // End Statement
                                              END;
                                            END;
                                        END;

                          ModifiedCode=BEGIN
                                          #1..183
                                                        NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(Action2StartTxt, Task."Assigned To User ID", LOWERCASE(Task.TABLECAPTION)));
                                                        NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                          STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                                          #187..189
                                                        NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionPostponedTxt, Task."Assigned To User ID", LOWERCASE(Task.TABLECAPTION)));
                                                        NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                          STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To User ID"));
                                          #193..195
                                                        NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionCompletedTxt, Task."Completed By User ID", LOWERCASE(Task.TABLECAPTION)));
                                                        NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                          STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To User ID"));
                                          #199..206
                                                        NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(Action2CommitmentChangeTxt, Task."Assigned To User ID", LOWERCASE(Task.TABLECAPTION)));
                                                        NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                          STRSUBSTNO(StatusChangeActionCommitmentIsUpdatedTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                                          #210..214
                                                          STRSUBSTNO(Action3AgingBeforeDueTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                                          #216..220
                                                          STRSUBSTNO(Action3AgingBeforeDueTxt, LOWERCASE(Task.TABLECAPTION), FORMAT(Task."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                                          #222..226
                                                          STRSUBSTNO(StatusChangeActionStartedTxt, LOWERCASE(Task.TABLECAPTION), Task."Assigned To User ID"));
                                          #228..234
                                                            STRSUBSTNO(StatusChangeAction2ResolvedClosedTxt,Task.TABLECAPTION,LOWERCASE(FORMAT(Task.Status)),FORMAT(Task."Date Completed")))
                                                        ELSE
                                                          NotificationBody := NotificationBody.Replace('%StatusChangeAction%',
                                                            STRSUBSTNO(StatusChangeActionStartedTxt, Task.TABLECAPTION, FORMAT(Task."Finishing Date",0,'<Month Text> <Day,2>, <Year4>')));
                                          #239..247
                                        END;

                          Target=PopulateCustomNotificationTemplateWithRecordInfo(PROCEDURE 12) }
      { Insertion         ;Target=ReplaceTokensWithCustomApprovalInfo(PROCEDURE 1);
                          InsertAfter=PurchaseHeader(Variable 1007);
                          ChangedElements=VariableCollection
                          {
                            SalesHeader@1019 : Record 36;
                          }
                            }
      { CodeModification  ;OriginalCode=BEGIN
                                          // Record from approval entry
                                          RecRef.SETTABLE(ApprovalEntry);

                                          CASE NotificationType OF
                                            NotificationEntry.Type::"Approval-PO", NotificationEntry.Type::"Approval-CA",NotificationEntry.Type::"Approval-RFPay",NotificationEntry.Type::"Approval-RFPur",
                                            NotificationEntry.Type::"Appvl-Tckt",NotificationEntry.Type::"Appvl-SDR",NotificationEntry.Type::"Approval-INTP",
                                            NotificationEntry.Type::"Approval-RFQ", NotificationEntry.Type::"Approval-JO":
                                              BEGIN
                                                CASE ApprovalEntry.Status OF
                                                  ApprovalEntry.Status::Open:
                                          #11..50
                                                  SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
                                                  ReplaceTokenWithPurchaseHeaderDetails(NotificationBody, PurchaseHeader);
                                                END;
                                              DATABASE::Ticket:
                                                BEGIN
                                                  RecRef.SETTABLE(Tickets);
                                          #57..99
                                                END;
                                            END;
                                          END;
                                        END;

                          ModifiedCode=BEGIN
                                          #1..6
                                            NotificationEntry.Type::"Approval-RFQ", NotificationEntry.Type::"Approval-JO", NotificationEntry.Type::"Approval-WW", NotificationEntry.Type::"Approval-TERF":
                                          #8..53
                                              DATABASE::"Sales Header":
                                                BEGIN
                                                  RecRef.SETTABLE(SalesHeader);
                                                  SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
                                                  ReplaceTokenWithSalesHeaderDetails(NotificationBody, SalesHeader);
                                                END;
                                          #54..102
                                        END;

                          Target=ReplaceTokensWithCustomApprovalInfo(PROCEDURE 1) }
      { CodeModification  ;OriginalCode=BEGIN
                                          CASE RecRef.NUMBER OF
                                            DATABASE::"Request For Quotation":
                                              BEGIN
                                                RecRef.SETTABLE(RFQ);
                                                NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(RFQ.TABLECAPTION));
                                                SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
                                                NotificationBody := NotificationBody.Replace('%Details%','');
                                                ReplaceTokenWithRFQDetails(NotificationBody, RFQ);
                                                StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, RFQ.RECORDID);
                                              END;
                                            DATABASE::Vendor:
                                              BEGIN
                                                RecRef.SETTABLE(Vendor);
                                                NotificationBody := NotificationBody.Replace('%DocumentType%',RecRef.CAPTION);
                                                SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
                                                NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%',RecRef.CAPTION);
                                                SetTokenToValueOfField(NotificationBody,'%CustomerVendorNo%',RecRef,'No.');
                                                SetTokenToValueOfField(NotificationBody,'%CustomerVendorName%',RecRef,'Name');
                                                ReplaceTokenWithVendorDetails(NotificationBody, Vendor);
                                              END;
                                            DATABASE::"Purchase Header":
                                              BEGIN
                                                RecRef.SETTABLE(PurchaseHeader);
                                                NotificationBody := NotificationBody.Replace('%DocumentNo%',FORMAT(RecRef.RECORDID));
                                                ReplaceTokenWithPurchaseHeaderDetails(NotificationBody, PurchaseHeader);
                                              END;
                                            DATABASE::User:
                                              BEGIN
                                                RecRef.SETTABLE(User);
                                                ReplaceTokenWithUserDetails(NotificationBody,User);
                                              END;
                                            DATABASE::"Internal Notice to Proceed":
                                              BEGIN
                                                RecRef.SETTABLE(INTP);
                                                NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(INTP.TABLECAPTION));
                                                SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
                                                SetTokenToValueOfField(NotificationBody,'%No%',RecRef,'No.');
                                                NotificationBody := NotificationBody.Replace('%Details%','');
                                                ReplaceTokenWithINTPDetails(NotificationBody, INTP);
                                                StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, INTP.RECORDID);
                                              END;
                                            DATABASE::"Record Link":
                                              BEGIN
                                                RecRef.SETTABLE(RecordLink);
                                                NotificationBody := NotificationBody.Replace('%DocumentNo%',RecordLink."User ID");
                                                RecordLink.CALCFIELDS(Note);
                                                IF RecordLink.Note.HASVALUE THEN BEGIN
                                                  CLEAR(NoteTxt);
                                                  RecordLink.Note.CREATEINSTREAM(InStr);
                                                  InStr.READ(NoteTxt);
                                                  NotificationBody := NotificationBody.Replace('%NoteTxt%', StringConversionManagement.WindowsToASCII(NoteTxt));
                                                END ELSE
                                                  NotificationBody := NotificationBody.Replace('%NoteTxt%', '');

                                                IF RecRef2.GET(RecordLink."Record ID") THEN BEGIN
                                                  CASE RecRef2.NUMBER OF
                                                    DATABASE::"Job Order":
                                                      BEGIN
                                                        RecRef2.SETTABLE(JobOrder);
                                                        SetTokenToValueOfField(NotificationBody,'%DocumentNo2%',RecRef2,'No.');
                                                        NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(RecRef2.CAPTION));
                                                        ReplaceTokenWithLinkedINTPDetails(NotificationBody, JobOrder."INTP No.");
                                                      END;
                                                    DATABASE::"Purchase Header":
                                                      BEGIN
                                                        RecRef2.SETTABLE(PurchaseHeader);
                                                        ReplaceTokenWithLinkedINTPDetails(NotificationBody, PurchaseHeader."INTP No.");
                                                        SetTokenToValueOfField(NotificationBody,'%DocumentNo2%',RecRef2,'No.');
                                                        IF (PurchaseHeader."Request Type" IN [PurchaseHeader."Request Type"::" "]) THEN
                                                          NotificationBody := NotificationBody.Replace('%DocumentType%','Purchase ' + FORMAT(PurchaseHeader."Document Type"))
                                                        ELSE
                                                          NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(PurchaseHeader."Request Type"));
                                                      END;
                                                    DATABASE::"Sales Header":
                                                      BEGIN
                                                        RecRef2.SETTABLE(SalesHeader);
                                                        ReplaceTokenWithLinkedINTPDetails(NotificationBody,SalesHeader."INTP No.");
                                                        SetTokenToValueOfField(NotificationBody,'%DocumentNo2%',RecRef2,'No.');
                                                        IF (SalesHeader."Request type" IN [SalesHeader."Request type"::" "]) THEN
                                                          NotificationBody := NotificationBody.Replace('%DocumentType%','Sales ' + FORMAT(SalesHeader."Document Type"))
                                                        ELSE
                                                          NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(SalesHeader."Request type"));
                                                      END;
                                                    ELSE
                                                      BEGIN
                                                        SetTokenToValueOfField(NotificationBody,'%DocumentNo2%',RecRef2,'No.');
                                                        NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(RecRef2.CAPTION));
                                                        ReplaceTokenWithLinkedINTPDetails(NotificationBody, '');
                                                      END;
                                                  END;
                                                  NotificationBody := NotificationBody.Replace('%Details%','');
                                                END;
                                              END;
                                            DATABASE::Ticket:
                                              BEGIN
                                                RecRef.SETTABLE(Ticket);
                                                NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(Ticket.TABLECAPTION));
                                                SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
                                                NotificationBody := NotificationBody.Replace('%Details%','');
                                                TicketNotifDispatcher.SetNotificationBody(NotificationBody, Ticket);
                                              END;
                                            DATABASE::"Software Development Request":
                                              BEGIN
                                                RecRef.SETTABLE(SDR);
                                                NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(SDR.TABLECAPTION));
                                                SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
                                                NotificationBody := NotificationBody.Replace('%Details%','');
                                                SDRNotifDispatcher.SetNotificationBody(NotificationBody, SDR);
                                              END;

                                            DATABASE::"Job Order":
                                              BEGIN
                                                RecRef.SETTABLE(JobOrder);
                                                NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(JobOrder.TABLECAPTION));
                                                SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
                                                NotificationBody := NotificationBody.Replace('%Details%','');
                                                ReplaceTokenWithJobOrderDetails(NotificationBody, JobOrder);
                                                StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, JobOrder.RECORDID);
                                              END;
                                          END;
                                        END;

                          ModifiedCode=BEGIN
                                          #1..26
                                            DATABASE::"Sales Header":
                                              BEGIN
                                                RecRef.SETTABLE(SalesHeader);
                                                SetTokenToValueOfField(NotificationBody, '%DocumentNo%', RecRef, 'No.');
                                                //NotificationBody := NotificationBody.Replace('%DocumentNo%',FORMAT(RecRef.RECORDID));
                                                ReplaceTokenWithSalesHeaderDetails(NotificationBody, SalesHeader);
                                              END;
                                          #27..41
                                          #94..119
                                          #42..93
                                          END;
                                        END;

                          Target=ReplaceTokensWithRecInfo(PROCEDURE 2) }
      { Insertion         ;InsertAfter=ReplaceTokenWithPurchaseHeaderDetails(PROCEDURE 25);
                          ChangedElements=PROCEDURECollection
                          {
                            LOCAL PROCEDURE ReplaceTokenWithSalesHeaderDetails@4(VAR NotificationBody@1001 : DotNet "'mscorlib'.System.String";SalesHeader@1000 : Record 36);
                            VAR
                              Employee@1002 : Record 5200;
                              Customer@1003 : Record 18;
                              INTP@1007 : Record 50040;
                              UserGroup@1004 : Record 9000;
                              SalesLine@1005 : Record 37;
                              DescriptionOfRequest@1016 : Text;
                              Justification@1015 : Text;
                              SiteChange@1014 : Text;
                              TeamReassignment@1013 : Text;
                              MaterialEquipment@1012 : Text;
                              NatureOfChangeOthers@1011 : Text;
                              PresentSituation@1010 : Text;
                              RecommendedChange@1009 : Text;
                              RemarksLoc@1008 : Text;
                              GTComments@1006 : Text;
                            BEGIN
                              WITH SalesHeader DO BEGIN

                                ReplaceTokenWithLinkedINTPDetails(NotificationBody, SalesHeader."INTP No.");
                                IF SalesHeader."Request type" <> SalesHeader."Request type"::" " THEN
                                  NotificationBody := NotificationBody.Replace('%DocumentType%',STRSUBSTNO('%1',"Request type"))
                                ELSE
                                  NotificationBody := NotificationBody.Replace('%DocumentType%',STRSUBSTNO(PurchDocTypeTxt, FORMAT("Document Type")));

                                // Headers
                                NotificationBody := NotificationBody.Replace('%NoCaption%', SalesHeader.FIELDCAPTION("No."));
                                NotificationBody := NotificationBody.Replace('%DocumentNo%',FORMAT(SalesHeader."No."));
                                NotificationBody := NotificationBody.Replace('%Details%','');
                                NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%', Customer.TABLECAPTION);
                                NotificationBody := NotificationBody.Replace('%CustomerNoCaption%', SalesHeader.FIELDCAPTION("Sell-to Customer No."));
                                NotificationBody := NotificationBody.Replace('%CustomerNo%', SalesHeader."Sell-to Customer No.");
                                NotificationBody := NotificationBody.Replace('%DocumentDateCaption%', SalesHeader.FIELDCAPTION("Document Date"));
                                NotificationBody := NotificationBody.Replace('%DocumentDate%', FORMAT(SalesHeader."Document Date"));
                                NotificationBody := NotificationBody.Replace('%ClientsPONOCaption%', 'Client P.O. No.');
                                NotificationBody := NotificationBody.Replace('%ProjectNameCaption%', SalesHeader.FIELDCAPTION("Project Name"));
                                NotificationBody := NotificationBody.Replace('%ReleasedDateCaption%', SalesHeader.FIELDCAPTION("Released Date"));
                                NotificationBody := NotificationBody.Replace('%ReleasedDate%', FORMAT(SalesHeader."Released Date"));
                                NotificationBody := NotificationBody.Replace('%StatusCaption%', SalesHeader.FIELDCAPTION(Status));
                                NotificationBody := NotificationBody.Replace('%Status%', FORMAT(SalesHeader.Status));

                                NotificationBody := NotificationBody.Replace('%CustomerNameCaption%', 'Customer Name');
                                IF Customer.GET(SalesHeader."Sell-to Customer No.") THEN
                                  NotificationBody := NotificationBody.Replace('%CustomerName%', StringConversionManagement.WindowsToASCII(Customer."No." + ' ' + Customer.Name + ' ' + Customer."Name 2"))
                                ELSE
                                  NotificationBody := NotificationBody.Replace('%CustomerName%', '');

                                NotificationBody := NotificationBody.Replace('%EmployeeNameCaption%', 'Employee Name');
                                IF Employee.GET(SalesHeader."Employee No.") THEN
                                  NotificationBody := NotificationBody.Replace('%EmployeeName%', StringConversionManagement.WindowsToASCII(Employee."No." + ' ' + Employee.FullName))
                                ELSE
                                  NotificationBody := NotificationBody.Replace('%EmployeeName%', '');

                                NotificationBody := NotificationBody.Replace('%DepartmentCaption%', 'Department');
                                IF UserGroup.GET(SalesHeader."Department Code") THEN
                                  NotificationBody := NotificationBody.Replace('%Department%', StringConversionManagement.WindowsToASCII(UserGroup.Name));

                                IF INTP.GET(SalesHeader."INTP No.") THEN BEGIN
                                  NotificationBody := NotificationBody.Replace('%ClientsPONO%', FORMAT(INTP."P.O No. (Customer)"));
                                  NotificationBody := NotificationBody.Replace('%ProjectName%', StringConversionManagement.WindowsToASCII(INTP."Project Name" +' '+ INTP."Project Name 2"));
                                END ELSE BEGIN
                                  NotificationBody := NotificationBody.Replace('%ClientsPONO%', '');
                                  NotificationBody := NotificationBody.Replace('%ProjectName%', '');
                                END;

                                // TERF and Withdrawal
                                NotificationBody := NotificationBody.Replace('%DateOfReturnCaption%',SalesHeader.FIELDCAPTION("Date of Return"));
                                NotificationBody := NotificationBody.Replace('%DateOfReturn%',FORMAT(SalesHeader."Date of Return"));
                                NotificationBody := NotificationBody.Replace('%DeliveryAddressCaption%', 'Delivery Address');
                                NotificationBody := NotificationBody.Replace('%DeliveryAddress%', StringConversionManagement.WindowsToASCII(SalesHeader."Sell-to Address" + ' ' + SalesHeader."Sell-to Address 2"));
                                NotificationBody := NotificationBody.Replace('%SiteNameCaption%', SalesHeader.FIELDCAPTION("Sell-to Post Code"));
                                NotificationBody := NotificationBody.Replace('%SiteName%', FORMAT(SalesHeader."Sell-to Post Code"));
                                NotificationBody := NotificationBody.Replace('%ARNoCaption%', SalesHeader.FIELDCAPTION("Ack. Receipt No."));
                                NotificationBody := NotificationBody.Replace('%ARNo%', FORMAT(SalesHeader."Ack. Receipt No."));
                                NotificationBody := NotificationBody.Replace('%DRNoCaption%', SalesHeader.FIELDCAPTION("Deliver Receipt No."));
                                NotificationBody := NotificationBody.Replace('%DRNo%', FORMAT(SalesHeader."Deliver Receipt No."));
                                NotificationBody := NotificationBody.Replace('%PurposeCaption%', SalesHeader.FIELDCAPTION(Purpose));
                                NotificationBody := NotificationBody.Replace('%Purpose%', FORMAT(SalesHeader.Purpose));
                                NotificationBody := NotificationBody.Replace('%ReleasedByCaption%', SalesHeader.FIELDCAPTION("Released By User ID"));
                                NotificationBody := NotificationBody.Replace('%ReleasedBy%', FORMAT(SalesHeader."Released By User ID"));

                                SalesLine.SETRANGE("Document Type", SalesHeader."Document Type");
                                SalesLine.SETRANGE("Document No.", SalesHeader."No.");
                                IF SalesLine.FINDSET THEN BEGIN
                                  REPEAT
                                    CASE SalesLine."Line Type" OF
                                      SalesLine."Line Type"::"Description of Request":
                                        DescriptionOfRequest += SalesLine.Description + ' ';
                                      SalesLine."Line Type"::Justification:
                                      Justification += SalesLine.Description + ' ';
                                      SalesLine."Line Type"::"WCR-Nature of Work Change-Site":
                                        SiteChange += SalesLine.Description + ' ';
                                      SalesLine."Line Type"::"WCR-Nature of Work Change-Team":
                                        TeamReassignment += SalesLine.Description + ' ';
                                      SalesLine."Line Type"::"WCR-Nature of Work Change-Mats":
                                        MaterialEquipment += SalesLine.Description + ' ';
                                      SalesLine."Line Type"::"WCR-Nature of Work Change-Others":
                                        NatureOfChangeOthers += SalesLine.Description + ' ';
                                      SalesLine."Line Type"::"WCR-Present Situation":
                                        PresentSituation += SalesLine.Description + ' ';
                                      SalesLine."Line Type"::"WCR-Recommended Changes":
                                        RecommendedChange += SalesLine.Description + ' ';
                                      SalesLine."Line Type"::Remarks:
                                        RemarksLoc += SalesLine.Description + ' ';
                                      SalesLine."Line Type"::"WCR-GT Repr. Comments":
                                        GTComments += SalesLine.Description + ' ';
                                    END;
                                  UNTIL SalesLine.NEXT = 0;
                                END;

                                // Request for Exception
                                DescriptionOfRequest := StringConversionManagement.WindowsToASCII(DescriptionOfRequest);
                                Justification := StringConversionManagement.WindowsToASCII(Justification);
                                NotificationBody := NotificationBody.Replace('%DescriptionOfRequestCaption%','Description of Request');
                                NotificationBody := NotificationBody.Replace('%DescriptionOfRequest%',DescriptionOfRequest);
                                NotificationBody := NotificationBody.Replace('%JustificationCaption%','Justification');
                                NotificationBody := NotificationBody.Replace('%Justification%',Justification);
                                NotificationBody := NotificationBody.Replace('%ExceptionToCaption%', SalesHeader.FIELDCAPTION("Type of Exception"));
                                NotificationBody := NotificationBody.Replace('%ExceptionTo%', FORMAT(SalesHeader."Type of Exception"));
                                NotificationBody := NotificationBody.Replace('%SubjectCaption%',SalesHeader.FIELDCAPTION(Subject));
                                NotificationBody := NotificationBody.Replace('%Subject%',SalesHeader.Subject);
                                NotificationBody := NotificationBody.Replace('%ApprovedBudgetCaption%',SalesHeader.FIELDCAPTION("Approved Budget"));
                                NotificationBody := NotificationBody.Replace('%ApprovedBudget%',FORMAT(SalesHeader."Approved Budget"));
                                NotificationBody := NotificationBody.Replace('%ApprovedTimelineCaption%',SalesHeader.FIELDCAPTION("Approved Timeline"));
                                NotificationBody := NotificationBody.Replace('%ApprovedTimeline%',FORMAT(SalesHeader."Approved Timeline"));
                                NotificationBody := NotificationBody.Replace('%ProposedBudgetCaption%',SalesHeader.FIELDCAPTION("Proposed Budget"));
                                NotificationBody := NotificationBody.Replace('%ProposedBudget%',FORMAT(SalesHeader."Proposed Budget"));
                                NotificationBody := NotificationBody.Replace('%ProposedTimelineCaption%',SalesHeader.FIELDCAPTION("Proposed Timeline"));
                                NotificationBody := NotificationBody.Replace('%ProposedTimeline%',FORMAT(SalesHeader."Proposed Timeline"));
                                NotificationBody := NotificationBody.Replace('%WaiverTypeCaption%',SalesHeader.FIELDCAPTION("Waiver Type"));
                                NotificationBody := NotificationBody.Replace('%WaiverType%',FORMAT(SalesHeader."Waiver Type"));
                                NotificationBody := NotificationBody.Replace('%PersonInchargeCaption%',SalesHeader.FIELDCAPTION("Person Incharge"));

                                IF Employee.GET(SalesHeader."Person Incharge") THEN
                                  NotificationBody := NotificationBody.Replace('%PersonIncharge%',FORMAT(Employee."First Name" + ' ' + Employee."Last Name"))
                                ELSE
                                  NotificationBody := NotificationBody.Replace('%PersonIncharge%','');

                                NotificationBody := NotificationBody.Replace('%CommitmentDateCaption%',SalesHeader.FIELDCAPTION("Commitment Date"));
                                NotificationBody := NotificationBody.Replace('%CommitmentDate%',FORMAT(SalesHeader."Commitment Date"));
                                NotificationBody := NotificationBody.Replace('%ExtendCommitmentDateCaption%',SalesHeader.FIELDCAPTION("Extension of Commitment Date"));
                                NotificationBody := NotificationBody.Replace('%ExtendCommitmentDate%',FORMAT(SalesHeader."Extension of Commitment Date"));
                                NotificationBody := NotificationBody.Replace('%ApprovedDateOfExtensionCaption%',SalesHeader.FIELDCAPTION("Approved Date of Extension"));
                                NotificationBody := NotificationBody.Replace('%ApprovedDateOfExtension%',FORMAT(SalesHeader."Approved Date of Extension"));
                                NotificationBody := NotificationBody.Replace('%AttachementsApprovedBudgetCaption%',SalesHeader.FIELDCAPTION("Attmt. App. Budget"));
                                NotificationBody := NotificationBody.Replace('%AttachementsApprovedBudget%',FORMAT(SalesHeader."Attmt. App. Budget"));
                                NotificationBody := NotificationBody.Replace('%AttachementsApprovedTimelineCaption%',SalesHeader.FIELDCAPTION("Attmt. App.Timeline"));
                                NotificationBody := NotificationBody.Replace('%AttachementsApprovedTimeline%',FORMAT(SalesHeader."Attmt. App.Timeline"));
                                NotificationBody := NotificationBody.Replace('%AttachementsProposedBudgetCaption%',SalesHeader.FIELDCAPTION("Attmt. Prop. Budget"));
                                NotificationBody := NotificationBody.Replace('%AttachementsProposedBudget%',FORMAT(SalesHeader."Attmt. Prop. Budget"));
                                NotificationBody := NotificationBody.Replace('%AttachementsProposedTimelineCaption%',SalesHeader.FIELDCAPTION("Attmt. Prop. Timeline"));
                                NotificationBody := NotificationBody.Replace('%AttachementsProposedTimeline%',FORMAT(SalesHeader."Attmt. Prop. Timeline"));

                                // Work Change Request
                                SiteChange := StringConversionManagement.WindowsToASCII(SiteChange);
                                TeamReassignment := StringConversionManagement.WindowsToASCII(TeamReassignment);
                                MaterialEquipment := StringConversionManagement.WindowsToASCII(MaterialEquipment);
                                NatureOfChangeOthers := StringConversionManagement.WindowsToASCII(NatureOfChangeOthers);
                                PresentSituation := StringConversionManagement.WindowsToASCII(PresentSituation);
                                RecommendedChange := StringConversionManagement.WindowsToASCII(RecommendedChange);
                                RemarksLoc := StringConversionManagement.WindowsToASCII(RemarksLoc);
                                GTComments := StringConversionManagement.WindowsToASCII(GTComments);
                                NotificationBody := NotificationBody.Replace('%ProgramCaption%',SalesHeader.FIELDCAPTION("Program"));
                                NotificationBody := NotificationBody.Replace('%Program%',SalesHeader."Program");
                                NotificationBody := NotificationBody.Replace('%AnnexesCaption%',SalesHeader.FIELDCAPTION(Annexes));
                                NotificationBody := NotificationBody.Replace('%Annexes%',SalesHeader.Annexes);
                                NotificationBody := NotificationBody.Replace('%CMSTicketCaption%',SalesHeader.FIELDCAPTION("CMS Ticket No."));
                                NotificationBody := NotificationBody.Replace('%CMSTicket%',SalesHeader."CMS Ticket No.");
                                NotificationBody := NotificationBody.Replace('%DateOfOcularInspectionCaption%',SalesHeader.FIELDCAPTION("Date of Ocular Inspection"));
                                NotificationBody := NotificationBody.Replace('%DateOfOcularInspection%',FORMAT(SalesHeader."Date of Ocular Inspection"));
                                NotificationBody := NotificationBody.Replace('%ChargeableToClientCaption%',SalesHeader.FIELDCAPTION("Chargeable to Client"));
                                NotificationBody := NotificationBody.Replace('%ChargeableToClient%',FORMAT(SalesHeader."Chargeable to Client"));
                                NotificationBody := NotificationBody.Replace('%AdditionalWorkCaption%',SalesHeader.FIELDCAPTION("Additional Work"));
                                NotificationBody := NotificationBody.Replace('%AdditionalWork%', FORMAT(SalesHeader."Additional Work"));
                                NotificationBody := NotificationBody.Replace('%SiteChangeCaption%','Site Change');
                                NotificationBody := NotificationBody.Replace('%SiteChange%',SiteChange);
                                NotificationBody := NotificationBody.Replace('%TeamReassignmentCaption%','Team Reassignment');
                                NotificationBody := NotificationBody.Replace('%TeamReassignment%', TeamReassignment);
                                NotificationBody := NotificationBody.Replace('%MaterialsEquipmentCaption%','Materials/Equipment/Device Change');
                                NotificationBody := NotificationBody.Replace('%MaterialsEquipment%',MaterialEquipment);
                                NotificationBody := NotificationBody.Replace('%NatureOfChangeOthersCaption%', 'Others');
                                NotificationBody := NotificationBody.Replace('%NatureOfChangeOthers%',NatureOfChangeOthers);
                                NotificationBody := NotificationBody.Replace('%PresentSituationCaption%','Present Situation');
                                NotificationBody := NotificationBody.Replace('%PresentSituation%',PresentSituation);
                                NotificationBody := NotificationBody.Replace('%RecommendedChangeCaption%','Recommended Change');
                                NotificationBody := NotificationBody.Replace('%RecommendedChange%',RecommendedChange);
                                NotificationBody := NotificationBody.Replace('%OriginalProjectCostCaption%',SalesHeader.FIELDCAPTION("Original PO Amount"));
                                NotificationBody := NotificationBody.Replace('%OriginalProjectCost%', FORMAT(SalesHeader."Original PO Amount"));
                                NotificationBody := NotificationBody.Replace('%LateAFIAmountBeforeWCICaption%',SalesHeader.FIELDCAPTION("Latest AFI Amt. before WCR"));
                                NotificationBody := NotificationBody.Replace('%LateAFIAmountBeforeWCI%',FORMAT(SalesHeader."Latest AFI Amt. before WCR"));
                                NotificationBody := NotificationBody.Replace('%ThisWCRCostVariationWCRCaption%',SalesHeader.FIELDCAPTION("This WCR Cost Variation WCR"));
                                NotificationBody := NotificationBody.Replace('%ThisWCRCostVariationWCR%',FORMAT(SalesHeader."This WCR Cost Variation WCR"));
                                NotificationBody := NotificationBody.Replace('%TotalCostAfterWCRCaption%',SalesHeader.FIELDCAPTION("Total Cost After WCR"));
                                NotificationBody := NotificationBody.Replace('%TotalCostAfterWCR%',FORMAT(SalesHeader."Total Cost After WCR"));
                                NotificationBody := NotificationBody.Replace('%BalancePOAfterWCRCaption%',SalesHeader.FIELDCAPTION("Total PO After WCR"));
                                NotificationBody := NotificationBody.Replace('%BalancePOAfterWCR%',FORMAT(SalesHeader."Total PO After WCR"));
                                NotificationBody := NotificationBody.Replace('%CheckVoucherNoCaption%',SalesHeader.FIELDCAPTION("Check Voucher No."));
                                NotificationBody := NotificationBody.Replace('%CheckVoucherNo%',SalesHeader."Check Voucher No.");
                                NotificationBody := NotificationBody.Replace('%CashAdvanceNoCaption%',SalesHeader.FIELDCAPTION("Cash Advance No."));
                                NotificationBody := NotificationBody.Replace('%CashAdvanceNo%',SalesHeader."Cash Advance No.");
                                NotificationBody := NotificationBody.Replace('%CheckNoCaption%',SalesHeader.FIELDCAPTION("Check No."));
                                NotificationBody := NotificationBody.Replace('%CheckNo%',SalesHeader."Check No.");
                                NotificationBody := NotificationBody.Replace('%AmountToBeChargeCaption%',SalesHeader.FIELDCAPTION("Amt. to be Charged"));
                                NotificationBody := NotificationBody.Replace('%AmountToBeCharge%',FORMAT(SalesHeader."Amt. to be Charged"));
                                NotificationBody := NotificationBody.Replace('%GTRepresentativeCommentCaption%','GT Representative Comment');
                                NotificationBody := NotificationBody.Replace('%GTRepresentativeComment%',GTComments);
                                NotificationBody := NotificationBody.Replace('%RemarksCaption%','Remarks');
                                NotificationBody := NotificationBody.Replace('%Remarks%',RemarksLoc);

                                // Sales lines
                                StripoEmailTemplate.ReplaceTokenWithSalesHeaderLines(NotificationBody, SalesHeader);

                                // Remarks/Notes
                                StripoEmailTemplate.ReplaceTokenWithRemarksNotesV2(NotificationBody, SalesHeader.RECORDID);

                                // Approval/Comment
                                StripoEmailTemplate.ReplaceTokenWithApprovalCommentsV2(NotificationBody, SalesHeader.RECORDID);

                                // Approval Entries
                                StripoEmailTemplate.ReplaceTokenWithStripoApprovalEntry(NotificationBody, SalesHeader.RECORDID);
                              END;
                            END;

                          }
                            }
      { Insertion         ;InsertAfter=InStr(Variable 1030);
                          ChangedElements=VariableCollection
                          {
                            SalesDocTypeTxt@1048 : TextConst 'ENU=Sales %1';
                          }
                            }
    }
    CODE
    {

      BEGIN
      END.
    }
  }

  OBJECT Modification "Custom Approval Management"(Codeunit 50582)
  {
    OBJECT-PROPERTIES
    {
      Date=06/26/18;
      Time=12:01:38 AM;
      Modified=Yes;
      Version List=NAVOC1.00.02.00;
    }
    PROPERTIES
    {
      Target="Custom Approval Management"(Codeunit 50582);
    }
    CHANGES
    {
      { CodeModification  ;OriginalCode=BEGIN
                                          !! Documentation Codeunit 50582 Custom Approval Management

                                          10:33 PM Monday, July 29, 2024
                                            Migrated the functions from Codeunit 1535 Approvals Mgmt. for Create an approval request for the record using approver.

                                          10:38 AM Wednesday, August 21, 2024
                                            Update the CreateApprovalEntryNotification: Remove the attachment on the email notification of Job Order.
                                        END;

                          ModifiedCode=BEGIN
                                          !! Documentation Codeunit 50582 Custom Approval Management

                                            10:33 PM Monday, July 29, 2024
                                              Migrated the functions from Codeunit 1535 Approvals Mgmt. for Create an approval request for the record using approver.

                                            10:38 AM Wednesday, August 21, 2024
                                              Update the CreateApprovalEntryNotification: Remove the attachment on the email notification of Job Order.

                                            4:41 PM Tuesday, October 15, 2024
                                              Remove the withdrawal email attachment on function CreateApprovalEntryNotification
                                              Remove the Tools & Equipment Requisition email attachment on function CreateApprovalEntryNotification
                                        END;

                          Target=Documentation }
      { CodeModification  ;OriginalCode=BEGIN
                                          { ******************
                                          Applied to Codeunit 1535 Approvals Mgmt. > CreateApprovalEntryNotification function
                                          To create a notification for the approval of documents, sending and approval.
                                          #4..50
                                                CASE SalesHeader."Request type" OF
                                                  SalesHeader."Request type"::"Tools & Equipment Requisition":
                                                    BEGIN
                                                      IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
                                                        FilePath := SalesHeaderReportPrinter.SaveAsPDFSalesHeader(SalesHeader);
                                                        FileName := FORMAT(SalesHeader."Request type") + ' ' + SalesHeader."No." + '.pdf';
                                                      END;
                                                      CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-TERF",WorkflowStepArgument."Notification User ID",
                                                        ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), FilePath, FileName);
                                                    END;
                                                  SalesHeader."Request type"::Withdrawal:
                                                    BEGIN
                                                      IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
                                                        FilePath := SalesHeaderReportPrinter.SaveAsPDFSalesHeader(SalesHeader);
                                                        FileName := FORMAT(SalesHeader."Request type") + ' ' + SalesHeader."No." + '.pdf';
                                                      END;
                                                      CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-WW",WorkflowStepArgument."Notification User ID",
                                                        ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), FilePath, FileName);
                                                    END;
                                                  SalesHeader."Request type"::"Return Merchandise Authorization":
                                                    BEGIN
                                          #72..125
                                          END;

                                          EXIT(TRUE);
                                        END;

                          ModifiedCode=BEGIN
                                          #1..53
                                                      CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-TERF",WorkflowStepArgument."Notification User ID",
                                                        ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), '', '');
                                          #60..62
                                                      CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-WW",WorkflowStepArgument."Notification User ID",
                                                        ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), '', '');
                                          #69..128
                                        END;

                          Target=CreateApprovalEntryNotification(PROCEDURE 50) }
    }
    CODE
    {

      BEGIN
      END.
    }
  }



