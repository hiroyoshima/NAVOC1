OBJECT Table 1523 Workflow Step Argument
{
  OBJECT-PROPERTIES
  {
    Date=06/27/18;
    Time=[ 4:03:15 AM];
    Modified=Yes;
    Version List=NAVW19.00,NAVOC1.00.02.48;
  }
  PROPERTIES
  {
    Permissions=TableData 1523=rim;
    DataCaptionFields=General Journal Template Name,General Journal Batch Name,Notification User ID;
    OnInsert=BEGIN
               ID := CREATEGUID;
             END;

    OnModify=BEGIN
               CheckEditingIsAllowed;
             END;

    OnDelete=BEGIN
               CheckEditingIsAllowed;
             END;

    OnRename=BEGIN
               CheckEditingIsAllowed;
             END;

    CaptionML=ENU=Workflow Step Argument;
    LookupPageID=Page1523;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;GUID          ;CaptionML=ENU=ID }
    { 2   ;   ;Type                ;Option        ;TableRelation="Workflow Step".Type WHERE (Argument=FIELD(ID));
                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Event,Response;
                                                   OptionString=Event,Response }
    { 3   ;   ;General Journal Template Name;Code10;
                                                   TableRelation="Gen. Journal Template".Name;
                                                   CaptionML=ENU=General Journal Template Name }
    { 4   ;   ;General Journal Batch Name;Code10  ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(General Journal Template Name));
                                                   CaptionML=ENU=General Journal Batch Name }
    { 5   ;   ;Notification User ID;Code50        ;TableRelation="User Setup"."User ID";
                                                   CaptionML=ENU=Notification User ID }
    { 7   ;   ;Response Function Name;Code128     ;TableRelation="Workflow Response"."Function Name";
                                                   CaptionML=ENU=Response Function Name }
    { 9   ;   ;Link Target Page    ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Page));
                                                   CaptionML=ENU=Link Target Page }
    { 10  ;   ;Custom Link         ;Text250       ;OnValidate=VAR
                                                                WebRequestHelper@1000 : Codeunit 1299;
                                                              BEGIN
                                                                WebRequestHelper.IsValidUri("Custom Link");
                                                              END;

                                                   ExtendedDatatype=URL;
                                                   CaptionML=ENU=Custom Link }
    { 11  ;   ;Event Conditions    ;BLOB          ;CaptionML=ENU=Event Conditions }
    { 12  ;   ;Approver Type       ;Option        ;OnValidate=BEGIN
                                                                // PHP Start
                                                                IF "Approver Type" IN ["Approver Type"::"Cost Analyst Incharge", "Approver Type"::"Project Manager Incharge",
                                                                  "Approver Type"::"Endorse To", "Approver Type"::"Ground Manager", "Approver Type"::Employee] THEN
                                                                  VALIDATE("Approver Limit Type", "Approver Limit Type"::"Direct Approver");
                                                                // PHP End
                                                              END;

                                                   CaptionML=ENU=Approver Type;
                                                   OptionCaptionML=ENU=Salesperson/Purchaser,Approver,Workflow User Group,Cost Analyst Incharge,Project Manager Incharge,Endorse To,Ground Manager,Employee;
                                                   OptionString=Salesperson/Purchaser,Approver,Workflow User Group,Cost Analyst Incharge,Project Manager Incharge,Endorse To,Ground Manager,Employee }
    { 13  ;   ;Approver Limit Type ;Option        ;OnValidate=BEGIN
                                                                // PHP Start - Limit the user on changing the approver limit type. Must be Direct Approver
                                                                IF ("Approver Limit Type" <> "Approver Limit Type"::"Direct Approver") AND
                                                                  ("Approver Type" IN ["Approver Type"::"Cost Analyst Incharge", "Approver Type"::"Project Manager Incharge",
                                                                  "Approver Type"::"Endorse To", "Approver Type"::"Ground Manager", "Approver Type"::Employee]) THEN
                                                                  TESTFIELD("Approver Limit Type", "Approver Limit Type"::"Direct Approver");
                                                                // PHP End
                                                              END;

                                                   CaptionML=ENU=Approver Limit Type;
                                                   OptionCaptionML=ENU=Approver Chain,Direct Approver,First Qualified Approver;
                                                   OptionString=Approver Chain,Direct Approver,First Qualified Approver }
    { 14  ;   ;Workflow User Group Code;Code20    ;TableRelation="Workflow User Group".Code;
                                                   CaptionML=ENU=Workflow User Group Code }
    { 15  ;   ;Due Date Formula    ;DateFormula   ;OnValidate=BEGIN
                                                                IF COPYSTR(FORMAT("Due Date Formula"),1,1) = '-' THEN
                                                                  ERROR(STRSUBSTNO(NoNegValuesErr,FIELDCAPTION("Due Date Formula")));
                                                              END;

                                                   CaptionML=ENU=Due Date Formula }
    { 16  ;   ;Message             ;Text250       ;CaptionML=ENU=Message }
    { 17  ;   ;Delegate After      ;Option        ;CaptionML=ENU=Delegate After;
                                                   OptionCaptionML=ENU=Never,1 day,2 days,5 days;
                                                   OptionString=Never,1 day,2 days,5 days }
    { 18  ;   ;Show Confirmation Message;Boolean  ;CaptionML=ENU=Show Confirmation Message }
    { 19  ;   ;Table No.           ;Integer       ;CaptionML=ENU=Table No. }
    { 20  ;   ;Field No.           ;Integer       ;CaptionML=ENU=Field No. }
    { 21  ;   ;Field Caption       ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field."Field Caption" WHERE (TableNo=FIELD(Table No.),
                                                                                                   No.=FIELD(Field No.)));
                                                   CaptionML=ENU=Field Caption;
                                                   Editable=No }
    { 100 ;   ;Response Option Group;Code20       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Workflow Response"."Response Option Group" WHERE (Function Name=FIELD(Response Function Name)));
                                                   CaptionML=ENU=Response Option Group;
                                                   Editable=No }
    { 50001;  ;Message 2           ;Text250        }
    { 50002;  ;Message 3           ;Text250        }
    { 50003;  ;Message 4           ;Text250        }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NoNegValuesErr@1000 : TextConst 'ENU=%1 must be a positive value.';

    PROCEDURE Clone@1() : GUID;
    VAR
      WorkflowStepArgument@1001 : Record 1523;
    BEGIN
       CALCFIELDS("Event Conditions");
       WorkflowStepArgument.COPY(Rec);
       WorkflowStepArgument.INSERT(TRUE);
       EXIT(WorkflowStepArgument.ID);
    END;

    PROCEDURE Equals@9(WorkflowStepArgument@1000 : Record 1523;SkipBlob@1004 : Boolean) : Boolean;
    VAR
      TypeHelper@1003 : Codeunit 10;
      OtherRecRef@1002 : RecordRef;
      ThisRecRef@1001 : RecordRef;
    BEGIN
      ThisRecRef.GETTABLE(Rec);
      OtherRecRef.GETTABLE(WorkflowStepArgument);

      IF NOT TypeHelper.Equals(ThisRecRef,OtherRecRef,SkipBlob) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE GetEventFilters@8() Filters : Text;
    VAR
      FiltersInStream@1002 : InStream;
    BEGIN
      IF "Event Conditions".HASVALUE THEN BEGIN
        CALCFIELDS("Event Conditions");
        "Event Conditions".CREATEINSTREAM(FiltersInStream);
        FiltersInStream.READ(Filters);
      END;
    END;

    PROCEDURE SetEventFilters@2(Filters@1000 : Text);
    VAR
      FiltersOutStream@1001 : OutStream;
    BEGIN
       "Event Conditions".CREATEOUTSTREAM(FiltersOutStream);
       FiltersOutStream.WRITE(Filters);
       MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CheckEditingIsAllowed@12();
    VAR
      Workflow@1000 : Record 1501;
      WorkflowStep@1001 : Record 1502;
    BEGIN
      IF ISNULLGUID(ID) THEN
        EXIT;

      WorkflowStep.SETRANGE(Argument,ID);
      IF WorkflowStep.FINDFIRST THEN BEGIN
        Workflow.GET(WorkflowStep."Workflow Code");
        Workflow.CheckEditingIsAllowed;
      END;
    END;

    BEGIN
    {
      !! Documentation Table 1523 Workflow Step Argument

      11:35 AM Monday, July 29, 2024
        Additional Field:
          Message 2, Message 3, Message 4
        Additonal Option to Approver Type Field:
          Cost Analyst Incharge,Project Manager Incharge,Endorse To,Ground Manager,Employee
        Additional Code to Onvalidate:
          Approver Type, Approver Limit Type
    }
    END.
  }
}

OBJECT Table 50012 Job Order
{
  OBJECT-PROPERTIES
  {
    Date=06/26/18;
    Time=12:01:56 AM;
    Modified=Yes;
    Version List=NAVOC1.00.02.48;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Project Name;
    OnInsert=BEGIN
               InitInsert;
             END;

    OnDelete=BEGIN
               TestLinkedDocuments;
               JobOderLines.SETRANGE("Job Order No.", "No.");
               JobOderLines.DELETEALL;
               ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
             END;

    OnRename=BEGIN
               ERROR(Txt02,TABLECAPTION);
             END;

    CaptionML=ENU=Job Order;
    LookupPageID=Page50013;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  CustomSetup.GET;
                                                                  NoSeriesMgt.TestManual(CustomSetup."Job Order Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;
                                                               }
    { 13  ;   ;Job Type            ;Option        ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                ResetFields;
                                                                SetActivity;
                                                                IF "Job Type" = "Job Type"::Others THEN BEGIN
                                                                  CLEAR("Project Name");
                                                                  CLEAR("Project Name 2");
                                                                END;
                                                              END;

                                                   OptionCaptionML=ENU=Service Engineering,Others,Pre-Delivery Inspection,Inspection Upon Delivery;
                                                   OptionString=Service Engineering,Others,Pre-Delivery Inspection,Inspection Upon Delivery }
    { 15  ;   ;Job No.             ;Code20        ;TableRelation=Job WHERE (Status=CONST(Order));
                                                   OnValidate=VAR
                                                                Project@1000 : Record 50005;
                                                              BEGIN
                                                                TestAdminRights;
                                                                //IF "Job No." <> '' THEN BEGIN
                                                                //  TestJobTypeProjectRelated;
                                                                //  Job.GET("Job No.");
                                                                //END ELSE BEGIN
                                                                //  CLEAR(Job);
                                                                //END;
                                                                //IF Job."Bill-to Customer No." <> '' THEN
                                                                //  VALIDATE("Customer No.",Job."Bill-to Customer No.");
                                                                //
                                                                //"RFTS No." := Job."RTPS No.";
                                                                //"Project Description" := Job.Description;
                                                                //"P.O No." := Job."P.O No.";
                                                              END;
                                                               }
    { 16  ;   ;Project Name        ;Text250       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                // TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 17  ;   ;Project Name 2      ;Text250       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 18  ;   ;RTPS No.            ;Code20        ;TableRelation="RTPS Document" WHERE (Status=FILTER(<>Open));
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 20  ;   ;Sales Related       ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 30  ;No ;Other Activities    ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 60  ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=VAR
                                                                Employee@1000 : Record 5200;
                                                              BEGIN
                                                                TestAdminRights;
                                                                IF "Employee No." <> xRec."Employee No." THEN
                                                                  IF Employee.GET("Employee No.") THEN BEGIN
                                                                    VALIDATE("Department Code", Employee."Department Code");
                                                                  END ELSE
                                                                    VALIDATE("Department Code", '');
                                                                CALCFIELDS("Employee Name");
                                                              END;
                                                               }
    { 61  ;   ;Employee Name       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Search Name" WHERE (No.=FIELD(Employee No.)));
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;

                                                   Editable=No }
    { 70  ;   ;Department Code     ;Code20        ;TableRelation="User Group";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS(Department);
                                                              END;
                                                               }
    { 71  ;   ;Department          ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("User Group".Name WHERE (Code=FIELD(Department Code)));
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;

                                                   Editable=No }
    { 80  ;   ;Date Requested      ;Date          ;OnValidate=BEGIN
                                                                TestAdminRights;

                                                                IF (UserSetup.GET(USERID) AND (UserSetup."JO Admin" = FALSE)) OR NOT UserSetup.GET(USERID) THEN
                                                                  ERROR(Err02, FIELDCAPTION("Date Requested"));
                                                              END;
                                                               }
    { 90  ;   ;P.O No.             ;Code100       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 91  ;   ;Service Report No.  ;Code250        }
    { 100 ;   ;Customer No.        ;Code20        ;TableRelation=Customer WHERE (Customer Type=CONST(Customer));
                                                   OnValidate=VAR
                                                                Cust@1000 : Record 18;
                                                                RecordRestrictionMgt@1001 : Codeunit 1550;
                                                              BEGIN
                                                                TestAdminRights;
                                                                IF Cust.GET("Customer No.") THEN BEGIN
                                                                  RecordRestrictionMgt.CheckRecordHasUsageRestrictions(Cust.RECORDID);
                                                                  Cust.TESTFIELD("Gen. Bus. Posting Group");
                                                                  Cust.TESTFIELD("Customer Posting Group");
                                                                  Cust.TESTFIELD("VAT Bus. Posting Group");
                                                                END ELSE BEGIN
                                                                  CLEAR(Cust);
                                                                END;
                                                                "Customer Name" := Cust.Name;
                                                              END;
                                                               }
    { 101 ;   ;Customer Name       ;Text50        ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 130 ;   ;Remarks             ;Text250       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;

                                                   CaptionML=ENU=Remarks }
    { 140 ;   ;Ordinary P.O.       ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 150 ;   ;TurnKey             ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 160 ;   ;Site Survey         ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT "Site Survey" THEN BEGIN
                                                                  CLEAR("RTPS No.");
                                                                  CLEAR("Site Srvy. SR Form");
                                                                  CLEAR("Site Srvy. SR No.");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                  VALIDATE("Site Srvy. SR Form", TRUE);
                                                                END;
                                                              END;
                                                               }
    { 161 ;   ;Site Srvy. SR Form  ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;

                                                                IF "Site Srvy. SR Form" = FALSE THEN
                                                                  CLEAR("Site Srvy. SR No.");
                                                              END;

                                                   CaptionML=ENU=Service Report Form }
    { 162 ;   ;Site Srvy. SR No.   ;Code20        ;CaptionML=ENU=Service Report No. }
    { 170 ;   ;Trial/POC           ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT "Trial/POC" THEN BEGIN
                                                                  CLEAR("APCT Form");
                                                                  CLEAR("RFE Form");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                END;
                                                              END;
                                                               }
    { 171 ;   ;APCT Form           ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Approval to Proceed/Conduct Trial }
    { 172 ;   ;RFE Form            ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Request for Exception }
    { 180 ;   ;OSP                 ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 190 ;   ;Rectification       ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT Rectification THEN BEGIN
                                                                  CLEAR("Rectification SR Form");
                                                                  CLEAR("Rectification SR No.");
                                                                  CLEAR("Rectification Punchlist Report");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                  VALIDATE("Rectification SR Form", TRUE);
                                                                END;
                                                              END;
                                                               }
    { 191 ;   ;Rectification Punchlist Report;Boolean;
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU="Punchlist Report/List of Deficiencies (as applicable) " }
    { 192 ;   ;Rectification SR Form;Boolean      ;OnValidate=BEGIN
                                                                IF "Rectification SR Form" = FALSE THEN
                                                                  CLEAR("Rectification SR No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TestAdminRights;
                                                              TestJobTypeProjectRelated;
                                                            END;

                                                   CaptionML=ENU=Service Report Form }
    { 193 ;   ;Rectification SR No.;Code20        ;CaptionML=ENU=Service Report No. }
    { 200 ;   ;Final Acceptance    ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT "Final Acceptance" THEN BEGIN
                                                                  CLEAR("Fnl. Accpt. SR Form");
                                                                  CLEAR("Fnl. Accpt. SR No.");
                                                                  CLEAR("Fnl. Accpt. Schd. by Cust.");
                                                                  CLEAR("Fnl. Accpt. Punchlist Report");
                                                                  CLEAR("Fnl. Accpt. PAC");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                  VALIDATE("Fnl. Accpt. SR Form", TRUE);
                                                                END;
                                                              END;
                                                               }
    { 201 ;   ;Fnl. Accpt. SR Form ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;

                                                                IF "Fnl. Accpt. SR Form" = FALSE THEN
                                                                  CLEAR("Fnl. Accpt. SR No.");
                                                              END;

                                                   CaptionML=ENU=Service Report Form }
    { 202 ;   ;Fnl. Accpt. SR No.  ;Code20        ;CaptionML=ENU=Service Report No. }
    { 203 ;   ;Fnl. Accpt. Schd. by Cust.;Boolean ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Schedule Confirmed by Customer }
    { 204 ;   ;Fnl. Accpt. Punchlist Report;Boolean;
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Cleared Punchlist Report/List of Deficiencies (signed by customer) }
    { 205 ;   ;Fnl. Accpt. PAC     ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Preliminary Acceptance Certificate }
    { 210 ;   ;Installation and Commissioning;Boolean;
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT "Installation and Commissioning" THEN BEGIN
                                                                  CLEAR("InsComm. 1st Trip");
                                                                  CLEAR("InsComm. 2nd Trip");
                                                                  CLEAR("InsComm. 3rd Trip");
                                                                  CLEAR("InsComm. RFE Form");
                                                                  CLEAR("InsComm. SR Form");
                                                                  CLEAR("InsComm. SR No.");
                                                                  VALIDATE("InsComm. AFI", FALSE);
                                                                  CLEAR("InsComm. Permitting");
                                                                  CLEAR("InsComm. Others");
                                                                  CLEAR("InsComm. As Plan");
                                                                  CLEAR("InsComm. TSSR");
                                                                  CLEAR("InsComm. Others");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                  VALIDATE("InsComm. SR Form", TRUE);
                                                                END;
                                                              END;
                                                               }
    { 220 ;   ;InsComm. 1st Trip   ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 221 ;   ;InsComm. 2nd Trip   ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 222 ;   ;InsComm. 3rd Trip   ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 223 ;   ;InsComm. RFE Form   ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Request for Exemption Form }
    { 224 ;   ;InsComm. SR Form    ;Boolean       ;OnValidate=BEGIN
                                                                IF "InsComm. SR Form" = FALSE THEN
                                                                  CLEAR("InsComm. SR No.");
                                                              END;

                                                   CaptionML=ENU=Service Report Form }
    { 225 ;   ;InsComm. SR No.     ;Code20        ;CaptionML=ENU=Service Report No. }
    { 226 ;   ;InsComm. AFI        ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                IF NOT "InsComm. AFI" THEN BEGIN
                                                                  CLEAR("InsComm. Line of Sight");
                                                                  CLEAR("InsComm. Non-Line of Sight");
                                                                  VALIDATE("InsComm. Permitting", FALSE);
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Approved for Installation (Signed by Customer) }
    { 227 ;   ;InsComm. As Plan    ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=As Plan (Signed by Customer) }
    { 228 ;   ;InsComm. TSSR       ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Technical Site Survey Report (Signed by Customer) }
    { 230 ;   ;Troubleshooting     ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT Troubleshooting THEN BEGIN
                                                                  CLEAR("Trbltng. Under Warranty");
                                                                  CLEAR("Trbltng. DR Date");
                                                                  CLEAR("Trbltng. Date of Acceptance");
                                                                  CLEAR("Trbltng. Out of Warranty");
                                                                  CLEAR("Out of Wrrnty. 1st Trip");
                                                                  CLEAR("Out of Wrrnty. 2nd Trip");
                                                                  CLEAR("Trbltng. NCCF No.");
                                                                  VALIDATE("Trbltng. SR Form",FALSE);
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                  VALIDATE("Trbltng. SR Form", TRUE);
                                                                END;
                                                              END;
                                                               }
    { 231 ;   ;Trbltng. NCCF No.   ;Code20        ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Non-Conformance Complaint Form No. }
    { 232 ;   ;Trbltng. SR Form    ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                IF  NOT "Trbltng. SR Form" THEN BEGIN
                                                                  CLEAR("Trbltng. SR No.");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Service Report Form }
    { 233 ;   ;Trbltng. SR No.     ;Code20        ;CaptionML=ENU=Service Report No. }
    { 240 ;   ;Trbltng. Under Warranty;Boolean    ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;

                                                                IF "Trbltng. Under Warranty" = FALSE THEN BEGIN
                                                                  CLEAR("Trbltng. DR Date");
                                                                  CLEAR("Trbltng. Date of Acceptance");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Under Warranty }
    { 241 ;   ;Trbltng. DR Date    ;Date          ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Delivery Receipt Date }
    { 242 ;   ;Trbltng. Date of Acceptance;Date   ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Date of Acceptance }
    { 250 ;   ;Trbltng. Out of Warranty;Boolean   ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;

                                                                IF "Trbltng. Out of Warranty" = FALSE THEN BEGIN
                                                                  CLEAR("Out of Wrrnty. 1st Trip");
                                                                  CLEAR("Out of Wrrnty. 2nd Trip");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Out of Warranty }
    { 260 ;   ;Out of Wrrnty. 1st Trip;Boolean    ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=1st Trip }
    { 261 ;   ;Out of Wrrnty. 2nd Trip;Boolean    ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=2nd Trip }
    { 270 ;   ;On-Site Audit       ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT "On-Site Audit" THEN BEGIN
                                                                  CLEAR("On-Site Aud. 1st Trip");
                                                                  CLEAR("On-Site Aud. 2nd Trip");
                                                                  CLEAR("On-Site Aud. 3rd Trip");
                                                                  CLEAR("Audit Checklist");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                END;
                                                              END;
                                                               }
    { 280 ;   ;On-Site Aud. 1st Trip;Boolean      ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=1st Trip }
    { 281 ;   ;On-Site Aud. 2nd Trip;Boolean      ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=2nd Trip }
    { 282 ;   ;On-Site Aud. 3rd Trip;Boolean      ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=3rd Trip }
    { 290 ;   ;Meeting             ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;

                                                                IF Meeting = FALSE THEN
                                                                  CLEAR("Meeting Email/SMS Conf.");
                                                              END;
                                                               }
    { 291 ;   ;Meeting Email/SMS Conf.;Boolean    ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;

                                                   CaptionML=ENU=Email/SMS Confirmation }
    { 300 ;   ;Product Presentation;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;

                                                                IF "Product Presentation" = FALSE THEN
                                                                  CLEAR("Prod. Prstn. Email/SMS Conf.");
                                                              END;
                                                               }
    { 301 ;   ;Prod. Prstn. Email/SMS Conf.;Boolean;
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;

                                                   CaptionML=ENU=Email/SMS Confirmation }
    { 310 ;   ;With P.O            ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 311 ;   ;Without P.O         ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;
                                                               }
    { 320 ;   ;Others              ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                IF NOT Others THEN
                                                                  SetActivity;
                                                              END;
                                                               }
    { 321 ;   ;Activity            ;Text250       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;

                                                   CaptionML=ENU=Activity }
    { 330 ;   ;Point of Origin     ;Text50         }
    { 340 ;   ;Time of Departure   ;Time          ;TableRelation="Time Selector";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Time of Departure");
                                                                IF "Document Date" = 0D THEN
                                                                  VALIDATE("Document Date", TODAY);

                                                                IF ("Time of Arrival" = 0T) OR ("Time of Departure" >= "Time of Arrival") THEN
                                                                  "Time of Arrival" := "Time of Departure" + 1800000;
                                                              END;

                                                   ValidateTableRelation=No }
    { 350 ;   ;Destination         ;Text50         }
    { 360 ;   ;Time of Arrival     ;Time          ;TableRelation="Time Selector";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Time of Arrival");
                                                                IF "Document Date" = 0D THEN
                                                                  VALIDATE("Document Date", TODAY);

                                                                IF ("Time of Departure" = 0T) OR ("Time of Arrival" <= "Time of Departure") THEN
                                                                  "Time of Departure" := "Time of Arrival" - 1800000;
                                                              END;

                                                   ValidateTableRelation=No }
    { 370 ;   ;Name of Passengers  ;Text100        }
    { 500 ;   ;No. Series          ;Code20         }
    { 510 ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 530 ;   ;Date Needed         ;Date          ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 800 ;No ;Requested By        ;Text50        ;TableRelation=Employee;
                                                   OnLookup=VAR
                                                              Employee@1000 : Record 5200;
                                                            BEGIN
                                                              IF PAGE.RUNMODAL(0,Employee) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                "Endorsed By" := GetEmployeeName(Employee."No.");
                                                              END;
                                                            END;

                                                   Description=Not in Document and List }
    { 810 ;No ;Endorsed By         ;Text50        ;TableRelation=Employee;
                                                   OnLookup=VAR
                                                              Employee@1000 : Record 5200;
                                                            BEGIN
                                                              IF PAGE.RUNMODAL(0,Employee) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                "Requested By" := GetEmployeeName(Employee."No.");
                                                              END;
                                                            END;

                                                   Description=Not in Document and List }
    { 900 ;   ;Status              ;Option        ;OptionCaptionML=ENU=Open,Pending Approval,Released,Cancelled,Posted;
                                                   OptionString=Open,Pending Approval,Released,Cancelled,Posted }
    { 920 ;   ;Audit Checklist     ;Boolean        }
    { 930 ;   ;Permitting          ;Boolean       ;OnValidate=BEGIN
                                                                SetActivity;
                                                                IF Permitting = FALSE THEN BEGIN
                                                                  CLEAR("Prmtg. AFI");
                                                                  CLEAR("Prmtg. As Plan");
                                                                  CLEAR("Prmtg. TSSR");
                                                                  CLEAR("Prmtg. Timeline of ROW");
                                                                END;
                                                              END;
                                                               }
    { 940 ;   ;Prmtg. AFI          ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Approved for Installation (Signed by Customer) }
    { 945 ;   ;Prmtg. As Plan      ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=As Plan (Signed by Customer) }
    { 950 ;   ;Prmtg. TSSR         ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Technical Site Survey Report (Signed by Customer) }
    { 955 ;   ;Prmtg. Timeline of ROW;Boolean     ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Timeline of ROW }
    { 1000;   ;Vehicle Request     ;Boolean        }
    { 1010;   ;Public Transportation Request;Boolean }
    { 1020;   ;Airplane Ticket Request;Boolean     }
    { 1030;   ;Project Category    ;Code20        ;TableRelation="Project Category" }
    { 50196;  ;Responsibility Center;Code20       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                IF "Responsibility Center" <> UserSetupManagement.GetJobOrderFilter THEN
                                                                  ERROR(Txt01, TABLECAPTION, UserSetupManagement.GetJobOrderFilter);
                                                              END;
                                                               }
    { 50197;  ;INTP No.            ;Code20        ;TableRelation="Internal Notice to Proceed" WHERE (Status=FILTER(<>Cancelled),
                                                                                                     Approval Status=CONST(Released));
                                                   OnValidate=VAR
                                                                INTP@1000 : Record 50040;
                                                              BEGIN
                                                                TestAdminRights;
                                                                IF "INTP No." <> '' THEN BEGIN
                                                                  INTP.GET("INTP No.");
                                                                END ELSE BEGIN
                                                                  CLEAR(INTP);
                                                                END;

                                                                "Job No." := INTP."Job No.";
                                                                "Project Name" := INTP."Project Name";
                                                                "Project Name 2" := INTP."Project Name 2";
                                                                IF INTP."Notice To Mobilize" THEN
                                                                  "P.O No." := INTP."P.O No. (Customer)"
                                                                ELSE
                                                                   "P.O No." := INTP."No.";
                                                                IF INTP."Customer No." <> '' THEN
                                                                  VALIDATE("Customer No.",INTP."Customer No.");
                                                              END;
                                                               }
    { 50200;  ;Incoming Document Entry No.;Integer }
    { 50201;  ;InsComm. Line of Sight;Boolean     ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Line of Sight }
    { 50202;  ;InsComm. Non-Line of Sight;Boolean ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Non-Line of Sight }
    { 50210;  ;InsComm. Permitting ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                IF NOT "InsComm. Permitting" THEN BEGIN
                                                                  CLEAR("InsComm. Prmt. LGU Permit");
                                                                  CLEAR("InsComm. Prmt. Brgy. Permit");
                                                                  CLEAR("InsComm. Prmt. Bldg. Permit");
                                                                  CLEAR("InsComm. Prmt. DPWH");
                                                                  CLEAR("InsComm. Prmt. MMDA");
                                                                  CLEAR("InsComm. Prmt. Traffic");
                                                                  CLEAR("InsComm. Prmt. HOA");
                                                                  CLEAR("InsComm. Prmt. ALO");
                                                                  CLEAR("InsComm. Prmt. ALP");
                                                                  CLEAR("InsComm. Prmt. FIO");
                                                                  CLEAR("InsComm. Prmt. RAAWA");
                                                                  CLEAR("InsComm. Prmt. SO");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Permitting }
    { 50215;  ;InsComm. Prmt. LGU Permit;Boolean  ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=LGU Permit }
    { 50220;  ;InsComm. Prmt. Brgy. Permit;Boolean;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Barangay Permit }
    { 50225;  ;InsComm. Prmt. Bldg. Permit;Boolean;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Building Permit }
    { 50230;  ;InsComm. Prmt. DPWH ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=DPWH }
    { 50235;  ;InsComm. Prmt. MMDA ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=MMDA }
    { 50240;  ;InsComm. Prmt. Traffic;Boolean     ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Traffic }
    { 50245;  ;InsComm. Prmt. HOA  ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Home Owners Association (HOA) }
    { 50250;  ;InsComm. Prmt. ALO  ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Adjacent Lot Owner (ALO) }
    { 50255;  ;InsComm. Prmt. ALP  ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Access Letter/Pass }
    { 50260;  ;InsComm. Prmt. FIO  ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Facility Impelementation Order }
    { 50265;  ;InsComm. Prmt. RAAWA;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=RAAWA }
    { 50270;  ;InsComm. Prmt. SO   ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Service Order (SO) }
    { 50275;  ;InsComm. Others     ;Text50        ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Others }
    { 50280;  ;Testing             ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT Testing THEN BEGIN
                                                                  CLEAR("Testing Test Procedures");
                                                                  CLEAR("Testing SR Form");
                                                                  CLEAR("Testing SR No.");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                  VALIDATE("Testing SR Form", TRUE);
                                                                END;
                                                              END;
                                                               }
    { 50281;  ;Testing Test Procedures;Boolean    ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Test Proceedure/Parameters }
    { 50282;  ;Testing SR Form     ;Boolean       ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                                IF "Testing SR Form" = FALSE THEN
                                                                  CLEAR("Testing SR No.");
                                                              END;

                                                   CaptionML=ENU=Service Report Form }
    { 50283;  ;Testing SR No.      ;Code20        ;CaptionML=ENU=Service Report No. }
    { 50300;  ;Preliminary Acceptance;Boolean     ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF NOT "Preliminary Acceptance" THEN BEGIN
                                                                  CLEAR("Pre-Accpt. SR Form");
                                                                  CLEAR("Pre-Accpt. SR No.");
                                                                  CLEAR("Pre-Accpt. Sched. by Customer");
                                                                END ELSE BEGIN
                                                                  TestJobTypeProjectRelated;
                                                                  VALIDATE("Pre-Accpt. SR Form", TRUE);
                                                                END;
                                                              END;
                                                               }
    { 50301;  ;Pre-Accpt. SR Form  ;Boolean       ;OnValidate=BEGIN
                                                                IF "Pre-Accpt. SR Form" = FALSE THEN
                                                                  CLEAR("Pre-Accpt. SR No.");
                                                              END;

                                                   CaptionML=ENU=Service Report Form }
    { 50302;  ;Pre-Accpt. SR No.   ;Code20        ;CaptionML=ENU=Service Report No. }
    { 50303;  ;Pre-Accpt. Sched. by Customer;Boolean;
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                                TestJobTypeProjectRelated;
                                                              END;

                                                   CaptionML=ENU=Schedule Confirmed by Customer }
    { 50340;  ;Special Project of CEO;Boolean     ;OnValidate=BEGIN
                                                                TestAdminRights;
                                                                SetActivity;
                                                                IF "Special Project of CEO" = TRUE THEN
                                                                  TESTFIELD("Job Type", "Job Type"::Others);
                                                              END;
                                                               }
    { 50350;  ;Ground Manager No.  ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 50351;  ;Project Manager No. ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Person));
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;
                                                               }
    { 50360;  ;Request for Exception No.;Code20   ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Invoice),
                                                                                           Request type=CONST(Request For Exception),
                                                                                           Status=FILTER(Released|Pending Approval));
                                                   OnValidate=BEGIN
                                                                TestAdminRights;
                                                              END;

                                                   OnLookup=VAR
                                                              SalesHdr@1000 : Record 36;
                                                            BEGIN
                                                              TestAdminRights;
                                                              SalesHdr.SETFILTER(Status, '%1|%2',SalesHdr.Status::Released, SalesHdr.Status::"Pending Approval");
                                                              IF "Request for Exception No." <> '' THEN
                                                               IF  SalesHdr.GET(SalesHdr."Document Type"::Invoice, "Request for Exception No.") THEN;
                                                              IF PAGE.RUNMODAL(PAGE::"Request for Exceptions", SalesHdr) = ACTION::LookupOK THEN BEGIN
                                                                 xRec := Rec;
                                                               VALIDATE("Request for Exception No.",SalesHdr."No.");
                                                              END;
                                                            END;
                                                             }
    { 50370;  ;Created By User ID  ;Code50        ;TableRelation="User Setup" }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Project Name                             }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Project Name,Customer No.,Customer Name }
  }
  CODE
  {
    VAR
      JobOderLines@1000 : Record 50551;
      Job@1001 : Record 167;
      Txt02@1002 : TextConst 'ENU=You cannot rename a %1.';
      UserSetup@1003 : Record 91;
      UserGroup@1004 : Record 9000;
      CustomSetup@1008 : Record 50001;
      ApprovalsMgmt@1005 : Codeunit 1535;
      NoSeriesMgt@1007 : Codeunit 396;
      Err02@1006 : TextConst 'ENU=You''re not allowed to modify %1 field.';
      Err03@1009 : TextConst 'ENU=You must select atleast one activity for service engineering.';
      Err04@1010 : TextConst 'ENU=You do not have a valid User Setup. Please contact your administrator.';
      UserSetupManagement@1011 : Codeunit 5700;
      Txt01@1012 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.';

    PROCEDURE InitInsert@61();
    VAR
      NoSeriesMgt@1000 : Codeunit 396;
    BEGIN
      IF "No." = '' THEN BEGIN
        NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series",TODAY,"No.","No. Series");
      END;

      InitRecord;
    END;

    LOCAL PROCEDURE InitRecord@17();
    BEGIN
      TestDefaultNoSeries;
      // TODO: Add a function to automatic setup the User Setup of a User creating a Job Order.
      IF "Document Date" = 0D THEN
        VALIDATE("Document Date", TODAY);
      IF "Date Requested" = 0D THEN
        VALIDATE("Date Requested", TODAY);
      IF "Created By User ID" = '' THEN
        VALIDATE("Created By User ID", USERID);

      IF "Employee No." = '' THEN
        VALIDATE("Employee No.", UserSetupManagement.GetUserSetupEmployeeNo);

      IF "Responsibility Center" = '' THEN
        "Responsibility Center" := UserSetup."JO Ctr. Filter";

      TestUserSetup;
      TestJobOrderDetails;
    END;

    PROCEDURE InitPageValues@13();
    VAR
      Employee@1000 : Record 5200;
    BEGIN
      IF "No." = '' THEN BEGIN
        "Document Date" := TODAY;
        "Date Requested" := TODAY;
        "Created By User ID" := USERID;

        "Responsibility Center" := UserSetupManagement.GetJobOrderFilter;
        IF Employee.GET(UserSetupManagement.GetUserSetupEmployeeNo) THEN BEGIN
          Employee.TESTFIELD("Department Code");
          VALIDATE("Employee No.", Employee."No.");
          VALIDATE("Department Code", Employee."Department Code");
        END;

      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@1() : Code[20];
    BEGIN
      TestDefaultNoSeries;

      EXIT(CustomSetup."Job Order Nos.");
    END;

    LOCAL PROCEDURE GetEmployeeName@2(EmpNo@1000 : Code[20]) : Text;
    VAR
      Employee@1001 : Record 5200;
    BEGIN
      IF Employee.GET(EmpNo) THEN
        EXIT(Employee."First Name"+ ' '+Employee."Last Name");
    END;

    PROCEDURE PrintDocument@3();
    VAR
      JobOrderForm@1000 : Report 50012;
    BEGIN
      CLEAR(JobOrderForm);
      JobOrderForm.SetReportFilter("No.");
      JobOrderForm.RUNMODAL;
    END;

    LOCAL PROCEDURE TestUserSetup@23();
    VAR
      UserSetup@1000 : Record 91;
      UserIdNotInSetupErr@1002 : TextConst '@@@=User ID NAVUser does not exist in the Approval User Setup window.;ENU=User ID %1 does not exist in the User Setup window. Please contact your administrator.';
      EmployeeNoNotInSetupErr@1001 : TextConst '@@@=User ID NAVUser does not exist in the Approval User Setup window.;ENU=Employee No. %1 does not exist in the User Setup window. Please contact your administrator.';
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        ERROR(UserIdNotInSetupErr, USERID);

      IF "Employee No." <> '' THEN BEGIN
        UserSetup.RESET;
        UserSetup.SETRANGE("Employee No.", "Employee No.");
        IF NOT UserSetup.FINDFIRST THEN
          ERROR(EmployeeNoNotInSetupErr, "Employee No.");
        UserSetup.TESTFIELD("User Group Code");
      END;
    END;

    LOCAL PROCEDURE TestDefaultNoSeries@20();
    BEGIN
      // TODO: Create a separate table for setting up the Job Order
      CustomSetup.GET;
      CustomSetup.TESTFIELD("Job Order Nos.");
    END;

    PROCEDURE TestJobOrderField@4();
    VAR
      INTP@1000 : Record 50040;
    BEGIN
      IF "Job Type" = "Job Type"::"Service Engineering" THEN BEGIN
        TESTFIELD("Project Name");
        TESTFIELD("P.O No.");
        TESTFIELD("Customer No.");
        TESTFIELD("Customer Name");
        TESTFIELD("INTP No.");
        IF INTP.GET("INTP No.") AND (INTP."Supply Only" <> INTP."Supply Only"::Yes) THEN BEGIN
          TESTFIELD("Project Manager No.");
        END;

        IF (NOT "Site Survey") AND (NOT Permitting) AND (NOT "Installation and Commissioning") AND (NOT Testing) AND (NOT "Preliminary Acceptance")
          AND (NOT "Final Acceptance") AND (NOT Rectification) AND (NOT Troubleshooting) AND (NOT "On-Site Audit") AND (NOT "Trial/POC")
          AND (NOT Meeting) AND (NOT "Product Presentation") AND (NOT "Trial/POC") AND (NOT "On-Site Audit") THEN
          ERROR(Err03);
      END;

      TESTFIELD("Date Requested");
      TESTFIELD("Employee No.");

      IF "Special Project of CEO" = TRUE THEN
        TESTFIELD(Remarks);

      ValidateJobOrderLine;
    END;

    PROCEDURE TestJobTypeProjectRelated@9();
    BEGIN
      TESTFIELD("Job Type", "Job Type"::"Service Engineering");
    END;

    PROCEDURE TestLinkedDocuments@5();
    VAR
      Error001@1002 : TextConst 'ENU=You''re not allowed to delete %1 because it is already linked to a purchase document.';
      PurchaseHeader@1004 : Record 38;
      PurchInvHeader@1003 : Record 122;
    BEGIN
      PurchaseHeader.SETFILTER("Job Order No.", "No.");
      PurchInvHeader.SETFILTER("Job Order No.", "No.");

      IF (PurchaseHeader.COUNT > 0) OR (PurchInvHeader.COUNT > 0) THEN
        ERROR(Error001, "No.");
    END;

    LOCAL PROCEDURE TestJobOrderDetails@15();
    VAR
      Err01@1000 : TextConst 'ENU=You must check at least one check box from the Activity List.';
    BEGIN
      TESTFIELD("Document Date");
      TESTFIELD("Date Requested");
      TESTFIELD("Employee No.");
      TESTFIELD("Department Code");
      IF "Job Type" = "Job Type"::"Service Engineering" THEN BEGIN
        TESTFIELD("Project Name");
        TESTFIELD("Customer No.");
        TESTFIELD("Customer Name");
      END;

      IF "Job Type" = "Job Type"::"Service Engineering" THEN BEGIN
        IF Meeting OR "Product Presentation" OR "Trial/POC" OR "Site Survey" OR Permitting OR "Installation and Commissioning" OR Testing OR
          "On-Site Audit" OR "Preliminary Acceptance" OR "Final Acceptance" OR Rectification OR Troubleshooting OR Others = FALSE THEN
          ERROR(Err01);
      END;

      TESTFIELD("Created By User ID");
    END;

    PROCEDURE AssistEdit@6() : Boolean;
    BEGIN
      CustomSetup.GET;
      CustomSetup.TESTFIELD(CustomSetup."Job Order Nos.");
      IF NoSeriesMgt.SelectSeries(CustomSetup."Job Order Nos.",xRec."No. Series","No. Series") THEN BEGIN
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    PROCEDURE ValidateJobOrderLine@7();
    VAR
      JobOrderLines_@1000 : Record 50551;
      Error001@1001 : TextConst 'ENU=Job Order %1 must atleast have a value in Request for Vehicle, Request for Transportation or Request for Airplane Ticket.';
    BEGIN
      JobOrderLines_.SETRANGE("Job Order No.", "No.");

      IF JobOrderLines_.FINDSET THEN BEGIN
        REPEAT
          CASE JobOrderLines_."Line Type" OF
            JobOrderLines_."Line Type"::"Car Request":
              BEGIN
                JobOrderLines_.TESTFIELD("Date Needed");
                JobOrderLines_.TESTFIELD(Destination);
                JobOrderLines_.TESTFIELD("Site Name");
                JobOrderLines_.TESTFIELD("Time of Departure");
                JobOrderLines_.TESTFIELD("Time of Arrival");
              END;
            JobOrderLines_."Line Type"::"Public Transpo Request":
              BEGIN
                JobOrderLines_.TESTFIELD("Date Needed");
                JobOrderLines_.TESTFIELD("Destination From");
                JobOrderLines_.TESTFIELD("Destination To");
                JobOrderLines_.TESTFIELD("Name of Passengers");
                JobOrderLines_.TESTFIELD("Date From");
                JobOrderLines_.TESTFIELD("Date To");
              END;
            JobOrderLines_."Line Type"::"Airplane Ticket Request":
              BEGIN
                JobOrderLines_.TESTFIELD("Date Needed");
                JobOrderLines_.TESTFIELD("First Name");
                JobOrderLines_.TESTFIELD("Middle Name");
                JobOrderLines_.TESTFIELD("Last Name");
                JobOrderLines_.TESTFIELD(Birthdate);
                JobOrderLines_.TESTFIELD(Destination);
                JobOrderLines_.TESTFIELD("Date From");
                JobOrderLines_.TESTFIELD("Date To");
              END;

          END;
        UNTIL JobOrderLines_.NEXT = 0;
      END ELSE BEGIN
        ERROR(Error001, "No.");
      END;
    END;

    PROCEDURE TestAdminRights@8();
    BEGIN
      IF (UserSetup.GET(USERID) AND (UserSetup."JO Admin" = FALSE)) OR NOT UserSetup.GET(USERID) THEN
        TESTFIELD(Status, Status::Open);
    END;

    PROCEDURE GetGroundManagerName@10() : Text;
    VAR
      Res@1000 : Record 156;
    BEGIN
      IF Res.GET("Ground Manager No.") THEN
        EXIT(Res.Name + Res."Name 2");

      EXIT('');
    END;

    PROCEDURE GetProjectManagerName@12() : Text;
    VAR
      Res@1000 : Record 156;
    BEGIN
      IF Res.GET("Project Manager No.") THEN
        EXIT(Res.Name + Res."Name 2");

      EXIT('');
    END;

    [Integration]
    PROCEDURE OnJobOrderNewNote@28(VAR JobOrder@1000 : Record 50012);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnJobOrderNewLink@21(VAR JobOrder@1000 : Record 50012);
    BEGIN
    END;

    LOCAL PROCEDURE ResetFields@11();
    BEGIN
      VALIDATE(Meeting, FALSE);
      VALIDATE("Product Presentation", FALSE);
      VALIDATE("Trial/POC", FALSE);
      VALIDATE("Site Survey", FALSE);
      VALIDATE(Permitting, FALSE);
      VALIDATE("Installation and Commissioning", FALSE);
      VALIDATE(Testing, FALSE);
      VALIDATE("On-Site Audit", FALSE);
      VALIDATE("Preliminary Acceptance", FALSE);
      VALIDATE("Final Acceptance", FALSE);
      VALIDATE(Rectification, FALSE);
      VALIDATE(Troubleshooting, FALSE);
      VALIDATE(Others, FALSE);
      VALIDATE("Special Project of CEO", FALSE);
    END;

    LOCAL PROCEDURE SetActivity@14();
    BEGIN
      CLEAR(Activity);
      IF Meeting THEN
        Activity += ', ' + FIELDCAPTION(Meeting);
      IF "Product Presentation" THEN
        Activity += ', ' + FIELDCAPTION("Product Presentation");
      IF "Trial/POC" THEN
        Activity += ', ' + FIELDCAPTION("Trial/POC");
      IF "Site Survey" THEN
        Activity += ', ' + FIELDCAPTION("Site Survey");
      IF Permitting THEN
        Activity += ', ' + FIELDCAPTION(Permitting);
      IF "Installation and Commissioning" THEN
        Activity += ', ' + FIELDCAPTION("Installation and Commissioning");
      IF Testing THEN
        Activity += ', ' + FIELDCAPTION(Testing);
      IF "On-Site Audit" THEN
        Activity += ', ' + FIELDCAPTION("On-Site Audit");
      IF "Preliminary Acceptance" THEN
        Activity += ', ' + FIELDCAPTION("Preliminary Acceptance");
      IF "Final Acceptance" THEN
        Activity += ', ' + FIELDCAPTION("Final Acceptance");
      IF Rectification THEN
        Activity += ', ' + FIELDCAPTION(Rectification);
      IF Troubleshooting THEN
        Activity += ', ' + FIELDCAPTION(Troubleshooting);
      IF "Special Project of CEO" THEN
        Activity += ', ' + FIELDCAPTION("Special Project of CEO");

      Activity := COPYSTR(Activity, 3, STRLEN(Activity));
    END;

    PROCEDURE DocNoVisibility@19() : Boolean;
    VAR
      NoSeries@1000 : Record 308;
    BEGIN
      CustomSetup.GET;
      IF NoSeries.GET(CustomSetup."Job Order Nos.")THEN
        EXIT(NoSeries."Manual Nos.")
      ELSE
        EXIT(TRUE);
    END;

    BEGIN
    {
      !! Documentation Table 50012 Job Order

      1:26 PM Tuesday, July 30, 2024
        Adjust InitRecord function, removed validate employee no.
        Adjust TestJobOrderDetails function, activity is not required if job type is not equal to others.

      1:13 PM Friday, August 2, 2024
        Remove the Assigned User ID and Approver User ID fields.
        Add a function to check the user setup of the user. TestUserSetup.

      2:53 PM Wednesday, August 7, 2024
        Adjust TestJobOrderDetails function, set type of request when Job Type is equal to Service Engineering
    }
    END.
  }
}

OBJECT Table 50551 Job Order Line
{
  OBJECT-PROPERTIES
  {
    Date=07/02/18;
    Time=[ 4:15:50 AM];
    Modified=Yes;
    Version List=NAVOC1.00.02.48;
  }
  PROPERTIES
  {
    OnInsert=VAR
               JobOrderLines_@1000 : Record 50551;
             BEGIN

               TestJobOrderHeader;
               InitLInes;

               "Created By" := USERID;
               "Created At" := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               "Modified By" := USERID;
               "Modified At" := CURRENTDATETIME;
             END;

    OnDelete=BEGIN
               TestJobOrderHeader;
             END;

  }
  FIELDS
  {
    { 100 ;   ;Line No.            ;Integer       ;Editable=No }
    { 101 ;   ;Line Type           ;Option        ;OptionCaptionML=ENU=Car Request,Public Transpo Request,Airplane Ticket Request;
                                                   OptionString=Car Request,Public Transpo Request,Airplane Ticket Request }
    { 102 ;   ;Job Order No.       ;Code20        ;TableRelation="Job Order" }
    { 103 ;   ;Date Needed         ;Date          ;OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                                GetJobHeader;

                                                                IF "Date Needed" < JobOrderHeader."Date Requested" THEN
                                                                  ERROR(Error001, FIELDCAPTION("Date Needed"), JobOrderHeader.FIELDCAPTION("Date Requested"));
                                                              END;
                                                               }
    { 104 ;   ;Destination         ;Text50        ;OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                              END;
                                                               }
    { 105 ;   ;Date From           ;DateTime      ;OnValidate=BEGIN
                                                                TestJobOrderHeader;

                                                                IF "Date From" > "Date To" THEN BEGIN
                                                                  "Date To" := "Date From";
                                                                END;
                                                                DateFrom := "Date From";
                                                                IF DT2DATE(DateFrom) < "Date Needed" THEN BEGIN
                                                                  "Date From" := CREATEDATETIME("Date Needed",TIME);
                                                                  "Date To" := CREATEDATETIME("Date Needed",TIME);
                                                                END;
                                                              END;
                                                               }
    { 106 ;   ;Date To             ;DateTime      ;OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                                // IF "Date of Departure" > "Date of Return" THEN BEGIN
                                                                //     "Date of Return" := "Date of Departure";
                                                                // END;
                                                                IF "Date To" < "Date From" THEN BEGIN
                                                                  "Date From" := "Date To";

                                                                END;
                                                              END;
                                                               }
    { 107 ;   ;Site Name           ;Text50        ;OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                              END;
                                                               }
    { 108 ;   ;Province/Region     ;Text50        ;OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                              END;
                                                               }
    { 109 ;   ;Remarks             ;Text50         }
    { 110 ;   ;Driver No.          ;Code20        ;TableRelation=Resource WHERE (Job Type=CONST(Driver));
                                                   OnValidate=BEGIN
                                                                TestJobOrderVehicleAdmin;
                                                                IF "Driver No." <> '' THEN
                                                                  Resource.GET("Driver No.")
                                                                ELSE BEGIN
                                                                  CLEAR(Resource);
                                                                END;

                                                                "Driver Name" := Resource.Name;
                                                              END;
                                                               }
    { 111 ;   ;Driver Name         ;Text50        ;OnValidate=BEGIN
                                                                TestJobOrderVehicleAdmin;
                                                              END;

                                                   Editable=No }
    { 112 ;   ;Vehicle No.         ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Machine));
                                                   OnValidate=BEGIN
                                                                TestJobOrderVehicleAdmin;
                                                                IF "Vehicle No." <> '' THEN
                                                                  Resource.GET("Vehicle No.")
                                                                ELSE BEGIN
                                                                  CLEAR(Resource);
                                                                END;

                                                                "Vehicle Descrition" := Resource.Name;
                                                                "Vehicle Plate No." := Resource."Serial No.";
                                                              END;
                                                               }
    { 113 ;   ;Vehicle Descrition  ;Text50        ;OnValidate=BEGIN
                                                                TestJobOrderVehicleAdmin;
                                                              END;

                                                   Editable=No }
    { 114 ;   ;Vehicle Plate No.   ;Code50        ;OnValidate=BEGIN
                                                                TestJobOrderVehicleAdmin;
                                                              END;

                                                   Editable=No }
    { 115 ;   ;Destination From    ;Text50        ;OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                              END;
                                                               }
    { 116 ;   ;Destination To      ;Text50        ;OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                              END;
                                                               }
    { 117 ;   ;Name of Passengers  ;Text100       ;OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                              END;
                                                               }
    { 120 ;   ;First Name          ;Text50        ;OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                              END;
                                                               }
    { 121 ;   ;Middle Name         ;Text50        ;OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                              END;
                                                               }
    { 122 ;   ;Last Name           ;Text50        ;OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                              END;
                                                               }
    { 123 ;   ;Birthdate           ;Date          ;OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                              END;
                                                               }
    { 124 ;   ;Destination Airport ;Text50        ;OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                              END;
                                                               }
    { 125 ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                                TestJobOrderHeaderProjectRelated;
                                                                IF "Job No." <> xRec."Job No." THEN
                                                                  VALIDATE("Job Task No.", '');
                                                              END;
                                                               }
    { 126 ;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                                TestJobOrderHeaderProjectRelated;
                                                                IF ("Job No." = '') OR ("Job Task No." = '') THEN BEGIN
                                                                  CLEAR("Job Task No.");
                                                                  CLEAR("Job Task Description");
                                                                  EXIT;
                                                                END;
                                                                JobTask.GET("Job No.","Job Task No.");
                                                                JobTask.TESTFIELD("Job Task Type", JobTask."Job Task Type"::Posting);
                                                                VALIDATE("Job Task Description", JobTask.Description);
                                                              END;
                                                               }
    { 127 ;   ;Job Task Description;Text50        ;OnValidate=BEGIN
                                                                TestJobOrderHeader;
                                                                TestJobOrderHeaderProjectRelated;
                                                                TESTFIELD("Job No.");
                                                                TESTFIELD("Job Task No.");
                                                              END;
                                                               }
    { 130 ;   ;Time of Departure   ;Time           }
    { 135 ;   ;Time of Arrival     ;Time           }
    { 50100;  ;Created By          ;Text100       ;Editable=No }
    { 50101;  ;Modified By         ;Text100       ;Editable=No }
    { 50102;  ;Created At          ;DateTime      ;Editable=No }
    { 50103;  ;Modified At         ;DateTime      ;Editable=No }
    { 50120;  ;Assigned User ID    ;Code50        ;TableRelation="User Setup" }
    { 50121;  ;Approver User ID    ;Code50        ;TableRelation="User Setup" }
  }
  KEYS
  {
    {    ;Line Type,Job Order No.,Line No.        ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      FixedAsset@1000 : Record 5600;
      Resource@1001 : Record 156;
      JobOrderHeader@1002 : Record 50012;
      JobTask@1003 : Record 1001;
      UserSetup@1005 : Record 91;
      DateFrom@1004 : DateTime;
      Error001@1006 : TextConst 'ENU=%1 must not later than %2.';

    LOCAL PROCEDURE TestJobOrderHeader@4();
    BEGIN
      IF JobOrderHeader.GET("Job Order No.") THEN
        JobOrderHeader.TestAdminRights;
    END;

    LOCAL PROCEDURE TestJobOrderVehicleAdmin@1();
    VAR
      UserSetup@1000 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        UserSetup.TESTFIELD("User ID");

      IF UserSetup."Job Order Vehicle Admin" = FALSE THEN
        UserSetup.TESTFIELD("Job Order Vehicle Admin");
    END;

    LOCAL PROCEDURE TestJobOrderHeaderProjectRelated@2();
    BEGIN
      IF JobOrderHeader.GET("Job Order No.") THEN
        JobOrderHeader.TestJobTypeProjectRelated;
    END;

    PROCEDURE InitLInes@3();
    VAR
      JobOrderLines_@1000 : Record 50551;
    BEGIN
      CASE "Line Type" OF
        "Line Type"::"Car Request":
          BEGIN
            JobOrderLines_.SETRANGE("Line Type", "Line Type");
            JobOrderLines_.SETRANGE("Job Order No.", "Job Order No.");
            IF JobOrderLines_.FINDLAST THEN BEGIN
              "Date Needed" := CALCDATE('<1D>', JobOrderLines_."Date Needed");
              "Date From" := CREATEDATETIME("Date Needed", 090000T);
              "Date To" := CREATEDATETIME("Date Needed", 180000T);
            END ELSE BEGIN
              IF "Date Needed" = 0D THEN
                "Date Needed" := TODAY;
              IF "Date From" = 0DT THEN
                "Date From" := CREATEDATETIME(TODAY, 090000T);
              IF "Date To" = 0DT THEN
                "Date To" := CREATEDATETIME(TODAY, 180000T);
            END;

            IF "Time of Departure" = 0T THEN
              "Time of Departure" := 090000T;
            IF "Time of Arrival" = 0T THEN
              "Time of Arrival" := 180000T;
          END;
        "Line Type"::"Public Transpo Request":
          BEGIN
            JobOrderLines_.SETRANGE("Line Type", "Line Type");
            JobOrderLines_.SETRANGE("Job Order No.", "Job Order No.");
              IF JobOrderLines_.FINDLAST THEN BEGIN
                "Date Needed" := CALCDATE('<1D>', JobOrderLines_."Date Needed");
                "Date From" := CREATEDATETIME("Date Needed", 090000T);
                "Date To" := CREATEDATETIME("Date Needed", 180000T);
              END ELSE BEGIN
                IF "Date Needed" = 0D THEN
                  "Date Needed" := TODAY;
                IF "Date From" = 0DT THEN
                  "Date From" := CREATEDATETIME(TODAY, 090000T);
                IF "Date To" = 0DT THEN
                  "Date To" := CREATEDATETIME(TODAY, 180000T);
              END;
          END;
          ELSE
            "Date Needed" := TODAY;
            "Date From" := CREATEDATETIME(TODAY, 090000T);
            "Date To" := CREATEDATETIME(TODAY, 180000T);
      END;
    END;

    LOCAL PROCEDURE GetJobHeader@5();
    BEGIN
      TESTFIELD("Job Order No.");
      JobOrderHeader.GET("Job Order No.");
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 1535 Approvals Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=06/27/18;
    Time=[ 4:37:05 AM];
    Modified=Yes;
    Version List=NAVW19.00.00.49146,X8OC0.01,NAVOC1.00.02.48;
  }
  PROPERTIES
  {
    Permissions=TableData 454=imd,
                TableData 455=imd,
                TableData 456=imd,
                TableData 457=imd,
                TableData 458=imd,
                TableData 1511=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UserIdNotInSetupErr@1015 : TextConst '@@@=User ID NAVUser does not exist in the Approval User Setup window.;ENU=User ID %1 does not exist in the Approval User Setup window.';
      ApproverUserIdNotInSetupErr@1005 : TextConst '@@@=You must set up an approver for user ID NAVUser in the Approval User Setup window.;ENU=You must set up an approver for user ID %1 in the Approval User Setup window.';
      WFUserGroupNotInSetupErr@1013 : TextConst '@@@=The workflow user group member with user ID NAVUser does not exist in the Approval User Setup window.;ENU=The workflow user group member with user ID %1 does not exist in the Approval User Setup window.';
      SubstituteNotFoundErr@1007 : TextConst '@@@=There is no substitute for user ID NAVUser in the Approval User Setup window.;ENU=There is no substitute, direct approver, or approval administrator for user ID %1 in the Approval User Setup window.';
      NoSuitableApproverFoundErr@1000 : TextConst 'ENU=No qualified approver was found.';
      DelegateOnlyOpenRequestsErr@1049 : TextConst 'ENU=You can only delegate open approval requests.';
      ApproveOnlyOpenRequestsErr@1060 : TextConst 'ENU=You can only approve open approval requests.';
      RejectOnlyOpenRequestsErr@1061 : TextConst 'ENU=You can only reject open approval entries.';
      ApprovalsDelegatedMsg@1018 : TextConst 'ENU=The selected approval requests have been delegated.';
      NoReqToApproveErr@1056 : TextConst 'ENU=There is no approval request to approve.';
      NoReqToRejectErr@1057 : TextConst 'ENU=There is no approval request to reject.';
      NoReqToDelegateErr@1059 : TextConst 'ENU=There is no approval request to delegate.';
      PendingApprovalMsg@1002 : TextConst 'ENU=An approval request has been sent.';
      NoApprovalsSentMsg@1006 : TextConst 'ENU=No approval requests have been sent, either because they are already sent or because related workflows do not support the journal line.';
      PendingApprovalForSelectedLinesMsg@1020 : TextConst 'ENU=Approval requests have been sent.';
      PendingApprovalForSomeSelectedLinesMsg@1001 : TextConst 'ENU=Approval requests have been sent.\\Requests for some journal lines were not sent, either because they are already sent or because related workflows do not support the journal line.';
      PurchaserUserNotFoundErr@1003 : TextConst '@@@=Example: The salesperson/purchaser user ID NAVUser does not exist in the Approval User Setup window for Salesperson/Purchaser code AB.;ENU=The salesperson/purchaser user ID %1 does not exist in the Approval User Setup window for %2 %3.';
      NoApprovalRequestsFoundErr@1009 : TextConst 'ENU=No approval requests exist.';
      NoWFUserGroupMembersErr@1004 : TextConst 'ENU=A workflow user group with at least one member must be set up.';
      DocStatusChangedMsg@1010 : TextConst '@@@=Order 1001 has been automatically approved. The status has been changed to Released.;ENU=%1 %2 has been automatically approved. The status has been changed to %3.';
      UnsupportedRecordTypeErr@1011 : TextConst '@@@=Record type Customer is not supported by this workflow response.;ENU=Record type %1 is not supported by this workflow response.';
      PrePostCheckErr@1012 : TextConst '@@@="%1=document type, %2=document no., e.g. Order 321 must be approved...";ENU=%1 %2 must be approved and released before you can perform this action.';
      WorkflowEventHandling@1071 : Codeunit 1520;
      WorkflowManagement@1070 : Codeunit 1501;
      NoWorkflowEnabledErr@1101 : TextConst 'ENU=This record is not supported by related approval workflow.';
      ApprovalReqCanceledForSelectedLinesMsg@1019 : TextConst 'ENU=The approval request for the selected record has been canceled.';
      PendingJournalBatchApprovalExistsErr@1017 : TextConst '@@@=%1 is the Document No. of the journal line;ENU=An approval request already exists.';
      ApporvalChainIsUnsupportedMsg@1016 : TextConst '@@@=Only Direct Approver is supported as Approver Limit Type option for Gen. Journal Batch DEFAULT, CASH. The approval request will be approved automatically.;ENU=Only Direct Approver is supported as Approver Limit Type option for %1. The approval request will be approved automatically.';
      RecHasBeenApprovedMsg@1008 : TextConst '@@@="%1 = Record Id";ENU=%1 has been approved.';
      PrePostTHCheckErr@1014 : TextConst '@@@="%1=document type, %2=document no., e.g. Order 321 must be approved...";ENU=%1 must be approved and released before you can perform this action.';
      ResDoesNotexist@1021 : TextConst 'ENU="%1 does not exist in resource table. "';
      ErrTableNotIncluded@1022 : TextConst 'ENU=This record is not supported by related approval workflow. %1 must be setup.';

    [Integration]
    PROCEDURE OnSendPurchaseDocForApproval@3(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendSalesDocForApproval@10(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendRFPForApproval@111(VAR RequestforPurchase@1000 : Record 50030);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendIncomingDocForApproval@191(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelPurchaseApprovalRequest@66(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelRFPApprovalRequest@112(VAR RequestforPurchase@1000 : Record 50030);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendProjectForApproval@35(VAR Project@1000 : Record 50005);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendRFTSForApproval@95(VAR RFTSDoc@1000 : Record 50010);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendTERFForApproval@128(VAR TERFHeader@1000 : Record 50034);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendJOForApproval@96(VAR JobOrder@1000 : Record 50012);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendRFQForApproval@104(VAR RequestForQuotation@1000 : Record 50013);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendCAForApproval@108(VAR CashAdvance@1000 : Record 50017);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendNTPForApproval@137(VAR NoticeToProceed@1000 : Record 50040);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendRFPurForApproval@142(VAR RFPur@1000 : Record 50030);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelProjectApprovalRequest@116(VAR Project@1000 : Record 50005);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelRFTSApprovalRequest@118(VAR RFTSDocument@1000 : Record 50010);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelTERFApprovalRequest@129(VAR TERFHeader@1000 : Record 50034);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelNTPApprovalRequest@138(VAR NoticeToProceed@1000 : Record 50040);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelJOApprovalRequest@120(VAR JobOrder@1000 : Record 50012);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelRFQApprovalRequest@122(VAR RequestForQuotation@1000 : Record 50013);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelCAApprovalRequest@124(VAR CashAdvanceHdr@1000 : Record 50017);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelRFPurApprovalRequest@143(VAR RFPur@1000 : Record 50030);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelSalesApprovalRequest@34(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelIncomingDocApprovalRequest@100(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendCustomerForApproval@52(VAR Customer@1000 : Record 18);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendVendorForApproval@56(VAR Vendor@1000 : Record 23);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendItemForApproval@64(VAR Item@1000 : Record 27);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelCustomerApprovalRequest@51(VAR Customer@1000 : Record 18);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelVendorApprovalRequest@67(VAR Vendor@1000 : Record 23);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelItemApprovalRequest@69(VAR Item@1000 : Record 27);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendGeneralJournalBatchForApproval@62(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelGeneralJournalBatchApprovalRequest@61(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendGeneralJournalLineForApproval@65(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelGeneralJournalLineApprovalRequest@63(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnApproveApprovalRequest@68(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRejectApprovalRequest@76(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnDelegateApprovalRequest@78(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [TryFunction]
    PROCEDURE ApproveRecordApprovalRequest@48(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) THEN
        ERROR(NoReqToApproveErr);

      ApprovalEntry.SETRECFILTER;
      ApproveApprovalRequests(ApprovalEntry);
    END;

    [TryFunction]
    PROCEDURE RejectRecordApprovalRequest@57(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) THEN
        ERROR(NoReqToRejectErr);

      ApprovalEntry.SETRECFILTER;
      RejectApprovalRequests(ApprovalEntry);
    END;

    [TryFunction]
    PROCEDURE DelegateRecordApprovalRequest@58(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) THEN
        ERROR(NoReqToDelegateErr);

      ApprovalEntry.SETRECFILTER;
      DelegateApprovalRequests(ApprovalEntry);
    END;

    PROCEDURE ApproveApprovalRequests@29(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          ApproveSelectedApprovalRequest(ApprovalEntry);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    PROCEDURE RejectApprovalRequests@28(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          RejectSelectedApprovalRequest(ApprovalEntry);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    PROCEDURE DelegateApprovalRequests@27(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      IF ApprovalEntry.FINDSET(TRUE) THEN BEGIN
        REPEAT
          DelegateSelectedApprovalRequest(ApprovalEntry,TRUE);
        UNTIL ApprovalEntry.NEXT = 0;
        MESSAGE(ApprovalsDelegatedMsg);
      END;
    END;

    LOCAL PROCEDURE ApproveSelectedApprovalRequest@5(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN
        ERROR(ApproveOnlyOpenRequestsErr);

      IF ApprovalEntry."Approver ID" <> USERID THEN
        CheckUserAsApprovalAdministrator;

      ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
      ApprovalEntry.MODIFY(TRUE);
      OnApproveApprovalRequest(ApprovalEntry);
    END;

    LOCAL PROCEDURE RejectSelectedApprovalRequest@2(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN
        ERROR(RejectOnlyOpenRequestsErr);

      IF ApprovalEntry."Approver ID" <> USERID THEN
        CheckUserAsApprovalAdministrator;

      OnRejectApprovalRequest(ApprovalEntry);
      ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Rejected);
      ApprovalEntry.MODIFY(TRUE);
    END;

    PROCEDURE DelegateSelectedApprovalRequest@1(VAR ApprovalEntry@1000 : Record 454;CheckCurrentUser@1001 : Boolean);
    BEGIN
      IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN
        ERROR(DelegateOnlyOpenRequestsErr);

      IF CheckCurrentUser THEN
        IF NOT (USERID IN [ApprovalEntry."Sender ID",ApprovalEntry."Approver ID"]) THEN
          CheckUserAsApprovalAdministrator;
      SubstituteUserIdForApprovalEntry(ApprovalEntry)
    END;

    LOCAL PROCEDURE SubstituteUserIdForApprovalEntry@86(ApprovalEntry@1000 : Record 454);
    VAR
      UserSetup@1001 : Record 91;
      ApprovalAdminUserSetup@1002 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(ApprovalEntry."Approver ID") THEN
        ERROR(ApproverUserIdNotInSetupErr,ApprovalEntry."Sender ID");

      IF UserSetup.Substitute = '' THEN
        IF UserSetup."Approver ID" = '' THEN BEGIN
          ApprovalAdminUserSetup.SETRANGE("Approval Administrator",TRUE);
          IF ApprovalAdminUserSetup.FINDFIRST THEN
            UserSetup.GET(ApprovalAdminUserSetup."User ID")
          ELSE
            ERROR(SubstituteNotFoundErr,UserSetup."User ID");
        END ELSE
          UserSetup.GET(UserSetup."Approver ID")
      ELSE
        UserSetup.GET(UserSetup.Substitute);

      ApprovalEntry."Approver ID" := UserSetup."User ID";
      ApprovalEntry.MODIFY(TRUE);
      OnDelegateApprovalRequest(ApprovalEntry);
    END;

    PROCEDURE FindOpenApprovalEntryForCurrUser@43(VAR ApprovalEntry@1002 : Record 454;RecordID@1000 : RecordID) : Boolean;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Approver ID",USERID);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);

      EXIT(ApprovalEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE ShowPROJApprovalStatus@126(Project@1000 : Record 50005);
    BEGIN
      //#1
      Project.FIND;

      CASE Project.Status OF
            Project.Status::Released:
               MESSAGE(DocStatusChangedMsg,Project."No.",Project.Status);
            Project.Status::"Pending Approval":
               MESSAGE(PendingApprovalMsg);
        END;
    END;

    LOCAL PROCEDURE ShowRFTSApprovalStatus@4(RFTS@1000 : Record 50010);
    BEGIN
      //#1
      RFTS.FIND;

      CASE RFTS.Status OF
           RFTS.Status::Released:
              MESSAGE(DocStatusChangedMsg,RFTS."No.",RFTS.Status);
           RFTS.Status::"Pending Approval":
               MESSAGE(PendingApprovalMsg);
        END;
    END;

    LOCAL PROCEDURE ShowJOApprovalStatus@30(JobOrder@1000 : Record 50012);
    BEGIN
      //#1
      JobOrder.FIND;

      CASE JobOrder.Status OF
           JobOrder.Status::Released:
              MESSAGE(DocStatusChangedMsg,JobOrder."No.",JobOrder.Status);
           JobOrder.Status::"Pending Approval":
              MESSAGE(PendingApprovalMsg);
          END;
    END;

    LOCAL PROCEDURE ShowRFQApprovalStatus@97(RFQ@1000 : Record 50013);
    BEGIN
      //#1
      RFQ.FIND;

      CASE RFQ.Status OF
           RFQ.Status::Released:
              MESSAGE(DocStatusChangedMsg,RFQ."No.",RFQ.Status);
           RFQ.Status::"Pending Approval":
              MESSAGE(PendingApprovalMsg);
        END;
    END;

    LOCAL PROCEDURE ShowCAApprovalStatus@106(CashAdvance@1000 : Record 50017);
    BEGIN
      //#1
      CashAdvance.FIND;

      CASE CashAdvance.Status OF
           CashAdvance.Status::Released:
              MESSAGE(DocStatusChangedMsg,CashAdvance."No.",CashAdvance.Status);
           CashAdvance.Status::"Pending Approval":
              MESSAGE(PendingApprovalMsg);
        END;
    END;

    LOCAL PROCEDURE ShowTERFApprovalStatus@134(TERF@1000 : Record 50034);
    BEGIN
      //#1
      TERF.FIND;

      CASE TERF.Status OF
           TERF.Status::Released:
              MESSAGE(DocStatusChangedMsg,TERF."No.",TERF.Status);
           TERF.Status::"Pending Approval":
               MESSAGE(PendingApprovalMsg);
        END;
    END;

    LOCAL PROCEDURE ShowNTPApprovalStatus@139(NTP@1000 : Record 50040);
    BEGIN
      //#1
      NTP.FIND;

      CASE NTP."Approval Status" OF
           NTP."Approval Status"::Released:
              MESSAGE(DocStatusChangedMsg,NTP."No.",NTP."Approval Status");
           NTP."Approval Status"::"Pending Approval":
               MESSAGE(PendingApprovalMsg);
        END;
    END;

    LOCAL PROCEDURE ShowRFPurApprovalStatus@149(RFPur@1000 : Record 50030);
    BEGIN
      //#1
      RFPur.FIND;

      CASE RFPur.Status OF
           RFPur.Status::Released:
              MESSAGE(DocStatusChangedMsg,RFPur."No.",RFPur.Status);
           RFPur.Status::"Pending Approval":
               MESSAGE(PendingApprovalMsg);
        END;
    END;

    LOCAL PROCEDURE ShowPurchApprovalStatus@9(PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseHeader.FIND;

      CASE PurchaseHeader.Status OF
        PurchaseHeader.Status::Released:
          MESSAGE(DocStatusChangedMsg,PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader.Status);
        PurchaseHeader.Status::"Pending Approval":
          MESSAGE(PendingApprovalMsg);
        PurchaseHeader.Status::"Pending Prepayment":
          MESSAGE(DocStatusChangedMsg,PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader.Status);
      END;
    END;

    LOCAL PROCEDURE ShowSalesApprovalStatus@26(SalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader.FIND;

      CASE SalesHeader.Status OF
        SalesHeader.Status::Released:
          MESSAGE(DocStatusChangedMsg,SalesHeader."Document Type",SalesHeader."No.",SalesHeader.Status);
        SalesHeader.Status::"Pending Approval":
          MESSAGE(PendingApprovalMsg);
        SalesHeader.Status::"Pending Prepayment":
          MESSAGE(DocStatusChangedMsg,SalesHeader."Document Type",SalesHeader."No.",SalesHeader.Status);
      END;
    END;

    LOCAL PROCEDURE ShowApprovalStatus@107(RecId@1000 : RecordID;WorkflowInstanceId@1001 : GUID);
    BEGIN
      IF HasPendingApprovalEntries(RecId,WorkflowInstanceId) THEN
        MESSAGE(PendingApprovalMsg)
      ELSE
        MESSAGE(RecHasBeenApprovedMsg,FORMAT(RecId,0,1));
    END;

    PROCEDURE ApproveApprovalRequestsForRecord@186(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
          ApprovalEntry.MODIFY(TRUE);
          CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    PROCEDURE CancelApprovalRequestsForRecord@8(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntry@1002 : Record 454;
      OldStatus@1003 : Option;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          OldStatus := ApprovalEntry.Status;
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Canceled);
          ApprovalEntry.MODIFY(TRUE);
          IF OldStatus IN [ApprovalEntry.Status::Open,ApprovalEntry.Status::Approved] THEN
            CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    PROCEDURE RejectApprovalRequestsForRecord@7(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntry@1002 : Record 454;
      OldStatus@1003 : Option;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      IF ApprovalEntry.FINDSET(TRUE) THEN BEGIN
        REPEAT
          OldStatus := ApprovalEntry.Status;
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Rejected);
          ApprovalEntry.MODIFY(TRUE);
          IF OldStatus IN [ApprovalEntry.Status::Open,ApprovalEntry.Status::Approved] THEN
            CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        UNTIL ApprovalEntry.NEXT = 0;
        IF ApprovalEntry."Approver ID" <> ApprovalEntry."Sender ID" THEN BEGIN
          ApprovalEntry."Approver ID" := ApprovalEntry."Sender ID";
          CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        END;
      END;
    END;

    PROCEDURE SendApprovalRequestFromRecord@33(RecRef@1004 : RecordRef;WorkflowStepInstance@1002 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalEntry2@1000 : Record 454;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Record ID to Approve",Status,"Workflow Step Instance ID","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Created);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);

      IF ApprovalEntry.FINDFIRST THEN BEGIN
        ApprovalEntry2.COPYFILTERS(ApprovalEntry);
        ApprovalEntry2.SETRANGE("Sequence No.",ApprovalEntry."Sequence No.");
        IF ApprovalEntry2.FINDSET(TRUE) THEN
          REPEAT
            ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Open);
            ApprovalEntry2.MODIFY(TRUE);
            CreateApprovalEntryNotification(ApprovalEntry2,WorkflowStepInstance);
          UNTIL ApprovalEntry2.NEXT = 0;
        EXIT;
      END;

      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
      IF ApprovalEntry.FINDLAST THEN
        OnApproveApprovalRequest(ApprovalEntry)
      ELSE
        ERROR(NoApprovalRequestsFoundErr);
    END;

    PROCEDURE SendApprovalRequestFromApprovalEntry@41(ApprovalEntry@1000 : Record 454;WorkflowStepInstance@1002 : Record 1504);
    VAR
      ApprovalEntry2@1001 : Record 454;
      ApprovalEntry3@1003 : Record 454;
    BEGIN
      IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
        CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        EXIT;
      END;

      ApprovalEntry2.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry2.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry.Status::Created);

      IF ApprovalEntry2.FINDFIRST THEN BEGIN
        ApprovalEntry3.COPYFILTERS(ApprovalEntry2);
        ApprovalEntry3.SETRANGE("Sequence No.",ApprovalEntry2."Sequence No.");
        IF ApprovalEntry3.FINDSET THEN
          REPEAT
            ApprovalEntry3.VALIDATE(Status,ApprovalEntry3.Status::Open);
            ApprovalEntry3.MODIFY(TRUE);
            CreateApprovalEntryNotification(ApprovalEntry3,WorkflowStepInstance);
          UNTIL ApprovalEntry3.NEXT = 0;
      END;
    END;

    PROCEDURE CreateApprovalRequests@6(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1003 : Record 1523;
      ApprovalEntryArgument@1002 : Record 454;
      CustomApprovalManagement@1004 : Codeunit 50582;
    BEGIN
      PopulateApprovalEntryArgument(RecRef,WorkflowStepInstance,ApprovalEntryArgument);

      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        CASE WorkflowStepArgument."Approver Type" OF
          WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser":
            CreateApprReqForApprTypeSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
          WorkflowStepArgument."Approver Type"::Approver:
            CreateApprReqForApprTypeApprover(WorkflowStepArgument,ApprovalEntryArgument);
          WorkflowStepArgument."Approver Type"::"Workflow User Group":
            CreateApprReqForApprTypeWorkflowUserGroup(WorkflowStepArgument,ApprovalEntryArgument);
          // PHP Start
          // Custom approval request per Approver Type
          ELSE
            CustomApprovalManagement.CustomCreateApprovalRequest(WorkflowStepArgument,ApprovalEntryArgument);
          // PHP End
        END;

      IF WorkflowStepArgument."Show Confirmation Message" THEN
        InformUserOnStatusChange(RecRef,WorkflowStepInstance.ID);
    END;

    PROCEDURE CreateAndAutomaticallyApproveRequest@44(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntryArgument@1002 : Record 454;
      WorkflowStepArgument@1003 : Record 1523;
    BEGIN
      PopulateApprovalEntryArgument(RecRef,WorkflowStepInstance,ApprovalEntryArgument);
      IF NOT WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        WorkflowStepArgument.INIT;

      CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);

      InformUserOnStatusChange(RecRef,WorkflowStepInstance.ID);
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeSalespersPurchaser@32(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1002 : Record 454);
    BEGIN
      CASE WorkflowStepArgument."Approver Limit Type" OF
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain":
          BEGIN
            CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument,FALSE);
            CreateApprovalRequestForChainOfApprovers(WorkflowStepArgument,ApprovalEntryArgument);
          END;
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument,FALSE);
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          BEGIN
            CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument,TRUE);
            CreateApprovalRequestForApproverWithSufficientLimit(WorkflowStepArgument,ApprovalEntryArgument);
          END;
      END;
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeApprover@31(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
      CASE WorkflowStepArgument."Approver Limit Type" OF
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain":
          BEGIN
            CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForChainOfApprovers(WorkflowStepArgument,ApprovalEntryArgument);
          END;
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          CreateApprovalRequestForApprover(WorkflowStepArgument,ApprovalEntryArgument);
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          BEGIN
            CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForApproverWithSufficientLimit(WorkflowStepArgument,ApprovalEntryArgument);
          END;
      END;
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeWorkflowUserGroup@49(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      UserSetup@1004 : Record 91;
      WorkflowUserGroupMember@1006 : Record 1541;
      ApproverId@1003 : Code[50];
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      WITH WorkflowUserGroupMember DO BEGIN
        SETCURRENTKEY("Workflow User Group Code","Sequence No.");
        SETRANGE("Workflow User Group Code",WorkflowStepArgument."Workflow User Group Code");

        IF NOT FINDSET THEN
          ERROR(NoWFUserGroupMembersErr);

        REPEAT
          ApproverId := "User Name";
          IF NOT UserSetup.GET(ApproverId) THEN
            ERROR(WFUserGroupNotInSetupErr,ApproverId);
          MakeApprovalEntry(ApprovalEntryArgument,SequenceNo + "Sequence No.",ApproverId,WorkflowStepArgument);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateApprovalRequestForChainOfApprovers@18(WorkflowStepArgument@1008 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
      CreateApprovalRequestForApproverChain(WorkflowStepArgument,ApprovalEntryArgument,FALSE);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApproverWithSufficientLimit@45(WorkflowStepArgument@1008 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
      CreateApprovalRequestForApproverChain(WorkflowStepArgument,ApprovalEntryArgument,TRUE);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApproverChain@46(WorkflowStepArgument@1008 : Record 1523;ApprovalEntryArgument@1000 : Record 454;SufficientApproverOnly@1003 : Boolean);
    VAR
      ApprovalEntry@1001 : Record 454;
      UserSetup@1007 : Record 91;
      ApproverId@1002 : Code[50];
      SequenceNo@1006 : Integer;
    BEGIN
      ApproverId := USERID;

      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      IF SequenceNo > 0 THEN
        WITH ApprovalEntry DO BEGIN
          SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
          SETRANGE("Table ID",ApprovalEntryArgument."Table ID");
          SETRANGE("Record ID to Approve",ApprovalEntryArgument."Record ID to Approve");
          SETRANGE("Workflow Step Instance ID",ApprovalEntryArgument."Workflow Step Instance ID");
          SETRANGE(Status,Status::Created);
          IF FINDLAST THEN
            ApproverId := "Approver ID";
        END
      ELSE BEGIN
        FindUserSetupBySalesPurchCode(UserSetup,ApprovalEntryArgument);
        ApproverId := UserSetup."User ID";
      END;

      IF NOT UserSetup.GET(ApproverId) THEN
        ERROR(ApproverUserIdNotInSetupErr,ApprovalEntry."Sender ID");

      IF NOT IsSufficientApprover(UserSetup,ApprovalEntryArgument) THEN
        REPEAT
          ApproverId := UserSetup."Approver ID";

          IF ApproverId = '' THEN
            ERROR(NoSuitableApproverFoundErr);

          IF NOT UserSetup.GET(ApproverId) THEN
            ERROR(ApproverUserIdNotInSetupErr,UserSetup."User ID");

          // Approval Entry should not be created only when IsSufficientApprover is false and SufficientApproverOnly is true
          IF IsSufficientApprover(UserSetup,ApprovalEntryArgument) OR (NOT SufficientApproverOnly) THEN BEGIN
            SequenceNo += 1;
            MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,ApproverId,WorkflowStepArgument);
          END;

        UNTIL IsSufficientApprover(UserSetup,ApprovalEntryArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApprover@19(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      UserSetup@1006 : Record 91;
      UsrId@1005 : Code[50];
      SequenceNo@1004 : Integer;
      UserSetupMgt@1002 : Codeunit 5700;
    BEGIN
      UsrId := USERID;

      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      IF NOT UserSetup.GET(USERID) THEN
        ERROR(UserIdNotInSetupErr,UsrId);
      // PHP Start
      IF UserSetupMgt.GetApproverWithUnliApprovalRequest <> '' THEN
        UsrId := UserSetupMgt.GetApproverWithUnliApprovalRequest
      ELSE
      // PHP End
        UsrId := UserSetup."Approver ID";

      IF NOT UserSetup.GET(UsrId) THEN BEGIN
        IF NOT UserSetup."Approval Administrator" THEN
          ERROR(ApproverUserIdNotInSetupErr,UserSetup."User ID");
        UsrId := USERID;
      END;

      SequenceNo += 1;
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UsrId,WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForSalespersPurchaser@21(WorkflowStepArgument@1006 : Record 1523;ApprovalEntryArgument@1000 : Record 454;SufficientApproverOnly@1003 : Boolean);
    VAR
      UserSetup@1001 : Record 91;
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      FindUserSetupBySalesPurchCode(UserSetup,ApprovalEntryArgument);

      IF IsSufficientApprover(UserSetup,ApprovalEntryArgument) OR (NOT SufficientApproverOnly) THEN BEGIN
        SequenceNo += 1;
        MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UserSetup."User ID",WorkflowStepArgument);
      END;
    END;

    LOCAL PROCEDURE CreateApprovalRequestForUser@22(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      SequenceNo@1002 : Integer;
      UserSetupMgt@1003 : Codeunit 5700;
    BEGIN
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      SequenceNo += 1;
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,USERID,WorkflowStepArgument);
    END;

    LOCAL PROCEDURE MakeApprovalEntry@23(ApprovalEntryArgument@1007 : Record 454;SequenceNo@1001 : Integer;ApproverId@1003 : Code[50];WorkflowStepArgument@1005 : Record 1523);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        "Table ID" := ApprovalEntryArgument."Table ID";
        "Document Type" := ApprovalEntryArgument."Document Type";
        "Document No." := ApprovalEntryArgument."Document No.";
        "Salespers./Purch. Code" := ApprovalEntryArgument."Salespers./Purch. Code";
        "Sequence No." := SequenceNo;
        "Sender ID" := USERID;
        Amount := ApprovalEntryArgument.Amount;
        "Amount (LCY)" := ApprovalEntryArgument."Amount (LCY)";
        "Currency Code" := ApprovalEntryArgument."Currency Code";
        "Approver ID" := ApproverId;
        // PHP Start - insert Request Type in Approval Entry table
        "Purchases Request Type" := ApprovalEntryArgument."Purchases Request Type";
        "Sales Request type" := ApprovalEntryArgument."Sales Request type";
        // PHP End
        "Workflow Step Instance ID" := ApprovalEntryArgument."Workflow Step Instance ID";
        IF ApproverId = USERID THEN
          Status := Status::Approved
        ELSE
          Status := Status::Created;
        "Date-Time Sent for Approval" := CREATEDATETIME(TODAY,TIME);
        "Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
        "Last Modified By User ID" := USERID;
        "Due Date" := CALCDATE(WorkflowStepArgument."Due Date Formula",TODAY);

        CASE WorkflowStepArgument."Delegate After" OF
          WorkflowStepArgument."Delegate After"::Never:
            EVALUATE("Delegation Date Formula",'');
          WorkflowStepArgument."Delegate After"::"1 day":
            EVALUATE("Delegation Date Formula",'<1D>');
          WorkflowStepArgument."Delegate After"::"2 days":
            EVALUATE("Delegation Date Formula",'<2D>');
          WorkflowStepArgument."Delegate After"::"5 days":
            EVALUATE("Delegation Date Formula",'<5D>');
          ELSE
            EVALUATE("Delegation Date Formula",'');
        END;
        "Available Credit Limit (LCY)" := ApprovalEntryArgument."Available Credit Limit (LCY)";
        SetApproverType(WorkflowStepArgument,ApprovalEntry);
        SetLimitType(WorkflowStepArgument,ApprovalEntry);
        "Record ID to Approve" := ApprovalEntryArgument."Record ID to Approve";
        "Approval Code" := ApprovalEntryArgument."Approval Code";
        INSERT(TRUE);
      END;
    END;

    PROCEDURE CalcPurchaseDocAmount@24(PurchaseHeader@1002 : Record 38;VAR ApprovalAmount@1001 : Decimal;VAR ApprovalAmountLCY@1000 : Decimal);
    VAR
      TempPurchaseLine@1009 : TEMPORARY Record 39;
      TotalPurchaseLine@1008 : Record 39;
      TotalPurchaseLineLCY@1007 : Record 39;
      PurchPost@1006 : Codeunit 90;
      TempAmount@1005 : Decimal;
      VAtText@1004 : Text[30];
    BEGIN
      PurchaseHeader.CalcInvDiscForHeader;
      PurchPost.GetPurchLines(PurchaseHeader,TempPurchaseLine,0);
      CLEAR(PurchPost);
      PurchPost.SumPurchLinesTemp(
        PurchaseHeader,TempPurchaseLine,0,TotalPurchaseLine,TotalPurchaseLineLCY,
        TempAmount,VAtText);
      ApprovalAmount := TotalPurchaseLine.Amount;
      ApprovalAmountLCY := TotalPurchaseLineLCY.Amount;
    END;

    PROCEDURE CalcSalesDocAmount@82(SalesHeader@1000 : Record 36;VAR ApprovalAmount@1001 : Decimal;VAR ApprovalAmountLCY@1002 : Decimal);
    VAR
      TempSalesLine@1009 : TEMPORARY Record 37;
      TotalSalesLine@1008 : Record 37;
      TotalSalesLineLCY@1007 : Record 37;
      SalesPost@1006 : Codeunit 80;
      TempAmount@1005 : ARRAY [5] OF Decimal;
      VAtText@1004 : Text[30];
    BEGIN
      SalesHeader.CalcInvDiscForHeader;
      SalesPost.GetSalesLines(SalesHeader,TempSalesLine,0);
      CLEAR(SalesPost);
      SalesPost.SumSalesLinesTemp(
        SalesHeader,TempSalesLine,0,TotalSalesLine,TotalSalesLineLCY,
        TempAmount[1],VAtText,TempAmount[2],TempAmount[3],TempAmount[4]);
      ApprovalAmount := TotalSalesLine.Amount;
      ApprovalAmountLCY := TotalSalesLineLCY.Amount;
    END;

    LOCAL PROCEDURE PopulateApprovalEntryArgument@80(RecRef@1000 : RecordRef;WorkflowStepInstance@1009 : Record 1504;VAR ApprovalEntryArgument@1001 : Record 454);
    VAR
      Customer@1006 : Record 18;
      GenJournalBatch@1008 : Record 232;
      GenJournalLine@1007 : Record 81;
      PurchaseHeader@1003 : Record 38;
      SalesHeader@1004 : Record 36;
      IncomingDocument@1010 : Record 130;
      ApprovalAmount@1002 : Decimal;
      ApprovalAmountLCY@1005 : Decimal;
      CustomApprovalManagement@1020 : Codeunit 50582;
    BEGIN
      ApprovalEntryArgument.INIT;
      ApprovalEntryArgument."Table ID" := RecRef.NUMBER;
      ApprovalEntryArgument."Record ID to Approve" := RecRef.RECORDID;
      ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::" ";
      ApprovalEntryArgument."Approval Code" := WorkflowStepInstance."Workflow Code";
      ApprovalEntryArgument."Workflow Step Instance ID" := WorkflowStepInstance.ID;

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            CalcPurchaseDocAmount(PurchaseHeader,ApprovalAmount,ApprovalAmountLCY);
            ApprovalEntryArgument."Document Type" := PurchaseHeader."Document Type";
            ApprovalEntryArgument."Document No." := PurchaseHeader."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := PurchaseHeader."Purchaser Code";
            ApprovalEntryArgument.Amount := ApprovalAmount;
            ApprovalEntryArgument."Amount (LCY)" := ApprovalAmountLCY;
            ApprovalEntryArgument."Currency Code" := PurchaseHeader."Currency Code";
            // PHP Start
            ApprovalEntryArgument."Purchases Request Type" := PurchaseHeader."Request Type";
            // PHP End
          END;
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            CalcSalesDocAmount(SalesHeader,ApprovalAmount,ApprovalAmountLCY);
            ApprovalEntryArgument."Document Type" := SalesHeader."Document Type";
            ApprovalEntryArgument."Document No." := SalesHeader."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := SalesHeader."Salesperson Code";
            ApprovalEntryArgument.Amount := ApprovalAmount;
            ApprovalEntryArgument."Amount (LCY)" := ApprovalAmountLCY;
            ApprovalEntryArgument."Currency Code" := SalesHeader."Currency Code";
            ApprovalEntryArgument."Available Credit Limit (LCY)" := GetAvailableCreditLimit(SalesHeader);
            // PHP Start
            ApprovalEntryArgument."Sales Request type" := SalesHeader."Request type";
            // PHP End
          END;
        DATABASE::Customer:
          BEGIN
            RecRef.SETTABLE(Customer);
            ApprovalEntryArgument."Salespers./Purch. Code" := Customer."Salesperson Code";
            ApprovalEntryArgument."Currency Code" := Customer."Currency Code";
            ApprovalEntryArgument."Available Credit Limit (LCY)" := Customer.CalcAvailableCredit;
          END;
        DATABASE::"Gen. Journal Batch":
          RecRef.SETTABLE(GenJournalBatch);
        DATABASE::"Gen. Journal Line":
          BEGIN
            RecRef.SETTABLE(GenJournalLine);
            ApprovalEntryArgument."Document Type" := GenJournalLine."Document Type";
            ApprovalEntryArgument."Document No." := GenJournalLine."Document No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := GenJournalLine."Salespers./Purch. Code";
            ApprovalEntryArgument.Amount := GenJournalLine.Amount;
            ApprovalEntryArgument."Amount (LCY)" := GenJournalLine."Amount (LCY)";
            ApprovalEntryArgument."Currency Code" := GenJournalLine."Currency Code";
          END;
        DATABASE::"Incoming Document":
          BEGIN
            RecRef.SETTABLE(IncomingDocument);
            ApprovalEntryArgument."Document No." := FORMAT(IncomingDocument."Entry No.");
          END;
         // PHP Start
        ELSE
          CustomApprovalManagement.CustomPopulateApprovalEntryArgument(RecRef, ApprovalEntryArgument);
         // PHP End
      END;
    END;

    PROCEDURE CreateApprovalEntryNotification@50(ApprovalEntry@1000 : Record 454;WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1002 : Record 1523;
      NotificationEntry@1003 : Record 1511;
      CustomApprovalMgmt@1004 : Codeunit 50582;
    BEGIN
      // Approval Notification
      IF NOT WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        EXIT;

      IF WorkflowStepArgument."Notification User ID" = '' THEN
        WorkflowStepArgument.VALIDATE("Notification User ID",ApprovalEntry."Approver ID");

       IF CustomApprovalMgmt.CreateApprovalEntryNotification(ApprovalEntry, WorkflowStepInstance) THEN EXIT; // PHP start of code integration

        ApprovalEntry.RESET;
        NotificationEntry.CreateNew(NotificationEntry.Type::Approval,WorkflowStepArgument."Notification User ID",
         ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link");
    END;

    LOCAL PROCEDURE SetApproverType@71(WorkflowStepArgument@1001 : Record 1523;VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      CASE WorkflowStepArgument."Approver Type" OF
        WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser":
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::"Sales Pers./Purchaser";
        WorkflowStepArgument."Approver Type"::Approver:
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::Approver;
        WorkflowStepArgument."Approver Type"::"Workflow User Group":
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::"Workflow User Group";
      END;
    END;

    LOCAL PROCEDURE SetLimitType@81(WorkflowStepArgument@1000 : Record 1523;VAR ApprovalEntry@1001 : Record 454);
    BEGIN
      CASE WorkflowStepArgument."Approver Limit Type" OF
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain",
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"Approval Limits";
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"No Limits";
      END;

      IF ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Workflow User Group" THEN
        ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"No Limits";
    END;

    LOCAL PROCEDURE IsSufficientPurchApprover@12(UserSetup@1000 : Record 91;DocumentType@1003 : Option;ApprovalAmountLCY@1002 : Decimal) : Boolean;
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      IF UserSetup."User ID" = UserSetup."Approver ID" THEN
        EXIT(TRUE);

      CASE DocumentType OF
        PurchaseHeader."Document Type"::Quote:
          IF UserSetup."Unlimited Request Approval" OR
             ((ApprovalAmountLCY <= UserSetup."Request Amount Approval Limit") AND (UserSetup."Request Amount Approval Limit" <> 0))
          THEN
            EXIT(TRUE);
        ELSE
          IF UserSetup."Unlimited Purchase Approval" OR
             ((ApprovalAmountLCY <= UserSetup."Purchase Amount Approval Limit") AND (UserSetup."Purchase Amount Approval Limit" <> 0))
          THEN
            EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsSufficientSalesApprover@13(UserSetup@1000 : Record 91;ApprovalAmountLCY@1002 : Decimal) : Boolean;
    BEGIN
      IF UserSetup."User ID" = UserSetup."Approver ID" THEN
        EXIT(TRUE);

      IF UserSetup."Unlimited Sales Approval" OR
         ((ApprovalAmountLCY <= UserSetup."Sales Amount Approval Limit") AND (UserSetup."Sales Amount Approval Limit" <> 0))
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsSufficientGenJournalLineApprover@89(UserSetup@1000 : Record 91;ApprovalEntryArgument@1001 : Record 454) : Boolean;
    VAR
      GenJournalLine@1003 : Record 81;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GET(ApprovalEntryArgument."Record ID to Approve");
      RecRef.SETTABLE(GenJournalLine);

      IF GenJournalLine.IsForPurchase THEN
        EXIT(IsSufficientPurchApprover(UserSetup,ApprovalEntryArgument."Document Type",ApprovalEntryArgument."Amount (LCY)"));

      IF GenJournalLine.IsForSales THEN
        EXIT(IsSufficientSalesApprover(UserSetup,ApprovalEntryArgument."Amount (LCY)"));

      EXIT(TRUE);
    END;

    PROCEDURE IsSufficientApprover@20(UserSetup@1001 : Record 91;ApprovalEntryArgument@1003 : Record 454) : Boolean;
    BEGIN
      CASE ApprovalEntryArgument."Table ID" OF
        DATABASE::"Purchase Header":
          EXIT(IsSufficientPurchApprover(UserSetup,ApprovalEntryArgument."Document Type",ApprovalEntryArgument."Amount (LCY)"));
        DATABASE::"Sales Header":
          EXIT(IsSufficientSalesApprover(UserSetup,ApprovalEntryArgument."Amount (LCY)"));
        DATABASE::"Gen. Journal Batch":
          MESSAGE(ApporvalChainIsUnsupportedMsg,FORMAT(ApprovalEntryArgument."Record ID to Approve"));
        DATABASE::"Gen. Journal Line":
          EXIT(IsSufficientGenJournalLineApprover(UserSetup,ApprovalEntryArgument));
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetAvailableCreditLimit@25(SalesHeader@1000 : Record 36) : Decimal;
    BEGIN
      EXIT(SalesHeader.CheckAvailableCreditLimit);
    END;

    PROCEDURE PrePostApprovalRFP@113(VAR RequestforPurchase@1000 : Record 50030) : Boolean;
    BEGIN
      IF (RequestforPurchase.Status = RequestforPurchase.Status::Open) AND IsRFPHeaderApprovalsWorkflowEnabled(RequestforPurchase) THEN
        ERROR(PrePostTHCheckErr,RequestforPurchase."No.");

      EXIT(TRUE);
    END;

    PROCEDURE PrePostApprovalCheckSales@38(VAR SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      IF (SalesHeader.Status = SalesHeader.Status::Open) AND IsSalesApprovalsWorkflowEnabled(SalesHeader) THEN
        ERROR(PrePostCheckErr,SalesHeader."Document Type",SalesHeader."No.");

      EXIT(TRUE);
    END;

    PROCEDURE PrePostApprovalCheckPurch@39(VAR PurchaseHeader@1001 : Record 38) : Boolean;
    BEGIN
      IF (PurchaseHeader.Status = PurchaseHeader.Status::Open) AND IsPurchaseApprovalsWorkflowEnabled(PurchaseHeader) THEN
        ERROR(PrePostCheckErr,PurchaseHeader."Document Type",PurchaseHeader."No.");

      EXIT(TRUE);
    END;

    PROCEDURE IsProjApprovalsWorkflowEnabled@119(VAR Project@1002 : Record 50005) : Boolean;
    BEGIN
      //#1
      EXIT(WorkflowManagement.CanExecuteWorkflow(Project,WorkflowEventHandling.RunWorkflowOnSendPROJDocForApprovalCode));
    END;

    PROCEDURE IsRFTSApprovalsWorkflowEnabled@121(VAR RFTS@1002 : Record 50010) : Boolean;
    BEGIN
      //#1
      EXIT(WorkflowManagement.CanExecuteWorkflow(RFTS,WorkflowEventHandling.RunWorkflowOnSendRFTSDocForApprovalCode));
    END;

    PROCEDURE IsTERFApprovalsWorkflowEnabled@136(VAR TERF@1002 : Record 50034) : Boolean;
    BEGIN
      //#1
      EXIT(WorkflowManagement.CanExecuteWorkflow(TERF,WorkflowEventHandling.RunWorkflowOnSendTERFDocForApprovalCode));
    END;

    PROCEDURE IsNTPApprovalsWorkflowEnabled@140(VAR NTP@1002 : Record 50040) : Boolean;
    BEGIN
      //#1
      EXIT(WorkflowManagement.CanExecuteWorkflow(NTP,WorkflowEventHandling.RunWorkflowOnSendNTPDocForApprovalCode));
    END;

    PROCEDURE IsJOApprovalsWorkflowEnabled@123(VAR JobOrder@1002 : Record 50012) : Boolean;
    BEGIN
      //#1
      EXIT(WorkflowManagement.CanExecuteWorkflow(JobOrder,WorkflowEventHandling.RunWorkflowOnSendJODocForApprovalCode));
    END;

    PROCEDURE IsRFQApprovalsWorkflowEnabled@125(VAR RFQ@1002 : Record 50013) : Boolean;
    BEGIN
      //#1
      EXIT(WorkflowManagement.CanExecuteWorkflow(RFQ,WorkflowEventHandling.RunWorkflowOnSendRFQDocForApprovalCode));
    END;

    PROCEDURE IsCAApprovalsWorkflowEnabled@127(VAR CashAdvance@1002 : Record 50017) : Boolean;
    BEGIN
      //#1
      EXIT(WorkflowManagement.CanExecuteWorkflow(CashAdvance,WorkflowEventHandling.RunWorkflowOnSendCADocForApprovalCode));
    END;

    PROCEDURE IsRFPurApprovalsWorkflowEnabled@148(VAR RFPur@1002 : Record 50030) : Boolean;
    BEGIN
      //#1
      EXIT(WorkflowManagement.CanExecuteWorkflow(RFPur,WorkflowEventHandling.RunWorkflowOnSendRFPurDocForApprovalCode));
    END;

    PROCEDURE IsIncomingDocApprovalsWorkflowEnabled@102(VAR IncomingDocument@1002 : Record 130) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(IncomingDocument,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode));
    END;

    PROCEDURE IsPurchaseApprovalsWorkflowEnabled@59(VAR PurchaseHeader@1002 : Record 38) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(PurchaseHeader,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode));
    END;

    PROCEDURE IsSalesApprovalsWorkflowEnabled@17(VAR SalesHeader@1002 : Record 36) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(SalesHeader,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode));
    END;

    PROCEDURE IsRFPHeaderApprovalsWorkflowEnabled@115(VAR RequestforPurchase@1000 : Record 50030) : Boolean;
    VAR
      RFPEvents@1001 : Codeunit 50031;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(RequestforPurchase,RFPEvents.RunWorkflowOnSendRFPApprovalCode)); // GNRS
    END;

    PROCEDURE IsOverdueNotificationsWorkflowEnabled@42() : Boolean;
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      ApprovalEntry.INIT;
      EXIT(WorkflowManagement.WorkflowExists(ApprovalEntry,ApprovalEntry,
          WorkflowEventHandling.RunWorkflowOnSendOverdueNotificationsCode));
    END;

    PROCEDURE IsOverdueRFENotificationWorkflowEnabled@152() : Boolean;
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
       SalesHeader.INIT;
       EXIT(WorkflowManagement.WorkflowExists(SalesHeader,SalesHeader,
          WorkflowEventHandling.RunWorkflowOnSendOverdueRFENotificationCode));
      // EXIT(WorkflowManagement.CanExecuteWorkflow(SalesHeader,WorkflowEventHandling.RunWorkflowOnSendOverdueRFENotificationCode));
    END;

    PROCEDURE IsGeneralJournalBatchApprovalsWorkflowEnabled@70(VAR GenJournalBatch@1002 : Record 232) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(GenJournalBatch,
          WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode));
    END;

    PROCEDURE IsGeneralJournalLineApprovalsWorkflowEnabled@72(VAR GenJournalLine@1002 : Record 81) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
          WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode));
    END;

    PROCEDURE CheckPurchaseApprovalsWorkflowEnabled@77(VAR PurchaseHeader@1002 : Record 38) : Boolean;
    BEGIN
      IF NOT IsPurchaseApprovalsWorkflowEnabled(PurchaseHeader) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckIncomingDocApprovalsWorkflowEnabled@192(VAR IncomingDocument@1002 : Record 130) : Boolean;
    BEGIN
      IF NOT IsIncomingDocApprovalsWorkflowEnabled(IncomingDocument) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckSalesApprovalsWorkflowEnabled@155(VAR SalesHeader@1002 : Record 36) : Boolean;
    BEGIN
      IF NOT IsSalesApprovalsWorkflowEnabled(SalesHeader) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckRFPApprovalsWorkflowEnabled@117(VAR RequestforPurchase@1002 : Record 50030) : Boolean;
    BEGIN
      IF NOT IsRFPHeaderApprovalsWorkflowEnabled(RequestforPurchase) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckCustomerApprovalsWorkflowEnabled@11(VAR Customer@1002 : Record 18) : Boolean;
    BEGIN
      IF NOT WorkflowManagement.CanExecuteWorkflow(Customer,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckVendorApprovalsWorkflowEnabled@83(VAR Vendor@1002 : Record 23) : Boolean;
    BEGIN
      IF NOT WorkflowManagement.CanExecuteWorkflow(Vendor,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckItemApprovalsWorkflowEnabled@84(VAR Item@1002 : Record 27) : Boolean;
    BEGIN
      IF NOT WorkflowManagement.CanExecuteWorkflow(Item,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckPROJApprovalsWorkflowEnabled@103(VAR Project@1002 : Record 50005) : Boolean;
    BEGIN
      //#1
      IF NOT IsProjApprovalsWorkflowEnabled( Project ) THEN
         ERROR(NoWorkflowEnabledErr );

      EXIT(TRUE);
    END;

    PROCEDURE CheckRFTSApprovalsWorkflowEnabled@130(VAR RFTSDocument@1002 : Record 50010) : Boolean;
    BEGIN
      //#1

      IF NOT IsRFTSApprovalsWorkflowEnabled(RFTSDocument) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckJOApprovalsWorkflowEnabled@131(VAR JobOrder@1002 : Record 50012) : Boolean;
    BEGIN
      //#1

      IF NOT IsJOApprovalsWorkflowEnabled( JobOrder ) THEN
         ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckRFQApprovalsWorkflowEnabled@132(VAR RFQDocument@1002 : Record 50013) : Boolean;
    BEGIN
      //#1

      IF NOT IsRFQApprovalsWorkflowEnabled( RFQDocument ) THEN
         ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckCApprovalsWorkflowEnabled@133(VAR CashAdvance@1002 : Record 50017) : Boolean;
    BEGIN
      //#1

      IF NOT IsCAApprovalsWorkflowEnabled(CashAdvance) THEN
         ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckTERFApprovalsWorkflowEnabled@135(VAR TERFHeader@1002 : Record 50034) : Boolean;
    BEGIN
      //#1

      IF NOT IsTERFApprovalsWorkflowEnabled(TERFHeader) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckNTPApprovalsWorkflowEnabled@141(VAR NoticeToProceed@1002 : Record 50040) : Boolean;
    BEGIN
      //#1

      IF NOT IsNTPApprovalsWorkflowEnabled(NoticeToProceed) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckRFPurApprovalsWorkflowEnabled@147(VAR RFPur@1002 : Record 50030) : Boolean;
    BEGIN
      //#1

      IF NOT IsRFPurApprovalsWorkflowEnabled(RFPur) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckGeneralJournalBatchApprovalsWorkflowEnabled@74(VAR GenJournalBatch@1002 : Record 232) : Boolean;
    BEGIN
      IF NOT
         WorkflowManagement.CanExecuteWorkflow(GenJournalBatch,
           WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode)
      THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckGeneralJournalLineApprovalsWorkflowEnabled@73(VAR GenJournalLine@1002 : Record 81) : Boolean;
    BEGIN
      IF NOT
         WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
           WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode)
      THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    [EventSubscriber(Table,81,OnMoveGenJournalLine)]
    PROCEDURE PostApprovalEntriesMoveGenJournalLine@91(VAR Sender@1000 : Record 81;ToRecordID@1002 : RecordID);
    BEGIN
      PostApprovalEntries(Sender.RECORDID,ToRecordID,Sender."Document No.");
    END;

    [EventSubscriber(Table,81,OnAfterDeleteEvent)]
    PROCEDURE DeleteApprovalEntriesAfterDeleteGenJournalLine@94(VAR Rec@1000 : Record 81;RunTrigger@1001 : Boolean);
    BEGIN
      DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,232,OnMoveGenJournalBatch)]
    PROCEDURE PostApprovalEntriesMoveGenJournalBatch@36(VAR Sender@1000 : Record 232;ToRecordID@1001 : RecordID);
    VAR
      RecordRestrictionMgt@1002 : Codeunit 1550;
    BEGIN
      PostApprovalEntries(Sender.RECORDID,ToRecordID,'');
      RecordRestrictionMgt.AllowRecordUsage(Sender.RECORDID);
      DeleteApprovalEntries(Sender.RECORDID);
    END;

    [EventSubscriber(Table,232,OnAfterDeleteEvent)]
    PROCEDURE DeleteApprovalEntriesAfterDeleteGenJournalBatch@98(VAR Rec@1000 : Record 232;RunTrigger@1001 : Boolean);
    BEGIN
      DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,18,OnAfterDeleteEvent)]
    PROCEDURE DeleteApprovalEntriesAfterDeleteCustomer@99(VAR Rec@1000 : Record 18;RunTrigger@1001 : Boolean);
    BEGIN
      DeleteApprovalEntries(Rec.RECORDID);
    END;

    PROCEDURE PostApprovalEntries@105(ApprovedRecordID@1003 : RecordID;PostedRecordID@1001 : RecordID;PostedDocNo@1002 : Code[20]);
    VAR
      ApprovalEntry@1000 : Record 454;
      PostedApprovalEntry@1004 : Record 456;
    BEGIN
      ApprovalEntry.SETAUTOCALCFIELDS("Pending Approvals","Number of Approved Requests","Number of Rejected Requests");
      ApprovalEntry.SETRANGE("Table ID",ApprovedRecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",ApprovedRecordID);
      IF NOT ApprovalEntry.FINDSET THEN
        EXIT;

      REPEAT
        PostedApprovalEntry.INIT;
        PostedApprovalEntry.TRANSFERFIELDS(ApprovalEntry);
        PostedApprovalEntry."Number of Approved Requests" := ApprovalEntry."Number of Approved Requests";
        PostedApprovalEntry."Number of Rejected Requests" := ApprovalEntry."Number of Rejected Requests";
        PostedApprovalEntry."Table ID" := PostedRecordID.TABLENO;
        PostedApprovalEntry."Document No." := PostedDocNo;
        PostedApprovalEntry."Posted Record ID" := PostedRecordID;
        PostedApprovalEntry."Entry No." := 0;
        PostedApprovalEntry.INSERT(TRUE);
      UNTIL ApprovalEntry.NEXT = 0;

      PostApprovalCommentLines(ApprovedRecordID,PostedRecordID,PostedDocNo);
    END;

    LOCAL PROCEDURE PostApprovalCommentLines@90(ApprovedRecordID@1000 : RecordID;PostedRecordID@1003 : RecordID;PostedDocNo@1004 : Code[20]);
    VAR
      ApprovalCommentLine@1001 : Record 455;
      PostedApprovalCommentLine@1002 : Record 457;
    BEGIN
      ApprovalCommentLine.SETRANGE("Table ID",ApprovedRecordID.TABLENO);
      ApprovalCommentLine.SETRANGE("Record ID to Approve",ApprovedRecordID);
      IF ApprovalCommentLine.FINDSET THEN
        REPEAT
          PostedApprovalCommentLine.INIT;
          PostedApprovalCommentLine.TRANSFERFIELDS(ApprovalCommentLine);
          PostedApprovalCommentLine."Entry No." := 0;
          PostedApprovalCommentLine."Table ID" := PostedRecordID.TABLENO;
          PostedApprovalCommentLine."Document No." := PostedDocNo;
          PostedApprovalCommentLine."Posted Record ID" := PostedRecordID;
          PostedApprovalCommentLine.INSERT(TRUE);
        UNTIL ApprovalCommentLine.NEXT = 0;
    END;

    PROCEDURE ShowPostedApprovalEntries@60(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalEntry@1001 : Record 456;
    BEGIN
      PostedApprovalEntry.FILTERGROUP(2);
      PostedApprovalEntry.SETRANGE("Posted Record ID",PostedRecordID);
      PostedApprovalEntry.FILTERGROUP(0);
      PAGE.RUN(PAGE::"Posted Approval Entries",PostedApprovalEntry);
    END;

    PROCEDURE DeletePostedApprovalEntries@40(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalEntry@1003 : Record 456;
    BEGIN
      PostedApprovalEntry.SETRANGE("Table ID",PostedRecordID.TABLENO);
      PostedApprovalEntry.SETRANGE("Posted Record ID",PostedRecordID);
      PostedApprovalEntry.DELETEALL;
      DeletePostedApprovalCommentLines(PostedRecordID);
    END;

    LOCAL PROCEDURE DeletePostedApprovalCommentLines@37(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalCommentLine@1003 : Record 457;
    BEGIN
      PostedApprovalCommentLine.SETRANGE("Table ID",PostedRecordID.TABLENO);
      PostedApprovalCommentLine.SETRANGE("Posted Record ID",PostedRecordID);
      PostedApprovalCommentLine.DELETEALL;
    END;

    PROCEDURE SetStatusToPendingApproval@47(VAR Variant@1000 : Variant);
    VAR
      SalesHeader@1002 : Record 36;
      PurchaseHeader@1003 : Record 38;
      IncomingDocument@1004 : Record 130;
      RecRef@1001 : RecordRef;
      ErrorMsg001@1014 : TextConst 'ENU=%1 must have a value.';
      CustomWorkflowEvents@1017 : Codeunit 50580;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            // PHP Start - Testfield Purchase Header field before approval
            PurchaseHeader.TestfieldPurchaseHeader;
            // PHP End
            PurchaseHeader.VALIDATE(Status,PurchaseHeader.Status::"Pending Approval");
            PurchaseHeader.MODIFY(TRUE);
            Variant := PurchaseHeader;
          END;
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            // PHP Start TESTFIELD some field in Request Type:: TERF,WW,RFE,WCR,C-RMA
            SalesHeader.TestfieldSalesHeader;
            // PHP End
            SalesHeader.VALIDATE(Status,SalesHeader.Status::"Pending Approval");
            SalesHeader.MODIFY(TRUE);
            Variant := SalesHeader;
          END;
        DATABASE::"Incoming Document":
          BEGIN
            RecRef.SETTABLE(IncomingDocument);
            IncomingDocument.VALIDATE(Status,IncomingDocument.Status::"Pending Approval");
            IncomingDocument.MODIFY(TRUE);
            Variant := IncomingDocument;
          END;
        ELSE BEGIN
          IF CustomWorkflowEvents.SetStatusToPendingApproval(Variant) THEN  EXIT; // PHP Code integration
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
        END;
      END;
    END;

    PROCEDURE InformUserOnStatusChange@110(Variant@1001 : Variant;WorkflowInstanceId@1000 : GUID);
    VAR
      RecRef@1004 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          ShowPurchApprovalStatus(Variant);
        DATABASE::"Sales Header":
          ShowSalesApprovalStatus(Variant);
        // #1 <<
        DATABASE::"Daily Deployment Report":
            ShowPROJApprovalStatus(Variant);
        DATABASE::"RTPS Document":
            ShowRFTSApprovalStatus(Variant);
        DATABASE::"Job Order":
            ShowJOApprovalStatus(Variant);
        DATABASE::"Request For Quotation":
             ShowRFQApprovalStatus(Variant);
        DATABASE::"Cash Advance Header":
             ShowCAApprovalStatus(Variant);
          DATABASE::"TERF Header":
            ShowTERFApprovalStatus(Variant);
          DATABASE::"Internal Notice to Proceed":
            ShowNTPApprovalStatus(Variant);
          DATABASE::"Request for Purchase":
            ShowRFPurApprovalStatus(Variant);
          DATABASE::Job:
            ShowJobApprovalStatus(Variant);
        // #1 >>
        ELSE
          ShowApprovalStatus(RecRef.RECORDID,WorkflowInstanceId);
      END;
    END;

    PROCEDURE GetApprovalComment@53(Variant@1000 : Variant);
    VAR
      ApprovalCommentLine@1001 : Record 455;
      ApprovalEntry@1004 : Record 454;
      RecRef@1005 : RecordRef;
      Project@1008 : Record 50005;
      RFTSDocument@1007 : Record 50010;
      JobOrder@1006 : Record 50012;
      RequestForQuotation@1003 : Record 50013;
      CashAdvanceHdr@1002 : Record 50017;
      TERFHeader@1009 : Record 50034;
      NoticeToProceed@1010 : Record 50040;
      RFPur@1011 : Record 50030;
      Job@1012 : Record 167;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            ApprovalCommentLine.SETRANGE("Table ID",ApprovalEntry."Table ID");
            ApprovalCommentLine.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
          END;
         // #1 <<
        DATABASE::"Daily Deployment Report": BEGIN
            Project := Variant;
            ApprovalCommentLine.SETRANGE("Table ID",DATABASE::"Daily Deployment Report");
            ApprovalCommentLine.SETRANGE("Document Type",6);
            ApprovalCommentLine.SETRANGE("Document No.",Project."No.");
            ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
          END;
        DATABASE::"RTPS Document":BEGIN
            RFTSDocument := Variant;
            ApprovalCommentLine.SETRANGE("Table ID",DATABASE::"RTPS Document");
            ApprovalCommentLine.SETRANGE("Document Type",6);
            ApprovalCommentLine.SETRANGE("Document No.",RFTSDocument."No.");
            ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
          END;
        DATABASE::"Job Order":BEGIN
            JobOrder := Variant;
            ApprovalCommentLine.SETRANGE("Table ID",DATABASE::"Job Order");
            // ApprovalCommentLine.SETRANGE("Document Type",6);
            ApprovalCommentLine.SETRANGE("Document No.",JobOrder."No.");
            ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
          END;
        DATABASE::"Request For Quotation":BEGIN
            RequestForQuotation := Variant;
            ApprovalCommentLine.SETRANGE("Table ID",DATABASE::"Request For Quotation");
            // ApprovalCommentLine.SETRANGE("Document Type",6);
            ApprovalCommentLine.SETRANGE("Document No.",RequestForQuotation."No.");
            ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
          END;
        DATABASE::"Cash Advance Header":BEGIN
              CashAdvanceHdr := Variant;
            ApprovalCommentLine.SETRANGE("Table ID",DATABASE::"Cash Advance Header");
            // ApprovalCommentLine.SETRANGE("Document Type",6);
            ApprovalCommentLine.SETRANGE("Document No.",CashAdvanceHdr."No.");
            ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
          END;
        DATABASE::"TERF Header":BEGIN
            TERFHeader := Variant;
          // IF TERFHeader."Document Type" = TERFHeader."Document Type"::Withdrawal THEN
          //   ApprovalCommentLine.SETRANGE("Document Type",7);
          // IF TERFHeader."Document Type" = TERFHeader."Document Type"::TERF THEN
          //   ApprovalCommentLine.SETRANGE("Document Type",8);
          ApprovalCommentLine.SETRANGE("Table ID",DATABASE::"TERF Header");
          ApprovalCommentLine.SETRANGE("Document No.",TERFHeader."No.");
          ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
        END;
        DATABASE::"Internal Notice to Proceed":BEGIN
            NoticeToProceed := Variant;
          ApprovalCommentLine.SETRANGE("Table ID",DATABASE::"Internal Notice to Proceed");
          // ApprovalCommentLine.SETRANGE("Document Type",6);
          ApprovalCommentLine.SETRANGE("Document No.",NoticeToProceed."No.");
          ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
        END;
        DATABASE::"Request for Purchase":BEGIN
            RFPur := Variant;
          ApprovalCommentLine.SETRANGE("Table ID",DATABASE::"Request for Purchase");
          // ApprovalCommentLine.SETRANGE("Document Type",6);
          ApprovalCommentLine.SETRANGE("Document No.",RFPur."No.");
          ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
        END;
        DATABASE::Job:BEGIN
            Job := Variant;
          ApprovalCommentLine.SETRANGE("Table ID",DATABASE::Job);
          // ApprovalCommentLine.SETRANGE("Document Type",6);
          ApprovalCommentLine.SETRANGE("Document No.",Job."No.");
          ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
        END;
        // #1 >>
        ELSE BEGIN
          ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
          ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
        END;
      END;

      PAGE.RUN(PAGE::"Approval Comments",ApprovalCommentLine);
    END;

    PROCEDURE HasOpenApprovalEntriesForCurrentUser@14(RecordID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      EXIT(FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID));
    END;

    PROCEDURE HasOpenApprovalEntries@154(RecordID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    PROCEDURE HasApprovalEntries@15(RecordID@1001 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE HasPendingApprovalEntries@156(RecId@1000 : RecordID;WorkflowInstanceId@1002 : GUID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Record ID to Approve",RecId);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Open,ApprovalEntry.Status::Created);
      ApprovalEntry.SETFILTER("Workflow Step Instance ID",WorkflowInstanceId);
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    PROCEDURE HasAnyOpenJournalLineApprovalEntries@187(JournalTemplateName@1000 : Code[20];JournalBatchName@1003 : Code[20]) : Boolean;
    VAR
      GenJournalLine@1001 : Record 81;
      ApprovalEntry@1002 : Record 454;
      GenJournalLineRecRef@1008 : RecordRef;
      GenJournalLineRecordID@1006 : RecordID;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      IF ApprovalEntry.ISEMPTY THEN
        EXIT(FALSE);

      GenJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      IF GenJournalLine.ISEMPTY THEN
        EXIT(FALSE);

      IF GenJournalLine.COUNT < ApprovalEntry.COUNT THEN BEGIN
        GenJournalLine.FINDSET;
        REPEAT
          IF HasOpenApprovalEntries(GenJournalLine.RECORDID) THEN
            EXIT(TRUE);
        UNTIL GenJournalLine.NEXT = 0;
      END ELSE BEGIN
        ApprovalEntry.FINDSET;
        REPEAT
          GenJournalLineRecordID := ApprovalEntry."Record ID to Approve";
          GenJournalLineRecRef := GenJournalLineRecordID.GETRECORD;
          GenJournalLineRecRef.SETTABLE(GenJournalLine);
          IF (GenJournalLine."Journal Template Name" = JournalTemplateName) AND
             (GenJournalLine."Journal Batch Name" = JournalBatchName)
          THEN
            EXIT(TRUE);
        UNTIL ApprovalEntry.NEXT = 0;
      END;

      EXIT(FALSE)
    END;

    PROCEDURE TrySendJournalBatchApprovalRequest@54(VAR GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);
      CheckGeneralJournalBatchApprovalsWorkflowEnabled(GenJournalBatch);
      IF HasOpenApprovalEntries(GenJournalBatch.RECORDID) OR
         HasAnyOpenJournalLineApprovalEntries(GenJournalBatch."Journal Template Name",GenJournalBatch.Name)
      THEN
        ERROR(PendingJournalBatchApprovalExistsErr);
      OnSendGeneralJournalBatchForApproval(GenJournalBatch);
    END;

    PROCEDURE TrySendJournalLineApprovalRequests@183(VAR GenJournalLine@1000 : Record 81);
    VAR
      LinesSent@1001 : Integer;
    BEGIN
      IF GenJournalLine.COUNT = 1 THEN
        CheckGeneralJournalLineApprovalsWorkflowEnabled(GenJournalLine);

      REPEAT
        IF WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
             WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode) AND
           NOT HasOpenApprovalEntries(GenJournalLine.RECORDID)
        THEN BEGIN
          OnSendGeneralJournalLineForApproval(GenJournalLine);
          LinesSent += 1;
        END;
      UNTIL GenJournalLine.NEXT = 0;

      CASE LinesSent OF
        0:
          MESSAGE(NoApprovalsSentMsg);
        GenJournalLine.COUNT:
          MESSAGE(PendingApprovalForSelectedLinesMsg);
        ELSE
          MESSAGE(PendingApprovalForSomeSelectedLinesMsg);
      END;
    END;

    PROCEDURE TryCancelJournalBatchApprovalRequest@189(VAR GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);
      OnCancelGeneralJournalBatchApprovalRequest(GenJournalBatch);
    END;

    PROCEDURE TryCancelJournalLineApprovalRequests@88(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      REPEAT
        IF HasOpenApprovalEntries(GenJournalLine.RECORDID) THEN
          OnCancelGeneralJournalLineApprovalRequest(GenJournalLine);
      UNTIL GenJournalLine.NEXT = 0;
      MESSAGE(ApprovalReqCanceledForSelectedLinesMsg);
    END;

    PROCEDURE ShowJournalApprovalEntries@55(VAR GenJournalLine@1000 : Record 81);
    VAR
      ApprovalEntry@1002 : Record 454;
      GenJournalBatch@1001 : Record 232;
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);

      ApprovalEntry.SETFILTER("Table ID",'%1|%2',DATABASE::"Gen. Journal Batch",DATABASE::"Gen. Journal Line");
      ApprovalEntry.SETFILTER("Record ID to Approve",'%1|%2',GenJournalBatch.RECORDID,GenJournalLine.RECORDID);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      PAGE.RUN(PAGE::"Approval Entries",ApprovalEntry);
    END;

    LOCAL PROCEDURE GetGeneralJournalBatch@87(VAR GenJournalBatch@1000 : Record 232;VAR GenJournalLine@1001 : Record 81);
    BEGIN
      IF NOT GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name") THEN
        GenJournalBatch.GET(GenJournalLine.GETFILTER("Journal Template Name"),GenJournalLine.GETFILTER("Journal Batch Name"));
    END;

    PROCEDURE RenameApprovalEntries@79(OldRecordId@1000 : RecordID;NewRecordId@1001 : RecordID);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Record ID to Approve",OldRecordId);
      IF ApprovalEntry.FINDFIRST THEN
        ApprovalEntry.MODIFYALL("Record ID to Approve",NewRecordId,TRUE);
      ChangeApprovalComments(OldRecordId,NewRecordId);
    END;

    LOCAL PROCEDURE ChangeApprovalComments@85(OldRecordId@1000 : RecordID;NewRecordId@1001 : RecordID);
    VAR
      ApprovalCommentLine@1002 : Record 455;
    BEGIN
      ApprovalCommentLine.SETRANGE("Record ID to Approve",OldRecordId);
      ApprovalCommentLine.MODIFYALL("Record ID to Approve",NewRecordId,TRUE);
    END;

    PROCEDURE DeleteApprovalEntries@93(RecordIDToApprove@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordIDToApprove.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordIDToApprove);
      ApprovalEntry.DELETEALL(TRUE);
      DeleteApprovalCommentLines(RecordIDToApprove);
    END;

    PROCEDURE DeleteApprovalCommentLines@92(RecordIDToApprove@1000 : RecordID);
    VAR
      ApprovalCommentLine@1001 : Record 455;
    BEGIN
      ApprovalCommentLine.SETRANGE("Table ID",RecordIDToApprove.TABLENO);
      ApprovalCommentLine.SETRANGE("Record ID to Approve",RecordIDToApprove);
      ApprovalCommentLine.DELETEALL(TRUE);
    END;

    PROCEDURE CopyApprovalEntryQuoteToOrder@101(FromRecID@1006 : RecordID;ToDocNo@1007 : Code[20];ToRecID@1008 : RecordID);
    VAR
      FromApprovalEntry@1000 : Record 454;
      ToApprovalEntry@1001 : Record 454;
      FromApprovalCommentLine@1002 : Record 455;
      ToApprovalCommentLine@1003 : Record 455;
      LastEntryNo@1004 : Integer;
    BEGIN
      FromApprovalEntry.SETRANGE("Table ID",FromRecID.TABLENO);
      FromApprovalEntry.SETRANGE("Record ID to Approve",FromRecID);
      IF FromApprovalEntry.FINDSET THEN BEGIN
        ToApprovalEntry.FINDLAST;
        LastEntryNo := ToApprovalEntry."Entry No.";
        REPEAT
          ToApprovalEntry := FromApprovalEntry;
          ToApprovalEntry."Entry No." := LastEntryNo + 1;
          ToApprovalEntry."Document Type" := ToApprovalEntry."Document Type"::Order;
          ToApprovalEntry."Document No." := ToDocNo;
          ToApprovalEntry."Record ID to Approve" := ToRecID;
          LastEntryNo += 1;
          ToApprovalEntry.INSERT;
        UNTIL FromApprovalEntry.NEXT = 0;

        FromApprovalCommentLine.SETRANGE("Table ID",FromRecID.TABLENO);
        FromApprovalCommentLine.SETRANGE("Record ID to Approve",FromRecID);
        IF FromApprovalCommentLine.FINDSET THEN BEGIN
          ToApprovalCommentLine.FINDLAST;
          LastEntryNo := ToApprovalCommentLine."Entry No.";
          REPEAT
            ToApprovalCommentLine := FromApprovalCommentLine;
            ToApprovalCommentLine."Entry No." := LastEntryNo + 1;
            ToApprovalCommentLine."Document Type" := ToApprovalCommentLine."Document Type"::Order;
            ToApprovalCommentLine."Document No." := ToDocNo;
            ToApprovalCommentLine."Record ID to Approve" := ToRecID;
            ToApprovalCommentLine.INSERT;
            LastEntryNo += 1;
          UNTIL FromApprovalCommentLine.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE GetLastSequenceNo@16(ApprovalEntryArgument@1000 : Record 454) : Integer;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        SETRANGE("Table ID",ApprovalEntryArgument."Table ID");
        SETRANGE("Record ID to Approve",ApprovalEntryArgument."Record ID to Approve");
        SETRANGE("Workflow Step Instance ID",ApprovalEntryArgument."Workflow Step Instance ID");
        IF FINDLAST THEN
          EXIT("Sequence No.");
      END;
      EXIT(0);
    END;

    PROCEDURE OpenApprovalEntriesPage@75(RecId@1000 : RecordID);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecId.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecId);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      PAGE.RUNMODAL(PAGE::"Approval Entries",ApprovalEntry);
    END;

    LOCAL PROCEDURE FindUserSetupBySalesPurchCode@109(VAR UserSetup@1000 : Record 91;ApprovalEntryArgument@1001 : Record 454);
    BEGIN
      UserSetup.SETCURRENTKEY("Salespers./Purch. Code");
      UserSetup.SETRANGE("Salespers./Purch. Code",ApprovalEntryArgument."Salespers./Purch. Code");
      IF NOT UserSetup.FINDFIRST THEN
        ERROR(
          PurchaserUserNotFoundErr,UserSetup."User ID",UserSetup.FIELDCAPTION("Salespers./Purch. Code"),
          UserSetup."Salespers./Purch. Code");
    END;

    LOCAL PROCEDURE CheckUserAsApprovalAdministrator@114();
    VAR
      UserSetup@1000 : Record 91;
    BEGIN
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Approval Administrator");
    END;

    [Integration]
    PROCEDURE OnSendJobForApproval@145(VAR Job@1000 : Record 167);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelJobApprovalRequest@146(VAR Job@1000 : Record 167);
    BEGIN
    END;

    LOCAL PROCEDURE ShowJobApprovalStatus@150(Job@1000 : Record 167);
    BEGIN
      //#1
      Job.FIND;

      CASE Job."Approval Status" OF
           Job."Approval Status"::Released:
              MESSAGE(DocStatusChangedMsg,Job."No.",Job."Approval Status");
           Job."Approval Status"::"Pending Approval":
               MESSAGE(PendingApprovalMsg);
        END;
    END;

    PROCEDURE IsJobApprovalsWorkflowEnabled@144(VAR Job@1002 : Record 167) : Boolean;
    BEGIN
      //#1
      EXIT(WorkflowManagement.CanExecuteWorkflow(Job,WorkflowEventHandling.RunWorkflowOnSendJobDocForApprovalCode));
    END;

    PROCEDURE CheckJobApprovalsWorkflowEnabled@151(VAR Job@1002 : Record 167) : Boolean;
    BEGIN
      //#1

      IF NOT IsJobApprovalsWorkflowEnabled(Job) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    [Integration]
    PROCEDURE OnChangeOfReturnedDateOfTERF@153(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    PROCEDURE IsSendReturnedMaterialNotificationWorkflowEnabled@158(VAR SalesHeader@1002 : Record 36) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(SalesHeader,WorkflowEventHandling.RunWorkflowOnSendReturnedMaterialNotificationCode));
    END;

    PROCEDURE CheckSendReturnedMaterialNotificationWorkflowEnabled@157(SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      IF NOT IsSendReturnedMaterialNotificationWorkflowEnabled(SalesHeader) THEN
        ERROR(NoWorkflowEnabledErr);
      EXIT(TRUE);
    END;

    PROCEDURE IsSendReleasedMaterialNotificationWorkflowEnabled@160(VAR SalesHeader@1002 : Record 36) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(SalesHeader,WorkflowEventHandling.RunWorkflowOnSendReleasedMaterialNotificationCode));
    END;

    PROCEDURE CheckSendReleasedMaterialNotificationWorkflowEnabled@159(SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      IF NOT IsSendReleasedMaterialNotificationWorkflowEnabled(SalesHeader) THEN
        ERROR(NoWorkflowEnabledErr);
      EXIT(TRUE);
    END;

    PROCEDURE IsOnChangeOfApproverIDNotificationWorkflowEnabled@164(VAR UserSetup@1002 : Record 91) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(UserSetup,WorkflowEventHandling.RunWorkflowOnChangeOfApproverIDNotificationCode));
    END;

    PROCEDURE CheckOnChangeOfApproverIDNotificationWorkflowEnabled@162(UserSetup@1000 : Record 91) : Boolean;
    BEGIN
      IF NOT IsOnChangeOfApproverIDNotificationWorkflowEnabled(UserSetup) THEN
        ERROR(NoWorkflowEnabledErr);
      EXIT(TRUE);
    END;

    PROCEDURE IsOnReopenPurchDocNotificationWorkflowEnabled@166(VAR PurchaseHeader@1002 : Record 38) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(PurchaseHeader, WorkflowEventHandling.RunWorkflowOnAfterReopenPurchaseDocCode));
    END;

    PROCEDURE CheckReopenPurchDocNotificationWorkflowEnabled@165(PurchaseHeader@1000 : Record 38) : Boolean;
    BEGIN
      IF NOT IsOnReopenPurchDocNotificationWorkflowEnabled(PurchaseHeader) THEN
        ERROR(NoWorkflowEnabledErr);
      EXIT(TRUE);
    END;

    PROCEDURE IsOnChangeOfINTPStatusNotificationWorkflowEnabled@168(VAR INTP@1002 : Record 50040) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(INTP, WorkflowEventHandling.RunWorkflowOnChangeOfINTPStatusNotificationCode));
    END;

    PROCEDURE CheckChangeOfINTPStatusNotificationWorkflowEnabled@167(INTP@1000 : Record 50040) : Boolean;
    BEGIN
      IF NOT IsOnChangeOfINTPStatusNotificationWorkflowEnabled(INTP) THEN
        ERROR(NoWorkflowEnabledErr);
      EXIT(TRUE);
    END;

    PROCEDURE IsOnSendOpportunityNotificationWorkflowEnabled@177() : Boolean;
    VAR
      Opportunity@1000 : Record 5092;
    BEGIN
       // PHP Start
       Opportunity.INIT;
       EXIT(WorkflowManagement.CanExecuteWorkflow(Opportunity,WorkflowEventHandling.RunWorkflowOnSendOpportunityNotificationCode));
    END;

    PROCEDURE IsOnSendNewToDoNotificationWorkflowEnabled@178(VAR ToDo@1001 : Record 5080) : Boolean;
    BEGIN
       // PHP Start
       EXIT(WorkflowManagement.CanExecuteWorkflow(ToDo,WorkflowEventHandling.RunWorkflowOnSendNewToDoNotificationCode));
    END;

    PROCEDURE IsOnSendCompletedToDoNotificationWorkflowEnabled@180(VAR ToDo@1001 : Record 5080) : Boolean;
    BEGIN
       // PHP Start
       EXIT(WorkflowManagement.CanExecuteWorkflow(ToDo,WorkflowEventHandling.RunWorkflowOnSendCompletedToDoNotificationCode));
    END;

    PROCEDURE IsOnSendCanceledToDoNotificationWorkflowEnabled@184(VAR ToDo@1001 : Record 5080) : Boolean;
    BEGIN
       // PHP Start
       EXIT(WorkflowManagement.CanExecuteWorkflow(ToDo,WorkflowEventHandling.RunWorkflowOnSendCanceledToDoNotificationCode));
    END;

    PROCEDURE IsOnSendToDoReminderNotificationWorkflowEnabled@179() : Boolean;
    VAR
      ToDo@1000 : Record 5080;
    BEGIN
       // PHP Start
       ToDo.INIT;
       EXIT(WorkflowManagement.CanExecuteWorkflow(ToDo,WorkflowEventHandling.RunWorkflowOnSendToDoReminderNotificationCode));
    END;

    PROCEDURE IsOnSendUserCredentialNotificationWorkflowEnabled@181(VAR User@1001 : Record 2000000120) : Boolean;
    BEGIN
       // PHP Start
       EXIT(WorkflowManagement.CanExecuteWorkflow(User,WorkflowEventHandling.RunWorkflowOnSendUserCredentialNotificationCode));
    END;

    PROCEDURE IsOnSendOpportunityStatusIsChangeToInprogresslNotificationWorkflowEnabled@182(VAR Opportunity@1001 : Record 5092) : Boolean;
    BEGIN
       // PHP Start
       EXIT(WorkflowManagement.CanExecuteWorkflow(Opportunity,WorkflowEventHandling.RunWorkflowOnSendOpportunityStatusIsChangeToInProgressCode));
    END;

    PROCEDURE IsOnCreatePersonInvolveWorkflowEnabled@185(VAR PersonInvolve@1001 : Record 50552) : Boolean;
    BEGIN
       // PHP Start
       EXIT(WorkflowManagement.CanExecuteWorkflow(PersonInvolve,WorkflowEventHandling.RunWorkflowOnCreatePersonInvolveCode));
    END;

    PROCEDURE ExtendMakeApprovalEntry@174(ApprovalEntryArgument@1003 : Record 454;SequenceNo@1002 : Integer;ApproverId@1001 : Code[50];WorkflowStepArgument@1000 : Record 1523);
    BEGIN
      // PHP Start
      // Extend the function of MakeApprovalEntry Local to Global
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,ApproverId,WorkflowStepArgument);
      // PHP End
    END;

    BEGIN
    {
      !! Documentation Codeunit 1535 Approvals Mgmt.

      5:06 PM Monday, July 29, 2024
        Custom approval request per Approver Type : Function CreateApprovalRequests
        Extend the function of MakeApprovalEntry Local to Global
        Remove the custom function made to extend the Approval Entry for Approval Type
    }
    END.
  }
}

OBJECT Page 9005 Sales Manager Role Center
{
  OBJECT-PROPERTIES
  {
    Date=06/26/18;
    Time=[ 1:25:30 AM];
    Modified=Yes;
    Version List=NAVW19.00.00.44974,NAVOC1.00.03.00,NAVOC1.00.02.48;
  }
  PROPERTIES
  {
    CaptionML=ENU=Role Center;
    PageType=RoleCenter;
    ActionList=ACTIONS
    {
      { 1900000006;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 13      ;1   ;Action    ;
                      CaptionML=ENU=Customer - &Order Summary;
                      RunObject=Report 107;
                      Image=Report }
      { 14      ;1   ;Action    ;
                      CaptionML=ENU=Customer - &Top 10 List;
                      RunObject=Report 111;
                      Image=Report }
      { 17      ;1   ;Separator  }
      { 18      ;1   ;Action    ;
                      CaptionML=ENU=S&ales Statistics;
                      RunObject=Report 112;
                      Image=Report }
      { 19      ;1   ;Action    ;
                      CaptionML=ENU=Salesperson - Sales &Statistics;
                      RunObject=Report 114;
                      Image=Report }
      { 20      ;1   ;Action    ;
                      CaptionML=ENU=Salesperson - &Commission;
                      RunObject=Report 115;
                      Image=Report }
      { 22      ;1   ;Separator  }
      { 24      ;1   ;Action    ;
                      CaptionML=ENU=Campaign - &Details;
                      RunObject=Report 5060;
                      Image=Report }
      { 83      ;1   ;Separator  }
      { 75      ;1   ;Action    ;
                      CaptionML=ENU=Opportunity - List;
                      RunObject=Report 5061;
                      Image=Report }
      { 79      ;1   ;Action    ;
                      CaptionML=ENU=Sales Funnel;
                      RunObject=Report 50028;
                      Image=Report }
      { 109     ;1   ;Action    ;
                      CaptionML=ENU=Vendor - Check Payment Status;
                      RunObject=Report 50029;
                      Image=Report }
      { 1900000011;0 ;ActionContainer;
                      ActionContainerType=HomeItems }
      { 9       ;1   ;Action    ;
                      CaptionML=ENU=Sales Analysis Reports;
                      RunObject=Page 9376 }
      { 12      ;1   ;Action    ;
                      CaptionML=ENU=Sales Analysis by Dimensions;
                      RunObject=Page 9371 }
      { 8       ;1   ;Action    ;
                      CaptionML=ENU=Sales Budgets;
                      RunObject=Page 9374 }
      { 5       ;1   ;Action    ;
                      CaptionML=ENU=Sales Quotes;
                      RunObject=Page 9300;
                      Image=Quote }
      { 186     ;1   ;Action    ;
                      Name=SalesQuotesOpen;
                      ShortCutKey=Return;
                      CaptionML=ENU=Open;
                      RunObject=Page 9300;
                      RunPageView=WHERE(Status=FILTER(Open));
                      Image=Edit }
      { 185     ;1   ;Action    ;
                      Name=SalesQuotesReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 9300;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 184     ;1   ;Action    ;
                      Name=SalesQuotesApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 9300;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 183     ;1   ;Action    ;
                      Name=SalesQuotesPendingPrepay;
                      CaptionML=ENU=Pending Prepayment;
                      RunObject=Page 9300;
                      RunPageLink=Status=CONST(Pending Prepayment);
                      Image=PostedOrder }
      { 182     ;1   ;Action    ;
                      Name=SalesQuotesExpired;
                      CaptionML=ENU=Expired;
                      RunObject=Page 9300;
                      RunPageLink=Status=CONST(Expired);
                      Image=PostedOrder }
      { 181     ;1   ;Separator  }
      { 15      ;1   ;Action    ;
                      Name=<Page Sales Orders>;
                      CaptionML=ENU=Sales Orders;
                      RunObject=Page 9305;
                      Image=Order }
      { 7       ;1   ;Action    ;
                      Name=SalesOrdersOpen;
                      ShortCutKey=Return;
                      CaptionML=ENU=Open;
                      RunObject=Page 9305;
                      RunPageView=WHERE(Status=FILTER(Open));
                      Image=Edit }
      { 180     ;1   ;Action    ;
                      Name=SalesOrderReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 9305;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 179     ;1   ;Action    ;
                      Name=SalesOrderApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 9305;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 178     ;1   ;Action    ;
                      Name=SalesOrderPendingPrepay;
                      CaptionML=ENU=Pending Prepayment;
                      RunObject=Page 9305;
                      RunPageLink=Status=CONST(Pending Prepayment);
                      Image=PostedOrder }
      { 177     ;1   ;Action    ;
                      Name=SalesOrderExpired;
                      CaptionML=ENU=Expired;
                      RunObject=Page 9305;
                      RunPageLink=Status=CONST(Expired);
                      Image=PostedOrder }
      { 176     ;1   ;Separator  }
      { 36      ;1   ;Action    ;
                      CaptionML=ENU=Dynamics CRM Sales Orders;
                      RunObject=Page 5353;
                      RunPageView=WHERE(StateCode=FILTER(Submitted),
                                        LastBackofficeSubmit=FILTER('')) }
      { 35      ;1   ;Action    ;
                      Name=<Page Sales Invoices>;
                      CaptionML=ENU=Sales Invoices;
                      RunObject=Page 9301;
                      Image=Invoice }
      { 16      ;1   ;Action    ;
                      Name=SalesInvoicesOpen;
                      ShortCutKey=Return;
                      CaptionML=ENU=Open;
                      RunObject=Page 9301;
                      RunPageView=WHERE(Status=FILTER(Open));
                      Image=Edit }
      { 191     ;1   ;Action    ;
                      Name=SalesInvoicesReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 9301;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 190     ;1   ;Action    ;
                      Name=SalesInvoicesApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 9301;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 189     ;1   ;Action    ;
                      Name=SalesInvoicesPendingPrepay;
                      CaptionML=ENU=Pending Prepayment;
                      RunObject=Page 9301;
                      RunPageLink=Status=CONST(Pending Prepayment);
                      Image=PostedOrder }
      { 188     ;1   ;Action    ;
                      Name=SalesInvoicesExpired;
                      CaptionML=ENU=Expired;
                      RunObject=Page 9301;
                      RunPageLink=Status=CONST(Expired);
                      Image=PostedOrder }
      { 187     ;1   ;Separator  }
      { 23      ;1   ;Action    ;
                      CaptionML=ENU=Items;
                      RunObject=Page 31;
                      Image=Item }
      { 70      ;1   ;Action    ;
                      Name=<Page Job List>;
                      CaptionML=ENU=Jobs;
                      RunObject=Page 89 }
      { 196     ;1   ;Action    ;
                      Name=JobsOpen;
                      CaptionML=ENU=Open;
                      RunObject=Page 89;
                      RunPageLink=Approval Status=CONST(Open);
                      Image=PostedOrder }
      { 195     ;1   ;Action    ;
                      Name=JobsPendApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 89;
                      RunPageLink=Approval Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 194     ;1   ;Action    ;
                      Name=JobsReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 89;
                      RunPageLink=Approval Status=CONST(Released);
                      Image=PostedOrder }
      { 193     ;1   ;Action    ;
                      Name=JobsPendingPrepay;
                      CaptionML=ENU=Pending Prepayment;
                      RunObject=Page 89;
                      RunPageLink=Approval Status=CONST(Pending Prepayment);
                      Image=PostedOrder }
      { 192     ;1   ;Separator  }
      { 25      ;1   ;Action    ;
                      CaptionML=ENU=Contacts;
                      RunObject=Page 5052;
                      Image=CustomerContact }
      { 26      ;1   ;Action    ;
                      CaptionML=ENU=Customers;
                      RunObject=Page 22;
                      Image=Customer }
      { 73      ;1   ;Action    ;
                      CaptionML=ENU=Vendors;
                      RunObject=Page 27 }
      { 74      ;1   ;Action    ;
                      CaptionML=ENU=Internal Notice to Proceed List;
                      RunObject=Page 50040 }
      { 200     ;1   ;Action    ;
                      Name=INTPOpen;
                      CaptionML=ENU=Open;
                      RunObject=Page 50040;
                      RunPageLink=Approval Status=CONST(Open);
                      Image=PostedOrder }
      { 201     ;1   ;Action    ;
                      Name=INTPReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 50040;
                      RunPageLink=Approval Status=CONST(Released);
                      Image=PostedOrder }
      { 199     ;1   ;Action    ;
                      Name=INTPPendApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 50040;
                      RunPageLink=Approval Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 197     ;1   ;Action    ;
                      Name=INTPCancelled;
                      CaptionML=ENU=Cancelled;
                      RunObject=Page 50040;
                      RunPageLink=Approval Status=CONST(Cancelled);
                      Image=PostedOrder }
      { 198     ;1   ;Separator  }
      { 27      ;1   ;Action    ;
                      CaptionML=ENU=Campaigns;
                      RunObject=Page 5087;
                      Image=Campaign }
      { 209     ;1   ;Action    ;
                      Name=CampaignNewProduct;
                      CaptionML=ENU=New Product;
                      RunObject=Page 5087;
                      RunPageLink=Product Status=CONST(New Product);
                      Image=PostedOrder }
      { 208     ;1   ;Action    ;
                      Name=CampaignExistingProduct;
                      CaptionML=ENU=Existing Product;
                      RunObject=Page 5087;
                      RunPageLink=Product Status=CONST(Existing Product);
                      Image=PostedOrder }
      { 207     ;1   ;Separator  }
      { 28      ;1   ;Action    ;
                      CaptionML=ENU=Segments;
                      RunObject=Page 5093;
                      Image=Segment }
      { 29      ;1   ;Action    ;
                      CaptionML=ENU=To-dos;
                      RunObject=Page 5096;
                      Image=TaskList }
      { 216     ;1   ;Action    ;
                      Name=<Page My To-Dos>;
                      CaptionML=ENU=My To-Dos;
                      RunObject=Page 50605 }
      { 215     ;1   ;Action    ;
                      Name=MyToDoNotStarted;
                      CaptionML=ENU=Not Started;
                      RunObject=Page 50605;
                      RunPageLink=Status=CONST(Not Started);
                      Image=PostedOrder }
      { 214     ;1   ;Action    ;
                      Name=MyToDoInProgress;
                      CaptionML=ENU=In Progress;
                      RunObject=Page 50605;
                      RunPageLink=Status=CONST(In Progress);
                      Image=PostedOrder }
      { 213     ;1   ;Action    ;
                      Name=MyToDoCompleted;
                      CaptionML=ENU=Completed;
                      RunObject=Page 50605;
                      RunPageLink=Status=CONST(Completed);
                      Image=PostedOrder }
      { 212     ;1   ;Action    ;
                      Name=MyToDoWaiting;
                      CaptionML=ENU=Waiting;
                      RunObject=Page 50605;
                      RunPageLink=Status=CONST(Waiting);
                      Image=PostedOrder }
      { 211     ;1   ;Action    ;
                      Name=MyToDoPostponed;
                      CaptionML=ENU=Postponed;
                      RunObject=Page 50605;
                      RunPageLink=Status=CONST(Postponed);
                      Image=PostedOrder }
      { 210     ;1   ;Separator  }
      { 30      ;1   ;Action    ;
                      CaptionML=ENU=Teams;
                      RunObject=Page 5105;
                      Image=TeamSales }
      { 77      ;1   ;Action    ;
                      CaptionML=ENU=Ticket List;
                      RunObject=Page 50652 }
      { 52      ;1   ;Action    ;
                      CaptionML=ENU=Software Development Requests;
                      RunObject=Page 50657 }
      { 78      ;1   ;Action    ;
                      CaptionML=ENU=Requests to Approve;
                      RunObject=Page 654 }
      { 206     ;1   ;Action    ;
                      Name=ReqsToApproveCreated;
                      CaptionML=ENU=Created;
                      RunObject=Page 654;
                      RunPageLink=Status=CONST(Created);
                      Image=PostedOrder }
      { 205     ;1   ;Action    ;
                      Name=ReqsToApproveOpen;
                      CaptionML=ENU=Open;
                      RunObject=Page 654;
                      RunPageLink=Status=CONST(Open);
                      Image=PostedOrder }
      { 204     ;1   ;Action    ;
                      Name=ReqsToApproveCancelled;
                      CaptionML=ENU=Cancelled;
                      RunObject=Page 654;
                      RunPageLink=Status=CONST(Canceled);
                      Image=PostedOrder }
      { 203     ;1   ;Action    ;
                      Name=ReqsToApproveRejected;
                      CaptionML=ENU=Rejected;
                      RunObject=Page 654;
                      RunPageLink=Status=CONST(Rejected);
                      Image=PostedOrder }
      { 202     ;1   ;Action    ;
                      Name=ReqsToApproveApproved;
                      CaptionML=ENU=Approved;
                      RunObject=Page 654;
                      RunPageLink=Status=CONST(Approved);
                      Image=PostedOrder }
      { 1900000012;0 ;ActionContainer;
                      ActionContainerType=ActivityButtons }
      { 64      ;1   ;ActionGroup;
                      CaptionML=ENU=General Forms;
                      Image=ReferenceData }
      { 63      ;2   ;Action    ;
                      Name=<Page Job Order>;
                      CaptionML=ENU=Job Order;
                      RunObject=Page 50012;
                      Image=PostedShipment }
      { 106     ;2   ;Action    ;
                      Name=JobOrderOpen;
                      CaptionML=ENU=Open;
                      RunObject=Page 50012;
                      RunPageLink=Status=CONST(Open);
                      Image=PostedOrder }
      { 105     ;2   ;Action    ;
                      Name=JobOrderPendApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 50012;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 104     ;2   ;Action    ;
                      Name=JobOrderReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 50012;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 103     ;2   ;Action    ;
                      Name=JobOrderCancelled;
                      CaptionML=ENU=Cancelled;
                      RunObject=Page 50012;
                      RunPageLink=Status=CONST(Cancelled);
                      Image=PostedOrder }
      { 102     ;2   ;Action    ;
                      Name=JobOrderPosted;
                      CaptionML=ENU=Posted;
                      RunObject=Page 50012;
                      RunPageLink=Status=CONST(Posted);
                      Image=PostedOrder }
      { 85      ;2   ;Separator  }
      { 62      ;2   ;Action    ;
                      Name=<Page Cash Advance List>;
                      CaptionML=ENU=Cash Advance List;
                      RunObject=Page 50020;
                      Image=PostedOrder }
      { 112     ;2   ;Action    ;
                      Name=CashAdvanceOpen;
                      CaptionML=ENU=Open;
                      RunObject=Page 50020;
                      RunPageLink=Status=CONST(Open);
                      Image=PostedOrder }
      { 111     ;2   ;Action    ;
                      Name=CashAdvancePendApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 50020;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 110     ;2   ;Action    ;
                      Name=CashAdvanceReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 50020;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 107     ;2   ;Separator  }
      { 60      ;2   ;Action    ;
                      Name=<Page Request for Purchase List>;
                      CaptionML=ENU=Request for Purchase List;
                      RunObject=Page 50030;
                      Image=PostedReturnReceipt }
      { 119     ;2   ;Action    ;
                      Name=RequestForPurchaseOpen;
                      CaptionML=ENU=Open;
                      RunObject=Page 50030;
                      RunPageLink=Status=CONST(Open);
                      Image=PostedOrder }
      { 118     ;2   ;Action    ;
                      Name=RequestForPurchasePendApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 50030;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 117     ;2   ;Action    ;
                      Name=RequestForPurchaseReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 50030;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 114     ;2   ;Action    ;
                      Name=RequestForPurchasePendingPrepay;
                      CaptionML=ENU=Pending Prepayment;
                      RunObject=Page 50030;
                      RunPageLink=Status=CONST(Pending Prepayment);
                      Image=PostedOrder }
      { 120     ;2   ;Separator  }
      { 61      ;2   ;Action    ;
                      Name=<Page Request for Payments>;
                      CaptionML=ENU=Request for Payments;
                      RunObject=Page 50555;
                      Image=PostedOrder }
      { 123     ;2   ;Action    ;
                      Name=RequestForPaymentsOpen;
                      CaptionML=ENU=Open;
                      RunObject=Page 50555;
                      RunPageLink=Status=CONST(Open);
                      Image=PostedOrder }
      { 122     ;2   ;Action    ;
                      Name=RequestForPaymentsPendApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 50555;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 121     ;2   ;Action    ;
                      Name=RequestForPaymentsReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 50555;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 116     ;2   ;Action    ;
                      Name=RequestForPaymentsPendingPrepay;
                      CaptionML=ENU=Pending Prepayment;
                      RunObject=Page 50555;
                      RunPageLink=Status=CONST(Pending Prepayment);
                      Image=PostedOrder }
      { 115     ;2   ;Separator  }
      { 59      ;2   ;Action    ;
                      Name=<Page Tools & Equipment Req.>;
                      CaptionML=ENU=Tools & Equipment Requisition;
                      RunObject=Page 50569;
                      Image=PostedMemo }
      { 128     ;2   ;Action    ;
                      Name=Tools&EquipmentReqOpen;
                      CaptionML=ENU=Open;
                      RunObject=Page 50569;
                      RunPageLink=Status=CONST(Open);
                      Image=PostedOrder }
      { 130     ;2   ;Action    ;
                      Name=Tools&EquipmentReqReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 50569;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 127     ;2   ;Action    ;
                      Name=Tools&EquipmentReqApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 50569;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 125     ;2   ;Action    ;
                      Name=Tools&EquipmentReqPendingPrepay;
                      CaptionML=ENU=Pending Prepayment;
                      RunObject=Page 50569;
                      RunPageLink=Status=CONST(Pending Prepayment);
                      Image=PostedOrder }
      { 124     ;2   ;Separator  }
      { 58      ;2   ;Action    ;
                      Name=<Page Withdrawals>;
                      CaptionML=ENU=Withdrawals;
                      RunObject=Page 50563;
                      Image=PostedMemo }
      { 135     ;2   ;Action    ;
                      Name=WithdrawalsOpen;
                      CaptionML=ENU=Open;
                      RunObject=Page 50563;
                      RunPageLink=Status=CONST(Open);
                      Image=PostedOrder }
      { 134     ;2   ;Action    ;
                      Name=WithdrawalsReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 50563;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 133     ;2   ;Action    ;
                      Name=WithdrawalsApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 50563;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 132     ;2   ;Action    ;
                      Name=WithdrawalsPendingPrepay;
                      CaptionML=ENU=Pending Prepayment;
                      RunObject=Page 50563;
                      RunPageLink=Status=CONST(Pending Prepayment);
                      Image=PostedOrder }
      { 126     ;2   ;Separator  }
      { 57      ;2   ;Action    ;
                      Name=<Page Request for Exceptions>;
                      CaptionML=ENU=Request for Exceptions;
                      RunObject=Page 50571 }
      { 141     ;2   ;Action    ;
                      Name=RequestforExceptionOpen;
                      CaptionML=ENU=Open;
                      RunObject=Page 50571;
                      RunPageLink=Status=CONST(Open);
                      Image=PostedOrder }
      { 140     ;2   ;Action    ;
                      Name=RequestforExceptionReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 50571;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 139     ;2   ;Action    ;
                      Name=RequestforExceptionApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 50571;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 138     ;2   ;Action    ;
                      Name=RequestforExceptionPendingPrepay;
                      CaptionML=ENU=Pending Prepayment;
                      RunObject=Page 50571;
                      RunPageLink=Status=CONST(Pending Prepayment);
                      Image=PostedOrder }
      { 136     ;2   ;Separator  }
      { 56      ;2   ;Action    ;
                      Name=<Page Work Change Request List>;
                      CaptionML=ENU=Work Change Request List;
                      RunObject=Page 50575;
                      Image=OrderReminder }
      { 147     ;2   ;Action    ;
                      Name=WorkChangeReqOpen;
                      CaptionML=ENU=Open;
                      RunObject=Page 50575;
                      RunPageLink=Status=CONST(Open);
                      Image=PostedOrder }
      { 146     ;2   ;Action    ;
                      Name=WorkChangeReqReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 50575;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 145     ;2   ;Action    ;
                      Name=WorkChangeReqApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 50575;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 144     ;2   ;Action    ;
                      Name=WorkChangeReqPendingPrepay;
                      CaptionML=ENU=Pending Prepayment;
                      RunObject=Page 50575;
                      RunPageLink=Status=CONST(Pending Prepayment);
                      Image=PostedOrder }
      { 142     ;2   ;Separator  }
      { 55      ;2   ;Action    ;
                      Name=<Page Purch Return Order List>;
                      CaptionML=ENU=Purchase Return Orders;
                      RunObject=Page 9311 }
      { 153     ;2   ;Action    ;
                      Name=PurchReturnOrderOpen;
                      CaptionML=ENU=Open;
                      RunObject=Page 9311;
                      RunPageLink=Status=CONST(Open);
                      Image=PostedOrder }
      { 152     ;2   ;Action    ;
                      Name=PurchReturnOrderReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 9311;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 151     ;2   ;Action    ;
                      Name=PurchReturnOrderApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 9311;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 150     ;2   ;Action    ;
                      Name=PurchReturnOrderPendingPrepay;
                      CaptionML=ENU=Pending Prepayment;
                      RunObject=Page 9311;
                      RunPageLink=Status=CONST(Pending Prepayment);
                      Image=PostedOrder }
      { 148     ;2   ;Separator  }
      { 54      ;2   ;Action    ;
                      Name=<Page Sales Return Order List>;
                      CaptionML=ENU=Sales Return Orders;
                      RunObject=Page 9304 }
      { 158     ;2   ;Action    ;
                      Name=SalesReturnOrderOpen;
                      CaptionML=ENU=Open;
                      RunObject=Page 9304;
                      RunPageLink=Status=CONST(Open);
                      Image=PostedOrder }
      { 157     ;2   ;Action    ;
                      Name=SalesReturnOrderReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 9304;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 156     ;2   ;Action    ;
                      Name=SalesReturnOrderApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 9304;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 149     ;2   ;Separator  }
      { 53      ;2   ;Action    ;
                      Name=<Page My Documents>;
                      CaptionML=ENU=My Documents;
                      RunObject=Page 50080 }
      { 163     ;2   ;Action    ;
                      Name=MyDocumentsNew;
                      CaptionML=ENU=New;
                      RunObject=Page 50080;
                      RunPageLink=Status=CONST(New);
                      Image=PostedOrder }
      { 162     ;2   ;Action    ;
                      Name=MyDocumentsReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 50080;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 160     ;2   ;Action    ;
                      Name=MyDocumentsRejected;
                      CaptionML=ENU=Rejected;
                      RunObject=Page 50080;
                      RunPageLink=Status=CONST(Rejected);
                      Image=PostedOrder }
      { 164     ;2   ;Action    ;
                      Name=MyDocumentsPosted;
                      CaptionML=ENU=Posted;
                      RunObject=Page 50080;
                      RunPageLink=Status=CONST(Posted);
                      Image=PostedOrder }
      { 165     ;2   ;Action    ;
                      Name=MyDocumentsCreated;
                      CaptionML=ENU=Created;
                      RunObject=Page 50080;
                      RunPageLink=Status=CONST(Created);
                      Image=PostedOrder }
      { 159     ;2   ;Action    ;
                      Name=MyDocumentsFailed;
                      CaptionML=ENU=Failed;
                      RunObject=Page 50080;
                      RunPageLink=Status=CONST(Failed);
                      Image=PostedOrder }
      { 161     ;2   ;Action    ;
                      Name=MyDocumentsPendApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 50080;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 72      ;1   ;ActionGroup;
                      CaptionML=ENU=CRM;
                      Image=AnalysisView }
      { 67      ;2   ;Action    ;
                      Name=<Page Opportunity List>;
                      CaptionML=ENU=Opportunity List;
                      RunObject=Page 5123;
                      Image=PostedOrder }
      { 86      ;2   ;Action    ;
                      Name=OpportunitiesNotStarted;
                      CaptionML=ENU=Not Started;
                      RunObject=Page 5123;
                      RunPageLink=Status=CONST(Not Started);
                      Image=PostedOrder }
      { 87      ;2   ;Action    ;
                      Name=OpportunitiesInProgress;
                      CaptionML=ENU=In Progress;
                      RunObject=Page 5123;
                      RunPageLink=Status=CONST(In Progress);
                      Image=PostedOrder }
      { 88      ;2   ;Action    ;
                      Name=OpportunitiesWon;
                      CaptionML=ENU=Won;
                      RunObject=Page 5123;
                      RunPageLink=Status=CONST(Won);
                      Image=PostedOrder }
      { 89      ;2   ;Action    ;
                      Name=OpportunitiesLost;
                      CaptionML=ENU=Lost;
                      RunObject=Page 5123;
                      RunPageLink=Status=CONST(Lost);
                      Image=PostedOrder }
      { 108     ;2   ;Separator  }
      { 71      ;2   ;Action    ;
                      Name=<Page Campaign List>;
                      CaptionML=ENU=Campaigns;
                      RunObject=Page 5087;
                      Image=PostedShipment }
      { 168     ;2   ;Action    ;
                      Name=CampaignNewProduct2;
                      CaptionML=ENU=New Product;
                      RunObject=Page 5087;
                      RunPageLink=Product Status=CONST(New Product);
                      Image=PostedOrder }
      { 167     ;2   ;Action    ;
                      Name=CampaignExistingProduct2;
                      CaptionML=ENU=Existing Product;
                      RunObject=Page 5087;
                      RunPageLink=Product Status=CONST(Existing Product);
                      Image=PostedOrder }
      { 166     ;2   ;Separator  }
      { 68      ;2   ;Action    ;
                      Name=<Page Request For Quotation List;
                      CaptionML=ENU=Request for Quotation List;
                      RunObject=Page 50015;
                      Image=PostedOrder }
      { 90      ;2   ;Action    ;
                      Name=RequestForQuotationOpen;
                      CaptionML=ENU=Open;
                      RunObject=Page 50015;
                      RunPageLink=Status=CONST(Open);
                      Image=PostedOrder }
      { 91      ;2   ;Action    ;
                      Name=RequestForQuotationPendApproval;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 50015;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 92      ;2   ;Action    ;
                      Name=RequestForQuotationReleased;
                      CaptionML=ENU=Released;
                      RunObject=Page 50015;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 95      ;2   ;Action    ;
                      Name=RequestForQuotationCancelled;
                      CaptionML=ENU=Cancelled;
                      RunObject=Page 50015;
                      RunPageLink=Status=CONST(Cancelled);
                      Image=PostedOrder }
      { 94      ;2   ;Action    ;
                      Name=RequestForQuotationClosed;
                      CaptionML=ENU=Closed;
                      RunObject=Page 50015;
                      RunPageLink=Status=CONST(Closed);
                      Image=PostedOrder }
      { 93      ;2   ;Action    ;
                      Name=RequestForQuotationCompleted;
                      CaptionML=ENU=Completed;
                      RunObject=Page 50015;
                      RunPageLink=Status=CONST(Completed);
                      Image=PostedOrder }
      { 113     ;2   ;Separator  }
      { 66      ;2   ;Action    ;
                      Name=<Page RTPS Document List 2>;
                      CaptionML=ENU=Request for Technical Support List;
                      RunObject=Page 50011;
                      Image=PostedMemo }
      { 101     ;2   ;Action    ;
                      Name=RTPSOpen2;
                      CaptionML=ENU=Open;
                      RunObject=Page 50011;
                      RunPageLink=Status=CONST(Open);
                      Image=PostedOrder }
      { 100     ;2   ;Action    ;
                      Name=RTPSPendApproval2;
                      CaptionML=ENU=Pending Approval;
                      RunObject=Page 50011;
                      RunPageLink=Status=CONST(Pending Approval);
                      Image=PostedOrder }
      { 99      ;2   ;Action    ;
                      Name=RTPSReleased2;
                      CaptionML=ENU=Released;
                      RunObject=Page 50011;
                      RunPageLink=Status=CONST(Released);
                      Image=PostedOrder }
      { 98      ;2   ;Action    ;
                      Name=RTPSCancelled2;
                      CaptionML=ENU=Cancelled;
                      RunObject=Page 50011;
                      RunPageLink=Status=CONST(Cancelled);
                      Image=PostedOrder }
      { 97      ;2   ;Action    ;
                      Name=RTPSClosed2;
                      CaptionML=ENU=Closed;
                      RunObject=Page 50011;
                      RunPageLink=Status=CONST(Closed);
                      Image=PostedOrder }
      { 96      ;2   ;Action    ;
                      Name=RTPSCompleted2;
                      CaptionML=ENU=Completed;
                      RunObject=Page 50011;
                      RunPageLink=Status=CONST(Completed);
                      Image=PostedOrder }
      { 169     ;2   ;Separator  }
      { 65      ;2   ;Action    ;
                      Name=<Page My To-Dos 2>;
                      CaptionML=ENU=My To-Dos;
                      RunObject=Page 50605 }
      { 174     ;2   ;Action    ;
                      Name=MyToDoNotStarted2;
                      CaptionML=ENU=Not Started;
                      RunObject=Page 50605;
                      RunPageLink=Status=CONST(Not Started);
                      Image=PostedOrder }
      { 173     ;2   ;Action    ;
                      Name=MyToDoInProgress2;
                      CaptionML=ENU=In Progress;
                      RunObject=Page 50605;
                      RunPageLink=Status=CONST(In Progress);
                      Image=PostedOrder }
      { 172     ;2   ;Action    ;
                      Name=MyToDoCompleted2;
                      CaptionML=ENU=Completed;
                      RunObject=Page 50605;
                      RunPageLink=Status=CONST(Completed);
                      Image=PostedOrder }
      { 171     ;2   ;Action    ;
                      Name=MyToDoWaiting2;
                      CaptionML=ENU=Waiting;
                      RunObject=Page 50605;
                      RunPageLink=Status=CONST(Waiting);
                      Image=PostedOrder }
      { 170     ;2   ;Action    ;
                      Name=MyToDoPostponed2;
                      CaptionML=ENU=Postponed;
                      RunObject=Page 50605;
                      RunPageLink=Status=CONST(Postponed);
                      Image=PostedOrder }
      { 175     ;2   ;Separator  }
      { 69      ;2   ;Action    ;
                      Name=<Page Close Opportunity Codes>;
                      CaptionML=ENU=Close Opportunity Codes;
                      RunObject=Page 5133 }
      { 143     ;2   ;Action    ;
                      Name=<Page Sales Admin Activity>;
                      CaptionML=ENU=Sales Admin Activity;
                      RunObject=Page 50904 }
      { 82      ;1   ;ActionGroup;
                      CaptionML=ENU=Posted Documents;
                      Image=FiledPosted }
      { 81      ;2   ;Action    ;
                      CaptionML=ENU=Posted Cash Advances;
                      RunObject=Page 50024 }
      { 80      ;2   ;Action    ;
                      CaptionML=ENU=Posted Withdrawals;
                      RunObject=Page 50565 }
      { 39      ;1   ;ActionGroup;
                      CaptionML=ENU=Administration Sales/Purchase;
                      Image=AdministrationSalesPurchases }
      { 40      ;2   ;Action    ;
                      CaptionML=ENU=Salespeople/Purchasers;
                      RunObject=Page 14 }
      { 32      ;2   ;Action    ;
                      CaptionML=ENU=Cust. Invoice Discounts;
                      RunObject=Page 23 }
      { 33      ;2   ;Action    ;
                      CaptionML=ENU=Vend. Invoice Discounts;
                      RunObject=Page 28 }
      { 34      ;2   ;Action    ;
                      CaptionML=ENU=Item Disc. Groups;
                      RunObject=Page 513 }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 48      ;1   ;Separator ;
                      CaptionML=ENU=Tasks;
                      IsHeader=Yes }
      { 217     ;1   ;ActionGroup }
      { 218     ;2   ;ActionGroup;
                      CaptionML=ENU=Job Order;
                      Image=JobResponsibility }
      { 155     ;3   ;Action    ;
                      CaptionML=ENU=Meeting;
                      RunObject=Page 50063;
                      Image=Job;
                      RunPageMode=Create }
      { 37      ;1   ;Action    ;
                      CaptionML=ENU=Sales Price &Worksheet;
                      RunObject=Page 7023;
                      Image=PriceWorksheet }
      { 2       ;1   ;Separator  }
      { 3       ;1   ;Action    ;
                      CaptionML=ENU=Sales &Prices;
                      RunObject=Page 7002;
                      Image=SalesPrices }
      { 10      ;1   ;Action    ;
                      CaptionML=ENU=Sales Line &Discounts;
                      RunObject=Page 7004;
                      Image=SalesLineDisc }
      { 38      ;1   ;Action    ;
                      CaptionML=ENU=Change Password;
                      RunObject=Page 9809;
                      Image=Task }
    }
  }
  CONTROLS
  {
    { 1900000008;0;Container;
                ContainerType=RoleCenterArea }

    { 1900724808;1;Group   }

    { 50  ;2   ;Part      ;
                PagePartID=Page50636;
                PartType=Page }

    { 76  ;2   ;Part      ;
                PagePartID=Page50655;
                PartType=Page }

    { 84  ;2   ;Part      ;
                PagePartID=Page50661;
                PartType=Page }

    { 51  ;2   ;Part      ;
                PagePartID=Page50637;
                PartType=Page }

    { 131 ;2   ;Part      ;
                PagePartID=Page50641;
                PartType=Page }

    { 47  ;2   ;Part      ;
                PagePartID=Page50633;
                PartType=Page }

    { 49  ;2   ;Part      ;
                PagePartID=Page50634;
                PartType=Page }

    { 46  ;2   ;Part      ;
                PagePartID=Page50635;
                PartType=Page }

    { 21  ;2   ;Part      ;
                PagePartID=Page9175;
                PartType=Page }

    { 1907692008;2;Part   ;
                PagePartID=Page9150;
                PartType=Page }

    { 41  ;2   ;Part      ;
                PagePartID=Page50608;
                Editable=FALSE;
                PartType=Page }

    { 1900724708;1;Group   }

    { 154 ;2   ;Part      ;
                PagePartID=Page50014;
                PartType=Page }

    { 137 ;2   ;Part      ;
                PagePartID=Page50629;
                PartType=Page }

    { 129 ;2   ;Part      ;
                PagePartID=Page50631;
                PartType=Page }

    { 45  ;2   ;Part      ;
                PagePartID=Page50630;
                PartType=Page }

    { 44  ;2   ;Part      ;
                PagePartID=Page50632;
                PartType=Page }

    { 43  ;2   ;Part      ;
                PagePartID=Page50640;
                PartType=Page }

    { 42  ;2   ;Part      ;
                PagePartID=Page770;
                PartType=Page }

    { 11  ;2   ;Part      ;
                PagePartID=Page760;
                PartType=Page }

    { 6   ;2   ;Part      ;
                PagePartID=Page675;
                Visible=false;
                PartType=Page }

    { 4   ;2   ;Part      ;
                PagePartID=Page9151;
                Visible=false;
                PartType=Page }

    { 1   ;2   ;Part      ;
                PagePartID=Page681;
                PartType=Page }

    { 31  ;2   ;Part      ;
                PartType=System;
                SystemPartID=MyNotes }

  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Page 50012 Job Order List
{
  OBJECT-PROPERTIES
  {
    Date=02/21/24;
    Time=[ 9:51:00 PM];
    Modified=Yes;
    Version List=NAVOC1.00.02.48;
  }
  PROPERTIES
  {
    Editable=No;
    SourceTable=Table50012;
    PageType=List;
    CardPageID=Job Order;
    PromotedActionCategoriesML=ENU=New,Process,Report,Approve,Release,Posting,Prepare,Details,Request Approval,General;
    OnOpenPage=BEGIN
                 IF UserSetupMgt.GetJobOrderFilter <> '' THEN BEGIN
                   FILTERGROUP(2);
                   SETRANGE("Responsibility Center", UserSetupMgt.GetJobOrderFilter);
                   FILTERGROUP(0);
                 END;
               END;

    OnAfterGetCurrRecord=BEGIN
                           SetControlVisibility;
                           CurrPage.IncomingDocAttachFactBox.PAGE.LoadDataFromRecord(Rec);
                           CurrPage.UnresolvedTicket.PAGE.SetTicketRecordReferance(Rec); // PHP Start Ticket Module
                         END;

    ActionList=ACTIONS
    {
      { 26      ;0   ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 25      ;1   ;ActionGroup;
                      CaptionML=ENU=Navigate;
                      Image=Invoices }
      { 24      ;2   ;Action    ;
                      CaptionML=ENU=Approvals;
                      Image=Approvals;
                      OnAction=VAR
                                 ApprovalEntries@1001 : Page 658;
                               BEGIN
                                 ApprovalEntries.Setfilters(DATABASE::"Job Order",6,"No.");
                                 ApprovalEntries.RUN;
                               END;
                                }
      { 14      ;    ;ActionContainer;
                      ActionContainerType=Reports }
      { 15      ;1   ;Action    ;
                      Name=Print;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Report;
                      PromotedCategory=Report;
                      OnAction=VAR
                                 JobOrderForm@1001 : Report 50012;
                                 JobOrderNo@1000 : Text;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(JobOrder);
                                 IF JobOrder.FINDFIRST THEN BEGIN
                                   REPEAT
                                     IF JobOrderNo <> '' THEN
                                       JobOrderNo := JobOrderNo + '|';
                                     JobOrderNo := JobOrderNo + FORMAT(JobOrder."No.");
                                   UNTIL JobOrder.NEXT = 0;
                                 END;
                                 JobOrder.SETFILTER("No.", JobOrderNo);
                                 JobOrderForm.SETTABLEVIEW(JobOrder);
                                 JobOrderForm.RUN;

                                 //JobOrder.SETFILTER("No.", Rec."No.");
                                 //JobOrderForm.SETTABLEVIEW(JobOrder);
                                 //JobOrderForm.RUN;
                               END;
                                }
      { 9       ;0   ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 43      ;1   ;ActionGroup;
                      CaptionML=ENU=Request Approval;
                      Image=SendApprovalRequest }
      { 42      ;2   ;Action    ;
                      Name=SendApprovalRequest;
                      CaptionML=ENU=Send A&pproval Request;
                      Promoted=Yes;
                      Enabled=NOT OpenApprovalEntriesExist;
                      Image=SendApprovalRequest;
                      PromotedCategory=Category9;
                      OnAction=VAR
                                 ApprovalsMgmt@1001 : Codeunit 1535;
                               BEGIN
                                 IF ApprovalsMgmt.CheckJOApprovalsWorkflowEnabled(Rec) THEN
                                   ApprovalsMgmt.OnSendJOForApproval(Rec);
                               END;
                                }
      { 28      ;2   ;Action    ;
                      Name=CancelApprovalRequest;
                      CaptionML=ENU=Cancel Approval Re&quest;
                      Promoted=Yes;
                      Enabled=OpenApprovalEntriesExist;
                      Image=Cancel;
                      PromotedCategory=Category9;
                      OnAction=VAR
                                 ApprovalsMgmt@1001 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.OnCancelJOApprovalRequest(Rec);
                               END;
                                }
      { 45      ;1   ;ActionGroup;
                      CaptionML=ENU=Functions }
      { 46      ;2   ;ActionGroup;
                      CaptionML=ENU=Export to Excel;
                      Image=ExportToExcel }
      { 47      ;3   ;Action    ;
                      AccessByPermission=TableData 50012=D;
                      CaptionML=ENU=Export Mobilization Data;
                      ToolTipML=ENU=Export Selected Job Ordert to Excel;
                      Image=Excel;
                      OnAction=VAR
                                 JobOrder@1000 : Record 50012;
                                 CustomExcelManagement@1001 : Codeunit 50004;
                               BEGIN
                                 // PHP Start
                                 JobOrder.COPY(Rec);
                                 CurrPage.SETSELECTIONFILTER(JobOrder);
                                 CustomExcelManagement.ExportJobOrderLineToExcel(JobOrder);
                                 // PHP End
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                Width=15;
                SourceExpr="No.";
                Style=Strong;
                StyleExpr=TRUE }

    { 19  ;2   ;Field     ;
                SourceExpr="Job Type" }

    { 20  ;2   ;Field     ;
                SourceExpr="Project Name" }

    { 13  ;2   ;Field     ;
                SourceExpr="P.O No." }

    { 5   ;2   ;Field     ;
                SourceExpr="Employee No." }

    { 6   ;2   ;Field     ;
                SourceExpr="Employee Name" }

    { 7   ;2   ;Field     ;
                SourceExpr="Department Code" }

    { 21  ;2   ;Field     ;
                SourceExpr=Department }

    { 8   ;2   ;Field     ;
                SourceExpr="Date Requested" }

    { 10  ;2   ;Field     ;
                SourceExpr="Customer No." }

    { 11  ;2   ;Field     ;
                SourceExpr="Customer Name" }

    { 18  ;2   ;Field     ;
                SourceExpr=Status }

    { 12  ;2   ;Field     ;
                SourceExpr="Site Survey" }

    { 22  ;2   ;Field     ;
                SourceExpr="Site Srvy. SR No." }

    { 23  ;2   ;Field     ;
                SourceExpr=Permitting }

    { 41  ;2   ;Field     ;
                SourceExpr="Service Report No." }

    { 29  ;2   ;Field     ;
                SourceExpr="Installation and Commissioning" }

    { 30  ;2   ;Field     ;
                SourceExpr="InsComm. SR No." }

    { 31  ;2   ;Field     ;
                SourceExpr=Testing }

    { 32  ;2   ;Field     ;
                SourceExpr="Testing SR No." }

    { 33  ;2   ;Field     ;
                SourceExpr="Preliminary Acceptance" }

    { 34  ;2   ;Field     ;
                SourceExpr="Pre-Accpt. SR No." }

    { 35  ;2   ;Field     ;
                SourceExpr="Final Acceptance" }

    { 36  ;2   ;Field     ;
                SourceExpr="Fnl. Accpt. SR No." }

    { 37  ;2   ;Field     ;
                SourceExpr=Rectification }

    { 38  ;2   ;Field     ;
                SourceExpr="Rectification SR No." }

    { 39  ;2   ;Field     ;
                SourceExpr=Troubleshooting }

    { 40  ;2   ;Field     ;
                SourceExpr="Trbltng. SR No." }

    { 4   ;0   ;Container ;
                ContainerType=FactBoxArea }

    { 44  ;1   ;Part      ;
                Name=UnresolvedTicket;
                CaptionML=ENU=Unresolved Ticket;
                PagePartID=Page50654;
                PartType=Page;
                ShowFilter=No }

    { 27  ;1   ;Part      ;
                Name=IncomingDocAttachFactBox;
                PagePartID=Page193;
                PartType=Page;
                ShowFilter=No }

    { 16  ;1   ;Part      ;
                PartType=System;
                SystemPartID=Notes }

    { 17  ;1   ;Part      ;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {
    VAR
      UserSetup@1000 : Record 91;
      JobOrder@1002 : Record 50012;
      ApprovalEntries@1001 : Page 658;
      UserSetupMgt@1003 : Codeunit 5700;
      OpenApprovalEntriesExistForCurrUser@1006 : Boolean;
      OpenApprovalEntriesExist@1004 : Boolean;

    PROCEDURE FilterINTP@1(VAR INTP_@1000 : Record 50040);
    BEGIN
      FILTERGROUP(2);
      SETRANGE("INTP No.", INTP_."No.");
      FILTERGROUP(0);
    END;

    PROCEDURE OpenJobOrder@2(VAR JobTask@1000 : Record 1001);
    VAR
      JobOrderLine@1001 : Record 50551;
      JobOrder@1002 : Record 50012;
      JobOrder2@1006 : Record 50012;
      JobOrderPage@1003 : Page 50013;
      User@1004 : Record 91;
      JobOrderValue@1005 : Text;
      JobOrderValue2@1010 : Text;
      UserIDCode@1007 : Code[50];
      JobOrderListPage@1009 : Page 50012;
    BEGIN
      IF JobTask."Job Task Type" <> JobTask."Job Task Type"::Posting THEN BEGIN
        EXIT;
      END;
      IF User.GET(USERID) THEN BEGIN
        User.TESTFIELD("Employee No.");
        JobOrder.RESET;
        JobOrder.SETFILTER("Employee No.", User."Employee No.");
        IF JobOrder.FINDSET THEN BEGIN
          REPEAT
            IF JobOrderValue <> '' THEN
              JobOrderValue += '|';
            JobOrderValue += JobOrder."No.";
          UNTIL JobOrder.NEXT = 0;
          JobOrderLine.RESET;
          JobOrderLine.SETFILTER("Job Order No.", JobOrderValue);
          JobOrderLine.SETFILTER("Job No.", JobTask."Job No.");
          JobOrderLine.SETFILTER("Job Task No.", JobTask."Job Task No.");
          IF JobOrderLine.FINDSET THEN BEGIN
            REPEAT
              IF JobOrderValue2 <> '' THEN
                JobOrderValue2 += '|';
              JobOrderValue2 += JobOrderLine."Job Order No.";
            UNTIL JobOrderLine.NEXT = 0;
            JobOrder.RESET;
            JobOrder.SETFILTER("No.", JobOrderValue2);
            PAGE.RUN(PAGE::"Job Order List",JobOrder);
          END
          ELSE
            MESSAGE('No Job Order.');
        END;
      END;
    END;

    LOCAL PROCEDURE SetControlVisibility@7();
    VAR
      ApprovalsMgmt@1002 : Codeunit 1535;
    BEGIN
      OpenApprovalEntriesExistForCurrUser := ApprovalsMgmt.HasOpenApprovalEntriesForCurrentUser(RECORDID);
      OpenApprovalEntriesExist := ApprovalsMgmt.HasOpenApprovalEntries(RECORDID);
    END;

    BEGIN
    END.
  }
}

OBJECT Page 50013 Job Order
{
  OBJECT-PROPERTIES
  {
    Date=06/27/18;
    Time=[ 1:22:42 AM];
    Modified=Yes;
    Version List=NAVOC1.00.02.48;
  }
  PROPERTIES
  {
    SourceTable=Table50012;
    DelayedInsert=Yes;
    PopulateAllFields=Yes;
    PageType=Document;
    PromotedActionCategoriesML=ENU=New,Process,Report,Approve,Release,Posting,Prepare,Details,Request Approval,General;
    OnAfterGetRecord=BEGIN
                       SetControlVisibility;

                       CurrPage.ApprovalEntry.PAGE.GetApprovers(Rec);
                       CurrPage.UnresolvedTicket.PAGE.SetTicketRecordReferance(Rec);
                     END;

    OnNewRecord=BEGIN
                  InitPageValues;
                END;

    OnAfterGetCurrRecord=BEGIN
                           CurrPage.IncomingDocAttachFactBox.PAGE.LoadDataFromRecord(Rec);

                           ApprovalEntry.SETRANGE("Table ID",DATABASE::"Job Order");
                           ApprovalEntry.SETRANGE("Document No.",  "No.");
                           IF ApprovalEntry.FINDFIRST THEN BEGIN
                             ShowCommentFactbox := CurrPage.ApprovalCommentsFactBox.PAGE.SetRecIDFilter(ApprovalEntry."Record ID to Approve");
                           END;

                           CurrPage.ApprovalEntry.PAGE.GetApprovers(Rec);
                         END;

    ActionList=ACTIONS
    {
      { 43      ;0   ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 57      ;1   ;ActionGroup;
                      CaptionML=ENU=Documents;
                      Visible=false }
      { 50      ;2   ;Action    ;
                      Name=Documents;
                      CaptionML=ENU=Documents List;
                      PromotedIsBig=Yes;
                      Image=Documents;
                      OnAction=VAR
                                 IncomingDocuments@1000 : Page 190;
                               BEGIN
                                 IncomingDocuments.FilterByJobOrder("No.");
                                 IncomingDocuments.RUN;
                               END;
                                }
      { 56      ;2   ;Action    ;
                      Name=AttachFile;
                      CaptionML=ENU=Attach File;
                      Image=Attach;
                      OnAction=VAR
                                 IncomingDocument@1001 : Record 130;
                                 IncomingDocumentAttachment@1000 : Record 133;
                               BEGIN
                                 IF IncomingDocumentAttachment.Import THEN BEGIN
                                   IncomingDocument.GET(IncomingDocumentAttachment."Incoming Document Entry No.");
                                   IncomingDocument.VALIDATE("Job Order No.",Rec."No.");
                                   IncomingDocument.MODIFY(TRUE);
                                   PAGE.RUN(PAGE::"Incoming Document",IncomingDocument);
                                 END;
                               END;
                                }
      { 132     ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 71      ;1   ;ActionGroup;
                      CaptionML=ENU=Function;
                      ActionContainerType=NewDocumentItems }
      { 67      ;2   ;ActionGroup;
                      Name=IncomingDocument;
                      CaptionML=ENU=Incoming Document;
                      ActionContainerType=NewDocumentItems;
                      Image=Documents }
      { 61      ;3   ;Action    ;
                      Name=IncomingDocCard;
                      CaptionML=ENU=View Incoming Document;
                      ToolTipML=;
                      Enabled=HasIncomingDocument;
                      Image=ViewOrder;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 IncomingDocument.ShowCardFromEntryNoUsingMyDocs("Incoming Document Entry No.");
                               END;
                                }
      { 60      ;3   ;Action    ;
                      Name=SelectIncomingDoc;
                      AccessByPermission=TableData 130=R;
                      CaptionML=ENU=Select Incoming Document;
                      ToolTipML=;
                      Image=SelectLineToApply;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 VALIDATE("Incoming Document Entry No.", IncomingDocument.SelectIncomingDocumentFromMyDocuments("Incoming Document Entry No."));
                               END;
                                }
      { 58      ;3   ;Action    ;
                      Name=IncomingDocAttachFile;
                      Ellipsis=Yes;
                      CaptionML=ENU=Create Incoming Document from File;
                      ToolTipML=;
                      Enabled=NOT HasIncomingDocument;
                      Image=Attach;
                      OnAction=VAR
                                 IncomingDocumentAttachment@1000 : Record 133;
                               BEGIN
                                 IncomingDocumentAttachment.NewAttachmentFromCustomDocument("Incoming Document Entry No.", DATABASE::"Job Order", "No.");
                               END;
                                }
      { 49      ;3   ;Action    ;
                      Name=RemoveIncomingDoc;
                      CaptionML=ENU=Remove Incoming Document;
                      ToolTipML=;
                      Enabled=HasIncomingDocument;
                      Image=RemoveLine;
                      OnAction=BEGIN
                                 "Incoming Document Entry No." := 0;
                               END;
                                }
      { 131     ;1   ;ActionGroup;
                      CaptionML=ENU=Approval }
      { 130     ;2   ;Action    ;
                      Name=Approve;
                      CaptionML=ENU=Approve;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=Yes;
                      Image=Approve;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.ApproveRecordApprovalRequest(RECORDID);
                               END;
                                }
      { 129     ;2   ;Action    ;
                      Name=Reject;
                      CaptionML=ENU=Reject;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=Yes;
                      Image=Reject;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.RejectRecordApprovalRequest(RECORDID);
                               END;
                                }
      { 128     ;2   ;Action    ;
                      Name=Delegate;
                      CaptionML=ENU=Delegate;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      Image=Delegate;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.DelegateRecordApprovalRequest(RECORDID);
                               END;
                                }
      { 127     ;2   ;Action    ;
                      Name=Comment;
                      CaptionML=ENU=Comments;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      Image=ViewComments;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.GetApprovalComment(Rec);
                               END;
                                }
      { 126     ;1   ;ActionGroup;
                      CaptionML=ENU=Release;
                      Image=ReleaseDoc }
      { 125     ;2   ;Action    ;
                      Name=Release;
                      ShortCutKey=Ctrl+F9;
                      CaptionML=ENU=Re&lease;
                      Promoted=Yes;
                      Image=ReleaseDoc;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ReleaseSalesDoc@1000 : Codeunit 414;
                               BEGIN
                                 TestJobOrderField;
                                 ValidateJobOrderLine;
                                 ReleaseMgmt.JOPerformManualRelease(Rec);
                               END;
                                }
      { 124     ;2   ;Action    ;
                      Name=Reopen;
                      CaptionML=ENU=Re&open;
                      Promoted=Yes;
                      Image=ReOpen;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ReleaseSalesDoc@1001 : Codeunit 414;
                               BEGIN
                                 ReleaseMgmt.JOPerformManualReOpen(Rec);
                               END;
                                }
      { 87      ;2   ;Action    ;
                      Name=Cancel;
                      Promoted=Yes;
                      Image=Error;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ReleaseSalesDoc@1001 : Codeunit 414;
                               BEGIN
                                 ReleaseMgmt.JOCancel(Rec);
                               END;
                                }
      { 123     ;1   ;ActionGroup;
                      CaptionML=ENU=Request Approval;
                      Image=SendApprovalRequest }
      { 122     ;2   ;Action    ;
                      Name=SendApprovalRequest;
                      CaptionML=ENU=Send A&pproval Request;
                      Promoted=Yes;
                      Enabled=NOT OpenApprovalEntriesExist;
                      Image=SendApprovalRequest;
                      PromotedCategory=Category9;
                      OnAction=VAR
                                 ApprovalsMgmt@1001 : Codeunit 1535;
                               BEGIN
                                 IF ApprovalsMgmt.CheckJOApprovalsWorkflowEnabled(Rec) THEN
                                   ApprovalsMgmt.OnSendJOForApproval(Rec);
                               END;
                                }
      { 121     ;2   ;Action    ;
                      Name=CancelApprovalRequest;
                      CaptionML=ENU=Cancel Approval Re&quest;
                      Promoted=Yes;
                      Enabled=OpenApprovalEntriesExist;
                      Image=Cancel;
                      PromotedCategory=Category9;
                      OnAction=VAR
                                 ApprovalsMgmt@1001 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.OnCancelJOApprovalRequest(Rec);
                               END;
                                }
      { 79      ;1   ;ActionGroup;
                      CaptionML=ENU=General;
                      ActionContainerType=NewDocumentItems }
      { 80      ;2   ;Action    ;
                      Name=INTP;
                      RunObject=Page 50041;
                      RunPageLink=No.=FIELD(INTP No.);
                      Promoted=Yes;
                      Enabled=("INTP No." <> '');
                      PromotedIsBig=Yes;
                      Image=Document;
                      PromotedCategory=Category10 }
      { 78      ;2   ;Action    ;
                      Name=RFTS;
                      CaptionML=ENU=RTPS;
                      RunObject=Page 50010;
                      RunPageLink=No.=FIELD(RTPS No.);
                      Promoted=Yes;
                      Enabled=("RTPS No." <> '');
                      PromotedIsBig=Yes;
                      Image=Document;
                      PromotedCategory=Category10 }
      { 14      ;2   ;Action    ;
                      Name=Job;
                      RunObject=Page 88;
                      RunPageLink=No.=FIELD(Job No.);
                      Promoted=Yes;
                      Enabled=("Job No." <> '');
                      PromotedIsBig=Yes;
                      Image=Task;
                      PromotedCategory=Category10 }
      { 47      ;2   ;Action    ;
                      Name=ChangeLogs;
                      CaptionML=ENU=Change Logs;
                      PromotedIsBig=Yes;
                      Image=ChangeLog;
                      OnAction=VAR
                                 ChangeLogPage@1000 : Page 595;
                                 TableIds@1001 : Text;
                               BEGIN
                                 TableIds := FORMAT(DATABASE::"Job Order");
                                 ChangeLogPage.SetPageFilter(TableIds, "No.");
                                 ChangeLogPage.RUN;
                               END;
                                }
      { 53      ;2   ;Action    ;
                      Name=Approvals;
                      CaptionML=ENU=Approvals;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Approvals;
                      PromotedCategory=Category10;
                      OnAction=VAR
                                 ApprovalEntries@1001 : Page 658;
                               BEGIN
                                 ApprovalEntries.Setfilters(DATABASE::"Job Order",6,"No.");
                                 ApprovalEntries.RUN;
                               END;
                                }
      { 17      ;0   ;ActionContainer;
                      ActionContainerType=Reports }
      { 85      ;1   ;Action    ;
                      Name=Print;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Report;
                      PromotedCategory=Report;
                      OnAction=VAR
                                 JobOrderForm@1001 : Report 50012;
                                 JobOrderNo@1000 : Text;
                               BEGIN
                                 //CurrPage.SETSELECTIONFILTER(JobOrder);
                                 //IF JobOrder.FINDFIRST THEN BEGIN
                                 //  REPEAT
                                 //    IF JobOrderNo <> '' THEN
                                 //      JobOrderNo := JobOrderNo + '|';
                                 //    JobOrderNo := JobOrderNo + FORMAT(JobOrder."No.");
                                 //  UNTIL JobOrder.NEXT = 0;
                                 //END;
                                 //JobOrder.SETFILTER("No.", JobOrderNo);
                                 //JobOrderForm.SETTABLEVIEW(JobOrder);
                                 //JobOrderForm.RUN;

                                 JobOrder.SETFILTER("No.", Rec."No.");
                                 JobOrderForm.SETTABLEVIEW(JobOrder);
                                 JobOrderForm.RUN;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General;
                GroupType=Group }

    { 48  ;2   ;Field     ;
                SourceExpr="No.";
                Visible=DocNoVisible;
                Style=Strong;
                StyleExpr=TRUE;
                OnAssistEdit=BEGIN
                               IF AssistEdit THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 83  ;2   ;Field     ;
                SourceExpr="Document Date";
                Visible=FALSE }

    { 11  ;2   ;Field     ;
                SourceExpr="Date Requested";
                ShowMandatory=True }

    { 91  ;2   ;Field     ;
                SourceExpr="Job Type" }

    { 52  ;2   ;Field     ;
                SourceExpr="Request for Exception No." }

    { 51  ;2   ;Field     ;
                SourceExpr="INTP No.";
                ShowMandatory=("Job Type" = 0) }

    { 20  ;2   ;Field     ;
                SourceExpr="Job No.";
                Visible=FALSE }

    { 117 ;2   ;Field     ;
                SourceExpr="Project Name";
                RowSpan=2;
                ShowMandatory=TRUE }

    { 3   ;2   ;Field     ;
                SourceExpr="Project Name 2";
                Importance=Additional;
                RowSpan=2 }

    { 12  ;2   ;Field     ;
                SourceExpr="P.O No.";
                RowSpan=4 }

    { 66  ;2   ;Field     ;
                SourceExpr="Responsibility Center";
                Visible=False }

    { 64  ;2   ;Field     ;
                SourceExpr="Employee No.";
                RowSpan=4;
                ShowMandatory=TRUE }

    { 9   ;2   ;Field     ;
                SourceExpr="Employee Name";
                Importance=Additional;
                RowSpan=4 }

    { 10  ;2   ;Field     ;
                SourceExpr="Department Code";
                RowSpan=4 }

    { 55  ;2   ;Field     ;
                SourceExpr=Department;
                Importance=Additional }

    { 16  ;2   ;Field     ;
                SourceExpr="Customer No.";
                ShowMandatory=("INTP No."  <> '') }

    { 18  ;2   ;Field     ;
                SourceExpr="Customer Name";
                ShowMandatory=("INTP No."  <> '') }

    { 31  ;2   ;Field     ;
                SourceExpr="Ground Manager No." }

    { 41  ;2   ;Field     ;
                CaptionML=ENU=Ground Manager;
                SourceExpr=GetGroundManagerName;
                Importance=Additional;
                Editable=FALSE }

    { 40  ;2   ;Field     ;
                SourceExpr="Project Manager No." }

    { 45  ;2   ;Field     ;
                CaptionML=ENU=Project Manager;
                SourceExpr=GetProjectManagerName;
                Importance=Additional;
                Editable=FALSE }

    { 81  ;2   ;Field     ;
                SourceExpr=Remarks }

    { 133 ;2   ;Field     ;
                SourceExpr=Status;
                Editable=FALSE }

    { 82  ;1   ;Group     ;
                CaptionML=ENU=Others;
                GroupType=Group }

    { 38  ;2   ;Field     ;
                SourceExpr=Meeting }

    { 92  ;2   ;Group     ;
                CaptionML=ENU=Supporting Documents;
                GroupType=Group }

    { 86  ;3   ;Field     ;
                SourceExpr="Meeting Email/SMS Conf.";
                Editable=Meeting }

    { 39  ;2   ;Field     ;
                SourceExpr="Product Presentation" }

    { 5   ;2   ;Group     ;
                CaptionML=ENU=Supporing Documents;
                GroupType=Group }

    { 6   ;3   ;Field     ;
                SourceExpr="Prod. Prstn. Email/SMS Conf.";
                Editable="Product Presentation" }

    { 112 ;2   ;Field     ;
                SourceExpr="Trial/POC" }

    { 84  ;2   ;Group     ;
                CaptionML=ENU=Supporting Documents;
                GroupType=Group }

    { 88  ;3   ;Field     ;
                SourceExpr="APCT Form";
                Editable="Trial/POC" }

    { 94  ;3   ;Field     ;
                SourceExpr="RFE Form";
                Editable="Trial/POC" }

    { 34  ;2   ;Field     ;
                SourceExpr="On-Site Audit" }

    { 62  ;2   ;Group     ;
                CaptionML=ENU=No. of Trips;
                GroupType=Group;
                Layout=Rows }

    { 35  ;3   ;Field     ;
                SourceExpr="On-Site Aud. 1st Trip";
                Editable="On-Site Audit" }

    { 36  ;3   ;Field     ;
                SourceExpr="On-Site Aud. 2nd Trip";
                Editable="On-Site Audit" }

    { 37  ;3   ;Field     ;
                SourceExpr="On-Site Aud. 3rd Trip";
                Editable="On-Site Audit" }

    { 93  ;2   ;Group     ;
                CaptionML=ENU=Supporting Documents;
                GroupType=Group }

    { 89  ;3   ;Field     ;
                SourceExpr="Audit Checklist";
                Editable="On-Site Audit" }

    { 19  ;2   ;Field     ;
                SourceExpr="Special Project of CEO" }

    { 101 ;1   ;Group     ;
                CaptionML=ENU=Site Survey;
                GroupType=Group }

    { 111 ;2   ;Field     ;
                SourceExpr="Site Survey" }

    { 46  ;2   ;Group     ;
                CaptionML=ENU=Supporting Documents;
                GroupType=Group }

    { 21  ;3   ;Field     ;
                SourceExpr="Site Srvy. SR Form";
                Editable="Site Survey" }

    { 100 ;3   ;Field     ;
                SourceExpr="Site Srvy. SR No.";
                Editable=("Site Survey" AND "Site Srvy. SR Form") }

    { 99  ;3   ;Field     ;
                CaptionML=ENU=RTPS No.;
                SourceExpr="RTPS No.";
                Editable="Site Survey" }

    { 145 ;1   ;Group     ;
                CaptionML=ENU=Permitting;
                GroupType=Group }

    { 15  ;2   ;Field     ;
                SourceExpr=Permitting }

    { 96  ;2   ;Group     ;
                CaptionML=ENU=Supporting Documents;
                GroupType=Group }

    { 95  ;3   ;Field     ;
                SourceExpr="Prmtg. AFI";
                Editable="Permitting";
                Style=Strong;
                StyleExpr=TRUE }

    { 97  ;3   ;Field     ;
                SourceExpr="Prmtg. As Plan";
                Editable="Permitting" }

    { 98  ;3   ;Field     ;
                SourceExpr="Prmtg. TSSR";
                Editable="Permitting" }

    { 4   ;3   ;Field     ;
                SourceExpr="Prmtg. Timeline of ROW";
                Editable=Permitting }

    { 8   ;2   ;Field     ;
                SourceExpr="Service Report No.";
                Style=Strong;
                StyleExpr=TRUE;
                ShowMandatory=("Job Type" = 0) }

    { 146 ;1   ;Group     ;
                CaptionML=ENU=Installation and Commissioning;
                GroupType=Group }

    { 25  ;2   ;Field     ;
                SourceExpr="Installation and Commissioning";
                Style=Ambiguous;
                StyleExpr=TRUE }

    { 42  ;2   ;Group     ;
                CaptionML=ENU=No. of Trips;
                GroupType=Group;
                Layout=Rows }

    { 26  ;3   ;Field     ;
                SourceExpr="InsComm. 1st Trip";
                Editable="Installation and Commissioning" }

    { 27  ;3   ;Field     ;
                SourceExpr="InsComm. 2nd Trip";
                Editable="Installation and Commissioning" }

    { 28  ;3   ;Field     ;
                SourceExpr="InsComm. 3rd Trip";
                Editable="Installation and Commissioning" }

    { 106 ;2   ;Group     ;
                CaptionML=ENU=Supporting Documents;
                GroupType=Group }

    { 107 ;3   ;Field     ;
                SourceExpr="InsComm. RFE Form";
                Editable="Installation and Commissioning" }

    { 108 ;3   ;Field     ;
                SourceExpr="InsComm. SR Form";
                Editable="Installation and Commissioning" }

    { 109 ;3   ;Field     ;
                SourceExpr="InsComm. SR No.";
                Editable="Installation and Commissioning" AND "InsComm. SR Form" }

    { 115 ;3   ;Field     ;
                SourceExpr="InsComm. AFI";
                Editable="Installation and Commissioning" }

    { 7   ;3   ;Field     ;
                SourceExpr="InsComm. Line of Sight";
                Editable="InsComm. AFI" }

    { 13  ;3   ;Field     ;
                SourceExpr="InsComm. Non-Line of Sight";
                Editable="InsComm. AFI" }

    { 144 ;2   ;Field     ;
                SourceExpr="InsComm. Permitting";
                Editable="Installation and Commissioning" AND "InsComm. AFI" }

    { 143 ;2   ;Field     ;
                SourceExpr="InsComm. Prmt. LGU Permit";
                Editable="InsComm. Permitting" }

    { 142 ;2   ;Field     ;
                SourceExpr="InsComm. Prmt. Brgy. Permit";
                Editable="InsComm. Permitting" }

    { 141 ;2   ;Field     ;
                SourceExpr="InsComm. Prmt. Bldg. Permit";
                Editable="InsComm. Permitting" }

    { 140 ;2   ;Field     ;
                SourceExpr="InsComm. Prmt. DPWH";
                Editable="InsComm. Permitting" }

    { 139 ;2   ;Field     ;
                SourceExpr="InsComm. Prmt. MMDA";
                Editable="InsComm. Permitting" }

    { 138 ;2   ;Field     ;
                SourceExpr="InsComm. Prmt. Traffic";
                Editable="InsComm. Permitting" }

    { 137 ;2   ;Field     ;
                SourceExpr="InsComm. Prmt. HOA";
                Editable="InsComm. Permitting" }

    { 136 ;2   ;Field     ;
                SourceExpr="InsComm. Prmt. ALO";
                Editable="InsComm. Permitting" }

    { 135 ;2   ;Field     ;
                SourceExpr="InsComm. Prmt. ALP";
                Editable="InsComm. Permitting" }

    { 134 ;2   ;Field     ;
                SourceExpr="InsComm. Prmt. FIO";
                Editable="InsComm. Permitting" }

    { 120 ;2   ;Field     ;
                SourceExpr="InsComm. Prmt. RAAWA";
                Editable="InsComm. Permitting" }

    { 119 ;2   ;Field     ;
                SourceExpr="InsComm. Prmt. SO";
                Editable="InsComm. Permitting" }

    { 116 ;2   ;Field     ;
                SourceExpr="InsComm. As Plan";
                Editable="Installation and Commissioning" }

    { 114 ;2   ;Field     ;
                SourceExpr="InsComm. TSSR";
                Editable="Installation and Commissioning" }

    { 118 ;2   ;Field     ;
                SourceExpr="InsComm. Others";
                Editable="Installation and Commissioning" }

    { 148 ;1   ;Group     ;
                CaptionML=ENU=Testing;
                GroupType=Group }

    { 152 ;2   ;Field     ;
                SourceExpr=Testing }

    { 153 ;2   ;Group     ;
                CaptionML=ENU=Supporting Documents;
                GroupType=Group }

    { 150 ;3   ;Field     ;
                SourceExpr="Testing SR Form";
                Editable="Testing" }

    { 151 ;3   ;Field     ;
                SourceExpr="Testing SR No.";
                Editable="Testing SR Form" }

    { 149 ;3   ;Field     ;
                SourceExpr="Testing Test Procedures";
                Editable="Testing" }

    { 154 ;1   ;Group     ;
                CaptionML=ENU=Preliminary Acceptance;
                GroupType=Group }

    { 155 ;2   ;Field     ;
                SourceExpr="Preliminary Acceptance" }

    { 156 ;2   ;Group     ;
                CaptionML=ENU=Supporting Documents;
                GroupType=Group }

    { 157 ;3   ;Field     ;
                SourceExpr="Pre-Accpt. SR Form";
                Editable="Preliminary Acceptance" }

    { 158 ;3   ;Field     ;
                SourceExpr="Pre-Accpt. SR No.";
                Editable="Pre-Accpt. SR Form" }

    { 159 ;3   ;Field     ;
                SourceExpr="Pre-Accpt. Sched. by Customer";
                Editable="Preliminary Acceptance" }

    { 166 ;1   ;Group     ;
                CaptionML=ENU=Final Acceptance;
                GroupType=Group }

    { 24  ;2   ;Field     ;
                SourceExpr="Final Acceptance" }

    { 160 ;2   ;Group     ;
                CaptionML=ENU=Supporting Documents;
                GroupType=Group }

    { 161 ;3   ;Field     ;
                SourceExpr="Fnl. Accpt. SR Form";
                Editable="Final Acceptance" }

    { 162 ;3   ;Field     ;
                SourceExpr="Fnl. Accpt. SR No.";
                Editable="Fnl. Accpt. SR Form" }

    { 163 ;3   ;Field     ;
                SourceExpr="Fnl. Accpt. Schd. by Cust.";
                Editable="Final Acceptance" }

    { 164 ;3   ;Field     ;
                SourceExpr="Fnl. Accpt. Punchlist Report";
                Editable="Final Acceptance" }

    { 165 ;3   ;Field     ;
                SourceExpr="Fnl. Accpt. PAC";
                Editable="Final Acceptance" }

    { 147 ;1   ;Group     ;
                CaptionML=ENU=Rectification;
                GroupType=Group }

    { 23  ;2   ;Field     ;
                SourceExpr=Rectification }

    { 102 ;2   ;Group     ;
                CaptionML=ENU=Supporting Documents;
                GroupType=Group }

    { 104 ;3   ;Field     ;
                SourceExpr="Rectification SR Form";
                Editable=Rectification }

    { 105 ;3   ;Field     ;
                SourceExpr="Rectification SR No.";
                Editable=Rectification AND "Rectification SR Form" }

    { 103 ;3   ;Field     ;
                SourceExpr="Rectification Punchlist Report";
                Editable=Rectification }

    { 167 ;1   ;Group     ;
                CaptionML=ENU=Troubleshooting;
                GroupType=Group }

    { 29  ;2   ;Field     ;
                SourceExpr=Troubleshooting }

    { 30  ;2   ;Field     ;
                SourceExpr="Trbltng. Under Warranty";
                Editable=Troubleshooting }

    { 170 ;2   ;Field     ;
                SourceExpr="Trbltng. DR Date";
                Editable="Trbltng. Under Warranty" }

    { 171 ;2   ;Field     ;
                SourceExpr="Trbltng. Date of Acceptance";
                Editable="Trbltng. Under Warranty" }

    { 172 ;2   ;Field     ;
                SourceExpr="Trbltng. Out of Warranty";
                Editable=Troubleshooting }

    { 63  ;2   ;Group     ;
                CaptionML=ENU=No. of Trips;
                GroupType=Group;
                Layout=Rows }

    { 32  ;3   ;Field     ;
                SourceExpr="Out of Wrrnty. 1st Trip";
                Editable="Trbltng. Out of Warranty" }

    { 33  ;3   ;Field     ;
                SourceExpr="Out of Wrrnty. 2nd Trip";
                Editable="Trbltng. Out of Warranty" }

    { 73  ;2   ;Group     ;
                CaptionML=ENU=Supporting Documents;
                GroupType=Group }

    { 77  ;3   ;Field     ;
                SourceExpr="Trbltng. NCCF No.";
                Editable=Troubleshooting }

    { 168 ;3   ;Field     ;
                SourceExpr="Trbltng. SR Form";
                Editable=Troubleshooting }

    { 169 ;3   ;Field     ;
                SourceExpr="Trbltng. SR No.";
                Editable="Trbltng. SR Form" }

    { 90  ;1   ;Part      ;
                Name=Vehicle Request;
                CaptionML=ENU=Vehicle Request;
                SubPageView=SORTING(Line No.,Line Type,Job Order No.);
                SubPageLink=Job Order No.=FIELD(No.),
                            Line Type=CONST(Car Request);
                PagePartID=Page50070;
                PartType=Page;
                UpdatePropagation=Both }

    { 110 ;1   ;Part      ;
                Name=Public Transportation Request;
                CaptionML=ENU=Public Transportation Request;
                SubPageLink=Job Order No.=FIELD(No.);
                PagePartID=Page50071;
                PartType=Page }

    { 44  ;1   ;Part      ;
                Name=JO Airplane Ticket;
                CaptionML=ENU=Airplane Ticket Request;
                SubPageLink=Job Order No.=FIELD(No.);
                PagePartID=Page50072;
                PartType=Page }

    { 22  ;1   ;Part      ;
                Name=ApprovalEntry;
                CaptionML=ENU=Approver;
                SubPageView=SORTING(Entry No.)
                            ORDER(Descending);
                SubPageLink=Document No.=FIELD(No.),
                            Table ID=CONST(50012);
                PagePartID=Page50088;
                Editable=False;
                PartType=Page;
                ShowFilter=No }

    { 76  ;    ;Container ;
                ContainerType=FactBoxArea }

    { 54  ;1   ;Part      ;
                Name=UnresolvedTicket;
                CaptionML=ENU=Unresolved Ticket;
                PagePartID=Page50654;
                PartType=Page;
                ShowFilter=No }

    { 70  ;1   ;Part      ;
                Name=ApprovalCommentsFactBox;
                PagePartID=Page9104;
                Visible=ShowCommentFactbox;
                PartType=Page }

    { 75  ;1   ;Part      ;
                Name=IncomingDocAttachFactBox;
                PagePartID=Page193;
                PartType=Page;
                ShowFilter=No }

    { 74  ;1   ;Part      ;
                PartType=System;
                SystemPartID=Notes }

    { 72  ;1   ;Part      ;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {
    VAR
      ApprovalEntry@1010 : Record 454;
      ApprovalCommentLine@1009 : Record 455;
      JobOrder@1004 : Record 50012;
      INTP@1008 : Record 50040;
      Job@1007 : Record 167;
      ApprovalEntries@1003 : Page 658;
      ReleaseMgmt@1000 : Codeunit 50551;
      OpenApprovalEntriesExistForCurrUser@1002 : Boolean;
      OpenApprovalEntriesExist@1001 : Boolean;
      HasIncomingDocument@1006 : Boolean;
      ShowCommentFactbox@1011 : Boolean;
      DocNoVisible@1005 : Boolean;

    LOCAL PROCEDURE SetControlVisibility@7();
    VAR
      ApprovalsMgmt@1002 : Codeunit 1535;
    BEGIN
      HasIncomingDocument := "Incoming Document Entry No." <> 0;
      OpenApprovalEntriesExistForCurrUser := ApprovalsMgmt.HasOpenApprovalEntriesForCurrentUser(RECORDID);
      OpenApprovalEntriesExist := ApprovalsMgmt.HasOpenApprovalEntries(RECORDID);
      DocNoVisible := DocNoVisibility;
    END;

    PROCEDURE OpenJobOrder@2(VAR JobTask@1000 : Record 1001;VAR LineType@1008 : Option);
    VAR
      JobOrderLine@1001 : Record 50551;
      JobOrder@1002 : Record 50012;
      JobOrder2@1006 : Record 50012;
      JobOrderPage@1003 : Page 50013;
      User@1004 : Record 91;
      JobOrderValue@1005 : Text;
      UserIDCode@1007 : Code[50];
    BEGIN
      IF JobTask."Job Task Type" <> JobTask."Job Task Type"::Posting THEN BEGIN
        EXIT;
      END;
      IF User.GET(USERID) THEN BEGIN
        User.TESTFIELD("Employee No.");
        //IF STRLEN(User."Employee No.") > 0 THEN BEGIN

          JobOrder.RESET;
          JobOrder.SETFILTER("Employee No.", User."Employee No.");
          IF JobOrder.FINDSET THEN BEGIN
            REPEAT
              IF JobOrderValue <> '' THEN
                JobOrderValue += '|';
              JobOrderValue += JobOrder."No.";
            UNTIL JobOrder.NEXT = 0;
            JobOrderLine.RESET;
            JobOrderLine.SETFILTER("Line Type", '%1', LineType);
            JobOrderLine.SETFILTER("Job Order No.", JobOrderValue);
            JobOrderLine.SETFILTER("Job No.", JobTask."Job No.");
            JobOrderLine.SETFILTER("Job Task No.", JobTask."Job Task No.");
            IF JobOrderLine.FINDFIRST THEN BEGIN
              //REPEAT

              //UNTIL JobOrderLine.NEXT = 0;
              JobOrder2.RESET;
              JobOrder2.SETFILTER("No.", JobOrderLine."Job Order No.");
              IF JobOrder2.FINDFIRST THEN BEGIN
                JobOrderPage.SETRECORD(JobOrder2);
                JobOrderPage.RUN;
              END;
            END
            ELSE
              MESSAGE('No Job Order.');
          END;
        END;
      //END;
    END;

    BEGIN
    END.
  }
}

OBJECT Page 50048 Web Service Job Order
{
  OBJECT-PROPERTIES
  {
    Date=07/02/18;
    Time=[ 4:23:30 AM];
    Modified=Yes;
    Version List=NAVOC1.00.02.48;
  }
  PROPERTIES
  {
    DeleteAllowed=No;
    SourceTable=Table50012;
    DelayedInsert=Yes;
    PageType=Document;
    OnInsertRecord=BEGIN
                     IF EmailAddress = '' THEN
                       ERROR(Err004);

                     ValidateDate;

                     UserSetup.SETRANGE("E-Mail", EmailAddress);
                     IF NOT UserSetup.FINDFIRST THEN
                       ERROR(Err003);

                     VALIDATE("Job Type", "Job Type"::Others);
                     VALIDATE(Meeting, TRUE);
                     VALIDATE("Employee No.", UserSetup."Employee No.");
                     VALIDATE("Document Date", "Date Requested");
                     VALIDATE("Created By User ID", UserSetup."User ID");
                     VALIDATE("Project Name", ProjectName);

                     CASE TypeOfRequest OF
                       FORMAT(RequestTypeOption::"Vehicle Request"):
                         VALIDATE("Vehicle Request", TRUE);
                       FORMAT(RequestTypeOption::"Public Transportation Request"):
                         VALIDATE("Public Transportation Request", TRUE);
                       FORMAT(RequestTypeOption::"Airplane Ticket Request"):
                         VALIDATE("Airplane Ticket Request", TRUE);
                       ELSE
                         VALIDATE("Vehicle Request", TRUE);
                     END;
                   END;

    OnModifyRecord=VAR
                     JobOrder@1001 : Record 50012;
                     JobOrderLine@1000 : Record 50551;
                     RequestType@1005 : Integer;
                   BEGIN

                     ValidateDate;

                     DateFrom := Subtract8hrs(DateFrom);
                     DateTo := Subtract8hrs(DateTo);

                     CASE TypeOfRequest OF
                       FORMAT(RequestTypeOption::"Vehicle Request"):
                         RequestType := JobOrderLine."Line Type"::"Car Request";
                       FORMAT(RequestTypeOption::"Public Transportation Request"):
                         RequestType := JobOrderLine."Line Type"::"Public Transpo Request";
                       FORMAT(RequestTypeOption::"Airplane Ticket Request"):
                         RequestType := JobOrderLine."Line Type"::"Airplane Ticket Request";
                       ELSE
                         RequestType := JobOrderLine."Line Type"::"Car Request";
                     END;

                     JobOrderLine.INIT;
                     JobOrderLine."Line No." := GetLineNo("No.", RequestType);
                     JobOrderLine.VALIDATE("Line Type", RequestType);
                     JobOrderLine.VALIDATE("Job Order No.", "No.");
                     JobOrderLine.VALIDATE("Date Needed", "Date Requested");

                     CASE RequestType OF
                       JobOrderLine."Line Type"::"Car Request":
                         BEGIN
                           JobOrderLine."Site Name" := 'N/A';
                           JobOrderLine.VALIDATE(Destination, Destination);
                           JobOrderLine.VALIDATE("Time of Departure", Departure);
                           JobOrderLine.VALIDATE("Time of Arrival", Arrival);
                         END;
                       JobOrderLine."Line Type"::"Public Transpo Request":
                         BEGIN
                           JobOrderLine.VALIDATE("Destination From", PointOfOrigin);
                           JobOrderLine.VALIDATE("Destination To", Destination);
                           JobOrderLine."Name of Passengers" := NameOfPassengers;
                         END;
                       JobOrderLine."Line Type"::"Airplane Ticket Request":
                         BEGIN
                           IF Employee.GET("Employee No.") THEN BEGIN
                             JobOrderLine.VALIDATE("First Name", Employee."First Name");
                             JobOrderLine.VALIDATE("Middle Name", Employee."Middle Name");
                             JobOrderLine.VALIDATE("Last Name", Employee."Last Name");
                             JobOrderLine.VALIDATE(Birthdate, Employee."Birth Date");
                             JobOrderLine.VALIDATE(Destination, Destination);
                           END ELSE
                             ERROR(Err005);
                         END;
                     END;

                     JobOrderLine."Date From" := DateFrom;
                     JobOrderLine."Date To" := DateTo;

                     IF JobOrderLine.INSERT(TRUE) THEN
                       IF JobOrderLine."Line Type" = JobOrderLine."Line Type"::"Airplane Ticket Request" THEN BEGIN
                         JobOrderLine.VALIDATE("Date Needed", "Date Requested");
                         JobOrderLine."Date From" := DateFrom;
                         JobOrderLine."Date To" := DateTo;
                         JobOrderLine.MODIFY(TRUE);
                       END;
                   END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General;
                GroupType=Group }

    { 48  ;2   ;Field     ;
                SourceExpr="No.";
                Style=Strong;
                StyleExpr=TRUE }

    { 83  ;2   ;Field     ;
                SourceExpr="Date Requested";
                Visible=False }

    { 91  ;2   ;Field     ;
                SourceExpr="Job Type" }

    { 64  ;2   ;Field     ;
                SourceExpr="Employee No.";
                RowSpan=4 }

    { 9   ;2   ;Field     ;
                SourceExpr="Employee Name";
                Importance=Additional;
                RowSpan=4 }

    { 10  ;2   ;Field     ;
                SourceExpr="Department Code";
                RowSpan=4 }

    { 55  ;2   ;Field     ;
                SourceExpr=Department;
                Importance=Additional }

    { 81  ;2   ;Field     ;
                SourceExpr=Remarks }

    { 274 ;2   ;Field      }

    { 16  ;2   ;Field     ;
                SourceExpr="Customer No.";
                Importance=Additional;
                ShowMandatory=True }

    { 18  ;2   ;Field     ;
                SourceExpr="Customer Name";
                Importance=Additional;
                ShowMandatory=True }

    { 133 ;2   ;Field     ;
                SourceExpr=Status;
                Editable=FALSE }

    { 231 ;1   ;Group     ;
                CaptionML=ENU=General Request;
                Visible=("Job Type" = "Job Type"::"Others");
                GroupType=Group }

    { 255 ;2   ;Field     ;
                CaptionML=ENU=Meeting;
                SourceExpr=Meeting }

    { 4   ;1   ;Group     ;
                CaptionML=ENU=Microsoft Forms Validation;
                Visible=FALSE;
                GroupType=Group }

    { 28  ;2   ;Field     ;
                Name=Email Address;
                CaptionML=ENU=Email Address;
                SourceExpr=EmailAddress }

    { 5   ;2   ;Field     ;
                Name=Type of Request;
                CaptionML=ENU=Type of Request;
                SourceExpr=TypeOfRequest }

    { 6   ;2   ;Field     ;
                Name=Point of Origin;
                CaptionML=ENU=Point of Origin;
                SourceExpr=PointOfOrigin }

    { 15  ;2   ;Field     ;
                Name=Time of Departure;
                CaptionML=ENU=Time Of Departure;
                SourceExpr=TimeOfDeparture }

    { 14  ;2   ;Field     ;
                Name=Destination;
                CaptionML=ENU=Destination;
                SourceExpr=Destination }

    { 17  ;2   ;Field     ;
                Name=Time of Arrival;
                CaptionML=ENU=Time Of Arrival;
                SourceExpr=TimeOfArrival }

    { 22  ;2   ;Field     ;
                Name=Name of Passengers;
                CaptionML=ENU=Name of Passengers;
                SourceExpr=NameOfPassengers }

    { 3   ;2   ;Field     ;
                Name=Project Name;
                CaptionML=ENU=Project Name;
                SourceExpr=ProjectName }

  }
  CODE
  {
    VAR
      UserSetup@1004 : Record 91;
      Employee@1020 : Record 5200;
      ApprovalsMgmt@1016 : Codeunit 1535;
      BlankTxt@1013 : ARRAY [1000000] OF Text;
      DateNeeded@1014 : Date;
      TypeOfRequest@1000 : Text;
      PointOfOrigin@1015 : Text[50];
      Destination@1017 : Text[50];
      NameOfPassengers@1019 : Text[100];
      TimeOfDeparture@1001 : Text;
      TimeOfArrival@1002 : Text;
      Err001@1007 : TextConst 'ENU=%1 must not later than %2.';
      Err002@1006 : TextConst 'ENU=Time of arrival must not later than time of departure.';
      Err003@1005 : TextConst 'ENU=Employee does not exists!';
      EmailAddress@1003 : Text;
      RequestTypeOption@1008 : 'Vehicle Request,Public Transportation Request,Airplane Ticket Request';
      DateFrom@1010 : DateTime;
      DateTo@1009 : DateTime;
      Departure@1012 : Time;
      Arrival@1011 : Time;
      ProjectName@1018 : Text[250];
      Err004@1021 : TextConst 'ENU=UPN must have a value.';
      Err005@1022 : TextConst 'ENU=Employee not found.';

    LOCAL PROCEDURE Subtract8hrs@68(VAR DateTime@1000 : DateTime) : DateTime;
    VAR
      NewDateTime@1001 : DateTime;
      NewDate@1002 : Date;
      NewTime@1003 : Time;
    BEGIN
      IF  DateTime = 0DT THEN
        EXIT(NewDateTime);

      NewDate := DT2DATE(DateTime);
      NewTime := DT2TIME(DateTime);

      NewTime := NewTime - 8 * 60 * 60 * 1000;

      IF  NewTime > DT2TIME(DateTime) THEN BEGIN
        NewTime := NewTime + 24 * 60 * 60 * 1000;
        NewDate := CALCDATE('<-1D>', NewDate);
      END;

      NewDateTime := CREATEDATETIME(NewDate, NewTime);
      EXIT(NewDateTime);
    END;

    LOCAL PROCEDURE ValidateDate@179();
    BEGIN
      EVALUATE(Departure, TimeOfDeparture);
      EVALUATE(Arrival, TimeOfArrival);
      DateFrom := CREATEDATETIME("Date Requested", Departure);
      DateTo := CREATEDATETIME("Date Requested", Arrival);

      IF DateTo < DateFrom THEN
        ERROR(Err002);
    END;

    LOCAL PROCEDURE GetLineNo@20(JobOrderNo@1000 : Code[20];LineType@1001 : 'Car Request,Public Transpo Request,Airplane Ticket Request') : Integer;
    VAR
      JobOrderLine@1003 : Record 50551;
      LineNo@1002 : Integer;
    BEGIN
      LineNo := 10000;
      JobOrderLine.RESET;
      JobOrderLine.SETRANGE("Job Order No.", JobOrderNo);
      JobOrderLine.SETRANGE("Line Type", LineType);
      IF JobOrderLine.FINDLAST THEN
        LineNo += JobOrderLine."Line No.";
      EXIT(LineNo);
    END;

    BEGIN
    {
      !! Documentation Page 50048 Web Service Job Order

      5:15 PM Wednesday, August  21, 2024
        Add global variable ProjectName.

      1:18 PM Wednesday, August 28, 2024
        Add script modify Job order Line, for Airplane Ticket Request.
        Add function GetLineNo.
    }
    END.
  }
}

OBJECT Page 50063 Job Order Meeting
{
  OBJECT-PROPERTIES
  {
    Date=06/27/18;
    Time=[ 4:49:07 AM];
    Modified=Yes;
    Version List=NAVOC1.00.02.48;
  }
  PROPERTIES
  {
    CaptionML=ENU=Meeting;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table50012;
    DelayedInsert=Yes;
    PopulateAllFields=Yes;
    PageType=Card;
    OnNewRecord=VAR
                  TimeSelector@1001 : Record 50902;
                BEGIN
                  InitPageValues;
                  "Document Date" := TODAY;

                  TimeSelector.SETFILTER(Time, '>%1', TIME);
                  IF TimeSelector.FINDFIRST THEN
                    "Time of Departure" := TimeSelector.Time
                  ELSE
                    "Time of Departure" := TIME;
                  "Time of Arrival" := TimeSelector.Time + 1800000;

                  VALIDATE(Meeting, TRUE);
                  "Job Type" := "Job Type"::Others;
                END;

    OnInsertRecord=VAR
                     Txt01@1001 : TextConst 'ENU=%1 must have a value. Current value is blank.';
                   BEGIN
                     IF Remarks = '' THEN
                       ERROR(Txt01, FIELDNAME(Activity));
                     TESTFIELD("Point of Origin");
                     TESTFIELD("Time of Departure");
                     TESTFIELD(Destination);
                     TESTFIELD("Time of Arrival");
                   END;

    OnQueryClosePage=VAR
                       JobOrderLine@1000 : Record 50551;
                     BEGIN
                       IF (CloseAction = ACTION::OK) AND ("No." <> '') THEN BEGIN

                         JobOrderLine.INIT;
                         JobOrderLine.VALIDATE("Job Order No.", "No.");
                         JobOrderLine.VALIDATE("Line Type", JobOrderLine."Line Type"::"Car Request");
                         JobOrderLine."Line No." := GetLineNo("No.", JobOrderLine."Line Type"::"Car Request");
                         JobOrderLine.VALIDATE("Date Needed", "Date Requested");
                         JobOrderLine."Site Name" := 'N/A';
                         JobOrderLine.VALIDATE(Destination, Destination);
                         JobOrderLine.VALIDATE("Time of Departure", "Time of Departure");
                         JobOrderLine.VALIDATE("Time of Arrival", "Time of Arrival");

                         JobOrderLine.VALIDATE("Date From", CREATEDATETIME("Document Date", "Time of Departure"));
                         JobOrderLine.VALIDATE("Date To", CREATEDATETIME("Document Date", "Time of Arrival"));
                         JobOrderLine.INSERT(TRUE);

                         IF "Name of Passengers" <> '' THEN BEGIN

                           JobOrderLine.INIT;
                           JobOrderLine.VALIDATE("Job Order No.", "No.");
                           JobOrderLine.VALIDATE("Line Type", JobOrderLine."Line Type"::"Public Transpo Request");
                           JobOrderLine."Line No." := GetLineNo("No.", JobOrderLine."Line Type"::"Public Transpo Request");
                           JobOrderLine.VALIDATE("Date Needed", "Date Requested");
                           JobOrderLine."Site Name" := 'N/A';
                           JobOrderLine.VALIDATE("Destination From", "Point of Origin");
                           JobOrderLine.VALIDATE("Destination To", Destination);
                           JobOrderLine.VALIDATE("Date From", CREATEDATETIME("Document Date", "Time of Departure"));
                           JobOrderLine.VALIDATE("Date To", CREATEDATETIME("Document Date", "Time of Arrival"));
                           JobOrderLine.VALIDATE("Name of Passengers", "Name of Passengers");
                           JobOrderLine.INSERT(TRUE);
                         END;
                         IF ApprovalsMgmt.CheckJOApprovalsWorkflowEnabled(Rec) THEN
                           ApprovalsMgmt.OnSendJOForApproval(Rec);

                       END;
                     END;

    OnAfterGetCurrRecord=VAR
                           JobOrderLine@1000 : Record 50551;
                         BEGIN
                         END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                CaptionML=ENU=General;
                GroupType=Group }

    { 8   ;2   ;Group     ;
                GroupType=Group }

    { 3   ;3   ;Field     ;
                SourceExpr="Document Date";
                ShowMandatory=TRUE }

    { 10  ;3   ;Field     ;
                SourceExpr="Customer Name";
                TableRelation=Customer.Name WHERE (Customer Type=CONST(Customer));
                OnValidate=VAR
                             Customer@1000 : Record 18;
                           BEGIN
                             IF "Customer Name" = '' THEN BEGIN
                               CLEAR("Customer No.");
                               CLEAR(Destination);
                               EXIT;
                             END;
                             IF "Customer Name" <> xRec."Customer Name" THEN BEGIN
                               Customer.SETRANGE(Name, "Customer Name");
                               IF Customer.FINDFIRST THEN BEGIN
                                 "Customer No." := Customer."No.";
                                 Destination := Customer.Address;
                               END;
                             END;

                             "Customer Name" := UPPERCASE("Customer Name");
                           END;
                            }

    { 19  ;3   ;Field     ;
                CaptionML=ENU=Activity;
                SourceExpr=Remarks }

    { 4   ;3   ;Field     ;
                SourceExpr="Point of Origin";
                ShowMandatory=TRUE }

    { 9   ;3   ;Field     ;
                SourceExpr="Time of Departure";
                ShowMandatory=TRUE }

    { 6   ;3   ;Field     ;
                SourceExpr=Destination;
                ShowMandatory=TRUE }

    { 7   ;3   ;Field     ;
                SourceExpr="Time of Arrival";
                TableRelation="Time Selector";
                ShowMandatory=TRUE }

    { 5   ;3   ;Field     ;
                SourceExpr="Name of Passengers" }

  }
  CODE
  {
    VAR
      ApprovalsMgmt@1006 : Codeunit 1535;
      Err002@1009 : TextConst 'ENU=Time of arrival must not later than time of departure.';

    LOCAL PROCEDURE GetLineNo@20(JobOrderNo@1000 : Code[20];LineType@1001 : 'Car Request,Public Transpo Request,Airplane Ticket Request') : Integer;
    VAR
      JobOrderLine@1003 : Record 50551;
      LineNo@1002 : Integer;
    BEGIN
      LineNo := 10000;
      JobOrderLine.RESET;
      JobOrderLine.SETRANGE("Job Order No.", JobOrderNo);
      JobOrderLine.SETRANGE("Line Type", LineType);
      IF JobOrderLine.FINDLAST THEN
        LineNo += JobOrderLine."Line No.";
      EXIT(LineNo);
    END;

    BEGIN
    {
      !! Documentation Page 50063 Job Order Meeting

      11:00 AM Friday, August 2, 2024
        Modified OnQueryClosePage fucntion, add a local function to get line number for each line type to correct job order line number.
        Change the syntax initial value of Time of Departure and Time or Arrival.
    }
    END.
  }
}

OBJECT Page 50086 Job Orders
{
  OBJECT-PROPERTIES
  {
    Date=09/12/18;
    Time=[ 7:22:05 PM];
    Modified=Yes;
    Version List=NAVOC1.00.02.48;
  }
  PROPERTIES
  {
    Editable=No;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table50012;
    PageType=List;
    CardPageID=Job Order Document;
    OnAfterGetCurrRecord=BEGIN
                           CurrPage.IncomingDocAttachFactBox.PAGE.LoadDataFromRecord(Rec);
                         END;

    ActionList=ACTIONS
    {
      { 26      ;0   ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 25      ;1   ;ActionGroup;
                      CaptionML=ENU=Navigate;
                      Image=Invoices }
      { 24      ;2   ;Action    ;
                      CaptionML=ENU=Approvals;
                      Image=Approvals;
                      OnAction=VAR
                                 ApprovalEntries@1001 : Page 658;
                               BEGIN
                                 ApprovalEntries.Setfilters(DATABASE::"Job Order",6,"No.");
                                 ApprovalEntries.RUN;
                               END;
                                }
      { 14      ;    ;ActionContainer;
                      ActionContainerType=Reports }
      { 12      ;1   ;Action    ;
                      Name=Print;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Report;
                      PromotedCategory=Report;
                      OnAction=BEGIN
                                 //ReleaseMgmt.RFTSPerformManualRelease(Rec);
                                 //REPORT.RUNMODAL(50012,GUIALLOWED,FALSE,Rec)
                                 PrintDocument;
                                 //SalesHeader.SETFILTER(SalesHeader."No.","No.");
                                 //SalesLine.SETRANGE("Document Type", SalesLine."Document Type"::Invoice);
                                 //SalesLine.SETFILTER("Document No.",Rec."No.");
                                 //IF SalesLine.COUNT > 12 THEN
                                   //ERROR(SIReportError);

                                 //REPORT.RUN(50113,TRUE,TRUE,SalesHeader); //50113 - Sales Invoice (Goods) BIR
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                Width=15;
                SourceExpr="No.";
                Style=Strong;
                StyleExpr=TRUE }

    { 19  ;2   ;Field     ;
                SourceExpr="Job Type" }

    { 20  ;2   ;Field     ;
                SourceExpr="Project Name" }

    { 13  ;2   ;Field     ;
                SourceExpr="P.O No." }

    { 5   ;2   ;Field     ;
                SourceExpr="Employee No." }

    { 6   ;2   ;Field     ;
                SourceExpr="Employee Name" }

    { 7   ;2   ;Field     ;
                SourceExpr="Department Code" }

    { 21  ;2   ;Field     ;
                SourceExpr=Department }

    { 8   ;2   ;Field     ;
                SourceExpr="Date Requested" }

    { 10  ;2   ;Field     ;
                SourceExpr="Customer No." }

    { 11  ;2   ;Field     ;
                SourceExpr="Customer Name" }

    { 18  ;2   ;Field     ;
                SourceExpr=Status }

    { 4   ;0   ;Container ;
                ContainerType=FactBoxArea }

    { 27  ;1   ;Part      ;
                Name=IncomingDocAttachFactBox;
                PagePartID=Page193;
                PartType=Page;
                ShowFilter=No }

    { 16  ;1   ;Part      ;
                PartType=System;
                SystemPartID=Notes }

    { 17  ;1   ;Part      ;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {
    VAR
      UserSetup@1000 : Record 91;
      ApprovalEntries@1001 : Page 658;

    BEGIN
    END.
  }
}

OBJECT Page 50087 Job Order Document
{
  OBJECT-PROPERTIES
  {
    Date=06/27/18;
    Time=[ 1:22:53 AM];
    Modified=Yes;
    Version List=NAVOC1.00.02.48;
  }
  PROPERTIES
  {
    Editable=No;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table50012;
    PageType=Document;
    PromotedActionCategoriesML=ENU=New,Process,Report,Approve,Release,Posting,Prepare,Details,Request Approval,General;
    OnOpenPage=BEGIN
                 DocNoVisibility;
               END;

    OnAfterGetRecord=BEGIN
                       SetControlVisibility;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           CurrPage.IncomingDocAttachFactBox.PAGE.LoadDataFromRecord(Rec);
                         END;

    ActionList=ACTIONS
    {
      { 95      ;0   ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 94      ;1   ;Action    ;
                      Name=ChangeLogs;
                      CaptionML=ENU=Change Logs;
                      PromotedIsBig=Yes;
                      Image=ChangeLog;
                      OnAction=VAR
                                 ChangeLogPage@1000 : Page 595;
                                 TableIds@1001 : Text;
                               BEGIN
                                 TableIds := FORMAT(DATABASE::"Job Order");
                                 ChangeLogPage.SetPageFilter(TableIds, "No.");
                                 ChangeLogPage.RUN;
                               END;
                                }
      { 93      ;1   ;Action    ;
                      Name=Approvals;
                      CaptionML=ENU=Approvals;
                      Image=Approvals;
                      OnAction=VAR
                                 ApprovalEntries@1001 : Page 658;
                               BEGIN
                                 ApprovalEntries.Setfilters(DATABASE::"Job Order",6,"No.");
                                 ApprovalEntries.RUN;
                               END;
                                }
      { 87      ;1   ;ActionGroup;
                      CaptionML=ENU=General;
                      ActionContainerType=NewDocumentItems }
      { 86      ;2   ;Action    ;
                      Name=INTP;
                      RunObject=Page 50041;
                      RunPageLink=No.=FIELD(INTP No.);
                      Promoted=Yes;
                      Enabled=("INTP No." <> '');
                      PromotedIsBig=Yes;
                      Image=Document;
                      PromotedCategory=Category10 }
      { 85      ;2   ;Action    ;
                      Name=RFTS;
                      CaptionML=ENU=RTPS;
                      RunObject=Page 50010;
                      RunPageLink=No.=FIELD(RTPS No.);
                      Promoted=Yes;
                      Enabled=("RTPS No." <> '');
                      PromotedIsBig=Yes;
                      Image=Document;
                      PromotedCategory=Category10 }
      { 84      ;2   ;Action    ;
                      Name=Job;
                      RunObject=Page 88;
                      RunPageLink=No.=FIELD(Job No.);
                      Promoted=Yes;
                      Enabled=("Job No." <> '');
                      PromotedIsBig=Yes;
                      Image=Task;
                      PromotedCategory=Category10 }
      { 83      ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 82      ;1   ;ActionGroup;
                      ActionContainerType=NewDocumentItems }
      { 81      ;2   ;ActionGroup;
                      Name=IncomingDocument;
                      CaptionML=ENU=Incoming Document;
                      ActionContainerType=NewDocumentItems;
                      Image=Documents }
      { 80      ;3   ;Action    ;
                      Name=IncomingDocCard;
                      CaptionML=ENU=View Incoming Document;
                      ToolTipML=;
                      Enabled=HasIncomingDocument;
                      Image=ViewOrder;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 IncomingDocument.ShowCardFromEntryNoUsingMyDocs("Incoming Document Entry No.");
                               END;
                                }
      { 79      ;3   ;Action    ;
                      Name=SelectIncomingDoc;
                      AccessByPermission=TableData 130=R;
                      CaptionML=ENU=Select Incoming Document;
                      ToolTipML=;
                      Image=SelectLineToApply;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 VALIDATE("Incoming Document Entry No.",IncomingDocument.SelectIncomingDocumentFromMyDocuments("Incoming Document Entry No."));
                               END;
                                }
      { 78      ;3   ;Action    ;
                      Name=IncomingDocAttachFile;
                      Ellipsis=Yes;
                      CaptionML=ENU=Create Incoming Document from File;
                      ToolTipML=;
                      Enabled=NOT HasIncomingDocument;
                      Image=Attach;
                      OnAction=VAR
                                 IncomingDocumentAttachment@1000 : Record 133;
                               BEGIN
                                 IncomingDocumentAttachment.NewAttachmentFromCustomDocument("Incoming Document Entry No.", DATABASE::"Job Order", "No.");
                               END;
                                }
      { 71      ;3   ;Action    ;
                      Name=RemoveIncomingDoc;
                      CaptionML=ENU=Remove Incoming Document;
                      ToolTipML=;
                      Enabled=HasIncomingDocument;
                      Image=RemoveLine;
                      OnAction=BEGIN
                                 "Incoming Document Entry No." := 0;
                               END;
                                }
      { 70      ;1   ;ActionGroup;
                      CaptionML=ENU=Approval }
      { 67      ;2   ;Action    ;
                      Name=Approve;
                      CaptionML=ENU=Approve;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=Yes;
                      Image=Approve;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.ApproveRecordApprovalRequest(RECORDID);
                               END;
                                }
      { 61      ;2   ;Action    ;
                      Name=Reject;
                      CaptionML=ENU=Reject;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=Yes;
                      Image=Reject;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.RejectRecordApprovalRequest(RECORDID);
                               END;
                                }
      { 60      ;2   ;Action    ;
                      Name=Delegate;
                      CaptionML=ENU=Delegate;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      Image=Delegate;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.DelegateRecordApprovalRequest(RECORDID);
                               END;
                                }
      { 58      ;2   ;Action    ;
                      Name=Comment;
                      CaptionML=ENU=Comments;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      Image=ViewComments;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.GetApprovalComment(Rec);
                               END;
                                }
      { 14      ;0   ;ActionContainer;
                      ActionContainerType=Reports }
      { 17      ;1   ;Action    ;
                      Name=Print;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Report;
                      PromotedCategory=Report;
                      OnAction=BEGIN
                                 PrintDocument;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 90  ;0   ;Container ;
                ContainerType=ContentArea }

    { 89  ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General Information;
                GroupType=Group }

    { 88  ;2   ;Field     ;
                SourceExpr="No.";
                Visible=DocNoVisible;
                Style=Strong;
                StyleExpr=TRUE;
                OnAssistEdit=BEGIN
                               IF AssistEdit THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 77  ;2   ;Field     ;
                SourceExpr="Job Type" }

    { 76  ;2   ;Field     ;
                SourceExpr="INTP No." }

    { 75  ;2   ;Field     ;
                SourceExpr="Job No." }

    { 74  ;2   ;Field     ;
                SourceExpr="RTPS No." }

    { 73  ;2   ;Group     ;
                GroupType=GridLayout }

    { 72  ;3   ;Group     ;
                GroupType=Group }

    { 69  ;4   ;Field     ;
                SourceExpr="Project Name";
                MultiLine=Yes;
                RowSpan=2;
                ShowMandatory=True }

    { 68  ;2   ;Group     ;
                Visible=False;
                GroupType=GridLayout }

    { 66  ;3   ;Group     ;
                GroupType=Group }

    { 65  ;4   ;Field     ;
                SourceExpr="Project Name 2";
                Importance=Additional;
                MultiLine=Yes;
                RowSpan=2 }

    { 64  ;2   ;Field     ;
                SourceExpr="P.O No.";
                RowSpan=4 }

    { 63  ;2   ;Field     ;
                SourceExpr="Service Report No.";
                Style=Strong;
                StyleExpr=TRUE }

    { 62  ;2   ;Field     ;
                SourceExpr="Responsibility Center";
                Visible=False }

    { 56  ;2   ;Field     ;
                SourceExpr="Employee No.";
                RowSpan=4 }

    { 55  ;2   ;Field     ;
                SourceExpr="Employee Name";
                RowSpan=4 }

    { 54  ;2   ;Field     ;
                SourceExpr="Department Code";
                RowSpan=4 }

    { 53  ;2   ;Field     ;
                SourceExpr=Department }

    { 52  ;2   ;Field     ;
                SourceExpr="Date Requested";
                RowSpan=4 }

    { 51  ;2   ;Field     ;
                SourceExpr="Customer No.";
                Importance=Additional }

    { 50  ;2   ;Field     ;
                SourceExpr="Customer Name";
                Importance=Additional }

    { 49  ;2   ;Group     ;
                GroupType=GridLayout }

    { 48  ;3   ;Group     ;
                GroupType=Group }

    { 47  ;4   ;Field     ;
                CaptionML=ENU=Remarks;
                SourceExpr=Remarks;
                MultiLine=Yes;
                RowSpan=2 }

    { 46  ;2   ;Field     ;
                SourceExpr="Other Activities";
                RowSpan=3 }

    { 45  ;2   ;Field     ;
                SourceExpr="Sales Related";
                RowSpan=3;
                ShowCaption=Yes }

    { 44  ;2   ;Group     ;
                CaptionML=ENU=Type Of Service;
                GroupType=Group;
                Layout=Rows }

    { 43  ;3   ;Field     ;
                SourceExpr="Ordinary P.O." }

    { 42  ;3   ;Field     ;
                SourceExpr=TurnKey }

    { 41  ;2   ;Group     ;
                CaptionML=ENU=Site Survey;
                GroupType=Group;
                Layout=Rows }

    { 40  ;3   ;Field     ;
                SourceExpr="Site Survey" }

    { 39  ;3   ;Field     ;
                SourceExpr="Trial/POC" }

    { 38  ;3   ;Field     ;
                SourceExpr=OSP }

    { 37  ;3   ;Field     ;
                SourceExpr=Rectification }

    { 36  ;3   ;Field     ;
                SourceExpr="Final Acceptance" }

    { 35  ;2   ;Group     ;
                CaptionML=ENU=Installation and Commissioning;
                GroupType=Group;
                Layout=Rows }

    { 34  ;3   ;Field     ;
                SourceExpr="Installation and Commissioning";
                Style=Ambiguous;
                StyleExpr=TRUE }

    { 33  ;3   ;Field     ;
                SourceExpr="InsComm. 1st Trip" }

    { 32  ;3   ;Field     ;
                SourceExpr="InsComm. 2nd Trip" }

    { 31  ;3   ;Field     ;
                SourceExpr="InsComm. 3rd Trip" }

    { 29  ;2   ;Group     ;
                CaptionML=ENU=Project Purpose;
                GroupType=Group;
                Layout=Rows }

    { 30  ;3   ;Field     ;
                SourceExpr=Troubleshooting }

    { 28  ;3   ;Field     ;
                SourceExpr="Trbltng. Under Warranty" }

    { 27  ;3   ;Field     ;
                SourceExpr="Trbltng. Out of Warranty" }

    { 26  ;3   ;Field     ;
                CaptionML=ENU=1st Trip;
                SourceExpr="Out of Wrrnty. 1st Trip" }

    { 25  ;3   ;Field     ;
                CaptionML=ENU=2nd Trip;
                SourceExpr="Out of Wrrnty. 2nd Trip" }

    { 24  ;2   ;Group     ;
                CaptionML=ENU=Quality Audit;
                GroupType=Group;
                Layout=Rows }

    { 23  ;3   ;Field     ;
                SourceExpr="On-Site Audit" }

    { 22  ;3   ;Field     ;
                CaptionML=ENU=1st Trip;
                SourceExpr="On-Site Aud. 1st Trip" }

    { 21  ;3   ;Field     ;
                CaptionML=ENU=2nd Trip;
                SourceExpr="On-Site Aud. 2nd Trip" }

    { 20  ;3   ;Field     ;
                CaptionML=ENU=3rd Trip;
                SourceExpr="On-Site Aud. 3rd Trip" }

    { 19  ;2   ;Group     ;
                CaptionML=ENU=Meeting;
                GroupType=Group }

    { 18  ;3   ;Field     ;
                SourceExpr=Meeting }

    { 16  ;3   ;Field     ;
                SourceExpr="Product Presentation" }

    { 15  ;3   ;Field     ;
                SourceExpr="With P.O" }

    { 13  ;3   ;Field     ;
                SourceExpr="Without P.O" }

    { 12  ;2   ;Group     ;
                CaptionML=ENU=Others;
                GroupType=Group }

    { 11  ;3   ;Field     ;
                SourceExpr=Others;
                OnValidate=BEGIN
                             IF Others = FALSE THEN
                               Activity := '';
                           END;
                            }

    { 10  ;3   ;Field     ;
                SourceExpr=Activity;
                Enabled=Others }

    { 9   ;2   ;Field     ;
                SourceExpr=Status;
                Editable=FALSE }

    { 8   ;1   ;Part      ;
                Name=Vehicle Request;
                CaptionML=ENU=Vehicle Request;
                SubPageView=SORTING(Line No.,Line Type,Job Order No.);
                SubPageLink=Job Order No.=FIELD(No.),
                            Line Type=CONST(Car Request);
                PagePartID=Page50070;
                PartType=Page;
                UpdatePropagation=Both }

    { 7   ;1   ;Part      ;
                Name=Public Transportation Request;
                CaptionML=ENU=Public Transportation Request;
                SubPageLink=Job Order No.=FIELD(No.);
                PagePartID=Page50071;
                PartType=Page }

    { 6   ;1   ;Part      ;
                Name=JO Airplane Ticket;
                CaptionML=ENU=Airplane Ticket Request;
                SubPageLink=Job Order No.=FIELD(No.);
                PagePartID=Page50072;
                PartType=Page }

    { 5   ;1   ;Part      ;
                Name=ApprovalEntry;
                CaptionML=ENU=Approver;
                SubPageView=SORTING(Entry No.)
                            ORDER(Descending);
                SubPageLink=Document No.=FIELD(No.),
                            Document Type=FILTER(' '),
                            Table ID=CONST(50012);
                PagePartID=Page50088;
                Editable=False;
                PartType=Page;
                ShowFilter=No }

    { 4   ;    ;Container ;
                ContainerType=FactBoxArea }

    { 3   ;1   ;Part      ;
                Name=IncomingDocAttachFactBox;
                PagePartID=Page193;
                PartType=Page;
                ShowFilter=No }

    { 2   ;1   ;Part      ;
                PartType=System;
                SystemPartID=Notes }

    { 1   ;1   ;Part      ;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {
    VAR
      CustomSetup@1005 : Record 50001;
      OpenApprovalEntriesExistForCurrUser@1002 : Boolean;
      OpenApprovalEntriesExist@1001 : Boolean;
      DocNoVisible@1004 : Boolean;
      ReleaseMgmt@1000 : Codeunit 50551;
      ApprovalEntries@1003 : Page 658;
      HasIncomingDocument@1006 : Boolean;
      INTP@1007 : Record 50040;
      Job@1008 : Record 167;

    LOCAL PROCEDURE SetControlVisibility@7();
    VAR
      ApprovalsMgmt@1002 : Codeunit 1535;
    BEGIN
      HasIncomingDocument := "Incoming Document Entry No." <> 0;
      OpenApprovalEntriesExistForCurrUser := ApprovalsMgmt.HasOpenApprovalEntriesForCurrentUser(RECORDID);
      OpenApprovalEntriesExist := ApprovalsMgmt.HasOpenApprovalEntries(RECORDID);
    END;

    LOCAL PROCEDURE DocNoVisibility@1();
    VAR
      NoSeries@1000 : Record 308;
    BEGIN
      CustomSetup.GET;
      IF CustomSetup."Job Order Nos." <> '' THEN BEGIN
        IF NoSeries.GET(CustomSetup."Job Order Nos.") AND (NoSeries."Manual Nos." = FALSE) THEN BEGIN
          DocNoVisible := FALSE;
        END ELSE BEGIN
          DocNoVisible := TRUE;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

