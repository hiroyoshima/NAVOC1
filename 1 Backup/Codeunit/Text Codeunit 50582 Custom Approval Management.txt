OBJECT Codeunit 50582 Custom Approval Management
{
  OBJECT-PROPERTIES
  {
    Date=08/16/18;
    Time=11:11:28 AM;
    Modified=Yes;
    Version List=NAVOC1.00.02,NAVOC1.00.05;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NoWorkflowEnabledErr@1000 : TextConst 'ENU=This record is not supported by related approval workflow.';
      CustomWorkflowEvents@1001 : Codeunit 50580;
      WorkflowEventHandling@1003 : Codeunit 1520;
      WorkflowManagement@1002 : Codeunit 1501;

    [Integration]
    PROCEDURE OnSendTicketForApproval@145(VAR Ticket@1000 : Record 50562);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendSDRForApproval@3(VAR SDR@1000 : Record 50555);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendRFEForApproval@13(VAR RFE@1000 : Record 50650);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelTicketApprovalRequest@146(VAR Ticket@1000 : Record 50562);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelSDRApprovalRequest@5(VAR SDR@1000 : Record 50555);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelRFEApprovalRequest@15(VAR RFE@1000 : Record 50650);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnStartTicket@1(VAR Ticket@1000 : Record 50562);
    BEGIN
    END;

    PROCEDURE IsTicketApprovalsWorkflowEnabled@144(VAR Ticket@1002 : Record 50562) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(Ticket,CustomWorkflowEvents.RunWorkflowOnSendTicketApprovalCode));
    END;

    PROCEDURE IsSDRApprovalsWorkflowEnabled@9(VAR SDR@1002 : Record 50555) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(SDR,CustomWorkflowEvents.RunWorkflowOnSendSDRApprovalCode));
    END;

    PROCEDURE IsRFEApprovalsWorkflowEnabled@17(VAR RFE@1002 : Record 50650) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(RFE,CustomWorkflowEvents.RunWorkflowOnSendRFEApprovalCode));
    END;

    PROCEDURE CheckTicketApprovalsWorkflowEnabled@151(VAR Ticket@1002 : Record 50562) : Boolean;
    BEGIN
      IF NOT IsTicketApprovalsWorkflowEnabled(Ticket) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckSDRApprovalsWorkflowEnabled@10(VAR SDR@1002 : Record 50555) : Boolean;
    BEGIN
       IF NOT IsSDRApprovalsWorkflowEnabled(SDR) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckRFEApprovalsWorkflowEnabled@16(VAR RFE@1002 : Record 50650) : Boolean;
    BEGIN
       IF NOT IsRFEApprovalsWorkflowEnabled(RFE) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE IsTicketFieldChangeWorkflowEnabled@7(VAR Ticket@1002 : Record 50562) : Boolean;
    BEGIN
       EXIT(WorkflowManagement.CanExecuteWorkflow(Ticket,CustomWorkflowEvents.RunWorkflowOnTicketFieldChangedCode));
    END;

    PROCEDURE IsTicketAgingWorkflowEnabled@2(VAR Ticket@1002 : Record 50562) : Boolean;
    BEGIN
       EXIT(WorkflowManagement.CanExecuteWorkflow(Ticket,CustomWorkflowEvents.RunWorkflowOnTicketAgingNotificationCode));
    END;

    PROCEDURE IsSDRFieldChangeWorkflowEnabled@8(VAR SDR@1002 : Record 50555) : Boolean;
    BEGIN
       EXIT(WorkflowManagement.CanExecuteWorkflow(SDR,CustomWorkflowEvents.RunWorkflowOnSDRFieldChangedCode));
    END;

    PROCEDURE IsSDRAgingWorkflowEnabled@4(VAR SDR@1002 : Record 50555) : Boolean;
    BEGIN
       EXIT(WorkflowManagement.CanExecuteWorkflow(SDR,CustomWorkflowEvents.RunWorkflowOnSDRAgingNotificationCode));
    END;

    PROCEDURE IsTaskFieldChangeWorkflowEnabled@11(VAR Task@1002 : Record 50556) : Boolean;
    BEGIN
       EXIT(WorkflowManagement.CanExecuteWorkflow(Task,CustomWorkflowEvents.RunWorkflowOnTaskFieldChangedCode));
    END;

    PROCEDURE IsTaskAgingWorkflowEnabled@6(VAR Task@1002 : Record 50556) : Boolean;
    BEGIN
       EXIT(WorkflowManagement.CanExecuteWorkflow(Task,CustomWorkflowEvents.RunWorkflowOnTaskAgingNotificationCode));
    END;

    PROCEDURE CustomPopulateApprovalEntryArgument@80(RecRef@1000 : RecordRef;VAR ApprovalEntryArgument@1001 : Record 454);
    VAR
      RTPSDocument@1005 : Record 50010;
      INTP@1004 : Record 50040;
      Job@1003 : Record 167;
      Ticket@1002 : Record 50562;
      RFPur@1006 : Record 50030;
      DDR@1007 : Record 50005;
      JobOrder@1008 : Record 50012;
      RequestForQuotation@1009 : Record 50013;
      CashAdvanceHdr@1010 : Record 50017;
      TERFHeader@1011 : Record 50034;
      SDR@1012 : Record 50555;
      RFE@1014 : Record 50650;
      ApprovalsMgmt@1013 : Codeunit 1535;
    BEGIN
      { ******************
      Applied to Codeunit 1535 Approvals Mgmt. > PopulateApprovalEntryArgument function
      To change the document number of approval entry argument based from record reference
      ApprovalsMgmt.PopulateApprovalEntryArgument
      ****************** }
      CASE RecRef.NUMBER OF
        DATABASE::"TERF Header":
          BEGIN
            RecRef.SETTABLE(TERFHeader);
            ApprovalEntryArgument."Document No." := TERFHeader."No.";
            IF TERFHeader."Document Type" = TERFHeader."Document Type"::Withdrawal THEN
              ApprovalEntryArgument."Document Type" := 7;
            IF TERFHeader."Document Type" = TERFHeader."Document Type"::TERF THEN
              ApprovalEntryArgument."Document Type" := 8;
          END;
          DATABASE::"Cash Advance Header":
            BEGIN
              RecRef.SETTABLE( CashAdvanceHdr );
              ApprovalEntryArgument."Document No." := CashAdvanceHdr."No.";
            END;
          DATABASE::"Request For Quotation":
            BEGIN
              RecRef.SETTABLE( RequestForQuotation );
              ApprovalEntryArgument."Document No." := RequestForQuotation."No.";
            END;
          DATABASE::"Job Order":
            BEGIN
              RecRef.SETTABLE(JobOrder);
              ApprovalEntryArgument."Document No." := JobOrder."No.";
            END;
          DATABASE::"Daily Deployment Report":
            BEGIN
              RecRef.SETTABLE(DDR);
              ApprovalEntryArgument."Document No." := DDR."No.";
            END;
          DATABASE::"Request for Purchase":
            BEGIN
              RecRef.SETTABLE(RFPur);
              ApprovalEntryArgument."Document No." := RFPur."No.";
            END;
          DATABASE::"RTPS Document":
            BEGIN
              RecRef.SETTABLE(RTPSDocument);
              ApprovalEntryArgument."Document No." := RTPSDocument."No.";
            END;
        DATABASE::"Internal Notice to Proceed":
          BEGIN
            RecRef.SETTABLE(INTP);
            ApprovalEntryArgument."Document No." := INTP."No.";
          END;
        DATABASE::Job:
          BEGIN
            RecRef.SETTABLE(Job);
            ApprovalEntryArgument."Document No." := Job."No.";
          END;
        DATABASE::Ticket:
          BEGIN
            RecRef.SETTABLE(Ticket);
            ApprovalEntryArgument."Document No." := Ticket."No.";
          END;
        DATABASE::"Software Development Request":
          BEGIN
            RecRef.SETTABLE(SDR);
            ApprovalEntryArgument."Document No." := SDR."No.";
          END;
        DATABASE::"Request for Exception":
          BEGIN
            RecRef.SETTABLE(RFE);
            ApprovalEntryArgument."Document No." := RFE."No.";
          END;
      END;
    END;

    PROCEDURE CreateApprovalEntryNotification@50(ApprovalEntry@1000 : Record 454;WorkflowStepInstance@1001 : Record 1504) : Boolean;
    VAR
      WorkflowStepArgument@1002 : Record 1523;
      NotificationEntry@1003 : Record 1511;
      SalesHeader@1005 : Record 36;
      PurchaseHeader@1007 : Record 38;
      NotifTemplate@1006 : Record 1510;
      INTP@1013 : Record 50040;
      JobOrder@1016 : Record 50012;
      RFQ@1022 : Record 50013;
      Job@1018 : Record 167;
      Tickets@1023 : Record 50562;
      TaskerSMSLogs@1026 : Record 51002;
      JobOrderReportPrinter@1017 : Report 50012;
      INTPReportPrinter@1015 : Report 50041;
      RFQReport@1019 : Report 50013;
      SalesHeaderReportPrinter@1021 : Codeunit 228;
      PurchDocPrinter@1020 : Codeunit 229;
      UserSetupMgt@1008 : Codeunit 5700;
      FileManagement@1009 : Codeunit 419;
      DataTypeManagement@1011 : Codeunit 701;
      CustomNotifEntryMgmt@1024 : Codeunit 50583;
      ApprovalsMgmt@1025 : Codeunit 1535;
      FilePath@1010 : Text;
      FileName@1014 : Text;
      RecRef@1012 : RecordRef;
      RecRef2@1004 : RecordRef;
    BEGIN
      { ******************
      Applied to Codeunit 1535 Approvals Mgmt. > CreateApprovalEntryNotification function
      To create a notification for the approval of documents, sending and approval.
      ApprovalsMgmt.CreateApprovalEntryNotification
      ****************** }

      IF NOT WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        EXIT(TRUE);

      IF NOT RecRef.GET(ApprovalEntry."Record ID to Approve") THEN
        EXIT(TRUE);

      IF WorkflowStepArgument."Notification User ID" = '' THEN
        WorkflowStepArgument.VALIDATE("Notification User ID",ApprovalEntry."Approver ID");

      // Log SMS Notification
      TaskerSMSLogs.LogApprovalSMSNotification(ApprovalEntry);

      ApprovalEntry.RESET;
      CASE ApprovalEntry."Table ID" OF
        DATABASE::Item:
          CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-Item",WorkflowStepArgument."Notification User ID",
            ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),'','');
        DATABASE::Vendor:
          CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-Vendor",WorkflowStepArgument."Notification User ID",
            ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),'','');
        DATABASE::Customer:
          CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-Customer",WorkflowStepArgument."Notification User ID",
            ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),'','');
        DATABASE::"Job Order":
          BEGIN
            RecRef.SETTABLE(JobOrder);
            IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
              FilePath := FileManagement.ServerTempFileName('pdf');
              FileName := JobOrder.TABLECAPTION + ' ' + JobOrder."No." + '.pdf';
              JobOrderReportPrinter.SetReportFilter(JobOrder."No.");
              JobOrderReportPrinter.SAVEASPDF(FilePath);
            END;
            CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-JO",WorkflowStepArgument."Notification User ID",ApprovalEntry,
              WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),FilePath,FileName);
          END;
        DATABASE::Job:
          CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-Job", WorkflowStepArgument."Notification User ID",
            ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),'','');
        DATABASE::Ticket:
          CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Appvl-Tckt", WorkflowStepArgument."Notification User ID",ApprovalEntry,
            WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),'','');
        DATABASE::"Software Development Request":
          CustomNotifEntryMgmt.CreateNewEntryWithCustomActionForSDR(NotificationEntry.Type::"Appvl-SDR", WorkflowStepArgument."Notification User ID",ApprovalEntry,
            WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",0,UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"));
        DATABASE::"Request For Quotation":
          CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-RFQ",WorkflowStepArgument."Notification User ID",
            ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), '', '');
        DATABASE::"Internal Notice to Proceed":
          CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-INTP",WorkflowStepArgument."Notification User ID",
            ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), '', '');
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            CASE SalesHeader."Request type" OF
              SalesHeader."Request type"::"Tools & Equipment Requisition":
                BEGIN
                  IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
                    FilePath := SalesHeaderReportPrinter.SaveAsPDFSalesHeader(SalesHeader);
                    FileName := FORMAT(SalesHeader."Request type") + ' ' + SalesHeader."No." + '.pdf';
                  END;
                  CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-TERF",WorkflowStepArgument."Notification User ID",
                    ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), FilePath, FileName);
                END;
              SalesHeader."Request type"::Withdrawal:
                BEGIN
                  IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
                    FilePath := SalesHeaderReportPrinter.SaveAsPDFSalesHeader(SalesHeader);
                    FileName := FORMAT(SalesHeader."Request type") + ' ' + SalesHeader."No." + '.pdf';
                  END;
                  CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-WW",WorkflowStepArgument."Notification User ID",
                    ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), FilePath, FileName);
                END;
              SalesHeader."Request type"::"Return Merchandise Authorization":
                BEGIN
                  CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-C-RMA",WorkflowStepArgument."Notification User ID",
                    ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"),'','');
                END;
              SalesHeader."Request type"::"Request For Exception":
                BEGIN
                  IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
                    FilePath := SalesHeaderReportPrinter.SaveAsPDFSalesHeader(SalesHeader);
                    FileName := FORMAT(SalesHeader."Request type") + ' ' + SalesHeader."No." + '.pdf';
                  END;
                  CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-RFE",WorkflowStepArgument."Notification User ID",
                    ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), FilePath, FileName);
                END;
              SalesHeader."Request type"::"Work Change Request":
                BEGIN
                  IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
                    FilePath := SalesHeaderReportPrinter.SaveAsPDFSalesHeader(SalesHeader);
                    FileName := FORMAT(SalesHeader."Request type") + ' ' + SalesHeader."No." + '.pdf';
                  END;
                  CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-WCR",WorkflowStepArgument."Notification User ID",
                    ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), FilePath, FileName);
                END;
            END;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            CASE PurchaseHeader."Document Type" OF
              PurchaseHeader."Document Type"::Order:
                BEGIN
                  IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
                    FilePath := PurchDocPrinter.SavePurchaseHeaderReportAsPdf(PurchaseHeader);
                    FileName := 'Purchase ' + FORMAT(PurchaseHeader."Document Type") + ' ' + PurchaseHeader."No." + '.pdf';
                  END;
                  CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-PO",WorkflowStepArgument."Notification User ID",
                    ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), FilePath, FileName);
                END;
              PurchaseHeader."Document Type"::Invoice:
                BEGIN
                  CASE PurchaseHeader."Request Type" OF
                    PurchaseHeader."Request Type"::"Request for Payment":
                        CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-RFPay",WorkflowStepArgument."Notification User ID",
                          ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), '', '');
                    PurchaseHeader."Request Type"::"Cash Advance":
                        CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-CA",WorkflowStepArgument."Notification User ID",
                          ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), '', '');
                    PurchaseHeader."Request Type"::"Request for Purchase":
                        CustomNotifEntryMgmt.CreateNewEntryCcAttachment(NotificationEntry.Type::"Approval-RFPur",WorkflowStepArgument."Notification User ID",
                          ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",UserSetupMgt.GetUserEmail(ApprovalEntry."Sender ID"), '', '');
                  END;
                END;
            END;
          END;
        ELSE
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE IsOnSaveNotesNotificationWorkflowEnabled@161(VAR RecordLink@1002 : Record 2000000068) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(RecordLink,CustomWorkflowEvents.RunWorkflowOnSaveNotesNotificationCode));
    END;

    PROCEDURE CheckOnSaveNotesNotificationWorkflowEnabled@163(RecordLink@1000 : Record 2000000068) : Boolean;
    BEGIN
      IF NOT IsOnSaveNotesNotificationWorkflowEnabled(RecordLink) THEN
        ERROR(NoWorkflowEnabledErr);
      EXIT(TRUE);
    END;

    PROCEDURE IsINTPFieldChangeWorkflowEnabled@12(VAR INTP@1002 : Record 50040) : Boolean;
    BEGIN
       EXIT(WorkflowManagement.CanExecuteWorkflow(INTP,CustomWorkflowEvents.RunWorkflowOnINTPFieldChangedCode));
    END;

    BEGIN
    END.
  }
}

