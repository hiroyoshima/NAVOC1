OBJECT Codeunit 50556 Job Withdrawal Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=08/16/18;
    Time=[ 5:19:16 PM];
    Modified=Yes;
    Version List=NAVOC1.00.02;
  }
  PROPERTIES
  {
    TableNo=1003;
    OnRun=VAR
            JobPlnLines@1000 : Record 1003;
          BEGIN
            JobPlnLines.COPY(Rec);
            InitWithdrawal(JobPlnLines);
            Rec := JobPlnLines;
          END;

  }
  CODE
  {
    VAR
      UserSetup@1003 : Record 91;
      Job@1002 : Record 167;
      JobTask@1001 : Record 1001;
      JobPlnLines@1000 : Record 1003;
      SalesHeaderReqType@1004 : Option;

    LOCAL PROCEDURE InitWithdrawal@61(VAR JobPlnLines@1000 : Record 1003);
    VAR
      SalesHeaders@1001 : Record 36;
      SalesLines@1002 : Record 37;
      JobPlnLinesTemp@1004 : TEMPORARY Record 1003;
      LineNos@1003 : Integer;
      Items@1005 : Record 27;
    BEGIN
      WITH JobPlnLines DO BEGIN
        IF NOT UserSetup.GET(USERID) THEN
          UserSetup.TESTFIELD("User ID", USERID);

        SETFILTER("Line Type", '%1|%2', "Line Type"::Schedule, "Line Type"::"Both Schedule and Contract");
        SETFILTER("No.", '<>''''');
        SETRANGE(Type, Type::Item);

        // Initial Sales Header
        Job.GET(JobPlnLines."Job No.");
        Job.TESTFIELD(Status, Job.Status::Order);
        SalesHeaders.INIT;
        SalesHeaders."Document Type" := SalesHeaders."Document Type"::Invoice;
        SalesHeaders."Request type" := SalesHeaders."Request type"::Withdrawal;
        SalesHeaders.VALIDATE("Employee No.", UserSetup."Employee No.");
        SalesHeaders.VALIDATE("Sell-to Customer No.", Job."Bill-to Customer No.");
        SalesHeaders.VALIDATE("INTP No.", Job."INTP No.");
        SalesHeaders.Purpose := SalesHeaders.Purpose::Project;
        SalesHeaders.INSERT(TRUE);
        IF JobPlnLines.FINDSET THEN BEGIN
          REPEAT
            CheckJobPlanningLinesIsReadyForTERFWithdrawal(JobPlnLines);
            CheckJobPlanningLinesIfAlreadyExistInSalesLine(JobPlnLines);
            LineNos += 10000;
            SalesLines.RESET;
            SalesLines.INIT;
            SalesLines."Document Type" := SalesLines."Document Type"::Invoice;
            SalesLines."Request type" := SalesLines."Request type"::Withdrawal;
            SalesLines."Document No." := SalesHeaders."No.";
            SalesLines."Line No." := LineNos;
            SalesLines.VALIDATE(Type, SalesLines.Type::Item);
            SalesLines.VALIDATE("No.", JobPlnLines."No.");
            SalesLines.VALIDATE("Variant Code", "Variant Code");
            IF (Type = Type::Item) AND Items.GET(JobPlnLines."No.") AND (Items.Type = Items.Type::Inventory) THEN
                SalesLines.VALIDATE("Location Code", "Location Code");
            SalesLines.Description := Description;
            SalesLines."Description 2" := "Description 2";
            SalesLines."Quantity to Request" := "Qty. to Transfer to Journal";
            SalesLines.VALIDATE("Unit of Measure Code", "Unit of Measure Code");
            // SalesLines.VALIDATE(Quantity, "Qty. to Transfer to Journal");
            SalesLines.VALIDATE("Unit Price", 0);
            SalesLines.VALIDATE("Gen. Bus. Posting Group", "Gen. Bus. Posting Group");
            SalesLines.VALIDATE("Gen. Prod. Posting Group", "Gen. Prod. Posting Group");
            SalesLines.VALIDATE("Job No. 2", "Job No.");
            SalesLines.VALIDATE("Job Task No. 2", "Job Task No.");
            SalesLines.VALIDATE("Job Unit Price", "Unit Price");
            SalesLines.VALIDATE("Job Unit Price (LCY)", "Unit Price (LCY)");
            SalesLines.VALIDATE("Job Total Price", "Total Price");
            SalesLines.VALIDATE("Job Total Price (LCY)", "Total Price (LCY)");
            SalesLines.VALIDATE("Job Planning Line No.", "Line No.");
            SalesLines."Request type" := SalesLines."Request type"::Withdrawal;
            SalesLines.INSERT(TRUE);
          UNTIL JobPlnLines.NEXT = 0;
          // Open created Withdrawal
          PAGE.RUN(PAGE::Withdrawal, SalesHeaders);
        END;
      END;
    END;

    LOCAL PROCEDURE CheckJobPlanningLinesIsReadyForTERFWithdrawal@51(VAR JobPlnLines@1000 : Record 1003);
    VAR
      Item@1001 : Record 27;
      GLAccount@1002 : Record 15;
    BEGIN
      WITH JobPlnLines DO BEGIN
        IF "Line No." = 0 THEN
          FIELDERROR("Line No.");
        TESTFIELD("Usage Link", TRUE);
        TESTFIELD("No.");
        CASE Type OF
          Type::Item:
              IF Item.GET("No.") THEN BEGIN
                Item.TESTFIELD("Gen. Prod. Posting Group");
                Item.TESTFIELD("VAT Prod. Posting Group");
                IF Item.Type = Item.Type::Inventory THEN
                  Item.TESTFIELD("Inventory Posting Group");
              END;
        END;
        TESTFIELD("Unit of Measure Code");
        IF Quantity < 0 THEN
          FIELDERROR(Quantity);
        IF "Qty. to Transfer to Journal" = 0 THEN
          FIELDERROR("Qty. to Transfer to Journal");
        IF "Qty. to Transfer to Journal" > (Quantity - "Qty. Posted") THEN
          FIELDERROR("Qty. to Transfer to Journal");
      END;
    END;

    LOCAL PROCEDURE CheckJobPlanningLinesIfAlreadyExistInSalesLine@53(VAR JobPlnLines@1000 : Record 1003);
    VAR
      SalesLines@1001 : Record 37;
      Err001@1002 : TextConst 'ENU=%1 %2, %3 %4 and %5 %6 with value of %7 %8 already exist in %9 %10.';
    BEGIN
      WITH JobPlnLines DO BEGIN
        // Check if Job Planning Lines is already exist in the Sales Line
        SalesLines.SETFILTER("Job No. 2", ("Job No."));
        SalesLines.SETFILTER("Job Task No. 2", ("Job Task No."));
        SalesLines.SETFILTER("Job Planning Line No.", FORMAT("Line No."));
        IF SalesLines.FINDFIRST THEN BEGIN
          SalesLines.CALCFIELDS("Request type");
          ERROR(Err001, FIELDCAPTION("Job No."), "Job No.",
        FIELDCAPTION("Job Task No."), "Job Task No.", FIELDCAPTION("Line No."), "Line No.",
        "No.", Description, FORMAT(SalesLines."Request type"), SalesLines."Document No.");
        END;
      END;
    END;

    BEGIN
    END.
  }
}

