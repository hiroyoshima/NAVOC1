OBJECT Codeunit 50568 TMS Integration Management
{
  OBJECT-PROPERTIES
  {
    Date=06/26/18;
    Time=12:58:25 AM;
    Modified=Yes;
    Version List=NAVOC1.00.02.47;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TMSSetup@1021 : Record 50584;
      ConfigProgressBar@1004 : Codeunit 8615;
      CustomApprovalManagement@1017 : Codeunit 50582;
      ADOConnection@1002 : DotNet "'MySql.Data, Version=8.0.20.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d'.MySql.Data.MySqlClient.MySqlConnection";
      ADOCommand@1001 : DotNet "'MySql.Data, Version=8.0.20.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d'.MySql.Data.MySqlClient.MySqlCommand";
      ADODataReader@1000 : DotNet "'MySql.Data, Version=8.0.20.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d'.MySql.Data.MySqlClient.MySqlDataReader";
      Err01@1013 : TextConst 'ENU=You have an error in your SQL syntax.';
      Err02@1022 : TextConst 'ENU=Error: %1 %2';
      Text001@1007 : TextConst 'ENU=%1 records has been inserted in Records Management System.';
      Text002@1006 : TextConst 'ENU=A successful MySQL connection was made with the parameters defined for this connection.';
      ConnectionStrTxt@1005 : TextConst 'ENU="server=%1;uid=%2;pwd=%3;DATABASE=%4;"';
      ProgressBarTxt@1009 : TextConst 'ENU=Synching Task Monitoring Records.';
      ProgressBar2Txt@1010 : TextConst 'ENU=Updating date of extension.';
      SQLCmdSelectExtentionTxt@1011 : TextConst 'ENU="SELECT * FROM extension WHERE task_details_id = %1 AND approve_date <> '''' ORDER BY id DESC LIMIT 1;"';
      SQLUpdateTMSDetailsTxt@1012 : TextConst 'ENU="UPDATE task_details SET %1 WHERE id = %2;"';
      SQLInsertTMSExtensionsTxt@1014 : TextConst 'ENU="INSERT INTO extension (task_details_id,task_deadline,request_date,approve_date,approve_type)VALUES(%1,%2,%3,%4,%5);"';
      SQLDeleteTMSExtensionsTxt@1015 : TextConst 'ENU="DELETE FROM extension WHERE task_details_id = %1;"';
      InStr@1019 : InStream;
      OutStr@1018 : OutStream;
      SQLSelectCmd@1020 : TextConst 'ENU="SELECT * FROM %1;"';

    PROCEDURE OpenConnection@39();
    BEGIN
      ConnectToDatabase(FALSE);
    END;

    PROCEDURE CloseConnection@40();
    BEGIN
      ADOConnection.Close;
    END;

    PROCEDURE TestConnection@17();
    BEGIN
      ConnectToDatabase(TRUE);
    END;

    LOCAL PROCEDURE TestTMSSetup@8();
    BEGIN
      TMSSetup.GET;
      TMSSetup.TESTFIELD("TMS Server");
      TMSSetup.TESTFIELD("TMS Database");
      TMSSetup.TESTFIELD("TMS User ID");
      TMSSetup.TESTFIELD("TMS Password");
    END;

    LOCAL PROCEDURE ConnectToDatabase@2(TestDbConnection@1000 : Boolean);
    BEGIN
      CLEARLASTERROR;
      IF NOT DoConnectToMySQL THEN
        ERROR(Err02, GETLASTERRORCODE, GETLASTERRORTEXT)
      ELSE
        IF TestDbConnection THEN
          MESSAGE(Text002)
    END;

    [TryFunction]
    LOCAL PROCEDURE DoConnectToMySQL@3();
    VAR
      DatabaseName@1001 : Text;
      TableConnection@1000 : TableConnectionType;
      ADOComm@1002 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'._Connection";
    BEGIN
      TMSSetup.GET;
      TMSSetup.TESTFIELD("TMS Server");
      TMSSetup.TESTFIELD("TMS User ID");
      TMSSetup.TESTFIELD("TMS Password");
      TMSSetup.TESTFIELD("TMS Database");

      ADOConnection := ADOConnection.MySqlConnection;
      ADOCommand := ADOCommand.MySqlCommand;

      ADOConnection.ConnectionString(STRSUBSTNO(ConnectionStrTxt, TMSSetup."TMS Server", TMSSetup."TMS User ID", TMSSetup."TMS Password", TMSSetup."TMS Database"));

      ADOConnection.Open;

      ADOCommand.Connection := ADOConnection;
    END;

    PROCEDURE SyncTableRecords@14(TMSTableName@1004 : Text);
    VAR
      Field@1000 : Record 2000000041;
      FieldMatched@1015 : Record 2000000041;
      PKField@1008 : Record 2000000041;
      Object@1005 : Record 2000000001;
      TempBlob@1013 : TEMPORARY Record 99008535;
      PrimaryKey@1009 : Text;
      FieldNo@1010 : Integer;
      RRef@1001 : RecordRef;
      FRef@1002 : FieldRef;
      SQLCmdChecKTable@1003 : TextConst 'ENU="SELECT * FROM information_schema.tables WHERE table_schema = ''%1'' AND table_name = ''%2'' LIMIT 1;"';
      SQLCmdCheckPK@1007 : TextConst 'ENU="SHOW KEYS FROM %1.%2 WHERE key_name = ''PRIMARY''"';
      SQLSelectCmd@1006 : TextConst 'ENU="SELECT * FROM %1 ;"';
      FRef2@1011 : FieldRef;
      FRef3@1012 : FieldRef;
      SQLCmdTableColumn@1014 : TextConst 'ENU="SELECT COLUMN_NAME, ORDINAL_POSITION, IS_NULLABLE, DATA_TYPE, COLUMN_TYPE FROM information_schema.columns WHERE TABLE_SCHEMA = ''%1'' AND TABLE_NAME = ''%2''"';
    BEGIN
      Object.SETRANGE(Type, Object.Type::TableData);
      Object.SETRANGE(Name, STRSUBSTNO('TMS %1', TMSTableName));
      IF NOT Object.FINDFIRST THEN
        ERROR('The object name TMS %1 cannot found in the object list.', TMSTableName);

      // Get the primary of the table
      InitADODataReader(STRSUBSTNO(SQLCmdCheckPK, TMSSetup."TMS Database", TMSTableName));
      IF NOT ADODataReader.Read THEN
        ERROR('The table name %1 cannot not found in %2 database.', TMSSetup."TMS Database", TMSTableName);

      PrimaryKey :=  ADODataReader.GetValue(ADODataReader.GetOrdinal('Column_name'));
      PKField.SETRANGE(Enabled, TRUE);
      PKField.SETRANGE(TableNo, Object.ID);
      PKField.SETRANGE(FieldName, PrimaryKey);
      PKField.SETRANGE(Class, Field.Class::Normal);
      IF NOT PKField.FINDFIRST THEN
        ERROR('No found Primary Key in table %1', TMSTableName);
      ADODataReader.Close;

      // Get all the columns of mySQL Table
      InitADODataReader(STRSUBSTNO(SQLCmdTableColumn, TMSSetup."TMS Database", TMSTableName));
      WHILE ADODataReader.Read DO BEGIN
       Field.RESET;
       Field.SETRANGE(Enabled, TRUE);
       Field.SETRANGE(TableNo, Object.ID);
       Field.SETRANGE(Class, Field.Class::Normal);
       Field.SETRANGE(FieldName, ADODataReader.GetValue(ADODataReader.GetOrdinal('COLUMN_NAME')));
       IF Field.FINDFIRST AND FieldMatched.GET(Field.TableNo, Field."No.") THEN
         FieldMatched.MARK(TRUE);
      END;
      ADODataReader.Close;


       RRef.OPEN(Object.ID);
       InitADODataReader(STRSUBSTNO(SQLSelectCmd, TMSTableName));
       WHILE ADODataReader.Read DO BEGIN
         FRef := RRef.FIELD(PKField."No.");
         FRef.VALUE := ADODataReader.GetValue(ADODataReader.GetOrdinal(PrimaryKey));
        IF RRef.FIND('=') THEN BEGIN
          // Updating of records
          FieldMatched.MARKEDONLY(TRUE);
          IF FieldMatched.FINDSET THEN BEGIN
            REPEAT
              FRef := RRef.FIELD(FieldMatched."No.");
              CASE FieldMatched.Type OF
                FieldMatched.Type::BLOB:
                  BEGIN
                    TempBlob.INIT;
                    TempBlob.Blob.CREATEOUTSTREAM(OutStr);
                    OutStr.WRITE(FORMAT(ADODataReader.Item(FieldMatched.FieldName)));
                    FRef.VALUE := TempBlob.Blob;
                  END;
                ELSE BEGIN
                  IF NOT ISNULL(ADODataReader.Item(FieldMatched.FieldName)) THEN BEGIN
                    FRef.VALUE := ADODataReader.Item(FieldMatched.FieldName);
                    FRef.VALIDATE;
                  END;
                END;
              END;
            UNTIL FieldMatched.NEXT = 0;
            RRef.MODIFY(TRUE);
          END;
        END ELSE BEGIN
          // Saving of records
          FieldMatched.MARKEDONLY(TRUE);
          IF FieldMatched.FINDSET THEN BEGIN
            RRef.INIT;
            REPEAT
              FRef := RRef.FIELD(FieldMatched."No.");
              CASE FieldMatched.Type OF
                FieldMatched.Type::BLOB:
                  BEGIN
                    TempBlob.INIT;
                    TempBlob.Blob.CREATEOUTSTREAM(OutStr);
                    OutStr.WRITE(FORMAT(ADODataReader.Item(FieldMatched.FieldName)));
                    FRef.VALUE := TempBlob.Blob;
                  END;
                ELSE BEGIN
                  IF NOT ISNULL(ADODataReader.Item(FieldMatched.FieldName)) THEN BEGIN
                    FRef.VALUE := ADODataReader.Item(FieldMatched.FieldName);
                    FRef.VALIDATE;
                  END;
                END;
              END;
            UNTIL FieldMatched.NEXT = 0;
            RRef.INSERT(TRUE);
          END;
        END;
       END;
       RRef.CLOSE;
       ADODataReader.Close;
    END;

    LOCAL PROCEDURE InitADODataReader@30(SQLTxt@1000 : Text);
    BEGIN
      ADOCommand.CommandText := SQLTxt;
      ADODataReader := ADOCommand.ExecuteReader;
    END;

    PROCEDURE ManualSyncEmployeesToTMSEmployee@92(VAR Employee@1002 : Record 5200);
    VAR
      CMsg001@1001 : TextConst 'ENU=Do you want to sync this records in Task Monitoring System?';
      Msg001@1003 : TextConst 'ENU=Record already exists.';
      Succ001@1000 : TextConst 'ENU=Record has been successfully synched.';
      Succ002@1004 : TextConst 'ENU=%1 of %2 records has been successfully synched.';
      TotalRecInserted@1005 : Integer;
      TotalRec@1006 : Integer;
    BEGIN
      IF NOT CONFIRM(CMsg001,FALSE) THEN
        EXIT;

      IF Employee.COUNT > 1 THEN BEGIN
        TotalRec := Employee.COUNT;
        TotalRecInserted := 0;
        IF Employee.FINDSET THEN
          REPEAT
            IF NOT CheckExistenceOfEmailAddress(Employee."Company E-Mail") THEN
              IF InsertEmployeeRecord(Employee) THEN
                TotalRecInserted += 1;
          UNTIL Employee.NEXT = 0;
        IF TotalRecInserted <> 0 THEN
          MESSAGE(Succ002, TotalRecInserted, TotalRec);
      END ELSE BEGIN
        Employee.TESTFIELD("Company E-Mail");
        IF CheckExistenceOfEmailAddress(Employee."Company E-Mail") THEN
          ERROR(Msg001);

        IF InsertEmployeeRecord(Employee) THEN
          MESSAGE(Succ001);
      END;
    END;

    LOCAL PROCEDURE GetEmployeeLastInsertedId@38() : Integer;
    VAR
      SQLCmdTxt@1000 : TextConst 'ENU="SELECT id FROM employee ORDER BY id DESC LIMIT 1;"';
    BEGIN
      ConnectToDatabase(FALSE);
      ADOCommand.CommandText := STRSUBSTNO(SQLCmdTxt);
      ADODataReader := ADOCommand.ExecuteReader;
      WHILE ADODataReader.Read DO
        IF ADODataReader.GetInt64(0) >= 1 THEN
          EXIT(ADODataReader.GetInt64(0));
      ADOConnection.Close;
      EXIT(1);
    END;

    LOCAL PROCEDURE InsertEmployeeRecord@10(VAR Employee@1000 : Record 5200) : Boolean;
    VAR
      JPSIntegration@1006 : Codeunit 50552;
      LastInsertedID@1004 : BigInteger;
      TMSEmpID@1007 : Integer;
      StringPos@1003 : Integer;
      Count@1002 : Integer;
      ExecStatus@1008 : Integer;
      UserName@1001 : Text;
      InsertTMSEmployeeSQLCmd@1005 : TextConst 'ENU=INSERT INTO `employee`
    (`employee_jsp_id`,`id_code`,`first_name`,`middle_initial`,`last_name`,`suffix`,`department`,`position`,`email`,`formal_name`,`full_name`,`active`) 
    VALUES(''%1'',''%2'',''%3'',''%4'',''%5'',''%6'',''%7'',''%8'',''%9'',''%10'',''%11'',''%12'')';
    BEGIN
        TMSEmpID := JPSIntegration.GetJPSEmployeeID(Employee."No.");
        IF TMSEmpID = 0 THEN
          TMSEmpID := GetEmployeeLastInsertedId;
        Employee.CALCFIELDS(Department);
        // Insert Command
        ConnectToDatabase(FALSE);
        ADOCommand.CommandText := STRSUBSTNO(InsertTMSEmployeeSQLCmd,
          TMSEmpID, Employee."No.", Employee."First Name", Employee."Middle Initial", Employee."Last Name",
          'N/A', Employee.Department, Employee."Job Title", Employee."Company E-Mail", Employee.FormalName, Employee.FormalName,1);
        ExecStatus := ADOCommand.ExecuteNonQuery;
        ADOConnection.Close;
        IF ExecStatus = 1 THEN
          EXIT(TRUE);
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckExistenceOfEmailAddress@1(EmailAddress@1001 : Text) : Boolean;
    VAR
      Result@1000 : Integer;
      SelectEmployeeCmd@1002 : TextConst 'ENU="SELECT COUNT(*) AS count FROM employee WHERE email = ''%1'';"';
    BEGIN
      IF EmailAddress = '' THEN
        EXIT(FALSE);
      ConnectToDatabase(FALSE);
      ADOCommand.CommandText := STRSUBSTNO(SelectEmployeeCmd,EmailAddress);
      ADODataReader := ADOCommand.ExecuteReader;
      WHILE ADODataReader.Read DO BEGIN
        IF ADODataReader.GetInt64(0) >= 1 THEN
          EXIT(TRUE);
      END;

      ADODataReader.Close;
      ADOConnection.Close;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetTMSTaskLastRecordID@11() : Integer;
    VAR
      TMSTaskDetails@1000 : Record 50559;
    BEGIN
      IF NOT TMSTaskDetails.FINDLAST THEN
        EXIT(0);
      EXIT(TMSTaskDetails.id);
    END;

    PROCEDURE UpdateTMSTaskDetails@6(VAR TMSTaskDetails@1000 : Record 50559;VAR xRecTMSTaskDetails@1004 : Record 50559);
    VAR
      StatusToInt@1005 : Integer;
      DueDate@1002 : Text;
      CompletedDate@1001 : Text;
      ColUpdate@1003 : Text;
    BEGIN
      // WITH TMSTaskDetails DO BEGIN
      //  ConnectToDatabase(FALSE);
      //  StatusToInt := status + 1;
      //
      //  IF TMSTaskDetails.complete_date = 0DT THEN
      //    CompletedDate := 'NULL'
      //  ELSE
      //    CompletedDate := SetMySQLDateTimeFormat(TMSTaskDetails.complete_date);
      //  ColUpdate += STRSUBSTNO('%1=%2',FIELDNAME(complete_date), CompletedDate);
      //  ColUpdate += ',' + STRSUBSTNO('%1=%2',FIELDNAME(deadline),SetMySQLDateTimeFormat(CREATEDATETIME(TMSTaskDetails.deadline,0T)));
      //  ColUpdate += ',' + STRSUBSTNO('%1=%2', FIELDNAME(status), StatusToInt);
      //
      //  ADOCommand.CommandText := STRSUBSTNO(SQLUpdateTMSDetailsTxt, ColUpdate, TMSTaskDetails.id);
      //  ADOCommand.ExecuteNonQuery;
      //
      //  IF ("Date of Extension" <> 0DT) AND ("Date of Extension" <> xRecTMSTaskDetails."Date of Extension") THEN BEGIN
      //    ADOCommand.CommandText := STRSUBSTNO(SQLInsertTMSExtensionsTxt, id,
      //                                         SetMySQLDateTimeFormat(CREATEDATETIME(xRecTMSTaskDetails.deadline,0T)),
      //                                         SetMySQLDateTimeFormat("Date of Extension"), SetMySQLDateTimeFormat("Date of Extension"), 1);
      //    ADOCommand.ExecuteNonQuery;
      //  END ELSE BEGIN
      //    // Delete the related extension in tms_v02
      //    ADOCommand.CommandText := STRSUBSTNO(SQLDeleteTMSExtensionsTxt, id);
      //    ADOCommand.ExecuteNonQuery;
      //  END;
      //
      //  ADOConnection.Close;
      // END;
    END;

    LOCAL PROCEDURE SetMySQLDateTimeFormat@7(NAVDateTime@1000 : DateTime) : Text;
    BEGIN
      EXIT(''''+ FORMAT(NAVDateTime, 0,'<Year4>-<Month,2>-<Day,2> <Hours24>:<Minutes,2>:<Seconds,2>')+ '''');
    END;

    LOCAL PROCEDURE GetTaskLastRecordID@9() : Integer;
    VAR
      Task@1000 : Record 50556;
    BEGIN
      IF NOT Task.FINDLAST THEN
        EXIT(0);
      EXIT(Task."TMS ID");
    END;

    LOCAL PROCEDURE PRIMARYKEY@13();
    BEGIN
    END;

    PROCEDURE SQLUPDATE@4(DatabaseName@1000 : Text;VAR RecRef@1001 : RecordRef);
    BEGIN
    END;

    PROCEDURE TaskDetails@5() : Text;
    BEGIN
      EXIT('task_details');
    END;

    PROCEDURE Employee@16() : Text;
    BEGIN
      EXIT('employee');
    END;

    PROCEDURE Users@18() : Text;
    BEGIN
      EXIT('users');
    END;

    PROCEDURE Extensions@19() : Text;
    BEGIN
      EXIT('extension');
    END;

    PROCEDURE Department@20() : Text;
    BEGIN
      EXIT('department');
    END;

    PROCEDURE TaskDetailsReports@21() : Text;
    BEGIN
      EXIT('task_details_reports');
    END;

    EVENT ADOConnection@1002::InfoMessage@56(sender@1001 : Variant;args@1000 : DotNet "'MySql.Data, Version=8.0.20.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d'.MySql.Data.MySqlClient.MySqlInfoMessageEventArgs");
    BEGIN
    END;

    EVENT ADOConnection@1002::StateChange@57(sender@1001 : Variant;e@1000 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.StateChangeEventArgs");
    BEGIN
    END;

    EVENT ADOConnection@1002::Disposed@58(sender@1001 : Variant;e@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.EventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

