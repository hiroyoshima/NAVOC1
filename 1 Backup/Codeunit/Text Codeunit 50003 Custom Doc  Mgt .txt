OBJECT Codeunit 50003 Custom Doc. Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=08/16/18;
    Time=10:50:31 AM;
    Modified=Yes;
    Version List=NAVOC1.00.02;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            NotesPushEmailNotif;
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=Do you want to Close Request for Quoation %1?';
      Text002@1003 : TextConst 'ENU=Do you want to Close RFTS %1?';
      Text004@1029 : TextConst 'ENU=Do you want to Done the RFTS %1?';
      Text005@1023 : TextConst 'ENU=Do you want to Cancel the RFTS %1?';
      Text006@1031 : TextConst 'ENU=Do you want to Done the RFQ %1 ?';
      Text007@1032 : TextConst 'ENU=Do you want to Cancel the RFQ %1?';
      Error001@1001 : TextConst 'ENU=Request for Quotation %1 already closed.';
      Error002@1002 : TextConst 'ENU=RFTS %1 is already closed.';
      Error003@1004 : TextConst 'ENU=RFTS %1 is already opened.';
      Error004@1030 : TextConst 'ENU=RFTS  %1 is already Completed.';
      CompanyInformation@1006 : Record 79;
      FileManagement@1007 : Codeunit 419;
      UserSetup@1013 : Record 91;
      Month@1008 : Text;
      Timex@1009 : Text;
      NewFilename@1010 : Text;
      ltxtFileName@1011 : Text;
      lintSlashPos@1012 : Integer;
      ToFile@1014 : Variant;
      Filevar@1015 : File;
      IsTream@1016 : InStream;
      OStream@1017 : OutStream;
      FileSystemObject@1018 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
      MagicPath@1019 : Text;
      i@1020 : Integer;
      SMTPMail@1021 : Codeunit 400;
      Notes@1022 : Record 2000000068;
      subject@1025 : Text;
      SMTPSetup@1026 : Record 409;
      Error005@1005 : TextConst 'ENU=RFTS %1 is already cancelled.';
      Error006@1033 : TextConst 'ENU=RFQ %1 is already completed.';
      Error007@1034 : TextConst 'ENU=RFQ %1 is already cancelled.';
      Error008@1039 : TextConst 'ENU=Job Task No. %1 already exist.';
      SendEmailVendor@1027 : TextConst 'ENU=Send Email to Vendor 1';
      WorkflowResponse@1028 : Record 1521;
      SuccessMsg004@1024 : TextConst 'ENU=You have successfully completed the RFTS %1.';
      JobTask@1036 : Record 1001;
      JobPlanningLines@1035 : Record 1003;
      JobTaskNo@1038 : Code[20];
      JobLineNo@1040 : Integer;
      CustomSetup@1037 : Record 50001;

    PROCEDURE CloseRFQ@2(VAR RequestForQuotation@1000 : Record 50013);
    BEGIN
      IF RequestForQuotation.Status = RequestForQuotation.Status::Closed THEN
        ERROR(Error001,RequestForQuotation."No.");

      IF NOT CONFIRM(Text001,TRUE,RequestForQuotation."No.") THEN
        EXIT;

      RequestForQuotation.Status := RequestForQuotation.Status::Closed;
      RequestForQuotation.MODIFY;
    END;

    PROCEDURE DoneRFQ@10(VAR RFQDoc@1000 : Record 50013);
    BEGIN
      RFQDoc.TESTFIELD(Status, RFQDoc.Status::Released);
      IF RFQDoc.Status = RFQDoc.Status::Completed THEN
        ERROR(Error006,RFQDoc."No.");

      IF NOT CONFIRM(Text006, TRUE, RFQDoc."No.") THEN
        EXIT;

      RFQDoc.Status := RFQDoc.Status::Completed;
      RFQDoc.MODIFY(TRUE);
    END;

    PROCEDURE CancelRFQ@11(VAR RFQDoc@1000 : Record 50013);
    BEGIN
      IF RFQDoc.Status = RFQDoc.Status::Cancelled THEN
        ERROR(Error007, RFQDoc."No.");

      IF NOT CONFIRM(Text007,TRUE,RFQDoc."No.") THEN
        EXIT;

      RFQDoc.Status := RFQDoc.Status::Cancelled;
      RFQDoc.MODIFY(TRUE);
    END;

    PROCEDURE CloseRFTS@1(VAR RFTSDoc@1000 : Record 50010);
    BEGIN
      IF RFTSDoc.Status = RFTSDoc.Status::Closed THEN
        ERROR(Error002,RFTSDoc."No.");

      IF NOT CONFIRM(Text002,TRUE,RFTSDoc."No.") THEN
        EXIT;

      RFTSDoc.Status := RFTSDoc.Status::Closed;
      RFTSDoc.MODIFY;
    END;

    PROCEDURE DoneRFTS@3(RFTSDoc@1000 : Record 50010);
    BEGIN
      RFTSDoc.TESTFIELD(Status, RFTSDoc.Status::Released);
      RFTSDoc.TestBomDetails;
      RFTSDoc.TestDemoTestingDetails;
      RFTSDoc.TestSiteSurveyDetails;

      IF RFTSDoc.Status = RFTSDoc.Status::Completed THEN
        ERROR(Error004, RFTSDoc."No.");

      IF NOT CONFIRM(Text004,TRUE, RFTSDoc."No.") THEN
        EXIT;

      RFTSDoc.Status := RFTSDoc.Status::Completed;
      RFTSDoc.MODIFY(TRUE);
      // MESSAGE(SuccessMsg004, RFTSDoc."No.");
    END;

    PROCEDURE CancelRFTS@5(RFTSDocs@1000 : Record 50010);
    BEGIN
      IF RFTSDocs.Status = RFTSDocs.Status::Cancelled THEN
        ERROR(Error005, RFTSDocs."No.");

      IF NOT CONFIRM(Text005, TRUE, RFTSDocs."No.") THEN
        EXIT;

      RFTSDocs.Status := RFTSDocs.Status::Cancelled;
      RFTSDocs.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE NotesPushEmailNotif@8();
    BEGIN
      Notes.RESET;
      Notes.SETRANGE(Type,Notes.Type::Note);
      Notes.SETFILTER(IsNotified, FORMAT(FALSE));
      Notes.SETFILTER("User ID", '<>%1', '');
      Notes.SETFILTER("To User ID", '<>%1', '');
      SMTPSetup.GET;
      IF Notes.FINDSET THEN BEGIN
        REPEAT
            UserSetup.RESET;
            IF UserSetup.GET(Notes."To User ID") THEN BEGIN
              SMTPMail.CreateMessage(Notes."User ID", SMTPSetup."User ID", UserSetup."E-Mail",'DYNAMICS NAV NOTIFIER', '', TRUE);
              SMTPMail.AppendBody(FORMAT(Notes."User ID" + ' mentioned you in a note on #' + FORMAT(Notes."Link ID") + '.'));
              SMTPMail.AppendBody('</br>');
              SMTPMail.AppendBody(Notes.Description);
              SMTPMail.AppendBody('</br>');
              SMTPMail.AppendBody('To view notes: <a href="'+Notes.URL1 +'">Click here!</a>');
              SMTPMail.AppendBody('</br></br>');
              SMTPMail.AppendBody('<i>This message is system generated please do not reply.</i>');
              SMTPMail.Send;
              Notes.IsNotified := TRUE;
              Notes.MODIFY(TRUE);
            END;
        UNTIL Notes.NEXT = 0;
      END;
    END;

    PROCEDURE SendEmailCode@6() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SendEmail'));
    END;

    PROCEDURE SendEmail@7(VAR RFTSHEader@1000 : Record 50010);
    BEGIN
      // WITH RFTSHEader DO BEGIN
      // SMTPSetup.GET;
      // UserSetup.RESET;
      // SMTPMail.CreateMessage(SMTPSetup."User ID", SMTPSetup."User ID", 'jessie.moyano@onecommerce.com.ph','DYNAMICS NAV NOTIFIER', '', TRUE);
      // SMTPMail.AppendBody('</br>');
      // SMTPMail.AppendBody('</br>');
      // SMTPMail.AppendBody('To view notes: <a href>Click here!</a>');
      // SMTPMail.AppendBody('</br></br>');
      // SMTPMail.AppendBody('<i>This message is system generated please do not reply.</i>');
      // SMTPMail.Send;
      // END;
    END;

    [EventSubscriber(Codeunit,1521,OnAddWorkflowResponsesToLibrary)]
    PROCEDURE Response@13();
    VAR
      WorkflowResponseHandling@1000 : Codeunit 1521;
    BEGIN
      // WorkflowResponseHandling.AddResponseToLibrary(SendEmailCode,0,SendEmailVendor,'GROUP 0');
    END;

    [EventSubscriber(Codeunit,1521,OnExecuteWorkflowResponse)]
    PROCEDURE ExecuteResponse@18(VAR ResponseExecuted@1000 : Boolean;Variant@1001 : Variant;xVariant@1002 : Variant;ResponseWorkflowStepInstance@1003 : Record 1504);
    BEGIN
      // IF WorkflowResponse.GET(ResponseWorkflowStepInstance."Function Name") THEN
      //   CASE WorkflowResponse."Function Name" OF
      //     SendEmailCode:
      //       SendEmail(Variant);
      //       // ResponseExecuted:=TRUE;
      //   END;
    END;

    PROCEDURE InserDefaultJobMiscellaneous@9(VAR Job@1000 : Record 167);
    BEGIN

      JobTask.SETCURRENTKEY("Job No.", "Job Task No.");
      JobTaskNo := 'M.M1000.1000';
      CustomSetup.GET;

       IF NOT JobTask.GET(Job."No.", JobTaskNo) THEN BEGIN
         JobTask.INIT;
         JobTask."Job No." := Job."No.";
         JobTask."Job Task No." := JobTaskNo;
         JobTask.Description := 'MISCELLANEOUS';
         JobTask."Job Task Type" := JobTask."Job Task Type"::Posting;
         JobTask."Job Posting Group" := Job."Job Posting Group";
         JobTask.INSERT(TRUE);

        IF CustomSetup."Freight Account" <> '' THEN BEGIN
          JobPlanningLines.SETRANGE("Job No.", Job."No.");
          JobPlanningLines.FINDLAST;
          JobLineNo := 0;
          JobLineNo := (JobPlanningLines."Line No." + 100);
          JobPlanningLines.RESET;
          JobPlanningLines.INIT;
          JobPlanningLines."Job No." := Job."No.";
          JobPlanningLines."Job Task No." := JobTaskNo;
          JobPlanningLines."Line Type" := JobPlanningLines."Line Type"::Schedule;
          JobPlanningLines.Type := JobPlanningLines.Type::"G/L Account";
          JobPlanningLines."No." := CustomSetup."Freight Account";
          JobPlanningLines.VALIDATE("No.");
          JobPlanningLines."Line No." := JobLineNo;
          JobPlanningLines.INSERT(TRUE);
        END;
        IF CustomSetup."Transportation Account" <> '' THEN BEGIN
          JobPlanningLines.SETRANGE("Job No.", Job."No.");
          JobPlanningLines.FINDLAST;
          JobLineNo := 0;
          JobLineNo := (JobPlanningLines."Line No." + 100);
          JobPlanningLines.RESET;
          JobPlanningLines.INIT;
          JobPlanningLines."Job No." := Job."No.";
          JobPlanningLines."Job Task No." := JobTaskNo;
          JobPlanningLines."Line Type" := JobPlanningLines."Line Type"::Schedule;
          JobPlanningLines.Type := JobPlanningLines.Type::"G/L Account";
          JobPlanningLines."No." := CustomSetup."Transportation Account";
          JobPlanningLines.VALIDATE("No.");
          JobPlanningLines."Line No." := JobLineNo;
          JobPlanningLines.INSERT(TRUE);
        END;
        IF CustomSetup."Custom Duties Account" <> '' THEN BEGIN
            JobPlanningLines.SETRANGE("Job No.", Job."No.");
            JobPlanningLines.FINDLAST;
            JobLineNo := 0;
            JobLineNo := (JobPlanningLines."Line No." + 100);
            JobPlanningLines.RESET;
            JobPlanningLines.INIT;
            JobPlanningLines."Job No." := Job."No.";
            JobPlanningLines."Job Task No." := JobTaskNo;
            JobPlanningLines."Line Type" := JobPlanningLines."Line Type"::Schedule;
            JobPlanningLines.Type := JobPlanningLines.Type::"G/L Account";
            JobPlanningLines."No." := CustomSetup."Custom Duties Account";
            JobPlanningLines.VALIDATE("No.");
            JobPlanningLines."Line No." := JobLineNo;
            JobPlanningLines.INSERT(TRUE);
        END;
        IF CustomSetup."Trucking & Delivery Account" <> '' THEN BEGIN
            JobPlanningLines.SETRANGE("Job No.", Job."No.");
            JobPlanningLines.FINDLAST;
            JobLineNo := 0;
            JobLineNo := (JobPlanningLines."Line No." + 100);
            JobPlanningLines.RESET;
            JobPlanningLines.INIT;
            JobPlanningLines."Job No." := Job."No.";
            JobPlanningLines."Job Task No." := JobTaskNo;
            JobPlanningLines."Line Type" := JobPlanningLines."Line Type"::Schedule;
            JobPlanningLines.Type := JobPlanningLines.Type::"G/L Account";
            JobPlanningLines."No." := CustomSetup."Trucking & Delivery Account";
            JobPlanningLines.VALIDATE("No.");
            JobPlanningLines."Line No." := JobLineNo;
            JobPlanningLines.INSERT(TRUE);
        END;
        IF CustomSetup."Per Diem Account" <> '' THEN BEGIN
            JobPlanningLines.SETRANGE("Job No.", Job."No.");
            JobPlanningLines.FINDLAST;
            JobLineNo := 0;
            JobLineNo := (JobPlanningLines."Line No." + 100);
            JobPlanningLines.RESET;
            JobPlanningLines.INIT;
            JobPlanningLines."Job No." := Job."No.";
            JobPlanningLines."Job Task No." := JobTaskNo;
            JobPlanningLines."Line Type" := JobPlanningLines."Line Type"::Schedule;
            JobPlanningLines.Type := JobPlanningLines.Type::"G/L Account";
            JobPlanningLines."No." := CustomSetup."Per Diem Account";
            JobPlanningLines.VALIDATE("No.");
            JobPlanningLines."Line No." := JobLineNo;
            JobPlanningLines.INSERT(TRUE);
        END;
        IF CustomSetup."Marketing Account" <> '' THEN BEGIN
            JobPlanningLines.SETRANGE("Job No.", Job."No.");
            JobPlanningLines.FINDLAST;
            JobLineNo := 0;
            JobLineNo := (JobPlanningLines."Line No." + 100);
            JobPlanningLines.RESET;
            JobPlanningLines.INIT;
            JobPlanningLines."Job No." := Job."No.";
            JobPlanningLines."Job Task No." := JobTaskNo;
            JobPlanningLines."Line Type" := JobPlanningLines."Line Type"::Schedule;
            JobPlanningLines.Type := JobPlanningLines.Type::"G/L Account";
            JobPlanningLines."No." := CustomSetup."Marketing Account";
            JobPlanningLines.VALIDATE("No.");
            JobPlanningLines."Line No." := JobLineNo;
            JobPlanningLines.INSERT(TRUE);
        END;
        IF CustomSetup."Seminars Account" <> '' THEN BEGIN
            JobPlanningLines.SETRANGE("Job No.", Job."No.");
            JobPlanningLines.FINDLAST;
            JobLineNo := 0;
            JobLineNo := (JobPlanningLines."Line No." + 100);
            JobPlanningLines.RESET;
            JobPlanningLines.INIT;
            JobPlanningLines."Job No." := Job."No.";
            JobPlanningLines."Job Task No." := JobTaskNo;
            JobPlanningLines."Line Type" := JobPlanningLines."Line Type"::Schedule;
            JobPlanningLines.Type := JobPlanningLines.Type::"G/L Account";
            JobPlanningLines."No." := CustomSetup."Seminars Account";
            JobPlanningLines.VALIDATE("No.");
            JobPlanningLines."Line No." := JobLineNo;
            JobPlanningLines.INSERT(TRUE);
        END;
        IF CustomSetup."Salaries & Wages Account" <> '' THEN BEGIN
            JobPlanningLines.SETRANGE("Job No.", Job."No.");
            JobPlanningLines.FINDLAST;
            JobLineNo := 0;
            JobLineNo := (JobPlanningLines."Line No." + 100);
            JobPlanningLines.RESET;
            JobPlanningLines.INIT;
            JobPlanningLines."Job No." := Job."No.";
            JobPlanningLines."Job Task No." := JobTaskNo;
            JobPlanningLines."Line Type" := JobPlanningLines."Line Type"::Schedule;
            JobPlanningLines.Type := JobPlanningLines.Type::"G/L Account";
            JobPlanningLines."No." := CustomSetup."Salaries & Wages Account";
            JobPlanningLines.VALIDATE("No.");
            JobPlanningLines."Line No." := JobLineNo;
            JobPlanningLines.INSERT(TRUE);
        END;
        IF CustomSetup."Insurance Account" <> '' THEN BEGIN
            JobPlanningLines.SETRANGE("Job No.", Job."No.");
            JobPlanningLines.FINDLAST;
          JobLineNo := 0;
            JobLineNo := (JobPlanningLines."Line No." + 100);
            JobPlanningLines.RESET;
            JobPlanningLines.INIT;
            JobPlanningLines."Job No." := Job."No.";
            JobPlanningLines."Job Task No." := JobTaskNo;
            JobPlanningLines."Line Type" := JobPlanningLines."Line Type"::Schedule;
            JobPlanningLines.Type := JobPlanningLines.Type::"G/L Account";
            JobPlanningLines."No." := CustomSetup."Insurance Account";
            JobPlanningLines.VALIDATE("No.");
            JobPlanningLines."Line No." := JobLineNo;
            JobPlanningLines.INSERT(TRUE);
        END;
        IF CustomSetup."Utilities Account" <> '' THEN BEGIN
            JobPlanningLines.SETRANGE("Job No.", Job."No.");
            JobPlanningLines.FINDLAST;
          JobLineNo := 0;
            JobLineNo := (JobPlanningLines."Line No." + 100);
            JobPlanningLines.RESET;
            JobPlanningLines.INIT;
            JobPlanningLines."Job No." := Job."No.";
            JobPlanningLines."Job Task No." := JobTaskNo;
            JobPlanningLines."Line Type" := JobPlanningLines."Line Type"::Schedule;
            JobPlanningLines.Type := JobPlanningLines.Type::"G/L Account";
            JobPlanningLines."No." := CustomSetup."Utilities Account";
            JobPlanningLines.VALIDATE("No.");
            JobPlanningLines."Line No." := JobLineNo;
            JobPlanningLines.INSERT(TRUE);
        END;
        IF CustomSetup."Bonds Account" <> '' THEN BEGIN
            JobPlanningLines.SETRANGE("Job No.", Job."No.");
            JobPlanningLines.FINDLAST;
          JobLineNo := 0;
            JobLineNo := (JobPlanningLines."Line No." + 100);
            JobPlanningLines.RESET;
            JobPlanningLines.INIT;
            JobPlanningLines."Job No." := Job."No.";
            JobPlanningLines."Job Task No." := JobTaskNo;
            JobPlanningLines."Line Type" := JobPlanningLines."Line Type"::Schedule;
            JobPlanningLines.Type := JobPlanningLines.Type::"G/L Account";
            JobPlanningLines."No." := CustomSetup."Bonds Account";
            JobPlanningLines.VALIDATE("No.");
            JobPlanningLines."Line No." := JobLineNo;
            JobPlanningLines.INSERT(TRUE);
         END;
        IF CustomSetup."Others Account" <> '' THEN BEGIN
            JobPlanningLines.SETRANGE("Job No.", Job."No.");
            JobPlanningLines.FINDLAST;
          JobLineNo := 0;
            JobLineNo := (JobPlanningLines."Line No." + 100);
            JobPlanningLines.RESET;
            JobPlanningLines.INIT;
            JobPlanningLines."Job No." := Job."No.";
            JobPlanningLines."Job Task No." := JobTaskNo;
            JobPlanningLines."Line Type" := JobPlanningLines."Line Type"::Schedule;
            JobPlanningLines.Type := JobPlanningLines.Type::"G/L Account";
            JobPlanningLines."No." := CustomSetup."Others Account";
            JobPlanningLines.VALIDATE("No.");
            JobPlanningLines."Line No." := JobLineNo;
            JobPlanningLines.INSERT(TRUE);
         END;
       END ELSE BEGIN
         ERROR(Error008,JobTaskNo);
      END;
    END;

    BEGIN
    END.
  }
}

