OBJECT Codeunit 50569 Custom Chart Management
{
  OBJECT-PROPERTIES
  {
    Date=08/24/18;
    Time=[ 4:21:10 PM];
    Modified=Yes;
    Version List=NAVOC1.00.03.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ItemNo@1000 : Code[20];
      LocCode@1001 : ARRAY [1000000] OF Code[20];
      SalesCycleCode@1004 : ARRAY [100000] OF Code[20];
      CampaignStatusCode@1006 : ARRAY [1000000] OF Code[20];
      IndustryGroupCode@1008 : ARRAY [1000000] OF Code[20];
      UserState@1003 : ARRAY [1000000] OF Option;
      LicenseType@1002 : Option;
      OppStatus@1005 : ARRAY [1000000] OF Option;
      ProductStatusOption@1007 : ARRAY [1000000] OF Option;

    PROCEDURE GenerateDataInventoryByLocation@3(VAR BusChartBuff@1000 : Record 485;ItemNum@1001 : Code[20]);
    VAR
      LocationWiseInventory@1002 : Query 50006;
      i@1003 : Integer;
      j@1004 : Integer;
    BEGIN
      WITH BusChartBuff DO BEGIN
        Initialize;

        AddMeasure('Inventory', 1, "Data Type"::Decimal, "Chart Type"::Column);

        SetXAxis('Location', "Data Type"::String);

        LocationWiseInventory.SETRANGE(LocationWiseInventory.Item_No, ItemNum);
        ItemNo := ItemNum;
        i := 0;
        j := 0;
        LocationWiseInventory.OPEN;
        WHILE LocationWiseInventory.READ DO BEGIN
          i += 1;
          j += 1;
          BusChartBuff.AddColumn(LocationWiseInventory.Location_Code);
          SetValue('Inventory',i-1, LocationWiseInventory.Sum_Remaining_Quantity);
          LocCode[j] := LocationWiseInventory.Location_Code;
        END;
        LocationWiseInventory.CLOSE;
      END;
    END;

    PROCEDURE InventoryByLocationOnDataPointClicked@5(BusChartBuf@1000 : Record 485);
    BEGIN
      DrilldownLocationInventory(LocCode[BusChartBuf."Drill-Down X Index" + 1]);
    END;

    PROCEDURE DrilldownLocationInventory@4(LocationCode@1000 : Code[20]);
    VAR
      ItemLedgerEntries@1001 : Record 32;
    BEGIN
      ItemLedgerEntries.SETRANGE("Item No.", ItemNo);
      ItemLedgerEntries.SETRANGE("Location Code", LocationCode);
      PAGE.RUN(PAGE::"Item Ledger Entries", ItemLedgerEntries);
    END;

    PROCEDURE GenerateDataUserByState@1(VAR BusChartBuff@1000 : Record 485);
    VAR
      User@1001 : Record 2000000120;
      UserByState@1002 : Query 50007;
      i@1003 : Integer;
      j@1004 : Integer;
      TotalUser@1005 : Integer;
    BEGIN
      WITH BusChartBuff DO BEGIN
        Initialize;
        AddMeasure('Users %', 1, "Data Type"::Decimal, "Chart Type"::Pie);
        SetXAxis('State', "Data Type"::String);
        i := 0;
        j := 0;
        TotalUser := User.COUNT;
        UserByState.OPEN;
        WHILE UserByState.READ DO BEGIN
          i += 1;
          j += 1;
          BusChartBuff.AddColumn(FORMAT(UserByState.State));
          SetValue('Users %',i-1, ROUND(((UserByState.Count_/TotalUser)*100),1, '='));
          UserState[j] := UserByState.State;
        END;
        UserByState.CLOSE;
      END;
    END;

    PROCEDURE UserByStateOnDataPointClicked@8(BusChartBuf@1000 : Record 485);
    BEGIN
      DrilldownUserByState(UserState[BusChartBuf."Drill-Down X Index" + 1]);
    END;

    PROCEDURE DrilldownUserByState@7(UState@1000 : Option);
    VAR
      User@1001 : Record 2000000120;
    BEGIN
      User.SETRANGE(State, UState);
      PAGE.RUN(PAGE::Users, User);
    END;

    PROCEDURE GenerateDataActiveSessionByLicense@2(VAR BusChartBuff@1000 : Record 485);
    VAR
      User@1001 : Record 2000000120;
      ActiveUserByState@1002 : Query 50005;
      i@1003 : Integer;
      j@1004 : Integer;
    BEGIN
       WITH BusChartBuff DO BEGIN
        Initialize;
        AddMeasure('Total Active Session', 1, "Data Type"::Decimal, "Chart Type"::Column);
        AddMeasure('Total User by License Type', 1, "Data Type"::Decimal, "Chart Type"::Column);
        SetXAxis('License Type', "Data Type"::String);
        i := 0;
        j := 0;
        ActiveUserByState.OPEN;
        WHILE ActiveUserByState.READ DO BEGIN
          IF ActiveUserByState.Active THEN BEGIN
            i += 1;
            j += 1;
            BusChartBuff.AddColumn(FORMAT(ActiveUserByState.License_Type));
            SetValue('Total Active Session',i-1, ActiveUserByState.Count_);
            User.SETRANGE("License Type",ActiveUserByState.License_Type);
            User.SETRANGE(State,User.State::Enabled);
            SetValue('Total User by License Type', i-1, User.COUNT);
            UserState[j] := ActiveUserByState.License_Type;
          END;
        END;
        ActiveUserByState.CLOSE;
       END;
    END;

    PROCEDURE ActiveSessionByLicenseTypeOnDataPointClicked@22(BusChartBuf@1000 : Record 485);
    BEGIN
      DrilldownActiveSessionByLicenseType(UserState[BusChartBuf."Drill-Down X Index" + 1], BusChartBuf."Drill-Down Measure Index");
    END;

    PROCEDURE DrilldownActiveSessionByLicenseType@21(LicenseType@1000 : Option;DrillDownMeasureIndex@1002 : Integer);
    VAR
      User@1001 : Record 2000000120;
    BEGIN
      IF DrillDownMeasureIndex = 0 THEN
        User.SETRANGE(Active, TRUE);
      User.SETRANGE("License Type", LicenseType);
      User.SETRANGE(State,User.State::Enabled);

      PAGE.RUN(PAGE::Users, User);
    END;

    PROCEDURE GenerateDataActiveBalanceLicense@6(VAR BusChartBuff@1000 : Record 485);
    VAR
      User@1001 : Record 2000000120;
      ActiveBalanceLicense@1002 : Query 50008;
      i@1003 : Integer;
      j@1004 : Integer;
      TotalCountPerBalanceLicense@1005 : ARRAY [2] OF Integer;
      TotalActiveUsers@1006 : ARRAY [2] OF Integer;
    BEGIN
       WITH BusChartBuff DO BEGIN
        Initialize;
        AddMeasure('Total Balanced License', 1, "Data Type"::Decimal, "Chart Type"::Column);
        AddMeasure('Total Active Session', 1, "Data Type"::Decimal, "Chart Type"::Column);
        SetXAxis('Balance Type', "Data Type"::String);
        i := 0;
        j := 0;
        ActiveBalanceLicense.OPEN;
        WHILE ActiveBalanceLicense.READ DO BEGIN
            i += 1;
            j += 1;
            IF ActiveBalanceLicense.Balance_License THEN BEGIN
              TotalCountPerBalanceLicense[1] += ActiveBalanceLicense.Count_;
              IF ActiveBalanceLicense.Active THEN
                TotalActiveUsers[1] := ActiveBalanceLicense.Count_;
            END ELSE BEGIN
              TotalCountPerBalanceLicense[2] += ActiveBalanceLicense.Count_;
              IF ActiveBalanceLicense.Active THEN
                TotalActiveUsers[2] := ActiveBalanceLicense.Count_;
            END;
        END;

        BusChartBuff.AddColumn('Balanced License');
        SetValue('Total Balanced License',0, TotalCountPerBalanceLicense[1]);
        SetValue('Total Active Session',0, TotalActiveUsers[1]);
        BusChartBuff.AddColumn('Unbalanced License');
        SetValue('Total Balanced License',1, TotalCountPerBalanceLicense[2]);
        SetValue('Total Active Session',1, TotalActiveUsers[2]);

        ActiveBalanceLicense.CLOSE;
       END;
    END;

    PROCEDURE ActiveBalanceLicenseOnDataPointClicked@89(BusChartBuf@1000 : Record 485);
    BEGIN
      DrilldownActiveBalanceLicense(BusChartBuf."Drill-Down X Index", BusChartBuf."Drill-Down Measure Index");
    END;

    PROCEDURE DrilldownActiveBalanceLicense@88(DrillDownXIndex@1000 : Integer;DrillDownMeasureIndex@1002 : Integer);
    VAR
      User@1001 : Record 2000000120;
    BEGIN
      User.SETRANGE(State, User.State::Enabled);
      IF DrillDownXIndex = 0 THEN
        User.SETRANGE("Balance License", TRUE)
      ELSE
        User.SETRANGE("Balance License", FALSE);

      IF DrillDownMeasureIndex = 1 THEN
        User.SETRANGE(Active, TRUE);

      PAGE.RUN(PAGE::Users, User);
    END;

    PROCEDURE GenerateDataOpportunitiesBySalesCycle@9(VAR BusChartBuff@1000 : Record 485;FilterExpression@1005 : Text;ChartType@1007 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel') : Text;
    VAR
      Opportunity@1001 : Record 5092;
      OpportunitiesBySalesCycle@1002 : Query 50009;
      i@1003 : Integer;
      j@1004 : Integer;
      TotalOpportunities@1006 : Integer;
      ByPercentage@1008 : Boolean;
    BEGIN
        IF (ChartType = ChartType::Pie) OR (ChartType = ChartType::Doughnut) OR (ChartType = ChartType::Funnel) OR (ChartType = ChartType::Funnel) THEN
          ByPercentage := TRUE;

        WITH BusChartBuff DO BEGIN
          Initialize;
          IF ByPercentage THEN
            AddMeasure('Opportunities %', 1, "Data Type"::Decimal, ChartType)
          ELSE
            AddMeasure('Opportunities', 1, "Data Type"::Decimal, ChartType);
          SetXAxis('Sales Cycle', "Data Type"::String);
          i := 0;
          j := 0;

          OpportunitiesBySalesCycle.SETFILTER(Creation_Date,FilterExpression);
          Opportunity.SETFILTER("Creation Date",FilterExpression);
          TotalOpportunities := Opportunity.COUNT;

          OpportunitiesBySalesCycle.OPEN;
          WHILE OpportunitiesBySalesCycle.READ DO BEGIN
              i += 1;
              j += 1;
              BusChartBuff.AddColumn(OpportunitiesBySalesCycle.Code);
              IF ByPercentage THEN
                SetValue('Opportunities %',i-1, (OpportunitiesBySalesCycle.Count_ / TotalOpportunities) * 100)
              ELSE
                SetValue('Opportunities',i-1, OpportunitiesBySalesCycle.Count_);
              SalesCycleCode[j] := OpportunitiesBySalesCycle.Code;
          END;
          OpportunitiesBySalesCycle.CLOSE;
        END;

      EXIT(Opportunity.GETFILTERS);
    END;

    PROCEDURE OpportunitiesBySalesCycleOnDataPointClicked@16(BusChartBuf@1000 : Record 485;FilterExpression@1001 : Text);
    BEGIN
      DrilldownOpportunitiesBySalesCycle(SalesCycleCode[BusChartBuf."Drill-Down X Index" + 1],FilterExpression);
    END;

    PROCEDURE DrilldownOpportunitiesBySalesCycle@15(SalesCycleCode@1000 : Code[20];FilterExpression@1002 : Text);
    VAR
      Opportunity@1001 : Record 5092;
    BEGIN
      Opportunity.SETRANGE("Sales Cycle Code", SalesCycleCode);
      Opportunity.SETFILTER("Creation Date", FilterExpression);
      PAGE.RUN(PAGE::"Opportunity List", Opportunity);
    END;

    PROCEDURE GenerateDataOpportunityByStatus@12(VAR BusChartBuff@1000 : Record 485;FilterExpression@1003 : Text;ChartType@1011 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel') : Text;
    VAR
      Opportunity@1006 : Record 5092;
      OpportunityByStatus@1002 : Query 50010;
      RecRef@1007 : RecordRef;
      FieldRef@1008 : FieldRef;
      OppStat@1001 : Option;
      OppStatusStr@1005 : Text;
      Counter@1009 : Integer;
      TotalOpportunities@1010 : Integer;
      ByPercentage@1004 : Boolean;
    BEGIN
        IF (ChartType = ChartType::Pie) OR (ChartType = ChartType::Doughnut) OR (ChartType = ChartType::Funnel) THEN
          ByPercentage := TRUE;

        RecRef.GETTABLE(Opportunity);
        FieldRef := RecRef.FIELD(Opportunity.FIELDNO(Status));
        OppStatusStr := FORMAT(FieldRef.OPTIONCAPTION);
        WITH BusChartBuff DO BEGIN
          Initialize;
          IF ByPercentage THEN
            AddMeasure('Opportunity %', 1, "Data Type"::Decimal, ChartType)
          ELSE
            AddMeasure('Opportunity', 1, "Data Type"::Decimal, ChartType);
          SetXAxis('Opportunity Status', "Data Type"::String);

          FOR Counter := 1 TO CountSubString(OppStatusStr,',') DO BEGIN
            BusChartBuff.AddColumn(SELECTSTR(Counter, OppStatusStr));
            OppStatus[Counter] := Counter-1;
          END;

          OpportunityByStatus.SETFILTER(Creation_Date,FilterExpression);
          Opportunity.SETFILTER("Creation Date",FilterExpression);
          TotalOpportunities := Opportunity.COUNT;

          OpportunityByStatus.OPEN;
          WHILE OpportunityByStatus.READ DO BEGIN
            IF ByPercentage THEN
              SetValue('Opportunity %',OpportunityByStatus.Status, (OpportunityByStatus.Count_ / Opportunity.COUNT) * 100)
            ELSE
              SetValue('Opportunity',OpportunityByStatus.Status, OpportunityByStatus.Count_);
          END;
          OpportunityByStatus.CLOSE;
        END;

      EXIT(Opportunity.GETFILTERS);
    END;

    PROCEDURE OpportunityByStatusOnDataPointClicked@11(BusChartBuf@1000 : Record 485;FilterExpression@1001 : Text);
    BEGIN
      DrilldownOpportunityByStatus(OppStatus[BusChartBuf."Drill-Down X Index" + 1],FilterExpression);
    END;

    PROCEDURE DrilldownOpportunityByStatus@10(OppStatus@1000 : Option;FilterExpression@1002 : Text);
    VAR
      Opportunity@1001 : Record 5092;
    BEGIN
      Opportunity.SETRANGE(Status, OppStatus);
      Opportunity.SETFILTER("Creation Date", FilterExpression);
      PAGE.RUN(PAGE::"Opportunity List", Opportunity);
    END;

    PROCEDURE GenerateDataValueBySalesCycle@17(VAR BusChartBuff@1000 : Record 485;FilterExpression@1005 : Text;ChartType@1006 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel') : Text;
    VAR
      ValueBySalesCycle@1001 : Query 50011;
      Opportunity@1002 : Record 5092;
      i@1003 : Integer;
      j@1004 : Integer;
    BEGIN
       WITH BusChartBuff DO BEGIN
        Initialize;
        AddMeasure(Opportunity.FIELDCAPTION("Estimated Value (LCY)"), 1, "Data Type"::Decimal, ChartType);
        AddMeasure(Opportunity.FIELDCAPTION("Calcd. Current Value (LCY)"), 1, "Data Type"::Decimal, ChartType);
        SetXAxis('Sales Cycle', "Data Type"::String);
        i := 0;
        j := 0;

        ValueBySalesCycle.SETFILTER(Creation_Date,FilterExpression);
        Opportunity.SETFILTER("Creation Date",FilterExpression);

        ValueBySalesCycle.OPEN;
        WHILE ValueBySalesCycle.READ DO BEGIN
            i += 1;
            j += 1;
            BusChartBuff.AddColumn(ValueBySalesCycle.Code);
            SetValue(Opportunity.FIELDCAPTION("Estimated Value (LCY)"),i-1, ValueBySalesCycle.Sum_Estimated_Value_LCY);
            SetValue(Opportunity.FIELDCAPTION("Calcd. Current Value (LCY)"),i-1, ValueBySalesCycle.Sum_Calcd_Current_Value_LCY);
            SalesCycleCode[j] := ValueBySalesCycle.Code;
        END;
        ValueBySalesCycle.CLOSE;
       END;

      EXIT(Opportunity.GETFILTERS);
    END;

    PROCEDURE ValueBySalesCycleOnDataPointClicked@14(BusChartBuf@1000 : Record 485;FilterExpression@1001 : Text);
    BEGIN
      DrilldownValueBySalesCycle(SalesCycleCode[BusChartBuf."Drill-Down X Index" + 1],FilterExpression);
    END;

    PROCEDURE DrilldownValueBySalesCycle@13(SalesCycleCode@1000 : Code[20];FilterExpression@1002 : Text);
    VAR
      Opportunity@1001 : Record 5092;
    BEGIN
      Opportunity.SETRANGE("Sales Cycle Code", SalesCycleCode);
      Opportunity.SETFILTER("Sales Category", '<>%1', Opportunity."Sales Category"::Outlier);
      Opportunity.SETFILTER("Creation Date", FilterExpression);
      PAGE.RUN(PAGE::"Opportunity List", Opportunity);
    END;

    PROCEDURE GenerateDataOppValueByStatus@20(VAR BusChartBuff@1000 : Record 485;FilterExpression@1003 : Text;ChartType1@1010 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel';ChartType2@1011 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel') : Text;
    VAR
      OppValueByStatus@1002 : Query 50012;
      Opportunity@1001 : Record 5092;
      RecRef@1009 : RecordRef;
      FieldRef@1008 : FieldRef;
      OppStat@1007 : Option;
      OppStatusStr@1006 : Text;
      Counter@1005 : Integer;
      TotalOpportunities@1004 : Integer;
    BEGIN
       RecRef.GETTABLE(Opportunity);
       FieldRef := RecRef.FIELD(Opportunity.FIELDNO(Status));
       OppStatusStr := FORMAT(FieldRef.OPTIONCAPTION);

       WITH BusChartBuff DO BEGIN
        Initialize;
        AddMeasure(Opportunity.FIELDCAPTION("Estimated Value (LCY)"), 1, "Data Type"::Decimal, ChartType1);
        AddMeasure(Opportunity.FIELDCAPTION("Calcd. Current Value (LCY)"), 1, "Data Type"::Decimal, ChartType2);
        SetXAxis('Opportunity Status', "Data Type"::String);

        OppValueByStatus.SETFILTER(Creation_Date,FilterExpression);
        Opportunity.SETFILTER("Creation Date",FilterExpression);

        OppValueByStatus.OPEN;
        FOR Counter := 1 TO CountSubString(OppStatusStr, ',') DO BEGIN
          BusChartBuff.AddColumn(SELECTSTR(Counter, OppStatusStr));
          OppStatus[Counter] := Counter-1;
        END;
        WHILE OppValueByStatus.READ DO BEGIN
            SetValue(Opportunity.FIELDCAPTION("Estimated Value (LCY)"),OppValueByStatus.Status, OppValueByStatus.Sum_Estimated_Value_LCY);
            SetValue(Opportunity.FIELDCAPTION("Calcd. Current Value (LCY)"),OppValueByStatus.Status, OppValueByStatus.Sum_Calcd_Current_Value_LCY);
        END;
        OppValueByStatus.CLOSE;
       END;

      EXIT(Opportunity.GETFILTERS);
    END;

    PROCEDURE OppValueByStatusOnDataPointClicked@19(BusChartBuf@1000 : Record 485;FilterExpression@1001 : Text);
    BEGIN
      DrilldownOppValueByStatus(OppStatus[BusChartBuf."Drill-Down X Index" + 1],FilterExpression);
    END;

    PROCEDURE DrilldownOppValueByStatus@18(OppStatus@1000 : Option;FilterExpression@1002 : Text);
    VAR
      Opportunity@1001 : Record 5092;
    BEGIN
      Opportunity.SETRANGE(Status, OppStatus);
      Opportunity.SETFILTER("Sales Category", '<>%1', Opportunity."Sales Category"::Outlier);
      Opportunity.SETFILTER("Creation Date", FilterExpression);
      PAGE.RUN(PAGE::"Opportunity List", Opportunity);
    END;

    PROCEDURE GenerateDataCampaignByStatus@25(VAR BusChartBuff@1000 : Record 485;ChartType@1005 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel');
    VAR
      CampaignByStatus@1002 : Query 50013;
      CampaignStatus@1001 : Record 5073;
      i@1003 : Integer;
      j@1004 : Integer;
    BEGIN
       WITH BusChartBuff DO BEGIN
        Initialize;
        AddMeasure('Total Campaign', 1, "Data Type"::Decimal, ChartType);
        SetXAxis('Campaign Status', "Data Type"::String);
        i := 0;
        j := 0;
        CampaignByStatus.OPEN;
        WHILE CampaignByStatus.READ DO BEGIN
            i += 1;
            j += 1;
            CampaignStatus.GET(CampaignByStatus.Code);
            BusChartBuff.AddColumn(CampaignStatus.Description);
            SetValue('Total Campaign',i-1, CampaignByStatus.Count_);
            CampaignStatusCode[j] := CampaignByStatus.Code;
        END;
        CampaignByStatus.CLOSE;
       END;
    END;

    PROCEDURE CampaignByStatusOnDataPointClicked@24(BusChartBuf@1000 : Record 485);
    BEGIN
      DrilldownCampaignByStatus(CampaignStatusCode[BusChartBuf."Drill-Down X Index" + 1]);
    END;

    PROCEDURE DrilldownCampaignByStatus@23(CampaignStatusCode@1000 : Code[20]);
    VAR
      Campaign@1001 : Record 5071;
    BEGIN
      Campaign.SETRANGE("Status Code", CampaignStatusCode);
      PAGE.RUN(PAGE::"Campaign List", Campaign);
    END;

    PROCEDURE GenerateDataProductStatus@28(VAR BusChartBuff@1000 : Record 485;ChartType@1005 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel');
    VAR
      ProductStatus@1002 : Query 50014;
      Campaign@1001 : Record 5071;
      i@1003 : Integer;
      j@1004 : Integer;
    BEGIN
       WITH BusChartBuff DO BEGIN
        Initialize;
        AddMeasure('Total Campaign', 1, "Data Type"::Decimal, ChartType);
        SetXAxis('Product Status', "Data Type"::String);
        i := 0;
        j := 0;
        ProductStatus.OPEN;
        WHILE ProductStatus.READ DO BEGIN
            i += 1;
            j += 1;
            BusChartBuff.AddColumn(FORMAT(ProductStatus.Product_Status));
            SetValue('Total Campaign',i-1, ProductStatus.Count_);
            ProductStatusOption[j] := ProductStatus.Product_Status;
        END;
        ProductStatus.CLOSE;
       END;
    END;

    PROCEDURE ProductStatusOnDataPointClicked@27(BusChartBuf@1000 : Record 485);
    BEGIN
      DrilldownProductStatus(ProductStatusOption[BusChartBuf."Drill-Down X Index" + 1]);
    END;

    PROCEDURE DrilldownProductStatus@26(ProductStatusOption@1000 : Option);
    VAR
      Campaign@1001 : Record 5071;
    BEGIN
      Campaign.SETRANGE("Product Status", ProductStatusOption);
      PAGE.RUN(PAGE::"Campaign List", Campaign);
    END;

    PROCEDURE GenerateDataCampaignByIndustry@31(VAR BusChartBuff@1000 : Record 485;ChartType@1005 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel');
    VAR
      IndustryGroup@1001 : Record 5057;
      CampaignByIndustry@1002 : Query 50015;
      i@1003 : Integer;
      j@1004 : Integer;
    BEGIN
       WITH BusChartBuff DO BEGIN
        Initialize;
        AddMeasure('Total Campaign', 1, "Data Type"::Decimal, ChartType);
        SetXAxis('Industry', "Data Type"::String);
        i := 0;
        j := 0;
        CampaignByIndustry.OPEN;
        WHILE CampaignByIndustry.READ DO BEGIN
            j += 1;
            IndustryGroup.GET(CampaignByIndustry.Code);
            BusChartBuff.AddColumn(IndustryGroup.Description);
            SetValue('Total Campaign',i, CampaignByIndustry.Count_);
            IndustryGroupCode[j] := CampaignByIndustry.Code;
            i += 1;
        END;
        CampaignByIndustry.CLOSE;
       END;
    END;

    PROCEDURE CampaignByIndustryOnDataPointClicked@30(BusChartBuf@1000 : Record 485);
    BEGIN
      DrilldownCampaignByIndustry(IndustryGroupCode[BusChartBuf."Drill-Down X Index" + 1]);
    END;

    PROCEDURE DrilldownCampaignByIndustry@29(IndustryGroupCode@1000 : Code[20]);
    VAR
      AssignedIndustry@1001 : Record 50033;
      Campaign@1002 : Record 5071;
    BEGIN
      AssignedIndustry.SETRANGE("Industry Group Code",IndustryGroupCode);
      IF AssignedIndustry.FINDSET THEN
        REPEAT
          Campaign.GET(AssignedIndustry."Campaign Code");
          Campaign.MARK(TRUE);
        UNTIL AssignedIndustry.NEXT = 0;
      Campaign.MARKEDONLY(TRUE);
      PAGE.RUN(PAGE::"Campaign List", Campaign);
    END;

    PROCEDURE GenerateDataOpportunitiesSalesFunnel@34(VAR BusChartBuff@1000 : Record 485;SalesCycleCodeParam@1017 : Code[10];FilterExpression@1005 : Text;ChartType@1007 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel') : Text;
    VAR
      Opportunity@1016 : Record 5092;
      SalesFunnel@1015 : Query 50018;
      RecRef@1014 : RecordRef;
      FieldRef@1013 : FieldRef;
      OppStat@1012 : Option;
      OppStatusStr@1011 : Text;
      Counter@1010 : Integer;
      TotalOpportunities@1009 : Integer;
      ByPercentage@1001 : Boolean;
      OpportunitiesBySalesCycle@1002 : Query 50009;
      i@1003 : Integer;
      j@1004 : Integer;
    BEGIN
        IF (ChartType = ChartType::Pie) OR (ChartType = ChartType::Doughnut) OR (ChartType = ChartType::Funnel) OR (ChartType = ChartType::Funnel) THEN
          ByPercentage := TRUE;

        WITH BusChartBuff DO BEGIN
          Initialize;
          IF ByPercentage THEN
            AddMeasure('Opportunities %', 1, "Data Type"::Decimal, ChartType)
          ELSE
            AddMeasure('Opportunities', 1, "Data Type"::Decimal, ChartType);
          SetXAxis('Sales Cycle Stage Description', "Data Type"::String);
          i := 0;
          j := 0;

          SalesFunnel.SETFILTER(Sales_Cycle_Code,SalesCycleCodeParam);
          Opportunity.SETFILTER("Sales Cycle Code",SalesCycleCodeParam);
          SalesFunnel.SETFILTER(Creation_Date,FilterExpression);
          Opportunity.SETFILTER("Creation Date",FilterExpression);
          TotalOpportunities := Opportunity.COUNT;

          SalesFunnel.OPEN;
          WHILE SalesFunnel.READ DO BEGIN
              i += 1;
              j += 1;
              BusChartBuff.AddColumn(SalesFunnel.Sales_Cycle_Stage_Description);
              IF ByPercentage THEN
                SetValue('Opportunities %',i-1, (SalesFunnel.Count_ / TotalOpportunities) * 100)
              ELSE
                SetValue('Opportunities',i-1, SalesFunnel.Count_);
          END;
          SalesFunnel.CLOSE;
        END;

      EXIT(Opportunity.GETFILTERS);
    END;

    PROCEDURE OpportunitiesSalesFunnelOnDataPointClicked@33(BusChartBuf@1000 : Record 485;FilterExpression@1001 : Text);
    BEGIN
      DrilldownOpportunitiesSalesFunnel(SalesCycleCode[BusChartBuf."Drill-Down X Index" + 1],FilterExpression);
    END;

    PROCEDURE DrilldownOpportunitiesSalesFunnel@32(SalesCycleCode@1000 : Code[20];FilterExpression@1002 : Text);
    VAR
      Opportunity@1001 : Record 5092;
    BEGIN
      Opportunity.SETRANGE("Sales Cycle Code", SalesCycleCode);
      Opportunity.SETFILTER("Creation Date", FilterExpression);
      PAGE.RUN(PAGE::"Opportunity List", Opportunity);
    END;

    PROCEDURE GenerateDataSalesByPerson@39(VAR BusChartBuff@1000 : Record 485;FilterExpression@1005 : Text;ChartType@1007 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel') : Text;
    VAR
      Salesperson@1016 : Record 13;
      TotalSales@1009 : Integer;
      ByPercentage@1001 : Boolean;
      SalesByPerson@1002 : Query 50019;
      i@1003 : Integer;
      j@1004 : Integer;
    BEGIN
        WITH BusChartBuff DO BEGIN
          Initialize;
          AddMeasure(Salesperson.FIELDCAPTION("Calcd. Current Value (LCY)"), 1, "Data Type"::Decimal, ChartType);
          SetXAxis('Sales', "Data Type"::String);
          i := 0;
          j := 0;
          SalesByPerson.SETFILTER(Calcd_Current_Value_LCY, '<>0');
      //    SalesByPerson.SETFILTER(ca
          Salesperson.SETFILTER("Calcd. Current Value (LCY)", '<>0');
          SalesByPerson.SETFILTER(Date_Filter,FilterExpression);
          SalesByPerson.SETFILTER(Completed_Filter, '100');
          Salesperson.SETFILTER("Date Filter",FilterExpression);

          SalesByPerson.OPEN;
          WHILE SalesByPerson.READ DO BEGIN
              i += 1;
              j += 1;
              BusChartBuff.AddColumn(SalesByPerson.Name);
              SetValue(Salesperson.FIELDCAPTION("Calcd. Current Value (LCY)"),i-1, SalesByPerson.Calcd_Current_Value_LCY);
          END;
          SalesByPerson.CLOSE;
        END;

      EXIT(Salesperson.GETFILTER("Date Filter"));
    END;

    PROCEDURE SalesByPersonDataPointClicked@38(BusChartBuf@1000 : Record 485;FilterExpression@1001 : Text);
    BEGIN
      DrilldownSalesByPerson(SalesCycleCode[BusChartBuf."Drill-Down X Index" + 1],FilterExpression);
    END;

    PROCEDURE DrilldownSalesByPerson@35(SalesCycleCode@1000 : Code[20];FilterExpression@1002 : Text);
    VAR
      Salesperson@1001 : Record 13;
    BEGIN
      Salesperson.SETFILTER("Estimated Value (LCY)", '<>0');
      Salesperson.SETFILTER("Date Filter", FilterExpression);
      PAGE.RUN(PAGE::"Salespeople/Purchasers", Salesperson);
    END;

    PROCEDURE GenerateDataTicketStatus@40(VAR BusChartBuff@1000 : Record 485);
    VAR
      User@1001 : Record 2000000120;
      TicketStatusCount@1002 : Query 50020;
      i@1003 : Integer;
      j@1004 : Integer;
      TotalUser@1005 : Integer;
    BEGIN
      WITH BusChartBuff DO BEGIN
        Initialize;
        AddMeasure('Label', 1, "Data Type"::Decimal, "Chart Type"::Pie);
        SetXAxis('Value', "Data Type"::String);
        i := 0;
      //  j := 0;
        TicketStatusCount.OPEN;
        WHILE TicketStatusCount.READ DO BEGIN
          i += 1;
          BusChartBuff.AddColumn(FORMAT(TicketStatusCount.Status));
          SetValue('Value',i-1, TicketStatusCount.StatusCount);
        END;
        TicketStatusCount.CLOSE;
      END;
    END;

    LOCAL PROCEDURE CountSubString@36(String@1000 : Text;Separator@1001 : Text[1]) : Integer;
    VAR
      CharCount@1002 : Integer;
      CharPos@1003 : Integer;
      CountingString@1004 : Text;
    BEGIN
      // This function returns the count of elements in the string
      // Character is the delimiter you are looking for ','
      CharCount := 0; // local Var
      CharPos := 0; // local Var
      CountingString := ''; // local Var

      CountingString := TrimString(String,Separator); //Call to 2nd function below
      CharPos := STRPOS(String,Separator);

      REPEAT
      CountingString := COPYSTR(CountingString,CharPos+1);
      CharCount := CharCount + 1;
      CharPos := STRPOS(CountingString,Separator);
      UNTIL CharPos = 0;

      EXIT(CharCount + 1);
    END;

    LOCAL PROCEDURE TrimString@37(String@1000 : Text;Separator@1001 : Text[1]) TrimmedString : Text;
    BEGIN
      //This removes the Character from the beginning and/or end of the string and returns the trimmed string
      TrimmedString := String;
      IF (STRPOS(String,Separator) = 1) THEN
      TrimmedString := COPYSTR(String,2);
      IF (COPYSTR(String,STRLEN(String)) = Separator) THEN
      TrimmedString := COPYSTR(TrimmedString,1,STRLEN(TrimmedString)-1);
    END;

    BEGIN
    END.
  }
}

