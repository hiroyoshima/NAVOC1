OBJECT Codeunit 50570 Power Shell Runner
{
  OBJECT-PROPERTIES
  {
    Date=10/30/23;
    Time=[ 5:54:41 PM];
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            AddUser2;
          END;

  }
  CODE
  {
    VAR
      PowerShellRunner@1000 : DotNet "'Microsoft.Dynamics.Nav.PowerShellRunner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.PowerShellRunner";
      PSObject@1001 : DotNet "'System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.System.Management.Automation.PSObject";
      ResultEnumerator@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      ErrorEnumerator@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.IEnumerator`1";
      Created@1002 : Boolean;
      LogOut@1005 : OutStream;
      Result@1006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      ExceptionMsg@1010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      i@1007 : Integer;
      Cmdlet@1008 : TextConst 'ENU="if (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] ''Administrator'')) {
        if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000) {
            $Command = ""-File `"""" + $MyInvocation.MyCommand.Path + ""`"" "" + $MyInvocation.UnboundArguments
            Start-Process -FilePath PowerShell.exe -Verb RunAs -ArgumentList $Command
            Exit
     }
    }"';
      Values@1009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      ResultPSDataCollection@1011 : DotNet "'System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.System.Management.Automation.PSDataCollection`1";

    LOCAL PROCEDURE AddUser2@187();
    BEGIN
      PowerShellRunner := PowerShellRunner.CreateInSandbox;
      PowerShellRunner.WriteEventOnError(TRUE);
      //to enable logging

      // PowerShellRunner.ImportModule('C:\Commandlets\NavAdminTool.ps1');
      // PowerShellRunner.ImportModule('C:\Program Files (x86)\Microsoft Dynamics NAV\90\RoleTailored Client\Microsoft.Dynamics.Nav.Model.Tools.psd1');
      // PowerShellRunner.AddCommand('Export-NAVApplicationObject');
      // PowerShellRunner.AddParameter('Path','C:\Logs\CU1.txt');
      // PowerShellRunner.AddParameter('DatabaseServer','172.16.1.221');
      // PowerShellRunner.AddParameter('DatabaseName','NAV2016_DEV3');
      // PowerShellRunner.AddParameter('Username','sa');
      // PowerShellRunner.AddParameter('Password','Password1.');
      // PowerShellRunner.AddParameter('Filter','Type=Codeunit;ID=1');
      // PowerShellRunner.AddParameter('Force');
      // PowerShellRunner.AddCommand('New-NAVServerUser');
      // PowerShellRunner.AddParameter('ServerInstance','DynamicsNAV90');
      // PowerShellRunner.AddParameter('UserName','7055');
      // PowerShellRunner.AddParameter('Verbose');
      PowerShellRunner.AddCommand('remove-item');
      PowerShellRunner.AddParameter('-fo','c:\powershell\sample.txt');
      PowerShellRunner.WriteEventOnError(TRUE);

      PowerShellRunner.BeginInvoke;

      Values := PowerShellRunner.GetLogMessageList();
      ExceptionMsg := PowerShellRunner.ExceptionMessage;
      REPEAT
        SLEEP(1000);
      UNTIL PowerShellRunner.IsCompleted;

       ResultEnumerator := Values.GetEnumerator;
       WHILE ResultEnumerator.MoveNext DO BEGIN
      //  MESSAGE(FORMAT(ResultEnumerator.Current));
       END;

      // MESSAGE(FORMAT(PowerShellRunner.Results));

      // ResultPSDataCollection := PowerShellRunner.Errors;
       ResultPSDataCollection := PowerShellRunner.Results;

      //  MESSAGE(FORMAT(ResultPSDataCollection.GetObjectData));
      //  EXIT;
      // CLEAR(ResultEnumerator);
      // ResultEnumerator := ResultPSDataCollection.GetType;
      // WHILE ResultEnumerator.MoveNext DO BEGIN
      //  MESSAGE(FORMAT(ResultEnumerator.Current));
      // END;
      MESSAGE(FORMAT(PowerShellRunner.Errors.Count));
    END;

    LOCAL PROCEDURE AddUser@5();
    BEGIN
      PowerShellRunner := PowerShellRunner.CreateInSandbox;
      PowerShellRunner.WriteEventOnError := TRUE;
      //to enable logging

      //To import modules
      PowerShellRunner.ImportModule('C:\Program Files\Microsoft Dynamics NAV\90\Service\Microsoft.Dynamics.Nav.Management.dll');
      PowerShellRunner.ImportModule('C:\Program Files\Microsoft Dynamics NAV\90\Service\NavAdminTool.ps1');

      PowerShellRunner.AddCommand('New-NAVServerUser');
      PowerShellRunner.AddParameter('-ServerInstance','DynamicsNAV90');
      PowerShellRunner.AddParameter('-UserName','7055');


      ResultEnumerator := PowerShellRunner.GetLogMessageList;
      PowerShellRunner.WriteEventOnError := TRUE;
      //Created := TRUE

      PowerShellRunner.BeginInvoke;

      MESSAGE(FORMAT(PowerShellRunner.HadErrors));
    END;

    LOCAL PROCEDURE AddService@1();
    BEGIN
      PowerShellRunner := PowerShellRunner.CreateInSandbox;
      PowerShellRunner.WriteEventOnError := TRUE;
      //to enable logging

      //To import modules
      PowerShellRunner.ImportModule('C:\Program Files\Microsoft Dynamics NAV\90\Service\Microsoft.Dynamics.Nav.Management.dll');

      PowerShellRunner.AddCommand('New-NAVServerInstance');
      PowerShellRunner.AddParameter('ServerInstance','ProdNAV');
      PowerShellRunner.AddParameter('ManagementServicesPort','7055');
      PowerShellRunner.AddParameter('ClientServicesPort','7056');
      PowerShellRunner.AddParameter('SOAPServicesPort','7057');
      PowerShellRunner.AddParameter('ODataServicesPort','7058');
      PowerShellRunner.AddParameter('DatabaseServer','MyServerName');
      PowerShellRunner.AddParameter('DatabaseInstance','NAVDEMO');
      PowerShellRunner.AddParameter('DatabaseName','MyProd');
      PowerShellRunner.AddParameter('ServiceAccount','NetworkService');




      //Result := PowerShellRunner.GetLogMessageList;
      PowerShellRunner.WriteEventOnError := TRUE;
      //Created := TRUE

      PowerShellRunner.BeginInvoke;
    END;

    LOCAL PROCEDURE EnableDebugging@2();
    BEGIN
      PowerShellRunner := PowerShellRunner.CreateInSandbox;
      //PowerShellRunner.WriteEventOnError := TRUE;

      //To import modules
      PowerShellRunner.ImportModule('C:\Program Files\Microsoft Dynamics NAV\90\Service\Microsoft.Dynamics.Nav.Management.dll');

      PowerShellRunner.AddCommand('Set-NAVServerConfiguration');
      PowerShellRunner.AddParameter('ServerInstance','ProdNAV');
      PowerShellRunner.AddParameter('KeyName','EnableDebugging');
      PowerShellRunner.AddParameter('KeyValue','True');
      PowerShellRunner.BeginInvoke;
    END;

    LOCAL PROCEDURE StartService@3();
    BEGIN
      PowerShellRunner := PowerShellRunner.CreateInSandbox;

      PowerShellRunner.ImportModule('C:\Program Files\Microsoft Dynamics NAV\90\Service\Microsoft.Dynamics.Nav.Management.dll');

      PowerShellRunner.AddCommand('Set-NavServerInstance');
      PowerShellRunner.AddParameter('ServerInstance','ProdNAV');
      PowerShellRunner.AddParameter('Start');
      PowerShellRunner.BeginInvoke;
    END;

    LOCAL PROCEDURE MountTenant@4();
    BEGIN
      //new service is created as multitenant. To run a single tenant database, simply mount it.

      PowerShellRunner := PowerShellRunner.CreateInSandbox;

      PowerShellRunner.ImportModule('C:\Program Files\Microsoft Dynamics NAV\90\Service\Microsoft.Dynamics.Nav.Management.dll');

      PowerShellRunner.AddCommand('Mount-NAVTenant');
      PowerShellRunner.AddParameter('ServerInstance','ProdNAV');
      PowerShellRunner.AddParameter('Id','default');
      PowerShellRunner.AddParameter('DatabaseName','MyProd');
      PowerShellRunner.BeginInvoke;
    END;

    EVENT ResultPSDataCollection@1011::DataAdding@38(sender@1001 : Variant;e@1000 : DotNet "'System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.System.Management.Automation.DataAddingEventArgs");
    BEGIN
    END;

    EVENT ResultPSDataCollection@1011::DataAdded@39(sender@1001 : Variant;e@1000 : DotNet "'System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.System.Management.Automation.DataAddedEventArgs");
    BEGIN
    END;

    EVENT ResultPSDataCollection@1011::Completed@40(sender@1001 : Variant;e@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.EventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

