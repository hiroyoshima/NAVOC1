OBJECT Codeunit 51016 PSM Example
{
  OBJECT-PROPERTIES
  {
    Date=10/30/23;
    Time=[ 5:54:41 PM];
    Modified=Yes;
    Version List=NAVOC1.00.99;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            // GetNAVServerInstanceExampleWithWrapper
            // ExportObjectsDemo;
            ExportObjectDemo;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE GetServiceExample@1100084000();
    VAR
      PSMSetup@1000 : Record 51013;
      PSMPowershellWrapper@1100084000 : Codeunit 51013;
      PSMPsObjectCollection@1100084002 : Codeunit 51014;
      PSObjectReturn@1100084001 : DotNet "'System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.System.Management.Automation.PSObject";
    BEGIN
      PSMSetup.GET;

      WITH PSMPowershellWrapper DO BEGIN
        OpenRunspace(PSMSetup.Servername,PSMSetup.Username,PSMSetup.Password);

        AddCommand('get-service');
        AddParameterWithValue('name','*NAV*');

        InvokeCommands(PSMPsObjectCollection);

        IF (PSMPsObjectCollection.FINDFIRST) THEN BEGIN
          REPEAT
            MESSAGE(PSMPsObjectCollection.GetPropertyValueText('Name') + '-' + PSMPsObjectCollection.GetPropertyValueText('Status'));
          UNTIL PSMPsObjectCollection.NEXT < 1;
        END;

        CloseRunspace();

      END;
    END;

    LOCAL PROCEDURE GetNAVServerInstanceExample@1100084005();
    VAR
      PSMSetup@1001 : Record 51013;
      PSMPsObjectCollection@1100084002 : Codeunit 51014;
      PSMPowershellWrapper@1000 : Codeunit 51013;
      PSObjectReturn@1100084001 : DotNet "'System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.System.Management.Automation.PSObject";
    BEGIN
      PSMSetup.GET;

      WITH PSMPowershellWrapper DO BEGIN
        OpenRunspace(PSMSetup.Servername,PSMSetup.Username,PSMSetup.Password);

        LoadModule('C:\Program Files\Microsoft Dynamics NAV\80\Service\NavAdminTool.ps1');

        AddCommand('get-NAVServerInstance');
        InvokeCommands(PSMPsObjectCollection);

        IF (PSMPsObjectCollection.FINDFIRST) THEN REPEAT
          MESSAGE(PSMPsObjectCollection.GetPropertyValueText('ServerInstance') + '-' + PSMPsObjectCollection.GetPropertyValueText('State'));
        UNTIL PSMPsObjectCollection.NEXT < 1;

        CloseRunspace();

      END;
    END;

    LOCAL PROCEDURE GetNAVCompanyExample@1100084002();
    VAR
      PSMSetup@1001 : Record 51013;
      PSMPowershellWrapper@1000 : Codeunit 51013;
      PSMPsObjectCollection@1100084002 : Codeunit 51014;
      PSObjectReturn@1100084001 : DotNet "'System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.System.Management.Automation.PSObject";
    BEGIN
      PSMSetup.GET;

      WITH PSMPowershellWrapper DO BEGIN
        OpenRunspace(PSMSetup.Servername,PSMSetup.Username,PSMSetup.Password);

        LoadModule('C:\Program Files\Microsoft Dynamics NAV\80\Service\NavAdminTool.ps1');

        AddCommand('get-NAVServerInstance');
        AddCommand('get-NAVTenant');
        AddCommand('get-NAVCompany');

        InvokeCommands(PSMPsObjectCollection);

        IF (PSMPsObjectCollection.FINDFIRST) THEN REPEAT
          MESSAGE(PSMPsObjectCollection.GetPropertyValueText('CompanyName'));
        UNTIL PSMPsObjectCollection.NEXT < 1;

        CloseRunspace();

      END;
    END;

    LOCAL PROCEDURE GetNAVCompanyExample2@1100084013();
    VAR
      PSMSetup@1000 : Record 51013;
      PSMPowershellWrapper@1001 : Codeunit 51013;
      PSMPsObjectCollection@1100084002 : Codeunit 51014;
      PSObjectReturn@1100084001 : DotNet "'System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.System.Management.Automation.PSObject";
    BEGIN
      PSMSetup.GET;

      WITH PSMPowershellWrapper DO BEGIN
        OpenRunspace(PSMSetup.Servername,PSMSetup.Username,PSMSetup.Password);

        LoadModule('C:\Program Files\Microsoft Dynamics NAV\80\Service\NavAdminTool.ps1');

        AddScript('get-NAVServerInstance | get-NAVTenant | get-NAVCompany');
        InvokeCommands(PSMPsObjectCollection);

        IF (PSMPsObjectCollection.FINDFIRST) THEN REPEAT
          MESSAGE(PSMPsObjectCollection.GetPropertyValueText('CompanyName'));
        UNTIL PSMPsObjectCollection.NEXT < 1;

        CloseRunspace();

      END;
    END;

    LOCAL PROCEDURE GetNAVServerInstanceExampleWithWrapper@1100084001();
    VAR
      PSMSetup@1002 : Record 51013;
      PSMPsObjectCollection@1100084002 : Codeunit 51014;
      PSMPowershellWrapper@1001 : Codeunit 51013;
      PSONAVServerInstance@1000 : Codeunit 51017;
      PSObjectReturn@1100084001 : DotNet "'System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.System.Management.Automation.PSObject";
    BEGIN
      PSMSetup.GET;

      WITH PSMPowershellWrapper DO BEGIN
        OpenRunspace(PSMSetup.Servername,PSMSetup.Username,PSMSetup.Password);

        LoadModule('C:\Program Files\Microsoft Dynamics NAV\90\Service\NavAdminTool.ps1');

        AddCommand(PSONAVServerInstance.GetPsCommand);
        InvokeCommands(PSMPsObjectCollection);

        IF (PSMPsObjectCollection.FINDFIRST) THEN BEGIN
          PSONAVServerInstance.SetPSMPsObjectCollection(PSMPsObjectCollection);
          REPEAT
            MESSAGE(PSONAVServerInstance.ServerInstance + '-' + PSONAVServerInstance.State);
          UNTIL PSMPsObjectCollection.NEXT < 1;
        END;

        CloseRunspace();

      END;
    END;

    LOCAL PROCEDURE MessageProperties@1100084004(VAR PSMPsObjectCollection@1100084000 : Codeunit 51014);
    VAR
      PsPropertyInfoArray@1100084001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      ArrayLoop@1100084002 : Integer;
      PsPropertyInfo@1100084003 : DotNet "'System.Management.Automation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.System.Management.Automation.PSPropertyInfo";
    BEGIN
      PSMPsObjectCollection.GetProperties(PsPropertyInfoArray);

      FOR ArrayLoop := 0 TO (PsPropertyInfoArray.Length -1) DO BEGIN
        PsPropertyInfo := PsPropertyInfoArray.GetValue(ArrayLoop);

        MESSAGE('Name : ' + PsPropertyInfo.Name + '\' + 'DataType : ' + PsPropertyInfo.TypeNameOfValue);
      END;
    END;

    LOCAL PROCEDURE ExportObjectDemo@1();
    VAR
      PSMSetup@1000 : Record 51013;
      PSMPowershellWrapper@1100084000 : Codeunit 51013;
      PSMPsObjectCollection@1100084002 : Codeunit 51014;
      PSObjectReturn@1100084001 : DotNet "'System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.System.Management.Automation.PSObject";
    BEGIN
      PSMSetup.GET;

      WITH PSMPowershellWrapper DO BEGIN
        OpenRunspace(PSMSetup.Servername,PSMSetup.Username,PSMSetup.Password);
        LoadModule('C:\Program Files\Microsoft Dynamics NAV\90\Service\NavAdminTool.ps1');
        LoadModule('C:\Program Files (x86)\Microsoft Dynamics NAV\90\RoleTailored Client\Microsoft.Dynamics.Nav.Model.Tools.psd1');
        AddScript('Import-Module -Name "C:\Program Files (x86)\Microsoft Dynamics NAV\90\RoleTailored Client\Microsoft.Dynamics.Nav.Model.Tools.psd1"');
        AddScript('Compare-NAVApplicationObject -ModifiedPath "C:\Logs\Live.txt" -OriginalPath "C:\Logs\Devt.txt" -DeltaPath "C:\Logs\logs.txt" -Force');
      //  AddParameterWithValue('ModifiedPath','C:\Logs\Live.txt');
      //  AddParameterWithValue('OriginalPath','C:\Logs\Devt.txt');
      //  AddParameterWithValue('DeltaPath','C:\Logs\logs.txt');
      //  AddParameterWithValue('Force', '');

        InvokeCommands(PSMPsObjectCollection);

        IF (PSMPsObjectCollection.FINDFIRST) THEN BEGIN
          REPEAT
            MESSAGE(PSMPsObjectCollection.GetPropertyValueText('Name') + '-' + PSMPsObjectCollection.GetPropertyValueText('Status'));
          UNTIL PSMPsObjectCollection.NEXT < 1;
        END;

        CloseRunspace();

      END;
    END;

    BEGIN
    END.
  }
}

