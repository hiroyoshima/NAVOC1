OBJECT Codeunit 50555 Job Cash Advance Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=09/13/18;
    Time=10:09:02 AM;
    Modified=Yes;
    Version List=JOB02;
  }
  PROPERTIES
  {
    TableNo=1003;
    OnRun=BEGIN
            JobPlnLines.COPY(Rec);
            InitCashAdvance(JobPlnLines);
            Rec := JobPlnLines;
          END;

  }
  CODE
  {
    VAR
      UserSetup@1000 : Record 91;
      Job@1001 : Record 167;
      JobTask@1003 : Record 1001;
      JobPlnLines@1002 : Record 1003;

    LOCAL PROCEDURE InitCashAdvance@48(VAR JobPlnLines@1000 : Record 1003);
    VAR
      PurchHeader@1001 : Record 38;
      PurchLines@1002 : Record 39;
      PurchHeaderFilter@1004 : Record 38;
      JobPlnLinesTemp@1005 : TEMPORARY Record 1003;
      LineNos@1003 : Integer;
    BEGIN
      WITH JobPlnLines DO BEGIN
        IF NOT UserSetup.GET(USERID) THEN
          UserSetup.TESTFIELD("User ID", USERID);
        UserSetup.TESTFIELD("Vendor Individual No."); // Check User setup

        SETFILTER("Line Type", '%1|%2', "Line Type"::Schedule, "Line Type"::"Both Schedule and Contract");
        SETFILTER("No.", '<>''''');
        SETFILTER(Type, '%1|%2',Type::Item, Type::"G/L Account");

        JobPlnLinesTemp.DELETEALL;
        IF JobPlnLines.FINDSET THEN BEGIN
          REPEAT
            CheckJobPlanningLinesIsReadyForCashAdvance(JobPlnLines);
            CheckJobPlanningLinesIfAlreadyExistInPurchaseLine(JobPlnLines);

            JobPlnLinesTemp.SETFILTER("Vendor No.", JobPlnLines."Vendor No.");
            IF NOT JobPlnLinesTemp.FINDFIRST THEN BEGIN
              JobPlnLinesTemp.INIT;
              JobPlnLinesTemp := JobPlnLines;
              JobPlnLinesTemp.INSERT(TRUE);
            END;
          UNTIL JobPlnLines.NEXT = 0;
        END;

        CLEAR(JobPlnLinesTemp);
        IF JobPlnLinesTemp.FINDSET THEN BEGIN
          REPEAT
            // Initial Purchase Header
            Job.GET(JobPlnLinesTemp."Job No.");
            CLEAR(PurchHeader);
            PurchHeader.INIT;
            PurchHeader.GetJobPlanningLines(TRUE);
            PurchHeader."Document Type" := PurchHeader."Document Type"::Invoice;
            PurchHeader."Request Type" := PurchHeader."Request Type"::"Cash Advance";
            PurchHeader."Job Type" := PurchHeader."Job Type"::"Service Engineering";
            IF JobPlnLinesTemp."Vendor No." <> '' THEN BEGIN
              PurchHeader.VALIDATE("Buy-from Vendor No.", JobPlnLinesTemp."Vendor No.");
            END ELSE BEGIN
              PurchHeader.VALIDATE("Buy-from Vendor No.", UserSetup."Vendor Individual No.");
            END;
            PurchHeader.VALIDATE("INTP No.", Job."INTP No.");
            PurchHeader.VALIDATE("Purchaser Code", UserSetup."Salespers./Purch. Code");
            IF JobTask.GET(JobPlnLinesTemp."Job No.", JobPlnLinesTemp."Job Task No.") THEN
              PurchHeader.Purpose := JobTask.Description;
            PurchHeader.INSERT(TRUE);
      //      PurchHeader.VALIDATE("INTP No.", Job."INTP No.");
      //      PurchHeader.MODIFY(TRUE);
            JobPlnLines.SETRANGE("Vendor No.", JobPlnLinesTemp."Vendor No.");
            IF JobPlnLines.FINDSET THEN BEGIN
              REPEAT
                CheckJobPlanningLinesIsReadyForCashAdvance(JobPlnLines);
                CheckJobPlanningLinesIfAlreadyExistInPurchaseLine(JobPlnLines);

                LineNos += 10000;
                PurchLines.INIT;
                PurchLines."Document Type" := PurchHeader."Document Type";
                PurchLines."Document No." := PurchHeader."No.";
                PurchLines."Line No." := LineNos;
                CASE Type OF
                  Type::Item:
                    PurchLines.VALIDATE(Type, PurchLines.Type::Item);
                  Type::"G/L Account":
                    PurchLines.VALIDATE(Type, PurchLines.Type::"G/L Account");
                END;
                PurchLines.VALIDATE("No.", "No.");
                PurchLines.VALIDATE(Description, Description);
                PurchLines.VALIDATE("Unit of Measure Code", "Unit of Measure Code");
                PurchLines.VALIDATE(Quantity, "Qty. to Transfer to Journal");
                PurchLines.VALIDATE("Direct Unit Cost", "Unit Cost");
                PurchLines.VALIDATE("INTP No.", Job."INTP No.");
                PurchLines.VALIDATE("Job No.", "Job No.");
                PurchLines.VALIDATE("Job Task No.", "Job Task No.");
                PurchLines.VALIDATE("Job Planning Line No.", "Line No.");
                PurchLines.VALIDATE("Location Code", '');
                PurchLines."Job Created Entry" := TRUE;
                PurchLines."Request Type" := PurchLines."Request Type"::"Cash Advance";
                PurchLines.INSERT;
              UNTIL JobPlnLines.NEXT = 0;
            END;
            // Open created Cash Advance
            PAGE.RUN(PAGE::"Cash Advance", PurchHeader);
          UNTIL JobPlnLinesTemp.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckJobPlanningLinesIsReadyForCashAdvance@47(VAR JobPlnLines@1000 : Record 1003);
    VAR
      Item@1001 : Record 27;
      GLAccount@1002 : Record 15;
      Job@1003 : Record 167;
    BEGIN
      WITH JobPlnLines DO BEGIN
        Job.GET(JobPlnLines."Job No.");
        Job.TESTFIELD(Status, Job.Status::Order);
        IF "Line No." = 0 THEN
          FIELDERROR("Line No.");
        TESTFIELD("Usage Link", TRUE);
        TESTFIELD("No.");
        CASE Type OF
          Type::Item:
              IF Item.GET("No.") THEN BEGIN
                Item.TESTFIELD(Type, Item.Type::Service);
                Item.TESTFIELD("Cash Advance Account", TRUE);
              END;
          Type::"G/L Account":
            IF GLAccount.GET("No.") THEN
              GLAccount.TESTFIELD("CA Account", TRUE);
        END;
        TESTFIELD("Unit of Measure Code");
        IF Quantity < 0 THEN
          FIELDERROR(Quantity);
        IF "Qty. to Transfer to Journal" <= 0 THEN
          FIELDERROR("Qty. to Transfer to Journal");
        IF "Qty. to Transfer to Journal" > (Quantity - "Qty. Posted") THEN
          FIELDERROR("Qty. to Transfer to Journal");
      END;
    END;

    LOCAL PROCEDURE CheckJobPlanningLinesIfAlreadyExistInPurchaseLine@105(VAR JobPlnLines@1000 : Record 1003);
    VAR
      PurchLines@1001 : Record 39;
      Err001@1002 : TextConst 'ENU=%1 %2, %3 %4 and %5 %6 with value of %7 %8 already exist in %9 %10.';
    BEGIN
      WITH JobPlnLines DO BEGIN
        // Check if Job Planning Lines is already exist in the Purchase Line
        PurchLines.SETRANGE("Job No.", "Job No.");
        PurchLines.SETRANGE("Job Task No.", "Job Task No.");
        PurchLines.SETRANGE("Job Planning Line No.", "Line No.");
        IF PurchLines.FINDFIRST THEN BEGIN
          //PurchLines.CALCFIELDS("Request Type");
          ERROR(Err001, FIELDCAPTION("Job No."), "Job No.",
        FIELDCAPTION("Job Task No."), "Job Task No.", FIELDCAPTION("Line No."), "Line No.",
        "No.", Description, FORMAT(PurchLines."Request Type"), PurchLines."Document No.");
        END;
      END;
    END;

    BEGIN
    END.
  }
}

