OBJECT Report 50520 Output Tax for E-Filing
{
  OBJECT-PROPERTIES
  {
    Date=02/10/18;
    Time=12:00:04 PM;
    Modified=Yes;
    Version List=PHL0.01;
  }
  PROPERTIES
  {
    CaptionML=ENU=Output Tax for E-Filing;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   DateFilter := FORMAT(WORKDATE);

                   IncludeCSV := TRUE;
                 END;

    OnPreReport=VAR
                  FileMgt@1000000000 : Codeunit 419;
                  CustRec@1000000001 : Record 18;
                BEGIN
                  CharsToRemove := '!@$%^&*()_+}{[]|\;:<>/`~-,';
                  //Check Date Filter
                  IF DateFilter = '' THEN
                    ERROR(Text001);

                  //Validate Period No.
                  IF PeriodNo = 0 THEN
                    ERROR(Text002);

                  //IF IncludeCSV THEN
                  IF IncludeCSVorExcel = IncludeCSVorExcel::DAT THEN
                    FileName := FileMgt.ServerTempFileName('');

                  //Get Company Information
                  CompInfo.GET;

                  //Get End Date
                  CustomerRec.SETFILTER("Date Filter",DateFilter);
                  EndDate := CustomerRec.GETRANGEMAX("Date Filter");

                  //Apply Filters to VATEntry table
                  VATEntry.SETCURRENTKEY(Type,"Bill-to/Pay-to No.","Transaction No.");
                  IF CustomerFilter <> '' THEN
                    VATEntry.SETFILTER("Bill-to/Pay-to No.",CustomerFilter)
                  ELSE
                    VATEntry.SETFILTER("Bill-to/Pay-to No.",'<>%1','');
                  VATEntry.SETFILTER("Posting Date",DateFilter);
                  VATEntry.SETRANGE(Type,VATEntry.Type::Sale);

                  //Compute totals of ExemptSales, ZeroRatedSales, TaxableSales & OutputTax
                  IF VATEntry.FIND('-') THEN BEGIN
                    IF ExemptSales <> '' THEN BEGIN
                      VATEntry2.RESET;
                      VATEntry2.COPY(VATEntry);
                      VATEntry2.SETFILTER("VAT Prod. Posting Group",ExemptSales);
                      IF VATEntry2.FIND('-') THEN
                        REPEAT
                          TotalExemptSalesAmt := TotalExemptSalesAmt + VATEntry2.Base;
                        UNTIL VATEntry2.NEXT = 0;
                    END;
                    IF ZeroRatedSales <> '' THEN BEGIN
                      VATEntry2.RESET;
                      VATEntry2.COPY(VATEntry);
                      VATEntry2.SETFILTER("VAT Prod. Posting Group",ZeroRatedSales);
                      IF VATEntry2.FIND('-') THEN
                        REPEAT
                          TotalZeroRatedSalesAmt := TotalZeroRatedSalesAmt + VATEntry2.Base;
                        UNTIL VATEntry2.NEXT = 0;
                    END;
                    IF TaxableSales <> '' THEN BEGIN
                      VATEntry2.RESET;
                      VATEntry2.COPY(VATEntry);
                      VATEntry2.SETFILTER("VAT Prod. Posting Group",TaxableSales);
                      IF VATEntry2.FIND('-') THEN
                        REPEAT
                          TotalTaxableSalesAmt := TotalTaxableSalesAmt + VATEntry2.Base;
                        UNTIL VATEntry2.NEXT = 0;
                      END;
                    IF OutputTax <> '' THEN BEGIN
                      VATEntry2.RESET;
                      VATEntry2.COPY(VATEntry);
                      VATEntry2.SETFILTER("VAT Prod. Posting Group",OutputTax);
                      IF VATEntry2.FIND('-') THEN
                        REPEAT
                          TotalOutputTaxAmt := TotalOutputTaxAmt + VATEntry2.Amount;
                        UNTIL VATEntry2.NEXT = 0;
                    END;
                  END;

                  //Print Report Header

                  //IF ExcelOnly THEN BEGIN
                  IF IncludeCSVorExcel = IncludeCSVorExcel::Excel THEN BEGIN
                    EnterCell(1,1,'H',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    EnterCell(1,2,'S',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    IF STRLEN(DELCHR(CompInfo."VAT Registration No.",'=','-')) = 12 THEN
                      EnterCell(1,3,DELSTR(DELCHR(CompInfo."VAT Registration No.",'=',CharsToRemove),10,3),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text)
                    ELSE IF STRLEN(DELCHR(CompInfo."VAT Registration No.",'=',CharsToRemove)) = 9 THEN
                      EnterCell(1,3,DELCHR(CompInfo."VAT Registration No.",'=',CharsToRemove),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    EnterCell(1,4,CompInfo.Name,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    EnterCell(1,8,CompInfo.Name,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    EnterCell(1,9,CompInfo.Address,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    EnterCell(1,10,CompInfo."Address 2",FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    EnterCell(1,11,FORMAT(ABS(TotalExemptSalesAmt)),FALSE,FALSE,FALSE,'##0.00',TempExcelBuffer."Cell Type"::Number);
                    EnterCell(1,12,FORMAT(ABS(TotalZeroRatedSalesAmt)),FALSE,FALSE,FALSE,'##0.00',TempExcelBuffer."Cell Type"::Number);
                    EnterCell(1,13,FORMAT(ABS(TotalTaxableSalesAmt)),FALSE,FALSE,FALSE,'##0.00',TempExcelBuffer."Cell Type"::Number);
                    EnterCell(1,14,FORMAT(ABS(TotalOutputTaxAmt)),FALSE,FALSE,FALSE,'##0.00',TempExcelBuffer."Cell Type"::Number);
                    EnterCell(1,15,CompInfo."RDO Code",FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    EnterCell(1,16,FORMAT(EndDate),FALSE,FALSE,FALSE,'mm/dd/yyyy',TempExcelBuffer."Cell Type"::Date);
                    EnterCell(1,17,FORMAT(PeriodNo),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                  END;

                  //IF IncludeCSV THEN BEGIN
                  IF IncludeCSVorExcel = IncludeCSVorExcel::DAT THEN BEGIN
                    CLEAR(BIRFile);
                    BIRFile.TEXTMODE := TRUE;
                    BIRFile.WRITEMODE := TRUE;
                    BIRFile.CREATE(FileName);
                    ReportValueHead[1] := 'H';
                    ReportValueHead[2] := 'S';
                    IF STRLEN(DELCHR(CompInfo."VAT Registration No.",'=','-')) = 12 THEN
                      ReportValueHead[3] := DELSTR(DELCHR(CompInfo."VAT Registration No.",'=','-'),10,3)
                    ELSE IF STRLEN(DELCHR(CompInfo."VAT Registration No.",'=','-')) = 9 THEN
                      ReportValueHead[3] := FORMAT(DELCHR(CompInfo."VAT Registration No.",'=','-'));
                    ReportValueHead[4] := '"' + UPPERCASE(DELCHR(CompInfo.Name,'=',CharsToRemove)) + '"';
                    ReportValueHead[5] := '""';
                    ReportValueHead[6] := '""';
                    ReportValueHead[7] := '""';
                    ReportValueHead[8] := '""';
                    ReportValueHead[9] := '"' + UPPERCASE(DELCHR(CompInfo.Address,'=',CharsToRemove)) + '"';
                    ReportValueHead[10] := '"' + UPPERCASE(DELCHR(CompInfo."Address 2",'=',CharsToRemove)) + '"';
                    ReportValueHead[11] := FORMAT(ABS(TotalExemptSalesAmt),0,'<Sign><Integer><Decimals>');
                    ReportValueHead[12] := FORMAT(ABS(TotalZeroRatedSalesAmt),0,'<Sign><Integer><Decimals>');
                    ReportValueHead[13] := FORMAT(ABS(TotalTaxableSalesAmt),0,'<Sign><Integer><Decimals>');
                    ReportValueHead[14] := FORMAT(ABS(TotalOutputTaxAmt),0,'<Sign><Integer><Decimals>');
                    ReportValueHead[15] := FORMAT(CompInfo."RDO Code");
                    ReportValueHead[16] := FORMAT(EndDate,0,'<Month,2>/<Day,2>/<Year4>');
                    ReportValueHead[17] := FORMAT(PeriodNo);
                    WriteCSVHeadandFoot(ReportValueHead);
                    CLEAR(ReportValueHead);
                  END;
                  //Print Report Details
                  RowCtr := 2;
                  IF VATEntry.FIND('-') THEN BEGIN
                    REPEAT
                      IF VATEntry."Bill-to/Pay-to No." <> prevCustNo THEN BEGIN
                        //Compute Exempt Sales
                        IF ExemptSales <> '' THEN BEGIN
                          ExemptSalesAmt := 0;
                          VATEntry2.RESET;
                          VATEntry2.COPY(VATEntry);
                          VATEntry2.SETRANGE("Bill-to/Pay-to No.",VATEntry."Bill-to/Pay-to No.");
                          VATEntry2.SETFILTER("VAT Prod. Posting Group",ExemptSales);
                          IF VATEntry2.FIND('-') THEN
                            REPEAT
                              ExemptSalesAmt := ExemptSalesAmt + VATEntry2.Base;
                            UNTIL VATEntry2.NEXT = 0;
                        END;
                        //Compute Zero-Rated Sales
                        IF ZeroRatedSales <> '' THEN BEGIN
                          ZeroRatedSalesAmt := 0;
                          VATEntry2.RESET;
                          VATEntry2.COPY(VATEntry);
                          VATEntry2.SETRANGE("Bill-to/Pay-to No.",VATEntry."Bill-to/Pay-to No.");
                          VATEntry2.SETFILTER("VAT Prod. Posting Group",ZeroRatedSales);
                          IF VATEntry2.FIND('-') THEN
                            REPEAT
                              ZeroRatedSalesAmt := ZeroRatedSalesAmt + VATEntry2.Base;
                            UNTIL VATEntry2.NEXT = 0;
                        END;
                        //Compute Taxable Sales
                        IF TaxableSales <> '' THEN BEGIN
                          TaxableSalesAmt := 0;
                          VATEntry2.RESET;
                          VATEntry2.COPY(VATEntry);
                          VATEntry2.SETRANGE("Bill-to/Pay-to No.",VATEntry."Bill-to/Pay-to No.");
                          VATEntry2.SETFILTER("VAT Prod. Posting Group",TaxableSales);
                          IF VATEntry2.FIND('-') THEN
                            REPEAT
                              TaxableSalesAmt := TaxableSalesAmt + VATEntry2.Base;
                             UNTIL VATEntry2.NEXT = 0;
                          END;
                        //Compute Output Tax
                        IF OutputTax <> '' THEN BEGIN
                          OutputTaxAmt := 0;
                          VATEntry2.RESET;
                          VATEntry2.COPY(VATEntry);
                          VATEntry2.SETFILTER("Bill-to/Pay-to No.",VATEntry."Bill-to/Pay-to No.");
                          VATEntry2.SETFILTER("VAT Prod. Posting Group",OutputTax);
                          IF VATEntry2.FIND('-') THEN
                            REPEAT
                              OutputTaxAmt := OutputTaxAmt + VATEntry2.Amount;
                            UNTIL VATEntry2.NEXT = 0;
                        END;

                        IF (ExemptSalesAmt = 0) AND (ZeroRatedSalesAmt = 0) AND (TaxableSalesAmt = 0) THEN BEGIN
                          //do nothing
                        END ELSE BEGIN
                          IF IncludeCSVorExcel = IncludeCSVorExcel::Excel THEN BEGIN
                          //IF ExcelOnly THEN BEGIN
                            EnterCell(RowCtr,1,'D',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                            EnterCell(RowCtr,2,'S',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                          END;
                          IF IncludeCSVorExcel = IncludeCSVorExcel::DAT THEN BEGIN
                          //IF IncludeCSV THEN BEGIN
                            ReportValue[1] := 'D';
                            ReportValue[2] := 'S';
                          END;
                          IF CustomerRec.GET(VATEntry."Bill-to/Pay-to No.") THEN BEGIN
                            //Get Customer Details - START
                            IF IncludeCSVorExcel = IncludeCSVorExcel::Excel THEN BEGIN
                            //IF ExcelOnly THEN BEGIN
                              EnterCell(RowCtr,3,CustomerRec."VAT Registration No.",FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                              EnterCell(RowCtr,4,CustomerRec.Name,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                              EnterCell(RowCtr,8,CustomerRec.Address,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                              EnterCell(RowCtr,9,CustomerRec."Address 2",FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                            END;
                            IF IncludeCSVorExcel = IncludeCSVorExcel::DAT THEN BEGIN
                            //IF IncludeCSV THEN BEGIN
                              IF STRLEN(DELCHR(CustomerRec."VAT Registration No.",'=','-')) = 12 THEN BEGIN
                                ReportValue[3] := DELSTR(DELCHR(CustomerRec."VAT Registration No.",'=','-'),10,4)
                              END ELSE IF STRLEN(DELCHR(CustomerRec."VAT Registration No.",'=','-')) = 9 THEN BEGIN
                                ReportValue[3] := DELCHR(CustomerRec."VAT Registration No.",'=','-');
                              END;
                              CustRec.RESET;
                              CustRec.SETRANGE("No.",CustomerRec."No.");
                              CustRec.FINDFIRST;
                              ReportValue[8] := '"' + UPPERCASE(DELCHR(CustomerRec.Address,'=',CharsToRemove)) + '"';
                              ReportValue[9] := '"' + UPPERCASE(DELCHR(CustomerRec."Address 2",'=',CharsToRemove)) + '"';
                              ReportValue[4] := '"' + UPPERCASE(DELCHR(CustRec.Name,'=',CharsToRemove)) + '"';
                            END;
                            //Get Customer Details - END

                          END;
                          //Print Amounts - START
                          IF IncludeCSVorExcel = IncludeCSVorExcel::Excel THEN BEGIN
                          //IF ExcelOnly THEN BEGIN
                            EnterCell(RowCtr,10,FORMAT(ABS(ExemptSalesAmt)),FALSE,FALSE,FALSE,'##0.00',TempExcelBuffer."Cell Type"::Number);
                            EnterCell(RowCtr,11,FORMAT(ABS(ZeroRatedSalesAmt)),FALSE,FALSE,FALSE,'##0.00',TempExcelBuffer."Cell Type"::Number);
                            EnterCell(RowCtr,12,FORMAT(ABS(TaxableSalesAmt)),FALSE,FALSE,FALSE,'##0.00',TempExcelBuffer."Cell Type"::Number);
                            EnterCell(RowCtr,13,FORMAT(ABS(OutputTaxAmt)),FALSE,FALSE,FALSE,'##0.00',TempExcelBuffer."Cell Type"::Number);
                            EnterCell(RowCtr,14,CompInfo."VAT Registration No.",FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                            EnterCell(RowCtr,15,FORMAT(EndDate),FALSE,FALSE,FALSE,'mm/dd/yyyy',TempExcelBuffer."Cell Type"::Date);
                          END;
                          IF IncludeCSVorExcel = IncludeCSVorExcel::DAT THEN BEGIN
                          //IF IncludeCSV THEN BEGIN
                            ReportValue[10] := FORMAT(ABS(ExemptSalesAmt),0,'<Sign><Integer><Decimals>');
                            ReportValue[11] := FORMAT(ABS(ZeroRatedSalesAmt),0,'<Sign><Integer><Decimals>');
                            ReportValue[12] := FORMAT(ABS(TaxableSalesAmt),0,'<Sign><Integer><Decimals>');
                            ReportValue[13] := FORMAT(ABS(OutputTaxAmt),0,'<Sign><Integer><Decimals>');
                            IF STRLEN(DELCHR(CompInfo."VAT Registration No.",'=','-')) = 12 THEN
                              ReportValue[14] := DELSTR(DELCHR(CompInfo."VAT Registration No.",'=','-'),10,4)
                            ELSE IF STRLEN(DELCHR(CompInfo."VAT Registration No.",'=','-')) = 9 THEN
                              ReportValue[14] := DELCHR(CompInfo."VAT Registration No.",'=','-');
                            ReportValue[15] := FORMAT(EndDate,0,'<Month,2>/<Day,2>/<Year4>');
                          END;
                          //Print Amounts - END
                          RowCtr += 1;
                          IF IncludeCSVorExcel = IncludeCSVorExcel::DAT THEN BEGIN
                          //IF IncludeCSV THEN BEGIN
                            WriteCSV(ReportValue);
                            CLEAR(ReportValue);
                          END;
                        END;
                      END;
                      prevCustNo := VATEntry."Bill-to/Pay-to No.";
                    UNTIL VATEntry.NEXT = 0;
                  END;
                END;

    OnPostReport=VAR
                   ToFile@1000000000 : Text[1024];
                   locCompInfo@1000000001 : Record 79;
                 BEGIN
                   IF IncludeCSVorExcel = IncludeCSVorExcel::Excel THEN BEGIN
                   //IF ExcelOnly THEN BEGIN
                     TempExcelBuffer.CreateBook('Output Tax for E-Filing','Output Tax for E-Filing');
                     TempExcelBuffer.WriteSheet('Output Tax for E-Filing',COMPANYNAME,COPYSTR(USERID,30));
                     TempExcelBuffer.CloseBook;
                     TempExcelBuffer.OpenExcel;
                     TempExcelBuffer.GiveUserControl;
                   END;

                   IF IncludeCSVorExcel = IncludeCSVorExcel::DAT THEN BEGIN
                   //IF IncludeCSV THEN BEGIN
                     BIRFile.CLOSE;
                     locCompInfo.GET;
                     IF STRLEN(DELCHR(locCompInfo."VAT Registration No.",'=','-')) = 12 THEN
                       ToFile := DELSTR(DELCHR(locCompInfo."VAT Registration No.",'=','-'),10,4) + 'S' + FORMAT(EndDate,0,'<Month,2><Year4>') + '.DAT'
                     ELSE IF STRLEN(DELCHR(locCompInfo."VAT Registration No.",'=','-')) = 9 THEN
                       ToFile := DELCHR(locCompInfo."VAT Registration No.",'=','-') + 'S' + FORMAT(EndDate,0,'<Month,2><Year4>') + '.DAT';
                     DOWNLOAD(FileName,Text003,'',Text004,ToFile);
                   END;
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   GetPeriodNo;
                   IncludeCSV := TRUE;
                   ExcelOnly := FALSE;
                 END;

    }
    CONTROLS
    {
      { 11  ;    ;Container ;
                  ContainerType=ContentArea }

      { 10  ;1   ;Group     ;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 7   ;2   ;Group     ;
                  CaptionML=ENU=Filters;
                  GroupType=Group }

      { 9   ;3   ;Field     ;
                  Name=Customer Filter;
                  CaptionML=ENU=Customer Filter;
                  SourceExpr=CustomerFilter;
                  OnLookup=BEGIN
                             CLEAR(CustomerList);

                             CustomerList.LOOKUPMODE(TRUE);
                             CustomerList.SETTABLEVIEW(CustomerRec);
                             IF NOT (CustomerList.RUNMODAL = ACTION::LookupOK) THEN
                               EXIT(FALSE);

                             Text := CustomerList.GetSelectionFilter;

                             EXIT(TRUE);
                           END;
                            }

      { 3   ;3   ;Field     ;
                  Name=Exempt Sales;
                  CaptionML=ENU=Exempt Sales;
                  SourceExpr=ExemptSales;
                  OnLookup=BEGIN
                             CLEAR(VATProdPostingGroupsPage);
                             VATProdPostingGroupsPage.LOOKUPMODE(TRUE);
                             VATProdPostingGroupsPage.SETTABLEVIEW(VATProdPostingGroup);
                             IF NOT (VATProdPostingGroupsPage.RUNMODAL = ACTION::LookupOK) THEN
                               EXIT(FALSE);

                             Text := VATProdPostingGroupsPage.GetSelectionFilter;

                             EXIT(TRUE);
                           END;
                            }

      { 4   ;3   ;Field     ;
                  Name=Zero-Rated Sales;
                  CaptionML=ENU=Zero-Rated Sales;
                  SourceExpr=ZeroRatedSales;
                  OnLookup=BEGIN
                             CLEAR(VATProdPostingGroupsPage);
                             VATProdPostingGroupsPage.LOOKUPMODE(TRUE);
                             VATProdPostingGroupsPage.SETTABLEVIEW(VATProdPostingGroup);
                             IF NOT (VATProdPostingGroupsPage.RUNMODAL = ACTION::LookupOK) THEN
                               EXIT(FALSE);

                             Text := VATProdPostingGroupsPage.GetSelectionFilter;

                             EXIT(TRUE);
                           END;
                            }

      { 5   ;3   ;Field     ;
                  Name=Taxable Sales;
                  CaptionML=ENU=Taxable Sales;
                  SourceExpr=TaxableSales;
                  OnLookup=BEGIN
                             CLEAR(VATProdPostingGroupsPage);
                             VATProdPostingGroupsPage.LOOKUPMODE(TRUE);
                             VATProdPostingGroupsPage.SETTABLEVIEW(VATProdPostingGroup);
                             IF NOT (VATProdPostingGroupsPage.RUNMODAL = ACTION::LookupOK) THEN
                               EXIT(FALSE);

                             Text := VATProdPostingGroupsPage.GetSelectionFilter;

                             EXIT(TRUE);
                           END;
                            }

      { 6   ;3   ;Field     ;
                  Name=Output Tax;
                  CaptionML=ENU=Output Tax;
                  SourceExpr=OutputTax;
                  OnLookup=BEGIN
                             CLEAR(VATProdPostingGroupsPage);
                             VATProdPostingGroupsPage.LOOKUPMODE(TRUE);
                             VATProdPostingGroupsPage.SETTABLEVIEW(VATProdPostingGroup);
                             IF NOT (VATProdPostingGroupsPage.RUNMODAL = ACTION::LookupOK) THEN
                               EXIT(FALSE);

                             Text := VATProdPostingGroupsPage.GetSelectionFilter;

                             EXIT(TRUE);
                           END;
                            }

      { 1   ;3   ;Field     ;
                  Name=Date Filter;
                  CaptionML=ENU=Date Filter;
                  SourceExpr=DateFilter;
                  OnValidate=BEGIN
                               IF ApplicationManagement.MakeDateFilter(DateFilter) = 0 THEN;
                                 CustomerRec.SETFILTER("Date Filter",DateFilter);
                               DateFilter := CustomerRec.GETFILTER("Date Filter");

                               GetPeriodNo;
                             END;
                              }

      { 2   ;3   ;Field     ;
                  Name=Period No.;
                  CaptionML=ENU=Period No.;
                  SourceExpr=PeriodNo;
                  Editable=FALSE }

      { 8   ;2   ;Group     ;
                  CaptionML=ENU=Output;
                  GroupType=Group }

      { 12  ;3   ;Field     ;
                  CaptionML=ENU=File Format;
                  SourceExpr=IncludeCSVorExcel }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TempExcelBuffer@1010 : TEMPORARY Record 370;
      CompInfo@1009 : Record 79;
      CustomerRec@1008 : Record 18;
      VATEntry@1007 : Record 254;
      VATEntry2@1006 : Record 254;
      VATProdPostingGroup@1005 : Record 324;
      VATProdPostingGroupsPage@1004 : Page 471;
      CustomerList@1003 : Page 22;
      ApplicationManagement@1002 : Codeunit 1;
      CustomerFilter@1001 : Text[250];
      DateFilter@1000 : Text[30];
      Text001@1012 : TextConst 'ENU=Please specify a Date Filter.';
      Text002@1011 : TextConst 'ENU=Please specify Period No.';
      EndDate@1013 : Date;
      PeriodNo@1014 : Integer;
      RowCtr@1023 : Integer;
      ExemptSales@1015 : Text[250];
      ZeroRatedSales@1016 : Text[250];
      TaxableSales@1017 : Text[250];
      OutputTax@1018 : Text[250];
      TotalExemptSalesAmt@1019 : Decimal;
      TotalZeroRatedSalesAmt@1020 : Decimal;
      TotalTaxableSalesAmt@1021 : Decimal;
      TotalOutputTaxAmt@1022 : Decimal;
      prevCustNo@1024 : Code[20];
      ExemptSalesAmt@1025 : Decimal;
      ZeroRatedSalesAmt@1026 : Decimal;
      TaxableSalesAmt@1027 : Decimal;
      OutputTaxAmt@1028 : Decimal;
      BIRFile@1000000007 : File;
      FileName@1000000006 : Text;
      ReportValueFoot@1000000005 : ARRAY [7] OF Text[250];
      ReportValueHead@1000000004 : ARRAY [17] OF Text[250];
      ReportValue@1000000003 : ARRAY [15] OF Text[250];
      IncludeCSV@1000000002 : Boolean;
      ExcelOnly@1000000001 : Boolean;
      Text000@1000000010 : TextConst 'ENU=Please enter the file name.';
      Text003@1000000009 : TextConst 'ENU=Export';
      Text004@1000000008 : TextConst 'ENU=All Files (*.*)|*.*';
      Text005@1000000000 : TextConst 'ENU=Monthly Alphalist of Payees.dat';
      CharsToRemove@1000000011 : Text[50];
      IncludeCSVorExcel@1000000012 : 'DAT,Excel';

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := '';
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    PROCEDURE GetPeriodNo@1();
    BEGIN
      CustomerRec.SETFILTER("Date Filter",DateFilter);
      EndDate := CustomerRec.GETRANGEMAX("Date Filter");
      EVALUATE(PeriodNo,FORMAT(EndDate,0,'<Month>'));
    END;

    PROCEDURE WriteCSV@1000000003(LocString@1000 : ARRAY [15] OF Text[500]);
    VAR
      ArrayCtr@1001 : Integer;
      TextToWrite@1002 : Text[500];
    BEGIN
      FOR ArrayCtr := 1 TO 15 DO BEGIN
        //TextToWrite += ApplyQuote(FORMAT(LocString[ArrayCtr])) + ',';
        TextToWrite += FORMAT(LocString[ArrayCtr]) + ',';
      END;
      TextToWrite := DELSTR(TextToWrite,STRLEN(TextToWrite),1);
      BIRFile.WRITE(TextToWrite);
      CLEAR(LocString)
    END;

    PROCEDURE ApplyQuote@1000000001(LocString@1000 : Text[500]) : Text[250];
    VAR
      CharCtr@1000000001 : Integer;
      ApplyQuote@1000000002 : Boolean;
    BEGIN
      ApplyQuote := FALSE;
      FOR CharCtr := 1 TO STRLEN(LocString) DO BEGIN
        IF LocString[CharCtr] = ',' THEN BEGIN
          //EXIT('"' + LocString + '"'); // Original Code
          EXIT('' + LocString + '');
        END;
      END;
      EXIT (LocString);
    END;

    PROCEDURE WriteCSVHeadandFoot@1000000000(LocString@1000 : ARRAY [17] OF Text[500]);
    VAR
      ArrayCtr@1001 : Integer;
      TextToWrite@1002 : Text[500];
    BEGIN
      FOR ArrayCtr := 1 TO 17 DO BEGIN
        //TextToWrite += ApplyQuote(FORMAT(LocString[ArrayCtr])) + ',';
        TextToWrite += FORMAT(LocString[ArrayCtr]) + ',';
      END;
      TextToWrite := DELSTR(TextToWrite,STRLEN(TextToWrite),1);
      BIRFile.WRITE(TextToWrite);
      CLEAR(LocString)
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

