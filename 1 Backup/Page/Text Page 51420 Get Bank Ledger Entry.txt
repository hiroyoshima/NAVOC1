OBJECT Page 51420 Get Bank Ledger Entry
{
  OBJECT-PROPERTIES
  {
    Date=08/16/18;
    Time=[ 8:44:33 PM];
    Modified=Yes;
    Version List=NAVOC1.00.02.99;
  }
  PROPERTIES
  {
    Editable=Yes;
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    DelayedInsert=No;
    PageType=ListPlus;
    ShowFilter=No;
    OnOpenPage=BEGIN
                 DateFrom := CALCDATE('<-CM>',TODAY);
                 DateTo := CALCDATE('<CM>',TODAY);
                 CurrPage.BankLedgerEntryListPart.PAGE.SetBankAccountNoFilter(FromAccountNo);
                 CurrPage.BankLedgerEntryListPart.PAGE.SetPostinDateFilter(DateFrom,DateTo);
                 SetBankAccountDescription;
               END;

    OnQueryClosePage=BEGIN
                       IF (CloseAction = ACTION::LookupOK) AND (ReclassToAccountNo = '') THEN
                         ERROR('Get Fund From Bank Account No. must have a value.');
                     END;

    OnAfterGetCurrRecord=BEGIN
                           CurrPage.BankLedgerEntryListPart.PAGE.SetBankAccountNoFilter(FromAccountNo);
                           CurrPage.BankLedgerEntryListPart.PAGE.SetPostinDateFilter(DateFrom,DateTo);
                         END;

  }
  CONTROLS
  {
    { 7   ;0   ;Container ;
                ContainerType=ContentArea }

    { 6   ;1   ;Group     ;
                CaptionML=ENU=Options;
                GroupType=Group }

    { 11  ;2   ;Group     ;
                GroupType=Group }

    { 5   ;3   ;Field     ;
                CaptionML=ENU=From Account No.;
                SourceExpr=FromAccountNo;
                TableRelation="Bank Account";
                OnValidate=BEGIN
                             IF  FromAccountNo = ReclassToAccountNo THEN
                               ERROR('From Account No.: must not be the same as Get Fund from Bank Account No.:');
                             SetBankAccountDescription;
                             CurrPage.BankLedgerEntryListPart.PAGE.SetBankAccountNoFilter(FromAccountNo);
                           END;
                            }

    { 10  ;3   ;Field     ;
                CaptionML=ENU=Bank Account Name;
                SourceExpr=FromAccountNoDescription;
                Editable=False }

    { 13  ;3   ;Field     ;
                CaptionML=ENU=Get Fund from Bank Account No.;
                SourceExpr=ReclassToAccountNo;
                TableRelation="Bank Account";
                OnValidate=BEGIN
                             IF ReclassToAccountNo = FromAccountNo THEN
                               ERROR('Get Fund from Bank Account No.: must not be the same as From Account No.:');
                             SetBankAccountDescription;
                           END;

                ShowMandatory=true }

    { 8   ;3   ;Field     ;
                CaptionML=ENU=Bank Account Name;
                SourceExpr=ReclassToAccountNoDescription;
                Editable=False }

    { 4   ;2   ;Group     ;
                GroupType=Group }

    { 2   ;3   ;Field     ;
                CaptionML=ENU=Date From;
                SourceExpr=DateFrom;
                OnValidate=BEGIN
                             IF DateFrom > DateTo THEN
                               DateTo := DateFrom;
                             CurrPage.BankLedgerEntryListPart.PAGE.SetPostinDateFilter(DateFrom,DateTo);
                           END;
                            }

    { 1   ;3   ;Field     ;
                CaptionML=ENU=Date To;
                SourceExpr=DateTo;
                OnValidate=BEGIN
                             IF DateTo < DateFrom THEN
                               DateFrom := DateTo;
                             CurrPage.BankLedgerEntryListPart.PAGE.SetPostinDateFilter(DateFrom,DateTo);
                           END;
                            }

    { 3   ;3   ;Field     ;
                Lookup=Yes;
                SourceExpr=BlankTxt[36];
                Importance=Standard;
                Enabled=FALSE;
                Editable=FALSE;
                LookupPageID=Page0;
                ShowCaption=No }

    { 9   ;1   ;Part      ;
                Name=BankLedgerEntryListPart;
                CaptionML=ENU=Bank Account Ledger Entries;
                SubPageView=WHERE(With Bank Funding=CONST(No),
                                  Positive=CONST(No),
                                  Bal. Account Type=CONST(Vendor),
                                  Open=CONST(Yes));
                PagePartID=Page51421;
                Editable=False;
                PartType=Page;
                ShowFilter=No;
                UpdatePropagation=Both }

  }
  CODE
  {
    VAR
      BankAccount@1007 : Record 270;
      DateFrom@1002 : Date;
      DateTo@1003 : Date;
      ReclassToAccountNo@1005 : Code[20];
      FromAccountNo@1000 : Code[20];
      ReclassToAccountNoDescription@1001 : Text;
      FromAccountNoDescription@1004 : Text;
      BlankTxt@1006 : ARRAY [100] OF Text;

    PROCEDURE GetDestinationAccount@4() : Code[20];
    BEGIN
      EXIT(ReclassToAccountNo);
    END;

    PROCEDURE CopyBankLedgerEntryToGenJournalLines@20(JournalBatchName@1006 : Code[20];JournalTemplateName@1009 : Code[20]);
    VAR
      BankAccountLedgerEntries@1000 : Record 271;
      BankAccountLegerEntries2@1011 : Record 271;
      GenJournalLine@1001 : Record 81;
      GenJournalLine2@1008 : Record 81;
      GenJournalLine3@1012 : Record 81;
      ConfigProgressBar@1002 : Codeunit 8615;
      TotalBankAccountEntriesToReclass@1003 : Integer;
      TotalReclassedBankAccountEntries@1004 : Integer;
      LastNo@1005 : Integer;
      Txt01@1007 : TextConst 'ENU=Copying Bank Ledger Entries to Gen. Journal Lines';
      Txt02@1010 : TextConst 'ENU=Please wait...';
    BEGIN
      LastNo := 0;
      GenJournalLine2.SETRANGE("Journal Batch Name", JournalBatchName);
      GenJournalLine2.SETRANGE("Journal Template Name", JournalTemplateName);
      IF GenJournalLine2.FINDLAST THEN
         LastNo := GenJournalLine2."Line No." + 10000;

      CurrPage.BankLedgerEntryListPart.PAGE.GetCurrRec(BankAccountLedgerEntries);
      TotalBankAccountEntriesToReclass := BankAccountLedgerEntries.COUNT;
      IF BankAccountLedgerEntries.FINDSET THEN BEGIN
        ConfigProgressBar.Init(TotalBankAccountEntriesToReclass,1,Txt01);
        REPEAT
          GenJournalLine3.SETRANGE("Reclass by BA Led. Etry. No.",BankAccountLedgerEntries."Entry No.");
          IF NOT GenJournalLine3.FINDFIRST THEN BEGIN
            LastNo += 10000;
            GenJournalLine.INIT;
            GenJournalLine."Journal Batch Name" := JournalBatchName;
            GenJournalLine."Journal Template Name" := JournalTemplateName;
            GenJournalLine."Line No." := LastNo;
            GenJournalLine.VALIDATE("Document Date",BankAccountLedgerEntries."Document Date");
            GenJournalLine.VALIDATE("Posting Date",BankAccountLedgerEntries."Posting Date");
            GenJournalLine.VALIDATE("Document Type",BankAccountLedgerEntries."Document Type");
            GenJournalLine.VALIDATE("Document No.",BankAccountLedgerEntries."Document No.");
            GenJournalLine.VALIDATE("External Document No.",BankAccountLedgerEntries."External Document No.");
            GenJournalLine.VALIDATE("Voucher No.",BankAccountLedgerEntries."Voucher No.");
            GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::"Bank Account");
            GenJournalLine.VALIDATE("Account No.",BankAccountLedgerEntries."Bank Account No.");
            GenJournalLine.Description := BankAccountLedgerEntries.Description;
            IF BankAccountLedgerEntries.Amount < 0 THEN
              GenJournalLine.VALIDATE(Amount,(BankAccountLedgerEntries.Amount * -1))
            ELSE
              GenJournalLine.VALIDATE(Amount,-BankAccountLedgerEntries.Amount);
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Account Type"::"Bank Account");
            GenJournalLine.VALIDATE("Bal. Account No.",ReclassToAccountNo);
            GenJournalLine."Reclass by BA Led. Etry. No." := BankAccountLedgerEntries."Entry No.";
            GenJournalLine."Shortcut Dimension 1 Code" := BankAccountLedgerEntries."Global Dimension 1 Code";
            GenJournalLine."Shortcut Dimension 2 Code" := BankAccountLedgerEntries."Global Dimension 2 Code";
            GenJournalLine."Dimension Set ID" := BankAccountLedgerEntries."Dimension Set ID";
            GenJournalLine.INSERT(TRUE);
          END;
          TotalReclassedBankAccountEntries += 1;
          ConfigProgressBar.Update(Txt02);
        UNTIL BankAccountLedgerEntries.NEXT = 0;
        ConfigProgressBar.Close;
      END;
    END;

    LOCAL PROCEDURE SetBankAccountDescription@5();
    BEGIN
      IF BankAccount.GET(FromAccountNo) THEN
        FromAccountNoDescription := BankAccount.Name
      ELSE
        CLEAR(FromAccountNoDescription);
      IF BankAccount.GET(ReclassToAccountNo) THEN
        ReclassToAccountNoDescription := BankAccount.Name
      ELSE
        CLEAR(ReclassToAccountNoDescription);
    END;

    BEGIN
    END.
  }
}

