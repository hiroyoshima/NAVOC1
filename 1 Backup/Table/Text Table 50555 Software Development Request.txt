OBJECT Table 50555 Software Development Request
{
  OBJECT-PROPERTIES
  {
    Date=08/16/18;
    Time=11:31:21 AM;
    Modified=Yes;
    Version List=NAVOC1.00.02.40;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Service Request,Application Name;
    OnInsert=BEGIN
               InitInsert;
             END;

    OnModify=BEGIN
               IF (CustomApprovalManagement.IsSDRFieldChangeWorkflowEnabled(Rec)) AND (Status = Status::"In-Progress") THEN
                 OnSDRFieldChange(Rec,xRec);

               "Modified At" := CURRENTDATETIME;
               CheckIfWithSDRTaskLine;
             END;

    OnDelete=VAR
               ConcernedGroupIndividual@1000 : Record 50600;
             BEGIN
               ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
               DeleteIncomingDocument;
               DeleteSDRTaskLine;

               ConcernedGroupIndividual.DeleteRelatedRecord(DATABASE::"Software Development Request","No.");
             END;

    LookupPageID=Page50657;
    DrillDownPageID=Page50657;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20         }
    { 2   ;   ;Service Request     ;Option        ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                IF "Service Request" IN ["Service Request"::"New Application", "Service Request"::"Automate a current manual process", "Service Request"::"New database for tracking specific information"] THEN
                                                                  "Application Name" := "Application Name"::Other;
                                                              END;

                                                   OptionCaptionML=ENU=,New Application,Enhancement(s) to existing application,New database for tracking specific information,Automate a current manual process,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Other;
                                                   OptionString=,New Application,Enhancement(s) to existing application,New database for tracking specific information,Automate a current manual process,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Other;
                                                   BlankNumbers=BlankZero;
                                                   BlankZero=Yes }
    { 3   ;   ;Application Name    ;Option        ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                IF "Service Request" IN ["Service Request"::"New Application", "Service Request"::"Automate a current manual process", "Service Request"::"New database for tracking specific information"] THEN
                                                                  TESTFIELD("Application Name", "Application Name"::Other);
                                                              END;

                                                   OptionCaptionML=ENU=,Microsoft Dynamics NAV,Task Monitoring System,Recruitment System,Records Management System,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Other;
                                                   OptionString=,Microsoft Dynamics NAV,Task Monitoring System,Recruitment System,Records Management System,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Other;
                                                   BlankNumbers=BlankZero;
                                                   BlankZero=Yes }
    { 4   ;   ;Description         ;Text250       ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                              END;
                                                               }
    { 5   ;   ;Date Created        ;Date          ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                TESTFIELD("Date Created");
                                                                TestDateTimeCreated;
                                                              END;
                                                               }
    { 6   ;   ;Time Created        ;Time          ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                TESTFIELD("Time Created");
                                                                TestDateTimeCreated;
                                                              END;
                                                               }
    { 7   ;   ;Created By User ID  ;Code50        ;Editable=No }
    { 8   ;   ;Size of Requirement ;Option        ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                IF ("Size of Requirement" <> 0) AND ("Size of Requirement" <> xRec."Size of Requirement") AND (Status = Status::"In-Progress") THEN BEGIN
                                                                  IF NOT CONFIRM(ConfirmTxt01, FALSE) THEN
                                                                    EXIT;
                                                                  CLEAR("Finishing Date");
                                                                  CLEAR("Finishing Time");
                                                                  CLEAR(Duration);
                                                                  SetCommitmentDates(0);
                                                                END;
                                                              END;

                                                   OptionCaptionML=ENU=,Small,Medium,Large;
                                                   OptionString=[ ,Small,Medium,Large];
                                                   BlankZero=Yes }
    { 9   ;   ;Requestor User ID   ;Code50        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                GetRequestorDetails;
                                                              END;
                                                               }
    { 10  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                TESTFIELD("Size of Requirement");
                                                                TESTFIELD("Handler User ID");
                                                                TESTFIELD("Starting Date");

                                                                IF "Starting Date" <> xRec."Starting Date" THEN BEGIN
                                                                  SetCommitmentDates(CurrFieldNo);
                                                                  AdjustPredecessorCommitmentDate(Rec);
                                                                END;
                                                              END;
                                                               }
    { 11  ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                TESTFIELD("Size of Requirement");
                                                                TESTFIELD("Handler User ID");
                                                                TESTFIELD("Starting Time");

                                                                IF "Starting Time" <> xRec."Starting Time" THEN BEGIN
                                                                  SetCommitmentDates(CurrFieldNo);
                                                                  AdjustPredecessorCommitmentDate(Rec);
                                                                END;
                                                              END;
                                                               }
    { 12  ;   ;Finishing Date      ;Date          ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                TESTFIELD("Size of Requirement");
                                                                TESTFIELD("Handler User ID");
                                                                TESTFIELD("Finishing Date");

                                                                IF "Finishing Date" <> xRec."Finishing Date" THEN BEGIN
                                                                  SetCommitmentDates(CurrFieldNo);
                                                                  AdjustPredecessorCommitmentDate(Rec);
                                                                END;
                                                              END;
                                                               }
    { 13  ;   ;Finishing Time      ;Time          ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                TESTFIELD("Size of Requirement");
                                                                TESTFIELD("Handler User ID");
                                                                TESTFIELD("Finishing Time");

                                                                IF "Finishing Time" <> xRec."Finishing Time" THEN BEGIN
                                                                  SetCommitmentDates(CurrFieldNo);
                                                                  AdjustPredecessorCommitmentDate(Rec);
                                                                END;
                                                              END;
                                                               }
    { 14  ;   ;No. Series          ;Code20         }
    { 15  ;   ;Additional Info     ;BLOB          ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                              END;
                                                               }
    { 16  ;   ;Ticket No.          ;Code20        ;TableRelation=Ticket.Status WHERE (Status=CONST(Closed));
                                                   Editable=No }
    { 17  ;   ;Status              ;Option        ;OptionCaptionML=ENU=Open,Pending Approval,Released,In-Progress,Closed,Resolved;
                                                   OptionString=Open,Pending Approval,Released,In-Progress,Closed,Resolved;
                                                   Editable=No }
    { 19  ;   ;Duration            ;Duration      ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                TESTFIELD("Size of Requirement");
                                                                TESTFIELD("Handler User ID");
                                                                TESTFIELD("Starting Date");

                                                                IF Duration < 0 THEN
                                                                  ERROR(ErrorText005);

                                                                IF Duration < (60 * 1000) THEN
                                                                  ERROR(ErrorText007);

                                                                IF Duration > (CREATEDATETIME(TODAY + 3650,0T) - CREATEDATETIME(TODAY,0T)) THEN
                                                                  ERROR(ErrorText008);

                                                                IF Duration <> xRec.Duration THEN BEGIN
                                                                  SetCommitmentDates(CurrFieldNo);
                                                                  AdjustPredecessorCommitmentDate(Rec);
                                                                END;
                                                              END;
                                                               }
    { 20  ;   ;Date Resolved       ;Date          ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                TestSDRDetails;
                                                                TestCommitmentDates;
                                                                TESTFIELD(Status, Status::"In-Progress");

                                                                IF "Date Resolved" <> xRec."Date Resolved" THEN
                                                                  SetResolveDateTime(CurrFieldNo);
                                                              END;
                                                               }
    { 30  ;   ;Time Resolved       ;Time          ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                TestSDRDetails;
                                                                TestCommitmentDates;
                                                                TESTFIELD(Status, Status::"In-Progress");

                                                                IF "Time Resolved" <> xRec."Time Resolved" THEN
                                                                  SetResolveDateTime(CurrFieldNo);
                                                              END;
                                                               }
    { 31  ;   ;Resolved Duration   ;Duration       }
    { 40  ;   ;Response Date       ;Date          ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                TestSDRDetails;
                                                                TestCommitmentDates;
                                                                TESTFIELD(Status, Status::Released);
                                                              END;
                                                               }
    { 50  ;   ;Response Time       ;Time          ;OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                TestSDRDetails;
                                                                TestCommitmentDates;
                                                                TESTFIELD(Status, Status::Released);
                                                              END;
                                                               }
    { 51  ;   ;Date Released       ;Date          ;Editable=No }
    { 52  ;   ;Time Released       ;Time          ;Editable=No }
    { 60  ;   ;User Group Code     ;Code20        ;TableRelation="User Group";
                                                   OnValidate=VAR
                                                                UserGroup@1000 : Record 9000;
                                                              BEGIN
                                                                IF UserGroup.GET("User Group Code") THEN
                                                                  "User Group" := UserGroup.Name
                                                                ELSE
                                                                  CLEAR("User Group");
                                                              END;
                                                               }
    { 70  ;   ;User Group          ;Text50        ;Editable=No }
    { 80  ;   ;Title/Position      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("User Setup".Title/Position WHERE (User ID=FIELD(Requestor User ID)));
                                                   Editable=No }
    { 90  ;   ;Incoming Document Entry No.;Integer }
    { 100 ;   ;Handler User ID     ;Code50        ;TableRelation="User Setup" WHERE (SDR Admin=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                OnCheckSDRReleaseRestriction;
                                                                TESTFIELD("Size of Requirement");
                                                                TESTFIELD("Handler User ID");
                                                                CALCFIELDS("Handler Title/Position");
                                                                IF Status = Status::Open THEN
                                                                  TESTFIELD(Status,Status::Released);

                                                                IF OverrideSetCommitmentDate THEN BEGIN
                                                                  SetCommitmentDatesBasedFromTaskLine;
                                                                  EXIT;
                                                                END;
                                                                IF "Starting Date" = 0D THEN
                                                                  SetCommitmentDates(0);
                                                              END;
                                                               }
    { 101 ;   ;Handler Title/Position;Text50      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("User Setup".Title/Position WHERE (User ID=FIELD(Handler User ID)));
                                                   Editable=No }
    { 110 ;   ;Priority Level      ;Option        ;InitValue=Normal;
                                                   OnValidate=BEGIN
                                                                TestSDRStatus;
                                                              END;

                                                   OptionCaptionML=ENU=Low,Normal,High;
                                                   OptionString=Low,Normal,High }
    { 120 ;   ;Handler Remarks     ;Text250        }
    { 130 ;   ;Predecessor         ;Code20        ;TableRelation="Software Development Request" WHERE (Status=FILTER(<>Resolved&<>Closed),
                                                                                                       Finishing Date=FILTER(<>''),
                                                                                                       Starting Date=FILTER(<>''));
                                                   OnValidate=BEGIN
                                                                TestSDRStatus;
                                                                TestSDRDetails;
                                                                OnCheckSDRReleaseRestriction;

                                                                SDRTaskLine.SETRANGE("SDR No.","No.");
                                                                IF SDRTaskLine.FINDFIRST THEN
                                                                  TESTFIELD(Predecessor, '');

                                                                IF Status = Status::Open THEN
                                                                  TESTFIELD(Status, Status::Released);

                                                                IF Predecessor = '' THEN
                                                                  EXIT;

                                                                IF Predecessor = "No." THEN
                                                                  FIELDERROR(Predecessor);

                                                                TESTFIELD("Size of Requirement");
                                                                IF "Handler User ID" = '' THEN BEGIN
                                                                  "Handler User ID" := UserSetupMgt.GetUserSetupIDWithTestfield;
                                                                  CALCFIELDS("Title/Position");
                                                                  SDRPredecessor.GET(Predecessor);
                                                                  "Starting Date" := SDRPredecessor."Finishing Date" + 1;
                                                                  "Starting Time" := 090000T;
                                                                  SetCommitmentDates(FIELDNO("Starting Date"));
                                                                END ELSE BEGIN
                                                                  SDRPredecessor.GET(Predecessor);
                                                                  IF NOT CONFIRM(ConfirmTxt02, FALSE, LOWERCASE(FIELDCAPTION("Starting Date")), "Starting Date", (SDRPredecessor."Finishing Date" + 1)) THEN
                                                                    EXIT;
                                                                  "Starting Date" := SDRPredecessor."Finishing Date" + 1;
                                                                  "Starting Time" := 090000T;
                                                                  SetCommitmentDates(FIELDNO("Starting Date"));
                                                                END;
                                                              END;
                                                               }
    { 140 ;   ;Group               ;Code10        ;TableRelation="SDR Group" }
    { 150 ;   ;Successor           ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Software Development Request" WHERE (No.=FIELD(Predecessor)));
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 50500;  ;Modified At         ;DateTime      ;Editable=No }
    { 50510;  ;With SubTask        ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("SDR Task Line" WHERE (SDR No.=FIELD(No.)));
                                                   Editable=No }
    { 50511;  ;Percent Complete    ;Decimal       ;InitValue=0;
                                                   OnValidate=BEGIN
                                                                TestSDRStatus;

                                                                IF (Status = Status::"In-Progress") AND ("Percent Complete" = 100) THEN BEGIN
                                                                 SetSDRStatus(Status::Resolved);
                                                                 EXIT;
                                                                END;

                                                                SetSDRStatus(Status::"In-Progress");
                                                              END;

                                                   DecimalPlaces=0:0;
                                                   MaxValue=100;
                                                   AutoFormatType=10;
                                                   AutoFormatExpr='<precision, 1:0><standard format, 0>''%' }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Starting Date                            }
    {    ;Starting Time                            }
    {    ;Finishing Date                           }
    {    ;Finishing Time                           }
    {    ;Status                                   }
    {    ;Description                              }
    {    ;Handler User ID                          }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Description,Handler User ID,Starting Date,Starting Time,Finishing Date,Finishing Time,Status }
  }
  CODE
  {
    VAR
      CustomSetup@1001 : Record 50001;
      SDRPredecessor@1021 : Record 50555;
      SDRTaskLine@1027 : Record 50596;
      NoSeriesMgt@1000 : Codeunit 396;
      StrMenuTxt001@1012 : TextConst 'ENU=Resolve SDR No. %1,Resolve and change the handler from %2 to %3';
      StrMenuTxt002@1014 : TextConst 'ENU=Resolve SDR %1 %2';
      StrMenuTxt003@1016 : TextConst 'ENU=Close SDR No. %1,Close and change the handler from %2 to %3';
      StrMenuTxt004@1015 : TextConst 'ENU=Close SDR %1 %2';
      InstructionTxt01@1017 : TextConst 'ENU=Do you want to resolve Software Development Request?';
      InstructionTxt02@1018 : TextConst 'ENU=Do you want to close the Software Development Request?';
      ConfirmTxt01@1019 : TextConst 'ENU=Do you want to update the commitment dates?';
      ConfirmTxt02@1026 : TextConst 'ENU=Do you want to update the %1 from %2 to %3?';
      ErrorText001@1002 : TextConst 'ENU=You''re not alowed to modify the %1 when the status is already %2 or %3.';
      UserSetupMgt@1007 : Codeunit 5700;
      ApprovalsMgmt@1009 : Codeunit 1535;
      CustomApprovalManagement@1020 : Codeunit 50582;
      StartingDateTime@1003 : DateTime;
      FinishingDateTime@1004 : DateTime;
      ErrorText002@1008 : TextConst 'ENU=%1 cannot be before the %2.';
      ErrorText003@1010 : TextConst 'ENU=You''re not allowed to reopen the %1 %2. This is currently being handled by %3, please contact your handler or administrator.';
      ErrorText004@1013 : TextConst 'ENU=%1 and %2 must be later than %3 and %4.';
      ErrorText005@1025 : TextConst 'ENU=Information that you have entered in this field will cause the duration to be negative which is not allowed. Please modify the finishing date/time value.';
      ErrorText007@1023 : TextConst 'ENU=Information that you have entered in this field will cause the duration to be less than 1 minute, which is not allowed. Please modify the finishing date/time value.';
      ErrorText008@1022 : TextConst 'ENU=Information that you have entered in this field will cause the duration to be more than 10 years, which is not allowed. Please modify the finishing date/time value.';
      ErrorText009@1024 : TextConst 'ENU=You''re not allowed to modify the commitment date when you have a task line.';
      ApprovalReopenErr@1006 : TextConst 'ENU=The approval process must be cancelled or completed to reopen this document.';
      ApprovalReleaseErr@1005 : TextConst 'ENU=The approval process must be completed to release this document.';
      ResolveDateTime@1011 : DateTime;

    PROCEDURE InitInsert@61();
    BEGIN
      IF "No." = '' THEN BEGIN
        NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series",TODAY,"No.","No. Series");
      END;

      InitRecord;
    END;

    LOCAL PROCEDURE InitRecord@10();
    BEGIN
      TestDefaultNoSeries;

      IF "Date Created" = 0D THEN
        "Date Created" := TODAY;
      IF "Time Created" = 0T THEN
        "Time Created" := TIME;

      "Created By User ID" := USERID;

      TestSDRDetails;
    END;

    PROCEDURE InitValue@11();
    BEGIN
      IF "No." = '' THEN BEGIN
        "Requestor User ID" := UserSetupMgt.GetUserSetupID;
        GetRequestorDetails;
      END;
    END;

    LOCAL PROCEDURE TestDefaultNoSeries@7();
    BEGIN
      CustomSetup.GET;
      CustomSetup.TESTFIELD("SDR Nos.");
    END;

    PROCEDURE TestSDRStatus@19();
    BEGIN
      IF Status IN [Status::Resolved, Status::Closed] THEN
        ERROR(ErrorText001, Rec.TABLECAPTION, Status::Resolved, Status::Closed);
    END;

    LOCAL PROCEDURE TestSDRDetails@5();
    BEGIN
      TESTFIELD("Service Request");
      TESTFIELD("Application Name");
      TESTFIELD(Description);
      TESTFIELD("User Group Code");
    END;

    LOCAL PROCEDURE TestCommitmentDates@41();
    BEGIN
      TESTFIELD("Handler User ID");
      TESTFIELD("Starting Date");
      TESTFIELD("Starting Time");
      TESTFIELD("Finishing Date");
      TESTFIELD("Finishing Time");
    END;

    LOCAL PROCEDURE TestDateTimeCreated@28();
    VAR
      TempDateTimeCreated@1000 : DateTime;
    BEGIN
      IF ("Starting Date" = 0D) AND ("Starting Time" = 0T) THEN
        EXIT;

      IF "Date Created" = 0D THEN
        "Date Created" := TODAY;
      IF "Time Created" = 0T THEN
        "Time Created" := TIME;

      TempDateTimeCreated := CREATEDATETIME("Date Created", "Time Created");
      SetTempStartingFinishingDateTime;

      IF TempDateTimeCreated > StartingDateTime THEN
        ERROR(ErrorText004, FIELDCAPTION("Starting Date"), FIELDCAPTION("Starting Time"), FIELDCAPTION("Date Created"), FIELDCAPTION("Time Created"));
    END;

    LOCAL PROCEDURE GetNoSeriesCode@2() : Code[20];
    BEGIN
      CustomSetup.GET;
      CustomSetup.TESTFIELD("SDR Nos.");
      EXIT(CustomSetup."SDR Nos.");
    END;

    LOCAL PROCEDURE GetRequestorDetails@13();
    VAR
      UserGroup@1000 : Record 9000;
    BEGIN
      "User Group Code" := UserSetupMgt.GetUserGroupCode("Requestor User ID");
      IF UserGroup.GET("User Group Code") THEN
        "User Group" := UserGroup.Name;
      CALCFIELDS("Title/Position");
    END;

    PROCEDURE GetNoOfDaysLeft@1() : Integer;
    VAR
      NoOfDaysLeft@1000 : Integer;
    BEGIN
      NoOfDaysLeft := "Finishing Date" - TODAY;
      IF NoOfDaysLeft <= 0 THEN
        NoOfDaysLeft *= -1;

      EXIT(NoOfDaysLeft);
    END;

    PROCEDURE SetSDRStatus@3(SDRStatus@1000 : Option);
    VAR
      ConfirmText001@1001 : TextConst 'ENU=%1 request %2?';
      Decision@1004 : Integer;
      OldHandler@1003 : Code[50];
      NewHandler@1002 : Code[50];
    BEGIN
      CASE SDRStatus OF
        Status::Open:
          BEGIN
            IF Status = Status::Open THEN
              EXIT;
            CheckSDRReopenRestriction;
            SetOpenStatusSDRDetails;
            VALIDATE(Status, Status::Open);
            MODIFY(TRUE);
          END;
        Status::"Pending Approval":
          BEGIN
            IF Status = Status::"Pending Approval" THEN
              EXIT;
            TestSDRDetails;
            VALIDATE(Status, Status::"Pending Approval");
            MODIFY(TRUE);
          END;
        Status::Released:
          BEGIN
            IF Status = Status::Released THEN
              EXIT;
            OnCheckSDRReleaseRestriction;
            CheckSDRReleaseRestriction;
            IF Status = Status::"In-Progress" THEN BEGIN
              Reopen(Rec);
              Release(Rec);
              EXIT;
            END;
            SetReleaseStatusSDRDetails;
            VALIDATE(Status, Status::Released);
            IF MODIFY(TRUE) AND CustomApprovalManagement.IsSDRFieldChangeWorkflowEnabled(Rec) THEN
              OnSDRFieldChange(Rec, xRec);
          END;
        Status::"In-Progress":
          BEGIN
            IF Status = Status::"In-Progress" THEN
              EXIT;

            CheckIfUserSDRAdmin;
            OnCheckSDRReleaseRestriction;
            CheckSDRReleaseRestriction;
            TESTFIELD("Size of Requirement");
            IF NOT CONFIRM(ConfirmText001, FALSE, 'Start', "No.") THEN
              EXIT;

            SetInProgressStatusSDRDetails;
            VALIDATE(Status, Status::"In-Progress");
            IF MODIFY AND CustomApprovalManagement.IsSDRFieldChangeWorkflowEnabled(Rec) THEN
              OnSDRFieldChange(Rec, xRec);
          END;
        Status::Closed:
          BEGIN
            IF Status = Status::Closed THEN
              EXIT;
            CheckIfUserSDRAdmin;
            OnCheckSDRReleaseRestriction;
            CheckSDRReleaseRestriction;
            CheckSDRCloseRestriction;
            TESTFIELD("Size of Requirement");

            OldHandler := "Handler User ID";
            NewHandler := UserSetupMgt.GetUserSetupIDWithTestfield;
            IF (OldHandler <> '') AND (OldHandler <> NewHandler) THEN
              Decision := STRMENU(STRSUBSTNO(StrMenuTxt003, "No.", OldHandler, NewHandler), 1, InstructionTxt02)
            ELSE
              Decision := STRMENU(STRSUBSTNO(StrMenuTxt004, FIELDCAPTION("No."), "No."), 1, InstructionTxt02);

            CASE Decision OF
              1:;
              2:
                "Handler User ID" := NewHandler;
              ELSE
                EXIT;
            END;

            SetResolveCloseStatusSDRDetails;
            VALIDATE(Status, Status::Closed);
            IF MODIFY(TRUE) AND CustomApprovalManagement.IsSDRFieldChangeWorkflowEnabled(Rec) THEN
              OnSDRFieldChange(Rec, xRec);
          END;
        Status::Resolved:
          BEGIN
            IF Status = Status::Resolved THEN
              EXIT;
            CheckIfUserSDRAdmin;
            OnCheckSDRReleaseRestriction;
            CheckSDRReleaseRestriction;
            CheckSDRResolveRestriction;
            TESTFIELD("Size of Requirement");

            OldHandler := "Handler User ID";
            NewHandler := UserSetupMgt.GetUserSetupIDWithTestfield;
            IF (OldHandler <> '') AND (OldHandler <> NewHandler) THEN
              Decision := STRMENU(STRSUBSTNO(StrMenuTxt001, "No.", OldHandler, NewHandler), 1, InstructionTxt01)
            ELSE
              Decision := STRMENU(STRSUBSTNO(StrMenuTxt002, FIELDCAPTION("No."), "No."), 1, InstructionTxt01);

            CASE Decision OF
              1:;
              2:
                "Handler User ID" := NewHandler;
              ELSE
                EXIT;

            END;

            SetResolveCloseStatusSDRDetails;
            VALIDATE(Status, Status::Resolved);
            IF MODIFY(TRUE) AND CustomApprovalManagement.IsSDRFieldChangeWorkflowEnabled(Rec) THEN
              OnSDRFieldChange(Rec, xRec);
          END;
      END;
    END;

    LOCAL PROCEDURE SetReleaseStatusSDRDetails@17();
    BEGIN
      SetOpenStatusSDRDetails;
      VALIDATE("Date Released", TODAY);
      VALIDATE("Time Released", TIME);
    END;

    LOCAL PROCEDURE SetOpenStatusSDRDetails@23();
    BEGIN
      CLEAR("Date Released");
      CLEAR("Time Released");
      CLEAR("Handler User ID");
      CLEAR("Starting Date");
      CLEAR("Starting Time");
      CLEAR("Finishing Date");
      CLEAR("Finishing Time");
      CLEAR(Duration);
      CALCFIELDS("Handler Title/Position");
      CLEAR("Response Date");
      CLEAR("Response Time");
      CLEAR("Percent Complete");
    END;

    LOCAL PROCEDURE SetInProgressStatusSDRDetails@16();
    BEGIN
      IF "Handler User ID" = '' THEN
        "Handler User ID" := UserSetupMgt.GetUserSetupIDWithTestfield;

      SetCommitmentDates(0);

      IF "Response Date" = 0D THEN
        "Response Date" := TODAY;
      IF "Response Time" = 0T THEN
        "Response Time" := TIME;
    END;

    LOCAL PROCEDURE SetResolveCloseStatusSDRDetails@38();
    VAR
      Decision@1000 : Boolean;
    BEGIN
      IF "Handler User ID" = '' THEN
        "Handler User ID" := UserSetupMgt.GetUserSetupIDWithTestfield;

      IF "Date Released" = 0D THEN
        "Date Released" := TODAY;
      IF "Time Released" = 0T THEN
        "Time Released" := TIME;
      IF "Response Date" = 0D THEN
        "Response Date" := TODAY;
      IF "Response Time" = 0T THEN
        "Response Time" := TIME;

      SetCommitmentDates(0);
      SetResolveDateTime(FIELDNO("Date Resolved"));
      "Percent Complete" := 100;
    END;

    LOCAL PROCEDURE SetTempStartingFinishingDateTime@6();
    BEGIN
      StartingDateTime := CREATEDATETIME("Starting Date","Starting Time");
      FinishingDateTime := CREATEDATETIME("Finishing Date","Finishing Time");
    END;

    LOCAL PROCEDURE SetTempStartingResolveDateTime@39();
    BEGIN
      StartingDateTime := CREATEDATETIME("Starting Date","Starting Time");
      ResolveDateTime := CREATEDATETIME("Date Resolved","Time Resolved");
    END;

    PROCEDURE SetCommitmentDates@32(RecFieldNo@1000 : Integer);
    VAR
      CompanyInfo@1003 : Record 79;
      CalendarMgt@1002 : Codeunit 7600;
      DateDscr@1001 : Text;
    BEGIN
      IF "Starting Date" = 0D THEN
        "Starting Date" := TODAY;
      IF "Starting Time" = 0T THEN
        "Starting Time" := TIME;
      IF "Finishing Date" = 0D THEN
        SetFinishingDate("Starting Date");
      IF "Finishing Time" = 0T THEN
        "Finishing Time" := 180000T;

      CompanyInfo.GET;
      CompanyInfo.TESTFIELD("Base Calendar Code");
      CASE RecFieldNo OF
        FIELDNO("Starting Date"),FIELDNO("Starting Time"):
          BEGIN
            SetTempStartingFinishingDateTime;
            IF StartingDateTime >= FinishingDateTime THEN BEGIN
              "Starting Date" := DT2DATE(StartingDateTime);
              SetFinishingDate(DT2DATE(StartingDateTime));
              "Finishing Time" := DT2TIME(FinishingDateTime);
            END;
            SetCommitmentDates(FIELDNO(Duration));
          END;
        FIELDNO("Finishing Date"), FIELDNO("Finishing Time"):
          BEGIN
            SetTempStartingFinishingDateTime;
            IF StartingDateTime >= FinishingDateTime THEN BEGIN
              SetStartingDate(DT2DATE(FinishingDateTime));
              "Starting Time" := 090000T;
              "Finishing Time" := DT2TIME(FinishingDateTime);
            END;
          END;
        FIELDNO(Duration):
          BEGIN
            IF CalendarMgt.CheckDateStatus(CompanyInfo."Base Calendar Code","Starting Date",DateDscr) THEN
              REPEAT
                "Starting Date" += 1;
              UNTIL NOT CalendarMgt.CheckDateStatus(CompanyInfo."Base Calendar Code","Starting Date",DateDscr);

            SetTempStartingFinishingDateTime;

            FinishingDateTime := StartingDateTime + Duration;
            "Finishing Date" := DT2DATE(FinishingDateTime);
            "Finishing Time" := DT2TIME(FinishingDateTime);
            IF CalendarMgt.CheckDateStatus(CompanyInfo."Base Calendar Code","Finishing Date",DateDscr) THEN
              REPEAT
                "Finishing Date" += 1;
              UNTIL NOT CalendarMgt.CheckDateStatus(CompanyInfo."Base Calendar Code","Finishing Date",DateDscr);
          END;
      END;

      SetDuration("Finishing Date", "Finishing Time");
    END;

    PROCEDURE SetCommitmentDatesBasedFromTaskLine@44();
    VAR
      FirstSDRTaskLine@1000 : Record 50596;
      LastSDRTaskLine@1001 : Record 50596;
    BEGIN
      FirstSDRTaskLine.RESET;
      FirstSDRTaskLine.SETCURRENTKEY("Starting Date");
      FirstSDRTaskLine.SETASCENDING("Starting Date", TRUE);
      FirstSDRTaskLine.SETRANGE("SDR No.", "No.");
      FirstSDRTaskLine.FINDFIRST;

      "Starting Date" := FirstSDRTaskLine."Starting Date";
      "Starting Time" := FirstSDRTaskLine."Starting Time";

      LastSDRTaskLine.RESET;
      LastSDRTaskLine.SETCURRENTKEY("Finishing Date");
      LastSDRTaskLine.SETASCENDING("Finishing Date", TRUE);
      LastSDRTaskLine.FINDLAST;

      "Finishing Date" := LastSDRTaskLine."Finishing Date";
      "Finishing Time" := LastSDRTaskLine."Finishing Time";

      SetDuration("Finishing Date", "Finishing Time");
    END;

    LOCAL PROCEDURE SetStartingDate@18(FinishingDate@1000 : Date);
    VAR
      CompanyInfo@1002 : Record 79;
      CalendarMgt@1005 : Codeunit 7600;
      DateDscr@1004 : Text;
    BEGIN
      CompanyInfo.GET;
      CompanyInfo.TESTFIELD("Base Calendar Code");
      "Starting Date" := FinishingDate;
      CASE "Size of Requirement" OF
        "Size of Requirement"::Small:
          "Starting Date" := CALCDATE('-1W',"Starting Date");
        "Size of Requirement"::Medium:
          "Starting Date" := CALCDATE('-1M',"Starting Date");
        "Size of Requirement"::Large:
          "Starting Date" := CALCDATE('-3M',"Starting Date");
      END;
      IF CalendarMgt.CheckDateStatus(CompanyInfo."Base Calendar Code","Starting Date",DateDscr) THEN
        REPEAT
          "Starting Date" -= 1;
        UNTIL NOT CalendarMgt.CheckDateStatus(CompanyInfo."Base Calendar Code","Starting Date",DateDscr);
    END;

    LOCAL PROCEDURE SetFinishingDate@52(StartingDate@1000 : Date);
    VAR
      CompanyInfo@1002 : Record 79;
      CalendarMgt@1005 : Codeunit 7600;
      DateDscr@1004 : Text;
      FinishingDate@1001 : Date;
    BEGIN
      CompanyInfo.GET;
      CompanyInfo.TESTFIELD("Base Calendar Code");
      "Finishing Date" := StartingDate;
      CASE "Size of Requirement" OF
        "Size of Requirement"::Small:
          "Finishing Date" := CALCDATE('+1W',"Finishing Date");
        "Size of Requirement"::Medium:
          "Finishing Date" := CALCDATE('+1M',"Finishing Date");
        "Size of Requirement"::Large:
          "Finishing Date" := CALCDATE('+3M',"Finishing Date");
      END;

      IF CalendarMgt.CheckDateStatus(CompanyInfo."Base Calendar Code","Finishing Date",DateDscr) THEN
        REPEAT
          "Finishing Date" += 1;
        UNTIL NOT CalendarMgt.CheckDateStatus(CompanyInfo."Base Calendar Code","Finishing Date",DateDscr);
    END;

    LOCAL PROCEDURE SetResolveDateTime@84(RecFieldNo@1000 : Integer);
    BEGIN
      CASE RecFieldNo OF
        FIELDNO("Date Resolved"), FIELDNO("Time Resolved"):
          BEGIN
            IF "Date Resolved" = 0D THEN
              "Date Resolved" := TODAY;
            IF "Time Resolved" = 0T THEN
              "Time Resolved" := TIME;

            SetResolvedDuration("Date Resolved", "Time Resolved");
            SetTempStartingResolveDateTime;
            IF StartingDateTime > ResolveDateTime THEN
              ERROR(ErrorText004,FIELDCAPTION("Date Resolved"),FIELDCAPTION("Time Resolved"),FIELDCAPTION("Starting Date"),FIELDCAPTION("Starting Time"));
          END;
      END;
    END;

    PROCEDURE SetDuration@4(EndingDate@1000 : Date;EndingTime@1001 : Time);
    BEGIN
      Duration := ROUND(CREATEDATETIME(EndingDate,EndingTime) - CREATEDATETIME("Starting Date","Starting Time"), 1000 * 60);
      // VALIDATE(Duration);
    END;

    PROCEDURE SetResolvedDuration@8(ResolveDate@1000 : Date;ResolveTime@1001 : Time);
    BEGIN
      "Resolved Duration":= ROUND(CREATEDATETIME(ResolveDate,ResolveTime) - CREATEDATETIME("Starting Date","Starting Time"), 1000 * 60);
      // VALIDATE(Duration);
    END;

    PROCEDURE SetPercentageComplete@27(VAR SDR@1001 : Record 50555;NewPercentage@1000 : Decimal);
    BEGIN
      IF NewPercentage = SDR."Percent Complete" THEN
        EXIT;

      SDR.VALIDATE("Percent Complete", NewPercentage);
      SDR.MODIFY(TRUE);
    END;

    [Integration]
    PROCEDURE OnSDRFieldChange@22(VAR SDR@1000 : Record 50555;VAR xRecSDR@1001 : Record 50555);
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckSDRReleaseRestriction@15();
    BEGIN
    END;

    [Integration]
    PROCEDURE OnAfterReleaseSDR@156(VAR SDR@1000 : Record 50555);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnAfterReOpenSDR@148(VAR SDR@1000 : Record 50555);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnBeforeReleaseSDR@157(VAR SDR@1000 : Record 50555);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnBeforeReOpenSDR@149(VAR SDR@1000 : Record 50555);
    BEGIN
    END;

    PROCEDURE CheckSDRReopenRestriction@14();
    BEGIN
      TestSDRStatus;

      IF NOT UserSetupMgt.CheckIfApprovalAdministrator THEN BEGIN // Check if the user is not administrator only the administrator can open the request
        IF "Handler User ID" <> '' THEN
          ERROR(ErrorText003, LOWERCASE(Rec.TABLECAPTION), "No.", "Handler User ID");
      END;
    END;

    PROCEDURE CheckSDRReleaseRestriction@29();
    BEGIN
      TestSDRStatus;
    END;

    PROCEDURE CheckSDRCloseRestriction@33();
    BEGIN
      TestSDRDetails;
    END;

    PROCEDURE CheckSDRResolveRestriction@9();
    BEGIN
      TestSDRDetails;
    END;

    LOCAL PROCEDURE CheckStartingFinishingDates@12();
    BEGIN
      StartingDateTime := CREATEDATETIME("Starting Date","Starting Time");
      FinishingDateTime := CREATEDATETIME("Finishing Date","Finishing Time");
      IF "Starting Date" > "Finishing Date" THEN
        ERROR(ErrorText002,FIELDCAPTION("Finishing Date"),FIELDCAPTION("Starting Date"));
    END;

    LOCAL PROCEDURE CheckIfUserSDRAdmin@26();
    VAR
      UserSetup@1000 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN BEGIN
        UserSetup.TESTFIELD("User ID",USERID);
        UserSetup.TESTFIELD("SDR Admin",TRUE);
      END;
    END;

    LOCAL PROCEDURE CheckIfWithSDRTaskLine@21();
    VAR
      SDRTaskLine@1000 : Record 50596;
    BEGIN
      SDRTaskLine.SETRANGE("SDR No.", "No.");
      IF SDRTaskLine.FINDFIRST THEN
    END;

    LOCAL PROCEDURE DeleteIncomingDocument@69();
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      IF IncomingDocument.GET("Incoming Document Entry No.") THEN
        IncomingDocument.DELETE(TRUE);
    END;

    LOCAL PROCEDURE DeleteSDRTaskLine@34();
    VAR
      SDRTaskLine@1000 : Record 50596;
    BEGIN
      SDRTaskLine.SETRANGE("SDR No.", "No.");
      SDRTaskLine.DELETEALL(TRUE);
    END;

    PROCEDURE PerformManualRelease@139(VAR SDR@1001 : Record 50555);
    VAR
      CustomApprovalManagement@1000 : Codeunit 50582;
    BEGIN
       IF CustomApprovalManagement.IsSDRApprovalsWorkflowEnabled(SDR) AND (SDR.Status = SDR.Status::Open) THEN
       ERROR(ApprovalReleaseErr);

      Release(SDR);
    END;

    PROCEDURE PerformManualReOpen@150(VAR SDR@1000 : Record 50555);
    BEGIN
      IF SDR.Status = SDR.Status::"Pending Approval" THEN
        ERROR(ApprovalReopenErr);

      Reopen(SDR);
    END;

    PROCEDURE Release@131(VAR SDR@1000 : Record 50555);
    BEGIN
      IF SDR.Status = SDR.Status::Released THEN
        EXIT;

      OnBeforeReleaseSDR(SDR);
      SDR.SetSDRStatus(SDR.Status::Released);
      OnAfterReleaseSDR(SDR);
    END;

    PROCEDURE Reopen@151(VAR SDR@1000 : Record 50555);
    BEGIN
      IF SDR.Status = SDR.Status::Open THEN
         EXIT;

      OnBeforeReOpenSDR(SDR);
      SDR.SetSDRStatus(SDR.Status::Open);
      OnAfterReOpenSDR(SDR);
    END;

    LOCAL PROCEDURE AdjustPredecessorCommitmentDate@60(SDR@1000 : Record 50555);
    VAR
      SDRPredecessor@1001 : Record 50555;
      i@1002 : Integer;
    BEGIN
      SDRPredecessor.SETRANGE(Status,SDRPredecessor.Status::Released);
      SDRPredecessor.SETFILTER("Starting Date", '<>0D');
      SDRPredecessor.SETRANGE(Predecessor, SDR."No.");
      IF SDRPredecessor.FINDSET THEN
        REPEAT
          SDRPredecessor."Starting Date" := SDR."Finishing Date" + 1;
          SDRPredecessor.SetCommitmentDates(FIELDNO(Duration));
          SDRPredecessor.MODIFY(TRUE);
          AdjustPredecessorCommitmentDate(SDRPredecessor);
        UNTIL SDRPredecessor.NEXT = 0;
    END;

    PROCEDURE CopyTicketToSDR@20(Ticket@1000 : Record 50562);
    BEGIN
      "Created By User ID" := Ticket."Created By User ID";
      "Requestor User ID" := Ticket."Created By User ID";
      VALIDATE("User Group Code", Ticket."User Group Code");
      VALIDATE("Service Request", "Service Request"::"Enhancement(s) to existing application");
      VALIDATE("Application Name", "Application Name"::"Microsoft Dynamics NAV");
      Description := Ticket.Description;
      Ticket.CALCFIELDS("Additional Information");
      "Additional Info" := Ticket."Additional Information";
      "Size of Requirement" := "Size of Requirement"::Small;
      "Ticket No." := Ticket."No.";
    END;

    LOCAL PROCEDURE OverrideSetCommitmentDate@24() : Boolean;
    BEGIN
      CALCFIELDS("With SubTask");
      EXIT("With SubTask");
    END;

    PROCEDURE LinkSDR@25(VAR SDR@1000 : Record 50555);
    VAR
      SDRPred@1001 : Code[20];
      Counter@1002 : Integer;
      SDRToUpdate@1003 : Record 50555;
    BEGIN
      Counter := 0;
      IF SDR.FINDSET THEN
        REPEAT
          Counter += 1;
          IF SDRPred <> '' THEN BEGIN
            CLEAR(SDRToUpdate);
            SDRToUpdate.GET(SDR."No.");
            SDRToUpdate.VALIDATE(Predecessor, SDRPred);
            SDRToUpdate.MODIFY(TRUE);
          END ELSE BEGIN
            SDR.VALIDATE(Predecessor, '');
            SDR.MODIFY(TRUE);
          END;
          SDRPred := SDR."No.";
        UNTIL SDR.NEXT = 0;
    END;

    PROCEDURE UnlinkSDR@66(VAR SDR@1000 : Record 50555);
    VAR
      SDRPred@1001 : Code[20];
    BEGIN
      IF SDR.FINDSET THEN
        REPEAT
          SDR.VALIDATE(Predecessor,'');
          SDR.MODIFY(TRUE)
        UNTIL SDR.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

