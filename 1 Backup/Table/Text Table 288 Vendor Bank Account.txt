OBJECT Table 288 Vendor Bank Account
{
  OBJECT-PROPERTIES
  {
    Date=10/06/18;
    Time=[ 6:31:22 PM];
    Modified=Yes;
    Version List=NAVW19.00.00.45480,OC.03.T27;
  }
  PROPERTIES
  {
    DataCaptionFields=Vendor No.,Code,Name;
    OnDelete=VAR
               VendorLedgerEntry@1000 : Record 25;
               Vendor@1001 : Record 23;
             BEGIN
               VendorLedgerEntry.SETRANGE("Vendor No.","Vendor No.");
               VendorLedgerEntry.SETRANGE("Recipient Bank Account",Code);
               VendorLedgerEntry.SETRANGE(Open,TRUE);
               IF NOT VendorLedgerEntry.ISEMPTY THEN
                 ERROR(BankAccDeleteErr);
               IF Vendor.GET("Vendor No.") AND (Vendor."Preferred Bank Account" = Code) THEN BEGIN
                 Vendor."Preferred Bank Account" := '';
                 Vendor.MODIFY;
               END;
             END;

    CaptionML=ENU=Vendor Bank Account;
    LookupPageID=Page426;
    DrillDownPageID=Page426;
  }
  FIELDS
  {
    { 1   ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor No.;
                                                   NotBlank=Yes }
    { 2   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=Yes }
    { 3   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 5   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 6   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 7   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 8   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 9   ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 10  ;   ;Contact             ;Text50        ;CaptionML=ENU=Contact }
    { 11  ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 12  ;   ;Telex No.           ;Text20        ;CaptionML=ENU=Telex No. }
    { 13  ;   ;Bank Branch No.     ;Text20        ;CaptionML=ENU=Bank Branch No. }
    { 14  ;   ;Bank Account No.    ;Text30        ;CaptionML=ENU=Bank Account No. }
    { 15  ;   ;Transit No.         ;Text20        ;CaptionML=ENU=Transit No. }
    { 16  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 17  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Country/Region Code }
    { 18  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 19  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 20  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 21  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 22  ;   ;E-Mail              ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail }
    { 23  ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 24  ;   ;IBAN                ;Code50        ;OnValidate=VAR
                                                                CompanyInfo@1000 : Record 79;
                                                              BEGIN
                                                                CompanyInfo.CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=ENU=IBAN }
    { 25  ;   ;SWIFT Code          ;Code20        ;CaptionML=ENU=SWIFT Code }
    { 1211;   ;Bank Clearing Code  ;Text50        ;CaptionML=ENU=Bank Clearing Code }
    { 1212;   ;Bank Clearing Standard;Text50      ;TableRelation="Bank Clearing Standard";
                                                   CaptionML=ENU=Bank Clearing Standard }
    { 50011;  ;Vendor Type         ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor."Vendor Type" WHERE (No.=FIELD(Vendor No.)));
                                                   OptionCaptionML=ENU=Local,Foreign,Employee;
                                                   OptionString=Local,Foreign,Employee }
  }
  KEYS
  {
    {    ;Vendor No.,Code                         ;Clustered=Yes }
    {    ;Name                                     }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;Code,Name,Phone No.,Contact              }
  }
  CODE
  {
    VAR
      PostCode@1000 : Record 225;
      BankAccIdentifierIsEmptyErr@1001 : TextConst 'ENU=You must specify either a Bank Account No. or an IBAN.';
      BankAccDeleteErr@1002 : TextConst 'ENU=You cannot delete this bank account because there are one or more open ledger entries associated with the bank account.';
      Vendor@1003 : Record 23;
      VendorBankAccounts@1004 : Record 288;

    PROCEDURE GetBankAccountNoWithCheck@14() AccountNo : Text;
    BEGIN
      AccountNo := GetBankAccountNo;
      IF AccountNo = '' THEN
        ERROR(BankAccIdentifierIsEmptyErr);
    END;

    PROCEDURE GetBankAccountNo@1() : Text;
    BEGIN
      IF IBAN <> '' THEN
        EXIT(DELCHR(IBAN,'=<>'));

      IF "Bank Account No." <> '' THEN
        EXIT("Bank Account No.");
    END;

    LOCAL PROCEDURE GetVendor@2();
    BEGIN
      Vendor.GET("Vendor No.");
    END;

    BEGIN
    END.
  }
}

